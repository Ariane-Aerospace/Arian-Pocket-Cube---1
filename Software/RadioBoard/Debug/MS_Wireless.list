
MS_Wireless.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054f0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080055a8  080055a8  000155a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005630  08005630  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005630  08005630  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005630  08005630  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005630  08005630  00015630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005634  08005634  00015634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  2000000c  08005644  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  08005644  000205a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001154d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024e4  00000000  00000000  00031581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00033a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  000347d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015783  00000000  00000000  00035470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011539  00000000  00000000  0004abf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008489e  00000000  00000000  0005c12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e09ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003040  00000000  00000000  000e0a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005590 	.word	0x08005590

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08005590 	.word	0x08005590

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <HAL_SYSTICK_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SYSTICK_Callback(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	TIM_GNSS_Send++;
 80003f0:	4b03      	ldr	r3, [pc, #12]	; (8000400 <HAL_SYSTICK_Callback+0x14>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	1c5a      	adds	r2, r3, #1
 80003f6:	4b02      	ldr	r3, [pc, #8]	; (8000400 <HAL_SYSTICK_Callback+0x14>)
 80003f8:	601a      	str	r2, [r3, #0]
}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000334 	.word	0x20000334

08000404 <XOR>:
uint8_t XOR(uint8_t* data, uint8_t lth)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	000a      	movs	r2, r1
 800040e:	1cfb      	adds	r3, r7, #3
 8000410:	701a      	strb	r2, [r3, #0]
	return 5;
 8000412:	2305      	movs	r3, #5
}
 8000414:	0018      	movs	r0, r3
 8000416:	46bd      	mov	sp, r7
 8000418:	b002      	add	sp, #8
 800041a:	bd80      	pop	{r7, pc}

0800041c <ProcessCMD>:
void ProcessCMD(CMD cmd)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b089      	sub	sp, #36	; 0x24
 8000420:	af00      	add	r7, sp, #0
 8000422:	003c      	movs	r4, r7
 8000424:	6020      	str	r0, [r4, #0]
 8000426:	6061      	str	r1, [r4, #4]
 8000428:	60a2      	str	r2, [r4, #8]
 800042a:	60e3      	str	r3, [r4, #12]
	if(cmd.type == SYNC)
 800042c:	003b      	movs	r3, r7
 800042e:	785b      	ldrb	r3, [r3, #1]
 8000430:	2b01      	cmp	r3, #1
 8000432:	d120      	bne.n	8000476 <ProcessCMD+0x5a>
	{
		uint8_t answer[7];
		answer[0] = 0x0D;
 8000434:	2418      	movs	r4, #24
 8000436:	193b      	adds	r3, r7, r4
 8000438:	220d      	movs	r2, #13
 800043a:	701a      	strb	r2, [r3, #0]
		answer[1] = 'C';
 800043c:	193b      	adds	r3, r7, r4
 800043e:	2243      	movs	r2, #67	; 0x43
 8000440:	705a      	strb	r2, [r3, #1]
		answer[2] = cmd.id;
 8000442:	003b      	movs	r3, r7
 8000444:	781a      	ldrb	r2, [r3, #0]
 8000446:	193b      	adds	r3, r7, r4
 8000448:	709a      	strb	r2, [r3, #2]
		answer[3] = cmd.type;
 800044a:	003b      	movs	r3, r7
 800044c:	785a      	ldrb	r2, [r3, #1]
 800044e:	193b      	adds	r3, r7, r4
 8000450:	70da      	strb	r2, [r3, #3]
		answer[4] = 0;		//Длина данных
 8000452:	193b      	adds	r3, r7, r4
 8000454:	2200      	movs	r2, #0
 8000456:	711a      	strb	r2, [r3, #4]
		answer[5] = XOR(answer, 5);
 8000458:	193b      	adds	r3, r7, r4
 800045a:	2105      	movs	r1, #5
 800045c:	0018      	movs	r0, r3
 800045e:	f7ff ffd1 	bl	8000404 <XOR>
 8000462:	0003      	movs	r3, r0
 8000464:	001a      	movs	r2, r3
 8000466:	193b      	adds	r3, r7, r4
 8000468:	715a      	strb	r2, [r3, #5]
		HAL_UART_Transmit_IT(&huart1, answer, 6);
 800046a:	1939      	adds	r1, r7, r4
 800046c:	4b4d      	ldr	r3, [pc, #308]	; (80005a4 <ProcessCMD+0x188>)
 800046e:	2206      	movs	r2, #6
 8000470:	0018      	movs	r0, r3
 8000472:	f003 fb63 	bl	8003b3c <HAL_UART_Transmit_IT>
	}
	if(cmd.type == OBC_CTRL)
 8000476:	003b      	movs	r3, r7
 8000478:	785b      	ldrb	r3, [r3, #1]
 800047a:	2b02      	cmp	r3, #2
 800047c:	d000      	beq.n	8000480 <ProcessCMD+0x64>
 800047e:	e08d      	b.n	800059c <ProcessCMD+0x180>
	{
		//ToProg(0), RST(1), RST_L(2), RST_H(3), BOOT_L(4), BOOT_H(5)
		if(cmd.params[0] == 0)//ToProg
 8000480:	003b      	movs	r3, r7
 8000482:	78db      	ldrb	r3, [r3, #3]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d11f      	bne.n	80004c8 <ProcessCMD+0xac>
		{
			HAL_GPIO_WritePin(PROG_BOOT_GPIO_Port, PROG_BOOT_Pin, SET);
 8000488:	23a0      	movs	r3, #160	; 0xa0
 800048a:	05db      	lsls	r3, r3, #23
 800048c:	2201      	movs	r2, #1
 800048e:	2101      	movs	r1, #1
 8000490:	0018      	movs	r0, r3
 8000492:	f001 fc1b 	bl	8001ccc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PROG_RST_GPIO_Port, PROG_RST_Pin, RESET);
 8000496:	23a0      	movs	r3, #160	; 0xa0
 8000498:	05db      	lsls	r3, r3, #23
 800049a:	2200      	movs	r2, #0
 800049c:	2102      	movs	r1, #2
 800049e:	0018      	movs	r0, r3
 80004a0:	f001 fc14 	bl	8001ccc <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80004a4:	2001      	movs	r0, #1
 80004a6:	f000 fe79 	bl	800119c <HAL_Delay>
			HAL_GPIO_WritePin(PROG_RST_GPIO_Port, PROG_RST_Pin, SET);
 80004aa:	23a0      	movs	r3, #160	; 0xa0
 80004ac:	05db      	lsls	r3, r3, #23
 80004ae:	2201      	movs	r2, #1
 80004b0:	2102      	movs	r1, #2
 80004b2:	0018      	movs	r0, r3
 80004b4:	f001 fc0a 	bl	8001ccc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PROG_BOOT_GPIO_Port, PROG_BOOT_Pin, RESET);
 80004b8:	23a0      	movs	r3, #160	; 0xa0
 80004ba:	05db      	lsls	r3, r3, #23
 80004bc:	2200      	movs	r2, #0
 80004be:	2101      	movs	r1, #1
 80004c0:	0018      	movs	r0, r3
 80004c2:	f001 fc03 	bl	8001ccc <HAL_GPIO_WritePin>
 80004c6:	e044      	b.n	8000552 <ProcessCMD+0x136>
		}
		else if(cmd.params[0] == 1)//RST
 80004c8:	003b      	movs	r3, r7
 80004ca:	78db      	ldrb	r3, [r3, #3]
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d111      	bne.n	80004f4 <ProcessCMD+0xd8>
		{
			HAL_GPIO_WritePin(PROG_RST_GPIO_Port, PROG_RST_Pin, RESET);
 80004d0:	23a0      	movs	r3, #160	; 0xa0
 80004d2:	05db      	lsls	r3, r3, #23
 80004d4:	2200      	movs	r2, #0
 80004d6:	2102      	movs	r1, #2
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 fbf7 	bl	8001ccc <HAL_GPIO_WritePin>
			HAL_Delay(1);
 80004de:	2001      	movs	r0, #1
 80004e0:	f000 fe5c 	bl	800119c <HAL_Delay>
			HAL_GPIO_WritePin(PROG_RST_GPIO_Port, PROG_RST_Pin, SET);
 80004e4:	23a0      	movs	r3, #160	; 0xa0
 80004e6:	05db      	lsls	r3, r3, #23
 80004e8:	2201      	movs	r2, #1
 80004ea:	2102      	movs	r1, #2
 80004ec:	0018      	movs	r0, r3
 80004ee:	f001 fbed 	bl	8001ccc <HAL_GPIO_WritePin>
 80004f2:	e02e      	b.n	8000552 <ProcessCMD+0x136>
		}
		else if(cmd.params[0] == 2)//RST_L
 80004f4:	003b      	movs	r3, r7
 80004f6:	78db      	ldrb	r3, [r3, #3]
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	d107      	bne.n	800050c <ProcessCMD+0xf0>
		{
			HAL_GPIO_WritePin(PROG_RST_GPIO_Port, PROG_RST_Pin, RESET);
 80004fc:	23a0      	movs	r3, #160	; 0xa0
 80004fe:	05db      	lsls	r3, r3, #23
 8000500:	2200      	movs	r2, #0
 8000502:	2102      	movs	r1, #2
 8000504:	0018      	movs	r0, r3
 8000506:	f001 fbe1 	bl	8001ccc <HAL_GPIO_WritePin>
 800050a:	e022      	b.n	8000552 <ProcessCMD+0x136>
		}
		else if(cmd.params[0] == 3)//RST_H
 800050c:	003b      	movs	r3, r7
 800050e:	78db      	ldrb	r3, [r3, #3]
 8000510:	2b03      	cmp	r3, #3
 8000512:	d107      	bne.n	8000524 <ProcessCMD+0x108>
		{
			HAL_GPIO_WritePin(PROG_RST_GPIO_Port, PROG_RST_Pin, SET);
 8000514:	23a0      	movs	r3, #160	; 0xa0
 8000516:	05db      	lsls	r3, r3, #23
 8000518:	2201      	movs	r2, #1
 800051a:	2102      	movs	r1, #2
 800051c:	0018      	movs	r0, r3
 800051e:	f001 fbd5 	bl	8001ccc <HAL_GPIO_WritePin>
 8000522:	e016      	b.n	8000552 <ProcessCMD+0x136>
		}
		else if(cmd.params[0] == 4)//BOOT_L
 8000524:	003b      	movs	r3, r7
 8000526:	78db      	ldrb	r3, [r3, #3]
 8000528:	2b04      	cmp	r3, #4
 800052a:	d107      	bne.n	800053c <ProcessCMD+0x120>
		{
			HAL_GPIO_WritePin(PROG_BOOT_GPIO_Port, PROG_BOOT_Pin, RESET);
 800052c:	23a0      	movs	r3, #160	; 0xa0
 800052e:	05db      	lsls	r3, r3, #23
 8000530:	2200      	movs	r2, #0
 8000532:	2101      	movs	r1, #1
 8000534:	0018      	movs	r0, r3
 8000536:	f001 fbc9 	bl	8001ccc <HAL_GPIO_WritePin>
 800053a:	e00a      	b.n	8000552 <ProcessCMD+0x136>
		}
		else if(cmd.params[0] == 5)//BOOT_H
 800053c:	003b      	movs	r3, r7
 800053e:	78db      	ldrb	r3, [r3, #3]
 8000540:	2b05      	cmp	r3, #5
 8000542:	d106      	bne.n	8000552 <ProcessCMD+0x136>
		{
			HAL_GPIO_WritePin(PROG_BOOT_GPIO_Port, PROG_BOOT_Pin, SET);
 8000544:	23a0      	movs	r3, #160	; 0xa0
 8000546:	05db      	lsls	r3, r3, #23
 8000548:	2201      	movs	r2, #1
 800054a:	2101      	movs	r1, #1
 800054c:	0018      	movs	r0, r3
 800054e:	f001 fbbd 	bl	8001ccc <HAL_GPIO_WritePin>
		}
		uint8_t answer[7];
		answer[0] = 0x0D;
 8000552:	2110      	movs	r1, #16
 8000554:	187b      	adds	r3, r7, r1
 8000556:	220d      	movs	r2, #13
 8000558:	701a      	strb	r2, [r3, #0]
		answer[1] = 'C';
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2243      	movs	r2, #67	; 0x43
 800055e:	705a      	strb	r2, [r3, #1]
		answer[2] = cmd.id;
 8000560:	003b      	movs	r3, r7
 8000562:	781a      	ldrb	r2, [r3, #0]
 8000564:	187b      	adds	r3, r7, r1
 8000566:	709a      	strb	r2, [r3, #2]
		answer[3] = cmd.type;
 8000568:	003b      	movs	r3, r7
 800056a:	785a      	ldrb	r2, [r3, #1]
 800056c:	000c      	movs	r4, r1
 800056e:	193b      	adds	r3, r7, r4
 8000570:	70da      	strb	r2, [r3, #3]
		answer[4] = 1;		//Длина данных
 8000572:	193b      	adds	r3, r7, r4
 8000574:	2201      	movs	r2, #1
 8000576:	711a      	strb	r2, [r3, #4]
		answer[6] = 0;
 8000578:	193b      	adds	r3, r7, r4
 800057a:	2200      	movs	r2, #0
 800057c:	719a      	strb	r2, [r3, #6]
		answer[6] = XOR(answer, 6);
 800057e:	193b      	adds	r3, r7, r4
 8000580:	2106      	movs	r1, #6
 8000582:	0018      	movs	r0, r3
 8000584:	f7ff ff3e 	bl	8000404 <XOR>
 8000588:	0003      	movs	r3, r0
 800058a:	001a      	movs	r2, r3
 800058c:	193b      	adds	r3, r7, r4
 800058e:	719a      	strb	r2, [r3, #6]
		HAL_UART_Transmit_IT(&huart1, answer, 7);
 8000590:	1939      	adds	r1, r7, r4
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <ProcessCMD+0x188>)
 8000594:	2207      	movs	r2, #7
 8000596:	0018      	movs	r0, r3
 8000598:	f003 fad0 	bl	8003b3c <HAL_UART_Transmit_IT>
	}
}
 800059c:	46c0      	nop			; (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	b009      	add	sp, #36	; 0x24
 80005a2:	bd90      	pop	{r4, r7, pc}
 80005a4:	200000d8 	.word	0x200000d8

080005a8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	000a      	movs	r2, r1
 80005b2:	1cbb      	adds	r3, r7, #2
 80005b4:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART1) //Radio
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a3c      	ldr	r2, [pc, #240]	; (80006ac <HAL_UARTEx_RxEventCallback+0x104>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d160      	bne.n	8000682 <HAL_UARTEx_RxEventCallback+0xda>
	{
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, pRF_Data, 100);
 80005c0:	493b      	ldr	r1, [pc, #236]	; (80006b0 <HAL_UARTEx_RxEventCallback+0x108>)
 80005c2:	4b3c      	ldr	r3, [pc, #240]	; (80006b4 <HAL_UARTEx_RxEventCallback+0x10c>)
 80005c4:	2264      	movs	r2, #100	; 0x64
 80005c6:	0018      	movs	r0, r3
 80005c8:	f004 fede 	bl	8005388 <HAL_UARTEx_ReceiveToIdle_DMA>
		if(pRF_Data[0] == 0x0D && pRF_Data[1] == 'C')
 80005cc:	4b38      	ldr	r3, [pc, #224]	; (80006b0 <HAL_UARTEx_RxEventCallback+0x108>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b0d      	cmp	r3, #13
 80005d2:	d156      	bne.n	8000682 <HAL_UARTEx_RxEventCallback+0xda>
 80005d4:	4b36      	ldr	r3, [pc, #216]	; (80006b0 <HAL_UARTEx_RxEventCallback+0x108>)
 80005d6:	785b      	ldrb	r3, [r3, #1]
 80005d8:	2b43      	cmp	r3, #67	; 0x43
 80005da:	d152      	bne.n	8000682 <HAL_UARTEx_RxEventCallback+0xda>
		{
			if(XOR(pRF_Data, Size) == pRF_Data[Size-1])
 80005dc:	1cbb      	adds	r3, r7, #2
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	4b33      	ldr	r3, [pc, #204]	; (80006b0 <HAL_UARTEx_RxEventCallback+0x108>)
 80005e4:	0011      	movs	r1, r2
 80005e6:	0018      	movs	r0, r3
 80005e8:	f7ff ff0c 	bl	8000404 <XOR>
 80005ec:	0003      	movs	r3, r0
 80005ee:	0019      	movs	r1, r3
 80005f0:	1cbb      	adds	r3, r7, #2
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	3b01      	subs	r3, #1
 80005f6:	4a2e      	ldr	r2, [pc, #184]	; (80006b0 <HAL_UARTEx_RxEventCallback+0x108>)
 80005f8:	5cd3      	ldrb	r3, [r2, r3]
 80005fa:	4299      	cmp	r1, r3
 80005fc:	d141      	bne.n	8000682 <HAL_UARTEx_RxEventCallback+0xda>
			{
				CMD newCMD;
				newCMD.id = pRF_Data[2];
 80005fe:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <HAL_UARTEx_RxEventCallback+0x108>)
 8000600:	789a      	ldrb	r2, [r3, #2]
 8000602:	2108      	movs	r1, #8
 8000604:	187b      	adds	r3, r7, r1
 8000606:	701a      	strb	r2, [r3, #0]
				newCMD.type = pRF_Data[3];
 8000608:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <HAL_UARTEx_RxEventCallback+0x108>)
 800060a:	78da      	ldrb	r2, [r3, #3]
 800060c:	187b      	adds	r3, r7, r1
 800060e:	705a      	strb	r2, [r3, #1]
				newCMD.parLth = pRF_Data[4];
 8000610:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <HAL_UARTEx_RxEventCallback+0x108>)
 8000612:	791a      	ldrb	r2, [r3, #4]
 8000614:	187b      	adds	r3, r7, r1
 8000616:	709a      	strb	r2, [r3, #2]
				for(uint8_t parCnt = 0; parCnt < newCMD.parLth; parCnt++)
 8000618:	2317      	movs	r3, #23
 800061a:	18fb      	adds	r3, r7, r3
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
 8000620:	e011      	b.n	8000646 <HAL_UARTEx_RxEventCallback+0x9e>
					newCMD.params[parCnt] = pRF_Data[5+parCnt];
 8000622:	2017      	movs	r0, #23
 8000624:	183b      	adds	r3, r7, r0
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	1d5a      	adds	r2, r3, #5
 800062a:	183b      	adds	r3, r7, r0
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	4920      	ldr	r1, [pc, #128]	; (80006b0 <HAL_UARTEx_RxEventCallback+0x108>)
 8000630:	5c89      	ldrb	r1, [r1, r2]
 8000632:	2208      	movs	r2, #8
 8000634:	18ba      	adds	r2, r7, r2
 8000636:	18d3      	adds	r3, r2, r3
 8000638:	1c0a      	adds	r2, r1, #0
 800063a:	70da      	strb	r2, [r3, #3]
				for(uint8_t parCnt = 0; parCnt < newCMD.parLth; parCnt++)
 800063c:	183b      	adds	r3, r7, r0
 800063e:	781a      	ldrb	r2, [r3, #0]
 8000640:	183b      	adds	r3, r7, r0
 8000642:	3201      	adds	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]
 8000646:	2008      	movs	r0, #8
 8000648:	183b      	adds	r3, r7, r0
 800064a:	789b      	ldrb	r3, [r3, #2]
 800064c:	2217      	movs	r2, #23
 800064e:	18ba      	adds	r2, r7, r2
 8000650:	7812      	ldrb	r2, [r2, #0]
 8000652:	429a      	cmp	r2, r3
 8000654:	d3e5      	bcc.n	8000622 <HAL_UARTEx_RxEventCallback+0x7a>


				queue[Queue_size] = newCMD;
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <HAL_UARTEx_RxEventCallback+0x110>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	001a      	movs	r2, r3
 800065c:	4917      	ldr	r1, [pc, #92]	; (80006bc <HAL_UARTEx_RxEventCallback+0x114>)
 800065e:	0013      	movs	r3, r2
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	189b      	adds	r3, r3, r2
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	189b      	adds	r3, r3, r2
 8000668:	183a      	adds	r2, r7, r0
 800066a:	18cb      	adds	r3, r1, r3
 800066c:	0011      	movs	r1, r2
 800066e:	220d      	movs	r2, #13
 8000670:	0018      	movs	r0, r3
 8000672:	f004 ff7b 	bl	800556c <memcpy>
				Queue_size++;
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <HAL_UARTEx_RxEventCallback+0x110>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	3301      	adds	r3, #1
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <HAL_UARTEx_RxEventCallback+0x110>)
 8000680:	701a      	strb	r2, [r3, #0]
		else
		{
			//bad cmd
		}
	}
	if(huart->Instance == USART2) //GPS
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <HAL_UARTEx_RxEventCallback+0x118>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d10b      	bne.n	80006a4 <HAL_UARTEx_RxEventCallback+0xfc>
	{
		//GGA pGNSS_Data2;
		//GNSS_decoder((char*)&pGNSS_Data[0], &pGNSS_Data2 );
		gnss_size = Size;
 800068c:	1cbb      	adds	r3, r7, #2
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000694:	701a      	strb	r2, [r3, #0]

		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, pGNSS_Data, 512);
 8000696:	2380      	movs	r3, #128	; 0x80
 8000698:	009a      	lsls	r2, r3, #2
 800069a:	490b      	ldr	r1, [pc, #44]	; (80006c8 <HAL_UARTEx_RxEventCallback+0x120>)
 800069c:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <HAL_UARTEx_RxEventCallback+0x124>)
 800069e:	0018      	movs	r0, r3
 80006a0:	f004 fe72 	bl	8005388 <HAL_UARTEx_ReceiveToIdle_DMA>

	}
}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b006      	add	sp, #24
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40013800 	.word	0x40013800
 80006b0:	20000538 	.word	0x20000538
 80006b4:	200000d8 	.word	0x200000d8
 80006b8:	20000332 	.word	0x20000332
 80006bc:	200002b0 	.word	0x200002b0
 80006c0:	40004400 	.word	0x40004400
 80006c4:	2000059c 	.word	0x2000059c
 80006c8:	20000338 	.word	0x20000338
 80006cc:	20000168 	.word	0x20000168

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f000 fcdc 	bl	8001090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f892 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f000 f9fe 	bl	8000adc <MX_GPIO_Init>
  MX_SPI1_Init();
 80006e0:	f000 f916 	bl	8000910 <MX_SPI1_Init>
  MX_DMA_Init();
 80006e4:	f000 f9d4 	bl	8000a90 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006e8:	f000 f950 	bl	800098c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006ec:	f000 f99c 	bl	8000a28 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80006f0:	f000 f8ce 	bl	8000890 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, SET);
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	021b      	lsls	r3, r3, #8
 80006f8:	4838      	ldr	r0, [pc, #224]	; (80007dc <main+0x10c>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	0019      	movs	r1, r3
 80006fe:	f001 fae5 	bl	8001ccc <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, SET); //Для JDY
  HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, RESET); //Для E220
 8000702:	2380      	movs	r3, #128	; 0x80
 8000704:	01db      	lsls	r3, r3, #7
 8000706:	4835      	ldr	r0, [pc, #212]	; (80007dc <main+0x10c>)
 8000708:	2200      	movs	r2, #0
 800070a:	0019      	movs	r1, r3
 800070c:	f001 fade 	bl	8001ccc <HAL_GPIO_WritePin>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, pGNSS_Data, 512); //GPS
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	009a      	lsls	r2, r3, #2
 8000714:	4932      	ldr	r1, [pc, #200]	; (80007e0 <main+0x110>)
 8000716:	4b33      	ldr	r3, [pc, #204]	; (80007e4 <main+0x114>)
 8000718:	0018      	movs	r0, r3
 800071a:	f004 fe35 	bl	8005388 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, pRF_Data, 100); //RF
 800071e:	4932      	ldr	r1, [pc, #200]	; (80007e8 <main+0x118>)
 8000720:	4b32      	ldr	r3, [pc, #200]	; (80007ec <main+0x11c>)
 8000722:	2264      	movs	r2, #100	; 0x64
 8000724:	0018      	movs	r0, r3
 8000726:	f004 fe2f 	bl	8005388 <HAL_UARTEx_ReceiveToIdle_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(Queue_size > 0)
 800072a:	4b31      	ldr	r3, [pc, #196]	; (80007f0 <main+0x120>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d041      	beq.n	80007b6 <main+0xe6>
	  {
		  ProcessCMD(queue[Queue_size-1]);
 8000732:	4b2f      	ldr	r3, [pc, #188]	; (80007f0 <main+0x120>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	1e59      	subs	r1, r3, #1
 8000738:	4a2e      	ldr	r2, [pc, #184]	; (80007f4 <main+0x124>)
 800073a:	000b      	movs	r3, r1
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	185b      	adds	r3, r3, r1
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	185b      	adds	r3, r3, r1
 8000744:	5c99      	ldrb	r1, [r3, r2]
 8000746:	18d0      	adds	r0, r2, r3
 8000748:	7840      	ldrb	r0, [r0, #1]
 800074a:	0200      	lsls	r0, r0, #8
 800074c:	4301      	orrs	r1, r0
 800074e:	18d0      	adds	r0, r2, r3
 8000750:	7880      	ldrb	r0, [r0, #2]
 8000752:	0400      	lsls	r0, r0, #16
 8000754:	4301      	orrs	r1, r0
 8000756:	18d0      	adds	r0, r2, r3
 8000758:	78c0      	ldrb	r0, [r0, #3]
 800075a:	0600      	lsls	r0, r0, #24
 800075c:	4301      	orrs	r1, r0
 800075e:	000e      	movs	r6, r1
 8000760:	18d1      	adds	r1, r2, r3
 8000762:	7908      	ldrb	r0, [r1, #4]
 8000764:	794c      	ldrb	r4, [r1, #5]
 8000766:	0224      	lsls	r4, r4, #8
 8000768:	4320      	orrs	r0, r4
 800076a:	798c      	ldrb	r4, [r1, #6]
 800076c:	0424      	lsls	r4, r4, #16
 800076e:	4320      	orrs	r0, r4
 8000770:	79c9      	ldrb	r1, [r1, #7]
 8000772:	0609      	lsls	r1, r1, #24
 8000774:	4301      	orrs	r1, r0
 8000776:	000d      	movs	r5, r1
 8000778:	18d1      	adds	r1, r2, r3
 800077a:	7a08      	ldrb	r0, [r1, #8]
 800077c:	7a4c      	ldrb	r4, [r1, #9]
 800077e:	0224      	lsls	r4, r4, #8
 8000780:	4320      	orrs	r0, r4
 8000782:	7a8c      	ldrb	r4, [r1, #10]
 8000784:	0424      	lsls	r4, r4, #16
 8000786:	4320      	orrs	r0, r4
 8000788:	7ac9      	ldrb	r1, [r1, #11]
 800078a:	0609      	lsls	r1, r1, #24
 800078c:	4301      	orrs	r1, r0
 800078e:	000c      	movs	r4, r1
 8000790:	18d3      	adds	r3, r2, r3
 8000792:	7b1a      	ldrb	r2, [r3, #12]
 8000794:	2300      	movs	r3, #0
 8000796:	21ff      	movs	r1, #255	; 0xff
 8000798:	400a      	ands	r2, r1
 800079a:	21ff      	movs	r1, #255	; 0xff
 800079c:	438b      	bics	r3, r1
 800079e:	4313      	orrs	r3, r2
 80007a0:	0030      	movs	r0, r6
 80007a2:	0029      	movs	r1, r5
 80007a4:	0022      	movs	r2, r4
 80007a6:	f7ff fe39 	bl	800041c <ProcessCMD>
		  Queue_size--;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <main+0x120>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <main+0x120>)
 80007b4:	701a      	strb	r2, [r3, #0]
	  }
	  if(TIM_GNSS_Send > 2000)
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <main+0x128>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	23fa      	movs	r3, #250	; 0xfa
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	429a      	cmp	r2, r3
 80007c0:	d9b3      	bls.n	800072a <main+0x5a>
	  {
		  HAL_UART_Transmit(&huart1, pGNSS_Data, gnss_size, 1000);
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <main+0x12c>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	23fa      	movs	r3, #250	; 0xfa
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	4904      	ldr	r1, [pc, #16]	; (80007e0 <main+0x110>)
 80007ce:	4807      	ldr	r0, [pc, #28]	; (80007ec <main+0x11c>)
 80007d0:	f003 f908 	bl	80039e4 <HAL_UART_Transmit>
		  TIM_GNSS_Send = 0;
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <main+0x128>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
	  if(Queue_size > 0)
 80007da:	e7a6      	b.n	800072a <main+0x5a>
 80007dc:	50000800 	.word	0x50000800
 80007e0:	20000338 	.word	0x20000338
 80007e4:	20000168 	.word	0x20000168
 80007e8:	20000538 	.word	0x20000538
 80007ec:	200000d8 	.word	0x200000d8
 80007f0:	20000332 	.word	0x20000332
 80007f4:	200002b0 	.word	0x200002b0
 80007f8:	20000334 	.word	0x20000334
 80007fc:	2000059c 	.word	0x2000059c

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b093      	sub	sp, #76	; 0x4c
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	2414      	movs	r4, #20
 8000808:	193b      	adds	r3, r7, r4
 800080a:	0018      	movs	r0, r3
 800080c:	2334      	movs	r3, #52	; 0x34
 800080e:	001a      	movs	r2, r3
 8000810:	2100      	movs	r1, #0
 8000812:	f004 feb4 	bl	800557e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	0018      	movs	r0, r3
 800081a:	2310      	movs	r3, #16
 800081c:	001a      	movs	r2, r3
 800081e:	2100      	movs	r1, #0
 8000820:	f004 fead 	bl	800557e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	0018      	movs	r0, r3
 800082a:	f002 f99b 	bl	8002b64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800082e:	193b      	adds	r3, r7, r4
 8000830:	2202      	movs	r2, #2
 8000832:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000834:	193b      	adds	r3, r7, r4
 8000836:	2280      	movs	r2, #128	; 0x80
 8000838:	0052      	lsls	r2, r2, #1
 800083a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000842:	193b      	adds	r3, r7, r4
 8000844:	2240      	movs	r2, #64	; 0x40
 8000846:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084e:	193b      	adds	r3, r7, r4
 8000850:	0018      	movs	r0, r3
 8000852:	f002 f9d3 	bl	8002bfc <HAL_RCC_OscConfig>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800085a:	f000 f9bb 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2207      	movs	r2, #7
 8000862:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2200      	movs	r2, #0
 8000868:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2100      	movs	r1, #0
 800087a:	0018      	movs	r0, r3
 800087c:	f002 fcd4 	bl	8003228 <HAL_RCC_ClockConfig>
 8000880:	1e03      	subs	r3, r0, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000884:	f000 f9a6 	bl	8000bd4 <Error_Handler>
  }
}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	b013      	add	sp, #76	; 0x4c
 800088e:	bd90      	pop	{r4, r7, pc}

08000890 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_I2C2_Init+0x74>)
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <MX_I2C2_Init+0x78>)
 8000898:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_I2C2_Init+0x74>)
 800089c:	4a1b      	ldr	r2, [pc, #108]	; (800090c <MX_I2C2_Init+0x7c>)
 800089e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 170;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_I2C2_Init+0x74>)
 80008a2:	22aa      	movs	r2, #170	; 0xaa
 80008a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_I2C2_Init+0x74>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_I2C2_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_I2C2_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_I2C2_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_I2C2_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_I2C2_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_I2C2_Init+0x74>)
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 fa1b 	bl	8001d08 <HAL_I2C_Init>
 80008d2:	1e03      	subs	r3, r0, #0
 80008d4:	d001      	beq.n	80008da <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008d6:	f000 f97d 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <MX_I2C2_Init+0x74>)
 80008dc:	2100      	movs	r1, #0
 80008de:	0018      	movs	r0, r3
 80008e0:	f002 f8a8 	bl	8002a34 <HAL_I2CEx_ConfigAnalogFilter>
 80008e4:	1e03      	subs	r3, r0, #0
 80008e6:	d001      	beq.n	80008ec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008e8:	f000 f974 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <MX_I2C2_Init+0x74>)
 80008ee:	2100      	movs	r1, #0
 80008f0:	0018      	movs	r0, r3
 80008f2:	f002 f8eb 	bl	8002acc <HAL_I2CEx_ConfigDigitalFilter>
 80008f6:	1e03      	subs	r3, r0, #0
 80008f8:	d001      	beq.n	80008fe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008fa:	f000 f96b 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  /* USER CODE END I2C2_Init 2 */

}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000028 	.word	0x20000028
 8000908:	40005800 	.word	0x40005800
 800090c:	00303d5b 	.word	0x00303d5b

08000910 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <MX_SPI1_Init+0x74>)
 8000916:	4a1c      	ldr	r2, [pc, #112]	; (8000988 <MX_SPI1_Init+0x78>)
 8000918:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <MX_SPI1_Init+0x74>)
 800091c:	2282      	movs	r2, #130	; 0x82
 800091e:	0052      	lsls	r2, r2, #1
 8000920:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <MX_SPI1_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <MX_SPI1_Init+0x74>)
 800092a:	22e0      	movs	r2, #224	; 0xe0
 800092c:	00d2      	lsls	r2, r2, #3
 800092e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_SPI1_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_SPI1_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_SPI1_Init+0x74>)
 800093e:	2280      	movs	r2, #128	; 0x80
 8000940:	0092      	lsls	r2, r2, #2
 8000942:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_SPI1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_SPI1_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_SPI1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_SPI1_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_SPI1_Init+0x74>)
 800095e:	2207      	movs	r2, #7
 8000960:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_SPI1_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_SPI1_Init+0x74>)
 800096a:	2208      	movs	r2, #8
 800096c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <MX_SPI1_Init+0x74>)
 8000970:	0018      	movs	r0, r3
 8000972:	f002 ff29 	bl	80037c8 <HAL_SPI_Init>
 8000976:	1e03      	subs	r3, r0, #0
 8000978:	d001      	beq.n	800097e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800097a:	f000 f92b 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000074 	.word	0x20000074
 8000988:	40013000 	.word	0x40013000

0800098c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000990:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <MX_USART1_UART_Init+0x94>)
 8000992:	4a24      	ldr	r2, [pc, #144]	; (8000a24 <MX_USART1_UART_Init+0x98>)
 8000994:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000996:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <MX_USART1_UART_Init+0x94>)
 8000998:	2296      	movs	r2, #150	; 0x96
 800099a:	0192      	lsls	r2, r2, #6
 800099c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <MX_USART1_UART_Init+0x94>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <MX_USART1_UART_Init+0x94>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_USART1_UART_Init+0x94>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_USART1_UART_Init+0x94>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_USART1_UART_Init+0x94>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_USART1_UART_Init+0x94>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_USART1_UART_Init+0x94>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_USART1_UART_Init+0x94>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_USART1_UART_Init+0x94>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_USART1_UART_Init+0x94>)
 80009d6:	0018      	movs	r0, r3
 80009d8:	f002 ffae 	bl	8003938 <HAL_UART_Init>
 80009dc:	1e03      	subs	r3, r0, #0
 80009de:	d001      	beq.n	80009e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009e0:	f000 f8f8 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_USART1_UART_Init+0x94>)
 80009e6:	2100      	movs	r1, #0
 80009e8:	0018      	movs	r0, r3
 80009ea:	f004 fc4b 	bl	8005284 <HAL_UARTEx_SetTxFifoThreshold>
 80009ee:	1e03      	subs	r3, r0, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009f2:	f000 f8ef 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f6:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <MX_USART1_UART_Init+0x94>)
 80009f8:	2100      	movs	r1, #0
 80009fa:	0018      	movs	r0, r3
 80009fc:	f004 fc82 	bl	8005304 <HAL_UARTEx_SetRxFifoThreshold>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a04:	f000 f8e6 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <MX_USART1_UART_Init+0x94>)
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f004 fc00 	bl	8005210 <HAL_UARTEx_DisableFifoMode>
 8000a10:	1e03      	subs	r3, r0, #0
 8000a12:	d001      	beq.n	8000a18 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a14:	f000 f8de 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	200000d8 	.word	0x200000d8
 8000a24:	40013800 	.word	0x40013800

08000a28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a2c:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <MX_USART2_UART_Init+0x60>)
 8000a2e:	4a17      	ldr	r2, [pc, #92]	; (8000a8c <MX_USART2_UART_Init+0x64>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_USART2_UART_Init+0x60>)
 8000a34:	22e1      	movs	r2, #225	; 0xe1
 8000a36:	0252      	lsls	r2, r2, #9
 8000a38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <MX_USART2_UART_Init+0x60>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_USART2_UART_Init+0x60>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MX_USART2_UART_Init+0x60>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_USART2_UART_Init+0x60>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <MX_USART2_UART_Init+0x60>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <MX_USART2_UART_Init+0x60>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <MX_USART2_UART_Init+0x60>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <MX_USART2_UART_Init+0x60>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <MX_USART2_UART_Init+0x60>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <MX_USART2_UART_Init+0x60>)
 8000a72:	0018      	movs	r0, r3
 8000a74:	f002 ff60 	bl	8003938 <HAL_UART_Init>
 8000a78:	1e03      	subs	r3, r0, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a7c:	f000 f8aa 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	20000168 	.word	0x20000168
 8000a8c:	40004400 	.word	0x40004400

08000a90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <MX_DMA_Init+0x48>)
 8000a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <MX_DMA_Init+0x48>)
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	639a      	str	r2, [r3, #56]	; 0x38
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <MX_DMA_Init+0x48>)
 8000aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2009      	movs	r0, #9
 8000ab4:	f000 fc42 	bl	800133c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ab8:	2009      	movs	r0, #9
 8000aba:	f000 fc54 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	200a      	movs	r0, #10
 8000ac4:	f000 fc3a 	bl	800133c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000ac8:	200a      	movs	r0, #10
 8000aca:	f000 fc4c 	bl	8001366 <HAL_NVIC_EnableIRQ>

}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	40021000 	.word	0x40021000

08000adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b089      	sub	sp, #36	; 0x24
 8000ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	240c      	movs	r4, #12
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	2314      	movs	r3, #20
 8000aea:	001a      	movs	r2, r3
 8000aec:	2100      	movs	r1, #0
 8000aee:	f004 fd46 	bl	800557e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	4b35      	ldr	r3, [pc, #212]	; (8000bc8 <MX_GPIO_Init+0xec>)
 8000af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000af6:	4b34      	ldr	r3, [pc, #208]	; (8000bc8 <MX_GPIO_Init+0xec>)
 8000af8:	2102      	movs	r1, #2
 8000afa:	430a      	orrs	r2, r1
 8000afc:	635a      	str	r2, [r3, #52]	; 0x34
 8000afe:	4b32      	ldr	r3, [pc, #200]	; (8000bc8 <MX_GPIO_Init+0xec>)
 8000b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b02:	2202      	movs	r2, #2
 8000b04:	4013      	ands	r3, r2
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0a:	4b2f      	ldr	r3, [pc, #188]	; (8000bc8 <MX_GPIO_Init+0xec>)
 8000b0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b0e:	4b2e      	ldr	r3, [pc, #184]	; (8000bc8 <MX_GPIO_Init+0xec>)
 8000b10:	2104      	movs	r1, #4
 8000b12:	430a      	orrs	r2, r1
 8000b14:	635a      	str	r2, [r3, #52]	; 0x34
 8000b16:	4b2c      	ldr	r3, [pc, #176]	; (8000bc8 <MX_GPIO_Init+0xec>)
 8000b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <MX_GPIO_Init+0xec>)
 8000b24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b26:	4b28      	ldr	r3, [pc, #160]	; (8000bc8 <MX_GPIO_Init+0xec>)
 8000b28:	2101      	movs	r1, #1
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	635a      	str	r2, [r3, #52]	; 0x34
 8000b2e:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <MX_GPIO_Init+0xec>)
 8000b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b32:	2201      	movs	r2, #1
 8000b34:	4013      	ands	r3, r2
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M1_Pin|M0_Pin, GPIO_PIN_RESET);
 8000b3a:	23c0      	movs	r3, #192	; 0xc0
 8000b3c:	021b      	lsls	r3, r3, #8
 8000b3e:	4823      	ldr	r0, [pc, #140]	; (8000bcc <MX_GPIO_Init+0xf0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	0019      	movs	r1, r3
 8000b44:	f001 f8c2 	bl	8001ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PROG_BOOT_Pin|PROG_RST_Pin|MEM_CS_Pin, GPIO_PIN_RESET);
 8000b48:	23a0      	movs	r3, #160	; 0xa0
 8000b4a:	05db      	lsls	r3, r3, #23
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2113      	movs	r1, #19
 8000b50:	0018      	movs	r0, r3
 8000b52:	f001 f8bb 	bl	8001ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_Pin M0_Pin */
  GPIO_InitStruct.Pin = M1_Pin|M0_Pin;
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	22c0      	movs	r2, #192	; 0xc0
 8000b5a:	0212      	lsls	r2, r2, #8
 8000b5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	2201      	movs	r2, #1
 8000b62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	193b      	adds	r3, r7, r4
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	4a16      	ldr	r2, [pc, #88]	; (8000bcc <MX_GPIO_Init+0xf0>)
 8000b74:	0019      	movs	r1, r3
 8000b76:	0010      	movs	r0, r2
 8000b78:	f000 ff44 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROG_BOOT_Pin PROG_RST_Pin MEM_CS_Pin */
  GPIO_InitStruct.Pin = PROG_BOOT_Pin|PROG_RST_Pin|MEM_CS_Pin;
 8000b7c:	193b      	adds	r3, r7, r4
 8000b7e:	2213      	movs	r2, #19
 8000b80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	2201      	movs	r2, #1
 8000b86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	193b      	adds	r3, r7, r4
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	193a      	adds	r2, r7, r4
 8000b96:	23a0      	movs	r3, #160	; 0xa0
 8000b98:	05db      	lsls	r3, r3, #23
 8000b9a:	0011      	movs	r1, r2
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f000 ff31 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_AUX_Pin */
  GPIO_InitStruct.Pin = LORA_AUX_Pin;
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	2200      	movs	r2, #0
 8000bac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LORA_AUX_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	193b      	adds	r3, r7, r4
 8000bb6:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <MX_GPIO_Init+0xf4>)
 8000bb8:	0019      	movs	r1, r3
 8000bba:	0010      	movs	r0, r2
 8000bbc:	f000 ff22 	bl	8001a04 <HAL_GPIO_Init>

}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b009      	add	sp, #36	; 0x24
 8000bc6:	bd90      	pop	{r4, r7, pc}
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	50000800 	.word	0x50000800
 8000bd0:	50000400 	.word	0x50000400

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <Error_Handler+0x8>
	...

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <HAL_MspInit+0x44>)
 8000be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_MspInit+0x44>)
 8000bec:	2101      	movs	r1, #1
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	641a      	str	r2, [r3, #64]	; 0x40
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <HAL_MspInit+0x44>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_MspInit+0x44>)
 8000c00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_MspInit+0x44>)
 8000c04:	2180      	movs	r1, #128	; 0x80
 8000c06:	0549      	lsls	r1, r1, #21
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_MspInit+0x44>)
 8000c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	055b      	lsls	r3, r3, #21
 8000c14:	4013      	ands	r3, r2
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b002      	add	sp, #8
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	40021000 	.word	0x40021000

08000c28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b08b      	sub	sp, #44	; 0x2c
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	2414      	movs	r4, #20
 8000c32:	193b      	adds	r3, r7, r4
 8000c34:	0018      	movs	r0, r3
 8000c36:	2314      	movs	r3, #20
 8000c38:	001a      	movs	r2, r3
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	f004 fc9f 	bl	800557e <memset>
  if(hi2c->Instance==I2C2)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a20      	ldr	r2, [pc, #128]	; (8000cc8 <HAL_I2C_MspInit+0xa0>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d139      	bne.n	8000cbe <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <HAL_I2C_MspInit+0xa4>)
 8000c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <HAL_I2C_MspInit+0xa4>)
 8000c50:	2101      	movs	r1, #1
 8000c52:	430a      	orrs	r2, r1
 8000c54:	635a      	str	r2, [r3, #52]	; 0x34
 8000c56:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <HAL_I2C_MspInit+0xa4>)
 8000c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c62:	193b      	adds	r3, r7, r4
 8000c64:	22c0      	movs	r2, #192	; 0xc0
 8000c66:	0152      	lsls	r2, r2, #5
 8000c68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c6a:	0021      	movs	r1, r4
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2212      	movs	r2, #18
 8000c70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2206      	movs	r2, #6
 8000c82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	187a      	adds	r2, r7, r1
 8000c86:	23a0      	movs	r3, #160	; 0xa0
 8000c88:	05db      	lsls	r3, r3, #23
 8000c8a:	0011      	movs	r1, r2
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f000 feb9 	bl	8001a04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_I2C_MspInit+0xa4>)
 8000c94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <HAL_I2C_MspInit+0xa4>)
 8000c98:	2180      	movs	r1, #128	; 0x80
 8000c9a:	03c9      	lsls	r1, r1, #15
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_I2C_MspInit+0xa4>)
 8000ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	03db      	lsls	r3, r3, #15
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2018      	movs	r0, #24
 8000cb4:	f000 fb42 	bl	800133c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8000cb8:	2018      	movs	r0, #24
 8000cba:	f000 fb54 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b00b      	add	sp, #44	; 0x2c
 8000cc4:	bd90      	pop	{r4, r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	40005800 	.word	0x40005800
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b08b      	sub	sp, #44	; 0x2c
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	2414      	movs	r4, #20
 8000cda:	193b      	adds	r3, r7, r4
 8000cdc:	0018      	movs	r0, r3
 8000cde:	2314      	movs	r3, #20
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	f004 fc4b 	bl	800557e <memset>
  if(hspi->Instance==SPI1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <HAL_SPI_MspInit+0x8c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d130      	bne.n	8000d54 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <HAL_SPI_MspInit+0x90>)
 8000cf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <HAL_SPI_MspInit+0x90>)
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	0149      	lsls	r1, r1, #5
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	641a      	str	r2, [r3, #64]	; 0x40
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <HAL_SPI_MspInit+0x90>)
 8000d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d04:	2380      	movs	r3, #128	; 0x80
 8000d06:	015b      	lsls	r3, r3, #5
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <HAL_SPI_MspInit+0x90>)
 8000d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <HAL_SPI_MspInit+0x90>)
 8000d14:	2101      	movs	r1, #1
 8000d16:	430a      	orrs	r2, r1
 8000d18:	635a      	str	r2, [r3, #52]	; 0x34
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <HAL_SPI_MspInit+0x90>)
 8000d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4013      	ands	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d26:	0021      	movs	r1, r4
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	22e0      	movs	r2, #224	; 0xe0
 8000d2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2202      	movs	r2, #2
 8000d32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	187a      	adds	r2, r7, r1
 8000d48:	23a0      	movs	r3, #160	; 0xa0
 8000d4a:	05db      	lsls	r3, r3, #23
 8000d4c:	0011      	movs	r1, r2
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f000 fe58 	bl	8001a04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b00b      	add	sp, #44	; 0x2c
 8000d5a:	bd90      	pop	{r4, r7, pc}
 8000d5c:	40013000 	.word	0x40013000
 8000d60:	40021000 	.word	0x40021000

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b093      	sub	sp, #76	; 0x4c
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	2334      	movs	r3, #52	; 0x34
 8000d6e:	18fb      	adds	r3, r7, r3
 8000d70:	0018      	movs	r0, r3
 8000d72:	2314      	movs	r3, #20
 8000d74:	001a      	movs	r2, r3
 8000d76:	2100      	movs	r1, #0
 8000d78:	f004 fc01 	bl	800557e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d7c:	241c      	movs	r4, #28
 8000d7e:	193b      	adds	r3, r7, r4
 8000d80:	0018      	movs	r0, r3
 8000d82:	2318      	movs	r3, #24
 8000d84:	001a      	movs	r2, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	f004 fbf9 	bl	800557e <memset>
  if(huart->Instance==USART1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a6e      	ldr	r2, [pc, #440]	; (8000f4c <HAL_UART_MspInit+0x1e8>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d16f      	bne.n	8000e76 <HAL_UART_MspInit+0x112>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	2201      	movs	r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d9c:	193b      	adds	r3, r7, r4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da2:	193b      	adds	r3, r7, r4
 8000da4:	0018      	movs	r0, r3
 8000da6:	f002 fbe9 	bl	800357c <HAL_RCCEx_PeriphCLKConfig>
 8000daa:	1e03      	subs	r3, r0, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dae:	f7ff ff11 	bl	8000bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000db2:	4b67      	ldr	r3, [pc, #412]	; (8000f50 <HAL_UART_MspInit+0x1ec>)
 8000db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000db6:	4b66      	ldr	r3, [pc, #408]	; (8000f50 <HAL_UART_MspInit+0x1ec>)
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	01c9      	lsls	r1, r1, #7
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	641a      	str	r2, [r3, #64]	; 0x40
 8000dc0:	4b63      	ldr	r3, [pc, #396]	; (8000f50 <HAL_UART_MspInit+0x1ec>)
 8000dc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc4:	2380      	movs	r3, #128	; 0x80
 8000dc6:	01db      	lsls	r3, r3, #7
 8000dc8:	4013      	ands	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
 8000dcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	4b60      	ldr	r3, [pc, #384]	; (8000f50 <HAL_UART_MspInit+0x1ec>)
 8000dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dd2:	4b5f      	ldr	r3, [pc, #380]	; (8000f50 <HAL_UART_MspInit+0x1ec>)
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	635a      	str	r2, [r3, #52]	; 0x34
 8000dda:	4b5d      	ldr	r3, [pc, #372]	; (8000f50 <HAL_UART_MspInit+0x1ec>)
 8000ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dde:	2202      	movs	r2, #2
 8000de0:	4013      	ands	r3, r2
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000de6:	2134      	movs	r1, #52	; 0x34
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	22c0      	movs	r2, #192	; 0xc0
 8000dec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2202      	movs	r2, #2
 8000df2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	4a52      	ldr	r2, [pc, #328]	; (8000f54 <HAL_UART_MspInit+0x1f0>)
 8000e0a:	0019      	movs	r1, r3
 8000e0c:	0010      	movs	r0, r2
 8000e0e:	f000 fdf9 	bl	8001a04 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000e12:	4b51      	ldr	r3, [pc, #324]	; (8000f58 <HAL_UART_MspInit+0x1f4>)
 8000e14:	4a51      	ldr	r2, [pc, #324]	; (8000f5c <HAL_UART_MspInit+0x1f8>)
 8000e16:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000e18:	4b4f      	ldr	r3, [pc, #316]	; (8000f58 <HAL_UART_MspInit+0x1f4>)
 8000e1a:	2232      	movs	r2, #50	; 0x32
 8000e1c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e1e:	4b4e      	ldr	r3, [pc, #312]	; (8000f58 <HAL_UART_MspInit+0x1f4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e24:	4b4c      	ldr	r3, [pc, #304]	; (8000f58 <HAL_UART_MspInit+0x1f4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e2a:	4b4b      	ldr	r3, [pc, #300]	; (8000f58 <HAL_UART_MspInit+0x1f4>)
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e30:	4b49      	ldr	r3, [pc, #292]	; (8000f58 <HAL_UART_MspInit+0x1f4>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e36:	4b48      	ldr	r3, [pc, #288]	; (8000f58 <HAL_UART_MspInit+0x1f4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000e3c:	4b46      	ldr	r3, [pc, #280]	; (8000f58 <HAL_UART_MspInit+0x1f4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e42:	4b45      	ldr	r3, [pc, #276]	; (8000f58 <HAL_UART_MspInit+0x1f4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e48:	4b43      	ldr	r3, [pc, #268]	; (8000f58 <HAL_UART_MspInit+0x1f4>)
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f000 fab0 	bl	80013b0 <HAL_DMA_Init>
 8000e50:	1e03      	subs	r3, r0, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8000e54:	f7ff febe 	bl	8000bd4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a3f      	ldr	r2, [pc, #252]	; (8000f58 <HAL_UART_MspInit+0x1f4>)
 8000e5c:	67da      	str	r2, [r3, #124]	; 0x7c
 8000e5e:	4b3e      	ldr	r3, [pc, #248]	; (8000f58 <HAL_UART_MspInit+0x1f4>)
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2100      	movs	r1, #0
 8000e68:	201b      	movs	r0, #27
 8000e6a:	f000 fa67 	bl	800133c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e6e:	201b      	movs	r0, #27
 8000e70:	f000 fa79 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e74:	e066      	b.n	8000f44 <HAL_UART_MspInit+0x1e0>
  else if(huart->Instance==USART2)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a39      	ldr	r2, [pc, #228]	; (8000f60 <HAL_UART_MspInit+0x1fc>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d161      	bne.n	8000f44 <HAL_UART_MspInit+0x1e0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e80:	4b33      	ldr	r3, [pc, #204]	; (8000f50 <HAL_UART_MspInit+0x1ec>)
 8000e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e84:	4b32      	ldr	r3, [pc, #200]	; (8000f50 <HAL_UART_MspInit+0x1ec>)
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	0289      	lsls	r1, r1, #10
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e8e:	4b30      	ldr	r3, [pc, #192]	; (8000f50 <HAL_UART_MspInit+0x1ec>)
 8000e90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e92:	2380      	movs	r3, #128	; 0x80
 8000e94:	029b      	lsls	r3, r3, #10
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	4b2c      	ldr	r3, [pc, #176]	; (8000f50 <HAL_UART_MspInit+0x1ec>)
 8000e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ea0:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <HAL_UART_MspInit+0x1ec>)
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ea8:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <HAL_UART_MspInit+0x1ec>)
 8000eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eac:	2201      	movs	r2, #1
 8000eae:	4013      	ands	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000eb4:	2134      	movs	r1, #52	; 0x34
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	220c      	movs	r2, #12
 8000eba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	187a      	adds	r2, r7, r1
 8000ed6:	23a0      	movs	r3, #160	; 0xa0
 8000ed8:	05db      	lsls	r3, r3, #23
 8000eda:	0011      	movs	r1, r2
 8000edc:	0018      	movs	r0, r3
 8000ede:	f000 fd91 	bl	8001a04 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8000ee2:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <HAL_UART_MspInit+0x200>)
 8000ee4:	4a20      	ldr	r2, [pc, #128]	; (8000f68 <HAL_UART_MspInit+0x204>)
 8000ee6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <HAL_UART_MspInit+0x200>)
 8000eea:	2234      	movs	r2, #52	; 0x34
 8000eec:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eee:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <HAL_UART_MspInit+0x200>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <HAL_UART_MspInit+0x200>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <HAL_UART_MspInit+0x200>)
 8000efc:	2280      	movs	r2, #128	; 0x80
 8000efe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f00:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <HAL_UART_MspInit+0x200>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <HAL_UART_MspInit+0x200>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <HAL_UART_MspInit+0x200>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <HAL_UART_MspInit+0x200>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_UART_MspInit+0x200>)
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f000 fa48 	bl	80013b0 <HAL_DMA_Init>
 8000f20:	1e03      	subs	r3, r0, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8000f24:	f7ff fe56 	bl	8000bd4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <HAL_UART_MspInit+0x200>)
 8000f2c:	67da      	str	r2, [r3, #124]	; 0x7c
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <HAL_UART_MspInit+0x200>)
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2100      	movs	r1, #0
 8000f38:	201c      	movs	r0, #28
 8000f3a:	f000 f9ff 	bl	800133c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f3e:	201c      	movs	r0, #28
 8000f40:	f000 fa11 	bl	8001366 <HAL_NVIC_EnableIRQ>
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b013      	add	sp, #76	; 0x4c
 8000f4a:	bd90      	pop	{r4, r7, pc}
 8000f4c:	40013800 	.word	0x40013800
 8000f50:	40021000 	.word	0x40021000
 8000f54:	50000400 	.word	0x50000400
 8000f58:	200001f8 	.word	0x200001f8
 8000f5c:	40020008 	.word	0x40020008
 8000f60:	40004400 	.word	0x40004400
 8000f64:	20000254 	.word	0x20000254
 8000f68:	4002001c 	.word	0x4002001c

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <NMI_Handler+0x4>

08000f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <HardFault_Handler+0x4>

08000f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f7c:	46c0      	nop			; (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f90:	f000 f8e8 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000f94:	f000 fa04 	bl	80013a0 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000f98:	46c0      	nop			; (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <DMA1_Channel1_IRQHandler+0x14>)
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f000 fbde 	bl	8001768 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	200001f8 	.word	0x200001f8

08000fb8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <DMA1_Channel2_3_IRQHandler+0x14>)
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f000 fbd2 	bl	8001768 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000fc4:	46c0      	nop			; (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	20000254 	.word	0x20000254

08000fd0 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <I2C2_IRQHandler+0x2c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	699a      	ldr	r2, [r3, #24]
 8000fda:	23e0      	movs	r3, #224	; 0xe0
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d004      	beq.n	8000fec <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <I2C2_IRQHandler+0x2c>)
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f000 ff3f 	bl	8001e68 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 8000fea:	e003      	b.n	8000ff4 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <I2C2_IRQHandler+0x2c>)
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f000 ff20 	bl	8001e34 <HAL_I2C_EV_IRQHandler>
}
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	20000028 	.word	0x20000028

08001000 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <USART1_IRQHandler+0x14>)
 8001006:	0018      	movs	r0, r3
 8001008:	f002 fe54 	bl	8003cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800100c:	46c0      	nop			; (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	200000d8 	.word	0x200000d8

08001018 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <USART2_IRQHandler+0x14>)
 800101e:	0018      	movs	r0, r3
 8001020:	f002 fe48 	bl	8003cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	20000168 	.word	0x20000168

08001030 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800103e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001040:	f7ff fff6 	bl	8001030 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <LoopForever+0x6>)
  ldr r1, =_edata
 8001046:	490d      	ldr	r1, [pc, #52]	; (800107c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <LoopForever+0xe>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <LoopForever+0x12>)
  ldr r4, =_ebss
 800105c:	4c0a      	ldr	r4, [pc, #40]	; (8001088 <LoopForever+0x16>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800106a:	f004 fa5b 	bl	8005524 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800106e:	f7ff fb2f 	bl	80006d0 <main>

08001072 <LoopForever>:

LoopForever:
  b LoopForever
 8001072:	e7fe      	b.n	8001072 <LoopForever>
  ldr   r0, =_estack
 8001074:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001080:	08005638 	.word	0x08005638
  ldr r2, =_sbss
 8001084:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001088:	200005a4 	.word	0x200005a4

0800108c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC1_IRQHandler>
	...

08001090 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <HAL_Init+0x3c>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_Init+0x3c>)
 80010a2:	2180      	movs	r1, #128	; 0x80
 80010a4:	0049      	lsls	r1, r1, #1
 80010a6:	430a      	orrs	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010aa:	2003      	movs	r0, #3
 80010ac:	f000 f810 	bl	80010d0 <HAL_InitTick>
 80010b0:	1e03      	subs	r3, r0, #0
 80010b2:	d003      	beq.n	80010bc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010b4:	1dfb      	adds	r3, r7, #7
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
 80010ba:	e001      	b.n	80010c0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80010bc:	f7ff fd90 	bl	8000be0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	781b      	ldrb	r3, [r3, #0]
}
 80010c4:	0018      	movs	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b002      	add	sp, #8
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40022000 	.word	0x40022000

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010d8:	230f      	movs	r3, #15
 80010da:	18fb      	adds	r3, r7, r3
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <HAL_InitTick+0x88>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d02b      	beq.n	8001140 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80010e8:	4b1c      	ldr	r3, [pc, #112]	; (800115c <HAL_InitTick+0x8c>)
 80010ea:	681c      	ldr	r4, [r3, #0]
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <HAL_InitTick+0x88>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	0019      	movs	r1, r3
 80010f2:	23fa      	movs	r3, #250	; 0xfa
 80010f4:	0098      	lsls	r0, r3, #2
 80010f6:	f7ff f803 	bl	8000100 <__udivsi3>
 80010fa:	0003      	movs	r3, r0
 80010fc:	0019      	movs	r1, r3
 80010fe:	0020      	movs	r0, r4
 8001100:	f7fe fffe 	bl	8000100 <__udivsi3>
 8001104:	0003      	movs	r3, r0
 8001106:	0018      	movs	r0, r3
 8001108:	f000 f93d 	bl	8001386 <HAL_SYSTICK_Config>
 800110c:	1e03      	subs	r3, r0, #0
 800110e:	d112      	bne.n	8001136 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b03      	cmp	r3, #3
 8001114:	d80a      	bhi.n	800112c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	2301      	movs	r3, #1
 800111a:	425b      	negs	r3, r3
 800111c:	2200      	movs	r2, #0
 800111e:	0018      	movs	r0, r3
 8001120:	f000 f90c 	bl	800133c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_InitTick+0x90>)
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	e00d      	b.n	8001148 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800112c:	230f      	movs	r3, #15
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	e008      	b.n	8001148 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001136:	230f      	movs	r3, #15
 8001138:	18fb      	adds	r3, r7, r3
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	e003      	b.n	8001148 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001140:	230f      	movs	r3, #15
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001148:	230f      	movs	r3, #15
 800114a:	18fb      	adds	r3, r7, r3
 800114c:	781b      	ldrb	r3, [r3, #0]
}
 800114e:	0018      	movs	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	b005      	add	sp, #20
 8001154:	bd90      	pop	{r4, r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	20000008 	.word	0x20000008
 800115c:	20000000 	.word	0x20000000
 8001160:	20000004 	.word	0x20000004

08001164 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_IncTick+0x1c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	001a      	movs	r2, r3
 800116e:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_IncTick+0x20>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	18d2      	adds	r2, r2, r3
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <HAL_IncTick+0x20>)
 8001176:	601a      	str	r2, [r3, #0]
}
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	20000008 	.word	0x20000008
 8001184:	200005a0 	.word	0x200005a0

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b02      	ldr	r3, [pc, #8]	; (8001198 <HAL_GetTick+0x10>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	200005a0 	.word	0x200005a0

0800119c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff fff0 	bl	8001188 <HAL_GetTick>
 80011a8:	0003      	movs	r3, r0
 80011aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	3301      	adds	r3, #1
 80011b4:	d005      	beq.n	80011c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_Delay+0x44>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	001a      	movs	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	189b      	adds	r3, r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	f7ff ffe0 	bl	8001188 <HAL_GetTick>
 80011c8:	0002      	movs	r2, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f7      	bhi.n	80011c4 <HAL_Delay+0x28>
  {
  }
}
 80011d4:	46c0      	nop			; (mov r8, r8)
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	b004      	add	sp, #16
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	20000008 	.word	0x20000008

080011e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	0002      	movs	r2, r0
 80011ec:	1dfb      	adds	r3, r7, #7
 80011ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	1dfb      	adds	r3, r7, #7
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b7f      	cmp	r3, #127	; 0x7f
 80011f6:	d809      	bhi.n	800120c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f8:	1dfb      	adds	r3, r7, #7
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	001a      	movs	r2, r3
 80011fe:	231f      	movs	r3, #31
 8001200:	401a      	ands	r2, r3
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <__NVIC_EnableIRQ+0x30>)
 8001204:	2101      	movs	r1, #1
 8001206:	4091      	lsls	r1, r2
 8001208:	000a      	movs	r2, r1
 800120a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}
 8001214:	e000e100 	.word	0xe000e100

08001218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	0002      	movs	r2, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001226:	1dfb      	adds	r3, r7, #7
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b7f      	cmp	r3, #127	; 0x7f
 800122c:	d828      	bhi.n	8001280 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800122e:	4a2f      	ldr	r2, [pc, #188]	; (80012ec <__NVIC_SetPriority+0xd4>)
 8001230:	1dfb      	adds	r3, r7, #7
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b25b      	sxtb	r3, r3
 8001236:	089b      	lsrs	r3, r3, #2
 8001238:	33c0      	adds	r3, #192	; 0xc0
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	589b      	ldr	r3, [r3, r2]
 800123e:	1dfa      	adds	r2, r7, #7
 8001240:	7812      	ldrb	r2, [r2, #0]
 8001242:	0011      	movs	r1, r2
 8001244:	2203      	movs	r2, #3
 8001246:	400a      	ands	r2, r1
 8001248:	00d2      	lsls	r2, r2, #3
 800124a:	21ff      	movs	r1, #255	; 0xff
 800124c:	4091      	lsls	r1, r2
 800124e:	000a      	movs	r2, r1
 8001250:	43d2      	mvns	r2, r2
 8001252:	401a      	ands	r2, r3
 8001254:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	019b      	lsls	r3, r3, #6
 800125a:	22ff      	movs	r2, #255	; 0xff
 800125c:	401a      	ands	r2, r3
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	0018      	movs	r0, r3
 8001264:	2303      	movs	r3, #3
 8001266:	4003      	ands	r3, r0
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800126c:	481f      	ldr	r0, [pc, #124]	; (80012ec <__NVIC_SetPriority+0xd4>)
 800126e:	1dfb      	adds	r3, r7, #7
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b25b      	sxtb	r3, r3
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	430a      	orrs	r2, r1
 8001278:	33c0      	adds	r3, #192	; 0xc0
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800127e:	e031      	b.n	80012e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001280:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <__NVIC_SetPriority+0xd8>)
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	0019      	movs	r1, r3
 8001288:	230f      	movs	r3, #15
 800128a:	400b      	ands	r3, r1
 800128c:	3b08      	subs	r3, #8
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	3306      	adds	r3, #6
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	18d3      	adds	r3, r2, r3
 8001296:	3304      	adds	r3, #4
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	1dfa      	adds	r2, r7, #7
 800129c:	7812      	ldrb	r2, [r2, #0]
 800129e:	0011      	movs	r1, r2
 80012a0:	2203      	movs	r2, #3
 80012a2:	400a      	ands	r2, r1
 80012a4:	00d2      	lsls	r2, r2, #3
 80012a6:	21ff      	movs	r1, #255	; 0xff
 80012a8:	4091      	lsls	r1, r2
 80012aa:	000a      	movs	r2, r1
 80012ac:	43d2      	mvns	r2, r2
 80012ae:	401a      	ands	r2, r3
 80012b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	019b      	lsls	r3, r3, #6
 80012b6:	22ff      	movs	r2, #255	; 0xff
 80012b8:	401a      	ands	r2, r3
 80012ba:	1dfb      	adds	r3, r7, #7
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	0018      	movs	r0, r3
 80012c0:	2303      	movs	r3, #3
 80012c2:	4003      	ands	r3, r0
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012c8:	4809      	ldr	r0, [pc, #36]	; (80012f0 <__NVIC_SetPriority+0xd8>)
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	001c      	movs	r4, r3
 80012d0:	230f      	movs	r3, #15
 80012d2:	4023      	ands	r3, r4
 80012d4:	3b08      	subs	r3, #8
 80012d6:	089b      	lsrs	r3, r3, #2
 80012d8:	430a      	orrs	r2, r1
 80012da:	3306      	adds	r3, #6
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	18c3      	adds	r3, r0, r3
 80012e0:	3304      	adds	r3, #4
 80012e2:	601a      	str	r2, [r3, #0]
}
 80012e4:	46c0      	nop			; (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b003      	add	sp, #12
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	1e5a      	subs	r2, r3, #1
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	045b      	lsls	r3, r3, #17
 8001304:	429a      	cmp	r2, r3
 8001306:	d301      	bcc.n	800130c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001308:	2301      	movs	r3, #1
 800130a:	e010      	b.n	800132e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <SysTick_Config+0x44>)
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	3a01      	subs	r2, #1
 8001312:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001314:	2301      	movs	r3, #1
 8001316:	425b      	negs	r3, r3
 8001318:	2103      	movs	r1, #3
 800131a:	0018      	movs	r0, r3
 800131c:	f7ff ff7c 	bl	8001218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <SysTick_Config+0x44>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001326:	4b04      	ldr	r3, [pc, #16]	; (8001338 <SysTick_Config+0x44>)
 8001328:	2207      	movs	r2, #7
 800132a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800132c:	2300      	movs	r3, #0
}
 800132e:	0018      	movs	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	b002      	add	sp, #8
 8001334:	bd80      	pop	{r7, pc}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	e000e010 	.word	0xe000e010

0800133c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	210f      	movs	r1, #15
 8001348:	187b      	adds	r3, r7, r1
 800134a:	1c02      	adds	r2, r0, #0
 800134c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	187b      	adds	r3, r7, r1
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b25b      	sxtb	r3, r3
 8001356:	0011      	movs	r1, r2
 8001358:	0018      	movs	r0, r3
 800135a:	f7ff ff5d 	bl	8001218 <__NVIC_SetPriority>
}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	b004      	add	sp, #16
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	0002      	movs	r2, r0
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001372:	1dfb      	adds	r3, r7, #7
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	b25b      	sxtb	r3, r3
 8001378:	0018      	movs	r0, r3
 800137a:	f7ff ff33 	bl	80011e4 <__NVIC_EnableIRQ>
}
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	46bd      	mov	sp, r7
 8001382:	b002      	add	sp, #8
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	0018      	movs	r0, r3
 8001392:	f7ff ffaf 	bl	80012f4 <SysTick_Config>
 8001396:	0003      	movs	r3, r0
}
 8001398:	0018      	movs	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	b002      	add	sp, #8
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80013a4:	f7ff f822 	bl	80003ec <HAL_SYSTICK_Callback>
}
 80013a8:	46c0      	nop			; (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e077      	b.n	80014b2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a3d      	ldr	r2, [pc, #244]	; (80014bc <HAL_DMA_Init+0x10c>)
 80013c8:	4694      	mov	ip, r2
 80013ca:	4463      	add	r3, ip
 80013cc:	2114      	movs	r1, #20
 80013ce:	0018      	movs	r0, r3
 80013d0:	f7fe fe96 	bl	8000100 <__udivsi3>
 80013d4:	0003      	movs	r3, r0
 80013d6:	009a      	lsls	r2, r3, #2
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2225      	movs	r2, #37	; 0x25
 80013e0:	2102      	movs	r1, #2
 80013e2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4934      	ldr	r1, [pc, #208]	; (80014c0 <HAL_DMA_Init+0x110>)
 80013f0:	400a      	ands	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6819      	ldr	r1, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	0018      	movs	r0, r3
 800142e:	f000 fa99 	bl	8001964 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	01db      	lsls	r3, r3, #7
 800143a:	429a      	cmp	r2, r3
 800143c:	d102      	bne.n	8001444 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144c:	213f      	movs	r1, #63	; 0x3f
 800144e:	400a      	ands	r2, r1
 8001450:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800145a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d011      	beq.n	8001488 <HAL_DMA_Init+0xd8>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b04      	cmp	r3, #4
 800146a:	d80d      	bhi.n	8001488 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	0018      	movs	r0, r3
 8001470:	f000 faa4 	bl	80019bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	e008      	b.n	800149a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2225      	movs	r2, #37	; 0x25
 80014a4:	2101      	movs	r1, #1
 80014a6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2224      	movs	r2, #36	; 0x24
 80014ac:	2100      	movs	r1, #0
 80014ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	0018      	movs	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	b002      	add	sp, #8
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	bffdfff8 	.word	0xbffdfff8
 80014c0:	ffff800f 	.word	0xffff800f

080014c4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014d2:	2317      	movs	r3, #23
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2224      	movs	r2, #36	; 0x24
 80014de:	5c9b      	ldrb	r3, [r3, r2]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d101      	bne.n	80014e8 <HAL_DMA_Start_IT+0x24>
 80014e4:	2302      	movs	r3, #2
 80014e6:	e06f      	b.n	80015c8 <HAL_DMA_Start_IT+0x104>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2224      	movs	r2, #36	; 0x24
 80014ec:	2101      	movs	r1, #1
 80014ee:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2225      	movs	r2, #37	; 0x25
 80014f4:	5c9b      	ldrb	r3, [r3, r2]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d157      	bne.n	80015ac <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2225      	movs	r2, #37	; 0x25
 8001500:	2102      	movs	r1, #2
 8001502:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2101      	movs	r1, #1
 8001516:	438a      	bics	r2, r1
 8001518:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	68b9      	ldr	r1, [r7, #8]
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f000 f9df 	bl	80018e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	2b00      	cmp	r3, #0
 800152c:	d008      	beq.n	8001540 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	210e      	movs	r1, #14
 800153a:	430a      	orrs	r2, r1
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	e00f      	b.n	8001560 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2104      	movs	r1, #4
 800154c:	438a      	bics	r2, r1
 800154e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	210a      	movs	r1, #10
 800155c:	430a      	orrs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	025b      	lsls	r3, r3, #9
 800156a:	4013      	ands	r3, r2
 800156c:	d008      	beq.n	8001580 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001578:	2180      	movs	r1, #128	; 0x80
 800157a:	0049      	lsls	r1, r1, #1
 800157c:	430a      	orrs	r2, r1
 800157e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001584:	2b00      	cmp	r3, #0
 8001586:	d008      	beq.n	800159a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001592:	2180      	movs	r1, #128	; 0x80
 8001594:	0049      	lsls	r1, r1, #1
 8001596:	430a      	orrs	r2, r1
 8001598:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2101      	movs	r1, #1
 80015a6:	430a      	orrs	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	e00a      	b.n	80015c2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2280      	movs	r2, #128	; 0x80
 80015b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2224      	movs	r2, #36	; 0x24
 80015b6:	2100      	movs	r1, #0
 80015b8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80015ba:	2317      	movs	r3, #23
 80015bc:	18fb      	adds	r3, r7, r3
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80015c2:	2317      	movs	r3, #23
 80015c4:	18fb      	adds	r3, r7, r3
 80015c6:	781b      	ldrb	r3, [r3, #0]
}
 80015c8:	0018      	movs	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b006      	add	sp, #24
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e050      	b.n	8001684 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2225      	movs	r2, #37	; 0x25
 80015e6:	5c9b      	ldrb	r3, [r3, r2]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d008      	beq.n	8001600 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2204      	movs	r2, #4
 80015f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2224      	movs	r2, #36	; 0x24
 80015f8:	2100      	movs	r1, #0
 80015fa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e041      	b.n	8001684 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	210e      	movs	r1, #14
 800160c:	438a      	bics	r2, r1
 800160e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	491c      	ldr	r1, [pc, #112]	; (800168c <HAL_DMA_Abort+0xbc>)
 800161c:	400a      	ands	r2, r1
 800161e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2101      	movs	r1, #1
 800162c:	438a      	bics	r2, r1
 800162e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_DMA_Abort+0xc0>)
 8001632:	6859      	ldr	r1, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	221c      	movs	r2, #28
 800163a:	4013      	ands	r3, r2
 800163c:	2201      	movs	r2, #1
 800163e:	409a      	lsls	r2, r3
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <HAL_DMA_Abort+0xc0>)
 8001642:	430a      	orrs	r2, r1
 8001644:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800164e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00c      	beq.n	8001672 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001662:	490a      	ldr	r1, [pc, #40]	; (800168c <HAL_DMA_Abort+0xbc>)
 8001664:	400a      	ands	r2, r1
 8001666:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001670:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2225      	movs	r2, #37	; 0x25
 8001676:	2101      	movs	r1, #1
 8001678:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2224      	movs	r2, #36	; 0x24
 800167e:	2100      	movs	r1, #0
 8001680:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	b002      	add	sp, #8
 800168a:	bd80      	pop	{r7, pc}
 800168c:	fffffeff 	.word	0xfffffeff
 8001690:	40020000 	.word	0x40020000

08001694 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800169c:	210f      	movs	r1, #15
 800169e:	187b      	adds	r3, r7, r1
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2225      	movs	r2, #37	; 0x25
 80016a8:	5c9b      	ldrb	r3, [r3, r2]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d006      	beq.n	80016be <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2204      	movs	r2, #4
 80016b4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016b6:	187b      	adds	r3, r7, r1
 80016b8:	2201      	movs	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]
 80016bc:	e049      	b.n	8001752 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	210e      	movs	r1, #14
 80016ca:	438a      	bics	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2101      	movs	r1, #1
 80016da:	438a      	bics	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e8:	491d      	ldr	r1, [pc, #116]	; (8001760 <HAL_DMA_Abort_IT+0xcc>)
 80016ea:	400a      	ands	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80016ee:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <HAL_DMA_Abort_IT+0xd0>)
 80016f0:	6859      	ldr	r1, [r3, #4]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	221c      	movs	r2, #28
 80016f8:	4013      	ands	r3, r2
 80016fa:	2201      	movs	r2, #1
 80016fc:	409a      	lsls	r2, r3
 80016fe:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_DMA_Abort_IT+0xd0>)
 8001700:	430a      	orrs	r2, r1
 8001702:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800170c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00c      	beq.n	8001730 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001720:	490f      	ldr	r1, [pc, #60]	; (8001760 <HAL_DMA_Abort_IT+0xcc>)
 8001722:	400a      	ands	r2, r1
 8001724:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800172e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2225      	movs	r2, #37	; 0x25
 8001734:	2101      	movs	r1, #1
 8001736:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2224      	movs	r2, #36	; 0x24
 800173c:	2100      	movs	r1, #0
 800173e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	0010      	movs	r0, r2
 8001750:	4798      	blx	r3
    }
  }
  return status;
 8001752:	230f      	movs	r3, #15
 8001754:	18fb      	adds	r3, r7, r3
 8001756:	781b      	ldrb	r3, [r3, #0]
}
 8001758:	0018      	movs	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	b004      	add	sp, #16
 800175e:	bd80      	pop	{r7, pc}
 8001760:	fffffeff 	.word	0xfffffeff
 8001764:	40020000 	.word	0x40020000

08001768 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001770:	4b55      	ldr	r3, [pc, #340]	; (80018c8 <HAL_DMA_IRQHandler+0x160>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	221c      	movs	r2, #28
 8001784:	4013      	ands	r3, r2
 8001786:	2204      	movs	r2, #4
 8001788:	409a      	lsls	r2, r3
 800178a:	0013      	movs	r3, r2
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	4013      	ands	r3, r2
 8001790:	d027      	beq.n	80017e2 <HAL_DMA_IRQHandler+0x7a>
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2204      	movs	r2, #4
 8001796:	4013      	ands	r3, r2
 8001798:	d023      	beq.n	80017e2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2220      	movs	r2, #32
 80017a2:	4013      	ands	r3, r2
 80017a4:	d107      	bne.n	80017b6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2104      	movs	r1, #4
 80017b2:	438a      	bics	r2, r1
 80017b4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80017b6:	4b44      	ldr	r3, [pc, #272]	; (80018c8 <HAL_DMA_IRQHandler+0x160>)
 80017b8:	6859      	ldr	r1, [r3, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	221c      	movs	r2, #28
 80017c0:	4013      	ands	r3, r2
 80017c2:	2204      	movs	r2, #4
 80017c4:	409a      	lsls	r2, r3
 80017c6:	4b40      	ldr	r3, [pc, #256]	; (80018c8 <HAL_DMA_IRQHandler+0x160>)
 80017c8:	430a      	orrs	r2, r1
 80017ca:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d100      	bne.n	80017d6 <HAL_DMA_IRQHandler+0x6e>
 80017d4:	e073      	b.n	80018be <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	0010      	movs	r0, r2
 80017de:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80017e0:	e06d      	b.n	80018be <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	221c      	movs	r2, #28
 80017e8:	4013      	ands	r3, r2
 80017ea:	2202      	movs	r2, #2
 80017ec:	409a      	lsls	r2, r3
 80017ee:	0013      	movs	r3, r2
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	4013      	ands	r3, r2
 80017f4:	d02e      	beq.n	8001854 <HAL_DMA_IRQHandler+0xec>
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2202      	movs	r2, #2
 80017fa:	4013      	ands	r3, r2
 80017fc:	d02a      	beq.n	8001854 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2220      	movs	r2, #32
 8001806:	4013      	ands	r3, r2
 8001808:	d10b      	bne.n	8001822 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	210a      	movs	r1, #10
 8001816:	438a      	bics	r2, r1
 8001818:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2225      	movs	r2, #37	; 0x25
 800181e:	2101      	movs	r1, #1
 8001820:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001822:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <HAL_DMA_IRQHandler+0x160>)
 8001824:	6859      	ldr	r1, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	221c      	movs	r2, #28
 800182c:	4013      	ands	r3, r2
 800182e:	2202      	movs	r2, #2
 8001830:	409a      	lsls	r2, r3
 8001832:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <HAL_DMA_IRQHandler+0x160>)
 8001834:	430a      	orrs	r2, r1
 8001836:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2224      	movs	r2, #36	; 0x24
 800183c:	2100      	movs	r1, #0
 800183e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	2b00      	cmp	r3, #0
 8001846:	d03a      	beq.n	80018be <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	0010      	movs	r0, r2
 8001850:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001852:	e034      	b.n	80018be <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	221c      	movs	r2, #28
 800185a:	4013      	ands	r3, r2
 800185c:	2208      	movs	r2, #8
 800185e:	409a      	lsls	r2, r3
 8001860:	0013      	movs	r3, r2
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	4013      	ands	r3, r2
 8001866:	d02b      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x158>
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2208      	movs	r2, #8
 800186c:	4013      	ands	r3, r2
 800186e:	d027      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	210e      	movs	r1, #14
 800187c:	438a      	bics	r2, r1
 800187e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <HAL_DMA_IRQHandler+0x160>)
 8001882:	6859      	ldr	r1, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	221c      	movs	r2, #28
 800188a:	4013      	ands	r3, r2
 800188c:	2201      	movs	r2, #1
 800188e:	409a      	lsls	r2, r3
 8001890:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <HAL_DMA_IRQHandler+0x160>)
 8001892:	430a      	orrs	r2, r1
 8001894:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2225      	movs	r2, #37	; 0x25
 80018a0:	2101      	movs	r1, #1
 80018a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2224      	movs	r2, #36	; 0x24
 80018a8:	2100      	movs	r1, #0
 80018aa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	0010      	movs	r0, r2
 80018bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	46c0      	nop			; (mov r8, r8)
}
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b004      	add	sp, #16
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40020000 	.word	0x40020000

080018cc <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2225      	movs	r2, #37	; 0x25
 80018d8:	5c9b      	ldrb	r3, [r3, r2]
 80018da:	b2db      	uxtb	r3, r3
}
 80018dc:	0018      	movs	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	b002      	add	sp, #8
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
 80018f0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80018fa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001900:	2b00      	cmp	r3, #0
 8001902:	d004      	beq.n	800190e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800190c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <DMA_SetConfig+0x7c>)
 8001910:	6859      	ldr	r1, [r3, #4]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	221c      	movs	r2, #28
 8001918:	4013      	ands	r3, r2
 800191a:	2201      	movs	r2, #1
 800191c:	409a      	lsls	r2, r3
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <DMA_SetConfig+0x7c>)
 8001920:	430a      	orrs	r2, r1
 8001922:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b10      	cmp	r3, #16
 8001932:	d108      	bne.n	8001946 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001944:	e007      	b.n	8001956 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	60da      	str	r2, [r3, #12]
}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	46bd      	mov	sp, r7
 800195a:	b004      	add	sp, #16
 800195c:	bd80      	pop	{r7, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	40020000 	.word	0x40020000

08001964 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	4a10      	ldr	r2, [pc, #64]	; (80019b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001974:	4694      	mov	ip, r2
 8001976:	4463      	add	r3, ip
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	001a      	movs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	001a      	movs	r2, r3
 8001986:	23ff      	movs	r3, #255	; 0xff
 8001988:	4013      	ands	r3, r2
 800198a:	3b08      	subs	r3, #8
 800198c:	2114      	movs	r1, #20
 800198e:	0018      	movs	r0, r3
 8001990:	f7fe fbb6 	bl	8000100 <__udivsi3>
 8001994:	0003      	movs	r3, r0
 8001996:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800199c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	221f      	movs	r2, #31
 80019a2:	4013      	ands	r3, r2
 80019a4:	2201      	movs	r2, #1
 80019a6:	409a      	lsls	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b004      	add	sp, #16
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	10008200 	.word	0x10008200
 80019b8:	40020880 	.word	0x40020880

080019bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	223f      	movs	r2, #63	; 0x3f
 80019ca:	4013      	ands	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80019d2:	4694      	mov	ip, r2
 80019d4:	4463      	add	r3, ip
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	001a      	movs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80019e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	2203      	movs	r2, #3
 80019ea:	4013      	ands	r3, r2
 80019ec:	2201      	movs	r2, #1
 80019ee:	409a      	lsls	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	659a      	str	r2, [r3, #88]	; 0x58
}
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b004      	add	sp, #16
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	1000823f 	.word	0x1000823f
 8001a00:	40020940 	.word	0x40020940

08001a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a12:	e147      	b.n	8001ca4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2101      	movs	r1, #1
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4091      	lsls	r1, r2
 8001a1e:	000a      	movs	r2, r1
 8001a20:	4013      	ands	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d100      	bne.n	8001a2c <HAL_GPIO_Init+0x28>
 8001a2a:	e138      	b.n	8001c9e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2203      	movs	r2, #3
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d005      	beq.n	8001a44 <HAL_GPIO_Init+0x40>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d130      	bne.n	8001aa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	409a      	lsls	r2, r3
 8001a52:	0013      	movs	r3, r2
 8001a54:	43da      	mvns	r2, r3
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	409a      	lsls	r2, r3
 8001a66:	0013      	movs	r3, r2
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	0013      	movs	r3, r2
 8001a82:	43da      	mvns	r2, r3
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	091b      	lsrs	r3, r3, #4
 8001a90:	2201      	movs	r2, #1
 8001a92:	401a      	ands	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	409a      	lsls	r2, r3
 8001a98:	0013      	movs	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2203      	movs	r2, #3
 8001aac:	4013      	ands	r3, r2
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d017      	beq.n	8001ae2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	2203      	movs	r2, #3
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	0013      	movs	r3, r2
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	0013      	movs	r3, r2
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d123      	bne.n	8001b36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	08da      	lsrs	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3208      	adds	r2, #8
 8001af6:	0092      	lsls	r2, r2, #2
 8001af8:	58d3      	ldr	r3, [r2, r3]
 8001afa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2207      	movs	r2, #7
 8001b00:	4013      	ands	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	220f      	movs	r2, #15
 8001b06:	409a      	lsls	r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	43da      	mvns	r2, r3
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	691a      	ldr	r2, [r3, #16]
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	2107      	movs	r1, #7
 8001b1a:	400b      	ands	r3, r1
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	0013      	movs	r3, r2
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	08da      	lsrs	r2, r3, #3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3208      	adds	r2, #8
 8001b30:	0092      	lsls	r2, r2, #2
 8001b32:	6939      	ldr	r1, [r7, #16]
 8001b34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	2203      	movs	r2, #3
 8001b42:	409a      	lsls	r2, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	43da      	mvns	r2, r3
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2203      	movs	r2, #3
 8001b54:	401a      	ands	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	0013      	movs	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	23c0      	movs	r3, #192	; 0xc0
 8001b70:	029b      	lsls	r3, r3, #10
 8001b72:	4013      	ands	r3, r2
 8001b74:	d100      	bne.n	8001b78 <HAL_GPIO_Init+0x174>
 8001b76:	e092      	b.n	8001c9e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001b78:	4a50      	ldr	r2, [pc, #320]	; (8001cbc <HAL_GPIO_Init+0x2b8>)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	089b      	lsrs	r3, r3, #2
 8001b7e:	3318      	adds	r3, #24
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	589b      	ldr	r3, [r3, r2]
 8001b84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2203      	movs	r2, #3
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	220f      	movs	r2, #15
 8001b90:	409a      	lsls	r2, r3
 8001b92:	0013      	movs	r3, r2
 8001b94:	43da      	mvns	r2, r3
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	23a0      	movs	r3, #160	; 0xa0
 8001ba0:	05db      	lsls	r3, r3, #23
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d013      	beq.n	8001bce <HAL_GPIO_Init+0x1ca>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a45      	ldr	r2, [pc, #276]	; (8001cc0 <HAL_GPIO_Init+0x2bc>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d00d      	beq.n	8001bca <HAL_GPIO_Init+0x1c6>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a44      	ldr	r2, [pc, #272]	; (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d007      	beq.n	8001bc6 <HAL_GPIO_Init+0x1c2>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a43      	ldr	r2, [pc, #268]	; (8001cc8 <HAL_GPIO_Init+0x2c4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d101      	bne.n	8001bc2 <HAL_GPIO_Init+0x1be>
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e006      	b.n	8001bd0 <HAL_GPIO_Init+0x1cc>
 8001bc2:	2305      	movs	r3, #5
 8001bc4:	e004      	b.n	8001bd0 <HAL_GPIO_Init+0x1cc>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e002      	b.n	8001bd0 <HAL_GPIO_Init+0x1cc>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_GPIO_Init+0x1cc>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	2103      	movs	r1, #3
 8001bd4:	400a      	ands	r2, r1
 8001bd6:	00d2      	lsls	r2, r2, #3
 8001bd8:	4093      	lsls	r3, r2
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001be0:	4936      	ldr	r1, [pc, #216]	; (8001cbc <HAL_GPIO_Init+0x2b8>)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	089b      	lsrs	r3, r3, #2
 8001be6:	3318      	adds	r3, #24
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bee:	4a33      	ldr	r2, [pc, #204]	; (8001cbc <HAL_GPIO_Init+0x2b8>)
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	58d3      	ldr	r3, [r2, r3]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	43da      	mvns	r2, r3
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	025b      	lsls	r3, r3, #9
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c14:	4929      	ldr	r1, [pc, #164]	; (8001cbc <HAL_GPIO_Init+0x2b8>)
 8001c16:	2280      	movs	r2, #128	; 0x80
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001c1c:	4a27      	ldr	r2, [pc, #156]	; (8001cbc <HAL_GPIO_Init+0x2b8>)
 8001c1e:	2384      	movs	r3, #132	; 0x84
 8001c20:	58d3      	ldr	r3, [r2, r3]
 8001c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	43da      	mvns	r2, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	029b      	lsls	r3, r3, #10
 8001c36:	4013      	ands	r3, r2
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c42:	491e      	ldr	r1, [pc, #120]	; (8001cbc <HAL_GPIO_Init+0x2b8>)
 8001c44:	2284      	movs	r2, #132	; 0x84
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c4a:	4b1c      	ldr	r3, [pc, #112]	; (8001cbc <HAL_GPIO_Init+0x2b8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	43da      	mvns	r2, r3
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	035b      	lsls	r3, r3, #13
 8001c62:	4013      	ands	r3, r2
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c6e:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <HAL_GPIO_Init+0x2b8>)
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <HAL_GPIO_Init+0x2b8>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	43da      	mvns	r2, r3
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	039b      	lsls	r3, r3, #14
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <HAL_GPIO_Init+0x2b8>)
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	40da      	lsrs	r2, r3
 8001cac:	1e13      	subs	r3, r2, #0
 8001cae:	d000      	beq.n	8001cb2 <HAL_GPIO_Init+0x2ae>
 8001cb0:	e6b0      	b.n	8001a14 <HAL_GPIO_Init+0x10>
  }
}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	46c0      	nop			; (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b006      	add	sp, #24
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021800 	.word	0x40021800
 8001cc0:	50000400 	.word	0x50000400
 8001cc4:	50000800 	.word	0x50000800
 8001cc8:	50000c00 	.word	0x50000c00

08001ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	0008      	movs	r0, r1
 8001cd6:	0011      	movs	r1, r2
 8001cd8:	1cbb      	adds	r3, r7, #2
 8001cda:	1c02      	adds	r2, r0, #0
 8001cdc:	801a      	strh	r2, [r3, #0]
 8001cde:	1c7b      	adds	r3, r7, #1
 8001ce0:	1c0a      	adds	r2, r1, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ce4:	1c7b      	adds	r3, r7, #1
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d004      	beq.n	8001cf6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cec:	1cbb      	adds	r3, r7, #2
 8001cee:	881a      	ldrh	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cf4:	e003      	b.n	8001cfe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cf6:	1cbb      	adds	r3, r7, #2
 8001cf8:	881a      	ldrh	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b002      	add	sp, #8
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e082      	b.n	8001e20 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2241      	movs	r2, #65	; 0x41
 8001d1e:	5c9b      	ldrb	r3, [r3, r2]
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d107      	bne.n	8001d36 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2240      	movs	r2, #64	; 0x40
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	0018      	movs	r0, r3
 8001d32:	f7fe ff79 	bl	8000c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2241      	movs	r2, #65	; 0x41
 8001d3a:	2124      	movs	r1, #36	; 0x24
 8001d3c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2101      	movs	r1, #1
 8001d4a:	438a      	bics	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4934      	ldr	r1, [pc, #208]	; (8001e28 <HAL_I2C_Init+0x120>)
 8001d58:	400a      	ands	r2, r1
 8001d5a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4931      	ldr	r1, [pc, #196]	; (8001e2c <HAL_I2C_Init+0x124>)
 8001d68:	400a      	ands	r2, r1
 8001d6a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d108      	bne.n	8001d86 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2180      	movs	r1, #128	; 0x80
 8001d7e:	0209      	lsls	r1, r1, #8
 8001d80:	430a      	orrs	r2, r1
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	e007      	b.n	8001d96 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2184      	movs	r1, #132	; 0x84
 8001d90:	0209      	lsls	r1, r1, #8
 8001d92:	430a      	orrs	r2, r1
 8001d94:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d104      	bne.n	8001da8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	0112      	lsls	r2, r2, #4
 8001da6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	491f      	ldr	r1, [pc, #124]	; (8001e30 <HAL_I2C_Init+0x128>)
 8001db4:	430a      	orrs	r2, r1
 8001db6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	491a      	ldr	r1, [pc, #104]	; (8001e2c <HAL_I2C_Init+0x124>)
 8001dc4:	400a      	ands	r2, r1
 8001dc6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69d9      	ldr	r1, [r3, #28]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a1a      	ldr	r2, [r3, #32]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2241      	movs	r2, #65	; 0x41
 8001e0c:	2120      	movs	r1, #32
 8001e0e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2242      	movs	r2, #66	; 0x42
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	0018      	movs	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b002      	add	sp, #8
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	f0ffffff 	.word	0xf0ffffff
 8001e2c:	ffff7fff 	.word	0xffff7fff
 8001e30:	02008000 	.word	0x02008000

08001e34 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	68f9      	ldr	r1, [r7, #12]
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	4798      	blx	r3
  }
}
 8001e60:	46c0      	nop			; (mov r8, r8)
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b004      	add	sp, #16
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	001a      	movs	r2, r3
 8001e86:	2301      	movs	r3, #1
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d010      	beq.n	8001eae <HAL_I2C_ER_IRQHandler+0x46>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	09db      	lsrs	r3, r3, #7
 8001e90:	001a      	movs	r2, r3
 8001e92:	2301      	movs	r3, #1
 8001e94:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001e96:	d00a      	beq.n	8001eae <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2280      	movs	r2, #128	; 0x80
 8001eaa:	0052      	lsls	r2, r2, #1
 8001eac:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	0a9b      	lsrs	r3, r3, #10
 8001eb2:	001a      	movs	r2, r3
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d010      	beq.n	8001edc <HAL_I2C_ER_IRQHandler+0x74>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	09db      	lsrs	r3, r3, #7
 8001ebe:	001a      	movs	r2, r3
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001ec4:	d00a      	beq.n	8001edc <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	2208      	movs	r2, #8
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2280      	movs	r2, #128	; 0x80
 8001ed8:	00d2      	lsls	r2, r2, #3
 8001eda:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	0a5b      	lsrs	r3, r3, #9
 8001ee0:	001a      	movs	r2, r3
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d010      	beq.n	8001f0a <HAL_I2C_ER_IRQHandler+0xa2>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	09db      	lsrs	r3, r3, #7
 8001eec:	001a      	movs	r2, r3
 8001eee:	2301      	movs	r3, #1
 8001ef0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001ef2:	d00a      	beq.n	8001f0a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	2202      	movs	r2, #2
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2280      	movs	r2, #128	; 0x80
 8001f06:	0092      	lsls	r2, r2, #2
 8001f08:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	220b      	movs	r2, #11
 8001f14:	4013      	ands	r3, r2
 8001f16:	d005      	beq.n	8001f24 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	0011      	movs	r1, r2
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f000 fbd8 	bl	80026d4 <I2C_ITError>
  }
}
 8001f24:	46c0      	nop			; (mov r8, r8)
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b006      	add	sp, #24
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001f34:	46c0      	nop			; (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b002      	add	sp, #8
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001f44:	46c0      	nop			; (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b002      	add	sp, #8
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	0008      	movs	r0, r1
 8001f56:	0011      	movs	r1, r2
 8001f58:	1cfb      	adds	r3, r7, #3
 8001f5a:	1c02      	adds	r2, r0, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
 8001f5e:	003b      	movs	r3, r7
 8001f60:	1c0a      	adds	r2, r1, #0
 8001f62:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001f64:	46c0      	nop			; (mov r8, r8)
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b002      	add	sp, #8
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001f74:	46c0      	nop			; (mov r8, r8)
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b002      	add	sp, #8
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001f84:	46c0      	nop			; (mov r8, r8)
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b002      	add	sp, #8
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001f94:	46c0      	nop			; (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b002      	add	sp, #8
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                             uint32_t ITSources)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2240      	movs	r2, #64	; 0x40
 8001fb6:	5c9b      	ldrb	r3, [r3, r2]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <I2C_Slave_ISR_IT+0x24>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e0fa      	b.n	80021b6 <I2C_Slave_ISR_IT+0x21a>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2240      	movs	r2, #64	; 0x40
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	001a      	movs	r2, r3
 8001fce:	2301      	movs	r3, #1
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d00b      	beq.n	8001fec <I2C_Slave_ISR_IT+0x50>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	001a      	movs	r2, r3
 8001fda:	2301      	movs	r3, #1
 8001fdc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001fde:	d005      	beq.n	8001fec <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	0011      	movs	r1, r2
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f000 f9f6 	bl	80023d8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	001a      	movs	r2, r3
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d054      	beq.n	80020a2 <I2C_Slave_ISR_IT+0x106>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	001a      	movs	r2, r3
 8001ffe:	2301      	movs	r3, #1
 8002000:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002002:	d04e      	beq.n	80020a2 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002008:	b29b      	uxth	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d12d      	bne.n	800206a <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2241      	movs	r2, #65	; 0x41
 8002012:	5c9b      	ldrb	r3, [r3, r2]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b28      	cmp	r3, #40	; 0x28
 8002018:	d10b      	bne.n	8002032 <I2C_Slave_ISR_IT+0x96>
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	049b      	lsls	r3, r3, #18
 8002020:	429a      	cmp	r2, r3
 8002022:	d106      	bne.n	8002032 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	0011      	movs	r1, r2
 800202a:	0018      	movs	r0, r3
 800202c:	f000 faf8 	bl	8002620 <I2C_ITListenCplt>
 8002030:	e036      	b.n	80020a0 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2241      	movs	r2, #65	; 0x41
 8002036:	5c9b      	ldrb	r3, [r3, r2]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b29      	cmp	r3, #41	; 0x29
 800203c:	d110      	bne.n	8002060 <I2C_Slave_ISR_IT+0xc4>
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	4a5f      	ldr	r2, [pc, #380]	; (80021c0 <I2C_Slave_ISR_IT+0x224>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00c      	beq.n	8002060 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2210      	movs	r2, #16
 800204c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	0018      	movs	r0, r3
 8002052:	f000 fc4a 	bl	80028ea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	0018      	movs	r0, r3
 800205a:	f000 f957 	bl	800230c <I2C_ITSlaveSeqCplt>
 800205e:	e01f      	b.n	80020a0 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2210      	movs	r2, #16
 8002066:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002068:	e09d      	b.n	80021a6 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2210      	movs	r2, #16
 8002070:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	2204      	movs	r2, #4
 8002078:	431a      	orrs	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <I2C_Slave_ISR_IT+0xf4>
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	045b      	lsls	r3, r3, #17
 800208a:	429a      	cmp	r2, r3
 800208c:	d000      	beq.n	8002090 <I2C_Slave_ISR_IT+0xf4>
 800208e:	e08a      	b.n	80021a6 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	0011      	movs	r1, r2
 8002098:	0018      	movs	r0, r3
 800209a:	f000 fb1b 	bl	80026d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800209e:	e082      	b.n	80021a6 <I2C_Slave_ISR_IT+0x20a>
 80020a0:	e081      	b.n	80021a6 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	001a      	movs	r2, r3
 80020a8:	2301      	movs	r3, #1
 80020aa:	4013      	ands	r3, r2
 80020ac:	d031      	beq.n	8002112 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	001a      	movs	r2, r3
 80020b4:	2301      	movs	r3, #1
 80020b6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80020b8:	d02b      	beq.n	8002112 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020be:	b29b      	uxth	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d018      	beq.n	80020f6 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d154      	bne.n	80021aa <I2C_Slave_ISR_IT+0x20e>
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	4a2f      	ldr	r2, [pc, #188]	; (80021c0 <I2C_Slave_ISR_IT+0x224>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d050      	beq.n	80021aa <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	0018      	movs	r0, r3
 800210c:	f000 f8fe 	bl	800230c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002110:	e04b      	b.n	80021aa <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	08db      	lsrs	r3, r3, #3
 8002116:	001a      	movs	r2, r3
 8002118:	2301      	movs	r3, #1
 800211a:	4013      	ands	r3, r2
 800211c:	d00c      	beq.n	8002138 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	001a      	movs	r2, r3
 8002124:	2301      	movs	r3, #1
 8002126:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002128:	d006      	beq.n	8002138 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	0011      	movs	r1, r2
 8002130:	0018      	movs	r0, r3
 8002132:	f000 f847 	bl	80021c4 <I2C_ITAddrCplt>
 8002136:	e039      	b.n	80021ac <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	085b      	lsrs	r3, r3, #1
 800213c:	001a      	movs	r2, r3
 800213e:	2301      	movs	r3, #1
 8002140:	4013      	ands	r3, r2
 8002142:	d033      	beq.n	80021ac <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	001a      	movs	r2, r3
 800214a:	2301      	movs	r3, #1
 800214c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800214e:	d02d      	beq.n	80021ac <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002154:	b29b      	uxth	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d018      	beq.n	800218c <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	781a      	ldrb	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002174:	b29b      	uxth	r3, r3
 8002176:	3b01      	subs	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002182:	3b01      	subs	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	851a      	strh	r2, [r3, #40]	; 0x28
 800218a:	e00f      	b.n	80021ac <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	045b      	lsls	r3, r3, #17
 8002192:	429a      	cmp	r2, r3
 8002194:	d002      	beq.n	800219c <I2C_Slave_ISR_IT+0x200>
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d107      	bne.n	80021ac <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	0018      	movs	r0, r3
 80021a0:	f000 f8b4 	bl	800230c <I2C_ITSlaveSeqCplt>
 80021a4:	e002      	b.n	80021ac <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	e000      	b.n	80021ac <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80021aa:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2240      	movs	r2, #64	; 0x40
 80021b0:	2100      	movs	r1, #0
 80021b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	0018      	movs	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	b006      	add	sp, #24
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	ffff0000 	.word	0xffff0000

080021c4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80021c4:	b5b0      	push	{r4, r5, r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2241      	movs	r2, #65	; 0x41
 80021d2:	5c9b      	ldrb	r3, [r3, r2]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	001a      	movs	r2, r3
 80021d8:	2328      	movs	r3, #40	; 0x28
 80021da:	4013      	ands	r3, r2
 80021dc:	2b28      	cmp	r3, #40	; 0x28
 80021de:	d000      	beq.n	80021e2 <I2C_ITAddrCplt+0x1e>
 80021e0:	e088      	b.n	80022f4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	0c1b      	lsrs	r3, r3, #16
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	250f      	movs	r5, #15
 80021ee:	197b      	adds	r3, r7, r5
 80021f0:	2101      	movs	r1, #1
 80021f2:	400a      	ands	r2, r1
 80021f4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	0c1b      	lsrs	r3, r3, #16
 80021fe:	b29a      	uxth	r2, r3
 8002200:	200c      	movs	r0, #12
 8002202:	183b      	adds	r3, r7, r0
 8002204:	21fe      	movs	r1, #254	; 0xfe
 8002206:	400a      	ands	r2, r1
 8002208:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	b29a      	uxth	r2, r3
 8002212:	240a      	movs	r4, #10
 8002214:	193b      	adds	r3, r7, r4
 8002216:	0592      	lsls	r2, r2, #22
 8002218:	0d92      	lsrs	r2, r2, #22
 800221a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	b29a      	uxth	r2, r3
 8002224:	2308      	movs	r3, #8
 8002226:	18fb      	adds	r3, r7, r3
 8002228:	21fe      	movs	r1, #254	; 0xfe
 800222a:	400a      	ands	r2, r1
 800222c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d148      	bne.n	80022c8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002236:	0021      	movs	r1, r4
 8002238:	187b      	adds	r3, r7, r1
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	09db      	lsrs	r3, r3, #7
 800223e:	b29a      	uxth	r2, r3
 8002240:	183b      	adds	r3, r7, r0
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	4053      	eors	r3, r2
 8002246:	b29b      	uxth	r3, r3
 8002248:	001a      	movs	r2, r3
 800224a:	2306      	movs	r3, #6
 800224c:	4013      	ands	r3, r2
 800224e:	d120      	bne.n	8002292 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8002250:	183b      	adds	r3, r7, r0
 8002252:	187a      	adds	r2, r7, r1
 8002254:	8812      	ldrh	r2, [r2, #0]
 8002256:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002266:	2b02      	cmp	r3, #2
 8002268:	d14c      	bne.n	8002304 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2208      	movs	r2, #8
 8002276:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2240      	movs	r2, #64	; 0x40
 800227c:	2100      	movs	r1, #0
 800227e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002280:	183b      	adds	r3, r7, r0
 8002282:	881a      	ldrh	r2, [r3, #0]
 8002284:	197b      	adds	r3, r7, r5
 8002286:	7819      	ldrb	r1, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	0018      	movs	r0, r3
 800228c:	f7ff fe5e 	bl	8001f4c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002290:	e038      	b.n	8002304 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8002292:	240c      	movs	r4, #12
 8002294:	193b      	adds	r3, r7, r4
 8002296:	2208      	movs	r2, #8
 8002298:	18ba      	adds	r2, r7, r2
 800229a:	8812      	ldrh	r2, [r2, #0]
 800229c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	021a      	lsls	r2, r3, #8
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	0011      	movs	r1, r2
 80022a6:	0018      	movs	r0, r3
 80022a8:	f000 fb60 	bl	800296c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2240      	movs	r2, #64	; 0x40
 80022b0:	2100      	movs	r1, #0
 80022b2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80022b4:	193b      	adds	r3, r7, r4
 80022b6:	881a      	ldrh	r2, [r3, #0]
 80022b8:	230f      	movs	r3, #15
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	7819      	ldrb	r1, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	0018      	movs	r0, r3
 80022c2:	f7ff fe43 	bl	8001f4c <HAL_I2C_AddrCallback>
}
 80022c6:	e01d      	b.n	8002304 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	021a      	lsls	r2, r3, #8
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	0011      	movs	r1, r2
 80022d0:	0018      	movs	r0, r3
 80022d2:	f000 fb4b 	bl	800296c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2240      	movs	r2, #64	; 0x40
 80022da:	2100      	movs	r1, #0
 80022dc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80022de:	230c      	movs	r3, #12
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	881a      	ldrh	r2, [r3, #0]
 80022e4:	230f      	movs	r3, #15
 80022e6:	18fb      	adds	r3, r7, r3
 80022e8:	7819      	ldrb	r1, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	0018      	movs	r0, r3
 80022ee:	f7ff fe2d 	bl	8001f4c <HAL_I2C_AddrCallback>
}
 80022f2:	e007      	b.n	8002304 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2208      	movs	r2, #8
 80022fa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2240      	movs	r2, #64	; 0x40
 8002300:	2100      	movs	r1, #0
 8002302:	5499      	strb	r1, [r3, r2]
}
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	b004      	add	sp, #16
 800230a:	bdb0      	pop	{r4, r5, r7, pc}

0800230c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2242      	movs	r2, #66	; 0x42
 8002320:	2100      	movs	r1, #0
 8002322:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	0b9b      	lsrs	r3, r3, #14
 8002328:	001a      	movs	r2, r3
 800232a:	2301      	movs	r3, #1
 800232c:	4013      	ands	r3, r2
 800232e:	d008      	beq.n	8002342 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4925      	ldr	r1, [pc, #148]	; (80023d0 <I2C_ITSlaveSeqCplt+0xc4>)
 800233c:	400a      	ands	r2, r1
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e00d      	b.n	800235e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	0bdb      	lsrs	r3, r3, #15
 8002346:	001a      	movs	r2, r3
 8002348:	2301      	movs	r3, #1
 800234a:	4013      	ands	r3, r2
 800234c:	d007      	beq.n	800235e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	491e      	ldr	r1, [pc, #120]	; (80023d4 <I2C_ITSlaveSeqCplt+0xc8>)
 800235a:	400a      	ands	r2, r1
 800235c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2241      	movs	r2, #65	; 0x41
 8002362:	5c9b      	ldrb	r3, [r3, r2]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b29      	cmp	r3, #41	; 0x29
 8002368:	d114      	bne.n	8002394 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2241      	movs	r2, #65	; 0x41
 800236e:	2128      	movs	r1, #40	; 0x28
 8002370:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2221      	movs	r2, #33	; 0x21
 8002376:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2101      	movs	r1, #1
 800237c:	0018      	movs	r0, r3
 800237e:	f000 faf5 	bl	800296c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2240      	movs	r2, #64	; 0x40
 8002386:	2100      	movs	r1, #0
 8002388:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	0018      	movs	r0, r3
 800238e:	f7ff fdcd 	bl	8001f2c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002392:	e019      	b.n	80023c8 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2241      	movs	r2, #65	; 0x41
 8002398:	5c9b      	ldrb	r3, [r3, r2]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b2a      	cmp	r3, #42	; 0x2a
 800239e:	d113      	bne.n	80023c8 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2241      	movs	r2, #65	; 0x41
 80023a4:	2128      	movs	r1, #40	; 0x28
 80023a6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2222      	movs	r2, #34	; 0x22
 80023ac:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2102      	movs	r1, #2
 80023b2:	0018      	movs	r0, r3
 80023b4:	f000 fada 	bl	800296c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2240      	movs	r2, #64	; 0x40
 80023bc:	2100      	movs	r1, #0
 80023be:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	0018      	movs	r0, r3
 80023c4:	f7ff fdba 	bl	8001f3c <HAL_I2C_SlaveRxCpltCallback>
}
 80023c8:	46c0      	nop			; (mov r8, r8)
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b004      	add	sp, #16
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	ffffbfff 	.word	0xffffbfff
 80023d4:	ffff7fff 	.word	0xffff7fff

080023d8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80023ee:	200f      	movs	r0, #15
 80023f0:	183b      	adds	r3, r7, r0
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	2141      	movs	r1, #65	; 0x41
 80023f6:	5c52      	ldrb	r2, [r2, r1]
 80023f8:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2220      	movs	r2, #32
 8002400:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002402:	183b      	adds	r3, r7, r0
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b21      	cmp	r3, #33	; 0x21
 8002408:	d003      	beq.n	8002412 <I2C_ITSlaveCplt+0x3a>
 800240a:	183b      	adds	r3, r7, r0
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b29      	cmp	r3, #41	; 0x29
 8002410:	d109      	bne.n	8002426 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002412:	4a7d      	ldr	r2, [pc, #500]	; (8002608 <I2C_ITSlaveCplt+0x230>)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	0011      	movs	r1, r2
 8002418:	0018      	movs	r0, r3
 800241a:	f000 faa7 	bl	800296c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2221      	movs	r2, #33	; 0x21
 8002422:	631a      	str	r2, [r3, #48]	; 0x30
 8002424:	e011      	b.n	800244a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002426:	220f      	movs	r2, #15
 8002428:	18bb      	adds	r3, r7, r2
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b22      	cmp	r3, #34	; 0x22
 800242e:	d003      	beq.n	8002438 <I2C_ITSlaveCplt+0x60>
 8002430:	18bb      	adds	r3, r7, r2
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b2a      	cmp	r3, #42	; 0x2a
 8002436:	d108      	bne.n	800244a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002438:	4a74      	ldr	r2, [pc, #464]	; (800260c <I2C_ITSlaveCplt+0x234>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	0011      	movs	r1, r2
 800243e:	0018      	movs	r0, r3
 8002440:	f000 fa94 	bl	800296c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2222      	movs	r2, #34	; 0x22
 8002448:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2180      	movs	r1, #128	; 0x80
 8002456:	0209      	lsls	r1, r1, #8
 8002458:	430a      	orrs	r2, r1
 800245a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	496a      	ldr	r1, [pc, #424]	; (8002610 <I2C_ITSlaveCplt+0x238>)
 8002468:	400a      	ands	r2, r1
 800246a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	0018      	movs	r0, r3
 8002470:	f000 fa3b 	bl	80028ea <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	0b9b      	lsrs	r3, r3, #14
 8002478:	001a      	movs	r2, r3
 800247a:	2301      	movs	r3, #1
 800247c:	4013      	ands	r3, r2
 800247e:	d013      	beq.n	80024a8 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4962      	ldr	r1, [pc, #392]	; (8002614 <I2C_ITSlaveCplt+0x23c>)
 800248c:	400a      	ands	r2, r1
 800248e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	2b00      	cmp	r3, #0
 8002496:	d020      	beq.n	80024da <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024a6:	e018      	b.n	80024da <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	0bdb      	lsrs	r3, r3, #15
 80024ac:	001a      	movs	r2, r3
 80024ae:	2301      	movs	r3, #1
 80024b0:	4013      	ands	r3, r2
 80024b2:	d012      	beq.n	80024da <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4956      	ldr	r1, [pc, #344]	; (8002618 <I2C_ITSlaveCplt+0x240>)
 80024c0:	400a      	ands	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d006      	beq.n	80024da <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	089b      	lsrs	r3, r3, #2
 80024de:	001a      	movs	r2, r3
 80024e0:	2301      	movs	r3, #1
 80024e2:	4013      	ands	r3, r2
 80024e4:	d020      	beq.n	8002528 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2204      	movs	r2, #4
 80024ea:	4393      	bics	r3, r2
 80024ec:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00c      	beq.n	8002528 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252c:	b29b      	uxth	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d005      	beq.n	800253e <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	2204      	movs	r2, #4
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2242      	movs	r2, #66	; 0x42
 8002542:	2100      	movs	r1, #0
 8002544:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002550:	2b00      	cmp	r3, #0
 8002552:	d013      	beq.n	800257c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	0011      	movs	r1, r2
 800255c:	0018      	movs	r0, r3
 800255e:	f000 f8b9 	bl	80026d4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2241      	movs	r2, #65	; 0x41
 8002566:	5c9b      	ldrb	r3, [r3, r2]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b28      	cmp	r3, #40	; 0x28
 800256c:	d147      	bne.n	80025fe <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	0011      	movs	r1, r2
 8002574:	0018      	movs	r0, r3
 8002576:	f000 f853 	bl	8002620 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800257a:	e040      	b.n	80025fe <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	4a26      	ldr	r2, [pc, #152]	; (800261c <I2C_ITSlaveCplt+0x244>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d016      	beq.n	80025b4 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	0018      	movs	r0, r3
 800258a:	f7ff febf 	bl	800230c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a22      	ldr	r2, [pc, #136]	; (800261c <I2C_ITSlaveCplt+0x244>)
 8002592:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2241      	movs	r2, #65	; 0x41
 8002598:	2120      	movs	r1, #32
 800259a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2240      	movs	r2, #64	; 0x40
 80025a6:	2100      	movs	r1, #0
 80025a8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	0018      	movs	r0, r3
 80025ae:	f7ff fcdd 	bl	8001f6c <HAL_I2C_ListenCpltCallback>
}
 80025b2:	e024      	b.n	80025fe <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2241      	movs	r2, #65	; 0x41
 80025b8:	5c9b      	ldrb	r3, [r3, r2]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b22      	cmp	r3, #34	; 0x22
 80025be:	d10f      	bne.n	80025e0 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2241      	movs	r2, #65	; 0x41
 80025c4:	2120      	movs	r1, #32
 80025c6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2240      	movs	r2, #64	; 0x40
 80025d2:	2100      	movs	r1, #0
 80025d4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	0018      	movs	r0, r3
 80025da:	f7ff fcaf 	bl	8001f3c <HAL_I2C_SlaveRxCpltCallback>
}
 80025de:	e00e      	b.n	80025fe <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2241      	movs	r2, #65	; 0x41
 80025e4:	2120      	movs	r1, #32
 80025e6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2240      	movs	r2, #64	; 0x40
 80025f2:	2100      	movs	r1, #0
 80025f4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	0018      	movs	r0, r3
 80025fa:	f7ff fc97 	bl	8001f2c <HAL_I2C_SlaveTxCpltCallback>
}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	46bd      	mov	sp, r7
 8002602:	b006      	add	sp, #24
 8002604:	bd80      	pop	{r7, pc}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	00008001 	.word	0x00008001
 800260c:	00008002 	.word	0x00008002
 8002610:	fe00e800 	.word	0xfe00e800
 8002614:	ffffbfff 	.word	0xffffbfff
 8002618:	ffff7fff 	.word	0xffff7fff
 800261c:	ffff0000 	.word	0xffff0000

08002620 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a27      	ldr	r2, [pc, #156]	; (80026cc <I2C_ITListenCplt+0xac>)
 800262e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2241      	movs	r2, #65	; 0x41
 800263a:	2120      	movs	r1, #32
 800263c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2242      	movs	r2, #66	; 0x42
 8002642:	2100      	movs	r1, #0
 8002644:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	089b      	lsrs	r3, r3, #2
 8002650:	001a      	movs	r2, r3
 8002652:	2301      	movs	r3, #1
 8002654:	4013      	ands	r3, r2
 8002656:	d022      	beq.n	800269e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002674:	2b00      	cmp	r3, #0
 8002676:	d012      	beq.n	800269e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	2204      	movs	r2, #4
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800269e:	4a0c      	ldr	r2, [pc, #48]	; (80026d0 <I2C_ITListenCplt+0xb0>)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	0011      	movs	r1, r2
 80026a4:	0018      	movs	r0, r3
 80026a6:	f000 f961 	bl	800296c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2210      	movs	r2, #16
 80026b0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2240      	movs	r2, #64	; 0x40
 80026b6:	2100      	movs	r1, #0
 80026b8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	0018      	movs	r0, r3
 80026be:	f7ff fc55 	bl	8001f6c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b002      	add	sp, #8
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	ffff0000 	.word	0xffff0000
 80026d0:	00008003 	.word	0x00008003

080026d4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80026de:	200f      	movs	r0, #15
 80026e0:	183b      	adds	r3, r7, r0
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	2141      	movs	r1, #65	; 0x41
 80026e6:	5c52      	ldrb	r2, [r2, r1]
 80026e8:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2242      	movs	r2, #66	; 0x42
 80026ee:	2100      	movs	r1, #0
 80026f0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a62      	ldr	r2, [pc, #392]	; (8002880 <I2C_ITError+0x1ac>)
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800270a:	183b      	adds	r3, r7, r0
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b28      	cmp	r3, #40	; 0x28
 8002710:	d007      	beq.n	8002722 <I2C_ITError+0x4e>
 8002712:	183b      	adds	r3, r7, r0
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b29      	cmp	r3, #41	; 0x29
 8002718:	d003      	beq.n	8002722 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800271a:	183b      	adds	r3, r7, r0
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b2a      	cmp	r3, #42	; 0x2a
 8002720:	d10c      	bne.n	800273c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2103      	movs	r1, #3
 8002726:	0018      	movs	r0, r3
 8002728:	f000 f920 	bl	800296c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2241      	movs	r2, #65	; 0x41
 8002730:	2128      	movs	r1, #40	; 0x28
 8002732:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a53      	ldr	r2, [pc, #332]	; (8002884 <I2C_ITError+0x1b0>)
 8002738:	635a      	str	r2, [r3, #52]	; 0x34
 800273a:	e012      	b.n	8002762 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800273c:	4a52      	ldr	r2, [pc, #328]	; (8002888 <I2C_ITError+0x1b4>)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	0011      	movs	r1, r2
 8002742:	0018      	movs	r0, r3
 8002744:	f000 f912 	bl	800296c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2241      	movs	r2, #65	; 0x41
 800274c:	5c9b      	ldrb	r3, [r3, r2]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b60      	cmp	r3, #96	; 0x60
 8002752:	d003      	beq.n	800275c <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2241      	movs	r2, #65	; 0x41
 8002758:	2120      	movs	r1, #32
 800275a:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276c:	2b00      	cmp	r3, #0
 800276e:	d03b      	beq.n	80027e8 <I2C_ITError+0x114>
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2b11      	cmp	r3, #17
 8002774:	d002      	beq.n	800277c <I2C_ITError+0xa8>
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b21      	cmp	r3, #33	; 0x21
 800277a:	d135      	bne.n	80027e8 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	2380      	movs	r3, #128	; 0x80
 8002784:	01db      	lsls	r3, r3, #7
 8002786:	401a      	ands	r2, r3
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	01db      	lsls	r3, r3, #7
 800278c:	429a      	cmp	r2, r3
 800278e:	d107      	bne.n	80027a0 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	493c      	ldr	r1, [pc, #240]	; (800288c <I2C_ITError+0x1b8>)
 800279c:	400a      	ands	r2, r1
 800279e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a4:	0018      	movs	r0, r3
 80027a6:	f7ff f891 	bl	80018cc <HAL_DMA_GetState>
 80027aa:	0003      	movs	r3, r0
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d016      	beq.n	80027de <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b4:	4a36      	ldr	r2, [pc, #216]	; (8002890 <I2C_ITError+0x1bc>)
 80027b6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2240      	movs	r2, #64	; 0x40
 80027bc:	2100      	movs	r1, #0
 80027be:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c4:	0018      	movs	r0, r3
 80027c6:	f7fe ff65 	bl	8001694 <HAL_DMA_Abort_IT>
 80027ca:	1e03      	subs	r3, r0, #0
 80027cc:	d051      	beq.n	8002872 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	0018      	movs	r0, r3
 80027da:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027dc:	e049      	b.n	8002872 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	0018      	movs	r0, r3
 80027e2:	f000 f859 	bl	8002898 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027e6:	e044      	b.n	8002872 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d03b      	beq.n	8002868 <I2C_ITError+0x194>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b12      	cmp	r3, #18
 80027f4:	d002      	beq.n	80027fc <I2C_ITError+0x128>
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2b22      	cmp	r3, #34	; 0x22
 80027fa:	d135      	bne.n	8002868 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	2380      	movs	r3, #128	; 0x80
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	401a      	ands	r2, r3
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	021b      	lsls	r3, r3, #8
 800280c:	429a      	cmp	r2, r3
 800280e:	d107      	bne.n	8002820 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	491e      	ldr	r1, [pc, #120]	; (8002894 <I2C_ITError+0x1c0>)
 800281c:	400a      	ands	r2, r1
 800281e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002824:	0018      	movs	r0, r3
 8002826:	f7ff f851 	bl	80018cc <HAL_DMA_GetState>
 800282a:	0003      	movs	r3, r0
 800282c:	2b01      	cmp	r3, #1
 800282e:	d016      	beq.n	800285e <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002834:	4a16      	ldr	r2, [pc, #88]	; (8002890 <I2C_ITError+0x1bc>)
 8002836:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2240      	movs	r2, #64	; 0x40
 800283c:	2100      	movs	r1, #0
 800283e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002844:	0018      	movs	r0, r3
 8002846:	f7fe ff25 	bl	8001694 <HAL_DMA_Abort_IT>
 800284a:	1e03      	subs	r3, r0, #0
 800284c:	d013      	beq.n	8002876 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002858:	0018      	movs	r0, r3
 800285a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800285c:	e00b      	b.n	8002876 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	0018      	movs	r0, r3
 8002862:	f000 f819 	bl	8002898 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002866:	e006      	b.n	8002876 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	0018      	movs	r0, r3
 800286c:	f000 f814 	bl	8002898 <I2C_TreatErrorCallback>
  }
}
 8002870:	e002      	b.n	8002878 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	e000      	b.n	8002878 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002876:	46c0      	nop			; (mov r8, r8)
}
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	b004      	add	sp, #16
 800287e:	bd80      	pop	{r7, pc}
 8002880:	ffff0000 	.word	0xffff0000
 8002884:	08001f9d 	.word	0x08001f9d
 8002888:	00008003 	.word	0x00008003
 800288c:	ffffbfff 	.word	0xffffbfff
 8002890:	0800292f 	.word	0x0800292f
 8002894:	ffff7fff 	.word	0xffff7fff

08002898 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2241      	movs	r2, #65	; 0x41
 80028a4:	5c9b      	ldrb	r3, [r3, r2]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b60      	cmp	r3, #96	; 0x60
 80028aa:	d10f      	bne.n	80028cc <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2241      	movs	r2, #65	; 0x41
 80028b0:	2120      	movs	r1, #32
 80028b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2240      	movs	r2, #64	; 0x40
 80028be:	2100      	movs	r1, #0
 80028c0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	0018      	movs	r0, r3
 80028c6:	f7ff fb61 	bl	8001f8c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80028ca:	e00a      	b.n	80028e2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2240      	movs	r2, #64	; 0x40
 80028d6:	2100      	movs	r1, #0
 80028d8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	0018      	movs	r0, r3
 80028de:	f7ff fb4d 	bl	8001f7c <HAL_I2C_ErrorCallback>
}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b002      	add	sp, #8
 80028e8:	bd80      	pop	{r7, pc}

080028ea <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	2202      	movs	r2, #2
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d103      	bne.n	8002908 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2200      	movs	r2, #0
 8002906:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	2201      	movs	r2, #1
 8002910:	4013      	ands	r3, r2
 8002912:	2b01      	cmp	r3, #1
 8002914:	d007      	beq.n	8002926 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	699a      	ldr	r2, [r3, #24]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2101      	movs	r1, #1
 8002922:	430a      	orrs	r2, r1
 8002924:	619a      	str	r2, [r3, #24]
  }
}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	46bd      	mov	sp, r7
 800292a:	b002      	add	sp, #8
 800292c:	bd80      	pop	{r7, pc}

0800292e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b084      	sub	sp, #16
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002948:	2200      	movs	r2, #0
 800294a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002958:	2200      	movs	r2, #0
 800295a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	0018      	movs	r0, r3
 8002960:	f7ff ff9a 	bl	8002898 <I2C_TreatErrorCallback>
}
 8002964:	46c0      	nop			; (mov r8, r8)
 8002966:	46bd      	mov	sp, r7
 8002968:	b004      	add	sp, #16
 800296a:	bd80      	pop	{r7, pc}

0800296c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	000a      	movs	r2, r1
 8002976:	1cbb      	adds	r3, r7, #2
 8002978:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800297e:	1cbb      	adds	r3, r7, #2
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	2201      	movs	r2, #1
 8002984:	4013      	ands	r3, r2
 8002986:	d010      	beq.n	80029aa <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2242      	movs	r2, #66	; 0x42
 800298c:	4313      	orrs	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2241      	movs	r2, #65	; 0x41
 8002994:	5c9b      	ldrb	r3, [r3, r2]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	001a      	movs	r2, r3
 800299a:	2328      	movs	r3, #40	; 0x28
 800299c:	4013      	ands	r3, r2
 800299e:	2b28      	cmp	r3, #40	; 0x28
 80029a0:	d003      	beq.n	80029aa <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	22b0      	movs	r2, #176	; 0xb0
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80029aa:	1cbb      	adds	r3, r7, #2
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	2202      	movs	r2, #2
 80029b0:	4013      	ands	r3, r2
 80029b2:	d010      	beq.n	80029d6 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2244      	movs	r2, #68	; 0x44
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2241      	movs	r2, #65	; 0x41
 80029c0:	5c9b      	ldrb	r3, [r3, r2]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	001a      	movs	r2, r3
 80029c6:	2328      	movs	r3, #40	; 0x28
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b28      	cmp	r3, #40	; 0x28
 80029cc:	d003      	beq.n	80029d6 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	22b0      	movs	r2, #176	; 0xb0
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80029d6:	1cbb      	adds	r3, r7, #2
 80029d8:	2200      	movs	r2, #0
 80029da:	5e9b      	ldrsh	r3, [r3, r2]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	da03      	bge.n	80029e8 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	22b8      	movs	r2, #184	; 0xb8
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80029e8:	1cbb      	adds	r3, r7, #2
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	2b10      	cmp	r3, #16
 80029ee:	d103      	bne.n	80029f8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2290      	movs	r2, #144	; 0x90
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80029f8:	1cbb      	adds	r3, r7, #2
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	d103      	bne.n	8002a08 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002a08:	1cbb      	adds	r3, r7, #2
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	2b40      	cmp	r3, #64	; 0x40
 8002a0e:	d103      	bne.n	8002a18 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2240      	movs	r2, #64	; 0x40
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	43d9      	mvns	r1, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	400a      	ands	r2, r1
 8002a28:	601a      	str	r2, [r3, #0]
}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b004      	add	sp, #16
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2241      	movs	r2, #65	; 0x41
 8002a42:	5c9b      	ldrb	r3, [r3, r2]
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	d138      	bne.n	8002abc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2240      	movs	r2, #64	; 0x40
 8002a4e:	5c9b      	ldrb	r3, [r3, r2]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d101      	bne.n	8002a58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e032      	b.n	8002abe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2240      	movs	r2, #64	; 0x40
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2241      	movs	r2, #65	; 0x41
 8002a64:	2124      	movs	r1, #36	; 0x24
 8002a66:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2101      	movs	r1, #1
 8002a74:	438a      	bics	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4911      	ldr	r1, [pc, #68]	; (8002ac8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002a84:	400a      	ands	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6819      	ldr	r1, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2241      	movs	r2, #65	; 0x41
 8002aac:	2120      	movs	r1, #32
 8002aae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2240      	movs	r2, #64	; 0x40
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	e000      	b.n	8002abe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002abc:	2302      	movs	r3, #2
  }
}
 8002abe:	0018      	movs	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b002      	add	sp, #8
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	ffffefff 	.word	0xffffefff

08002acc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2241      	movs	r2, #65	; 0x41
 8002ada:	5c9b      	ldrb	r3, [r3, r2]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	d139      	bne.n	8002b56 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2240      	movs	r2, #64	; 0x40
 8002ae6:	5c9b      	ldrb	r3, [r3, r2]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e033      	b.n	8002b58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2240      	movs	r2, #64	; 0x40
 8002af4:	2101      	movs	r1, #1
 8002af6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2241      	movs	r2, #65	; 0x41
 8002afc:	2124      	movs	r1, #36	; 0x24
 8002afe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	438a      	bics	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4a11      	ldr	r2, [pc, #68]	; (8002b60 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	021b      	lsls	r3, r3, #8
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2241      	movs	r2, #65	; 0x41
 8002b46:	2120      	movs	r1, #32
 8002b48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2240      	movs	r2, #64	; 0x40
 8002b4e:	2100      	movs	r1, #0
 8002b50:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	e000      	b.n	8002b58 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b56:	2302      	movs	r3, #2
  }
}
 8002b58:	0018      	movs	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b004      	add	sp, #16
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	fffff0ff 	.word	0xfffff0ff

08002b64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002b6c:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a19      	ldr	r2, [pc, #100]	; (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	0019      	movs	r1, r3
 8002b76:	4b17      	ldr	r3, [pc, #92]	; (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d11f      	bne.n	8002bc8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002b88:	4b14      	ldr	r3, [pc, #80]	; (8002bdc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	0013      	movs	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	189b      	adds	r3, r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4912      	ldr	r1, [pc, #72]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002b96:	0018      	movs	r0, r3
 8002b98:	f7fd fab2 	bl	8000100 <__udivsi3>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ba2:	e008      	b.n	8002bb6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3b01      	subs	r3, #1
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	e001      	b.n	8002bb6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e009      	b.n	8002bca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bb6:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	2380      	movs	r3, #128	; 0x80
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	2380      	movs	r3, #128	; 0x80
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d0ed      	beq.n	8002ba4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	0018      	movs	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	b004      	add	sp, #16
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	40007000 	.word	0x40007000
 8002bd8:	fffff9ff 	.word	0xfffff9ff
 8002bdc:	20000000 	.word	0x20000000
 8002be0:	000f4240 	.word	0x000f4240

08002be4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002be8:	4b03      	ldr	r3, [pc, #12]	; (8002bf8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	23e0      	movs	r3, #224	; 0xe0
 8002bee:	01db      	lsls	r3, r3, #7
 8002bf0:	4013      	ands	r3, r2
}
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000

08002bfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e2f9      	b.n	8003202 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2201      	movs	r2, #1
 8002c14:	4013      	ands	r3, r2
 8002c16:	d100      	bne.n	8002c1a <HAL_RCC_OscConfig+0x1e>
 8002c18:	e07c      	b.n	8002d14 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c1a:	4bc3      	ldr	r3, [pc, #780]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2238      	movs	r2, #56	; 0x38
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c24:	4bc0      	ldr	r3, [pc, #768]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	2203      	movs	r2, #3
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	2b10      	cmp	r3, #16
 8002c32:	d102      	bne.n	8002c3a <HAL_RCC_OscConfig+0x3e>
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d002      	beq.n	8002c40 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d10b      	bne.n	8002c58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c40:	4bb9      	ldr	r3, [pc, #740]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	029b      	lsls	r3, r3, #10
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d062      	beq.n	8002d12 <HAL_RCC_OscConfig+0x116>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d15e      	bne.n	8002d12 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e2d4      	b.n	8003202 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	025b      	lsls	r3, r3, #9
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d107      	bne.n	8002c74 <HAL_RCC_OscConfig+0x78>
 8002c64:	4bb0      	ldr	r3, [pc, #704]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4baf      	ldr	r3, [pc, #700]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002c6a:	2180      	movs	r1, #128	; 0x80
 8002c6c:	0249      	lsls	r1, r1, #9
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e020      	b.n	8002cb6 <HAL_RCC_OscConfig+0xba>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	23a0      	movs	r3, #160	; 0xa0
 8002c7a:	02db      	lsls	r3, r3, #11
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d10e      	bne.n	8002c9e <HAL_RCC_OscConfig+0xa2>
 8002c80:	4ba9      	ldr	r3, [pc, #676]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4ba8      	ldr	r3, [pc, #672]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002c86:	2180      	movs	r1, #128	; 0x80
 8002c88:	02c9      	lsls	r1, r1, #11
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	4ba6      	ldr	r3, [pc, #664]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4ba5      	ldr	r3, [pc, #660]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002c94:	2180      	movs	r1, #128	; 0x80
 8002c96:	0249      	lsls	r1, r1, #9
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e00b      	b.n	8002cb6 <HAL_RCC_OscConfig+0xba>
 8002c9e:	4ba2      	ldr	r3, [pc, #648]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	4ba1      	ldr	r3, [pc, #644]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002ca4:	49a1      	ldr	r1, [pc, #644]	; (8002f2c <HAL_RCC_OscConfig+0x330>)
 8002ca6:	400a      	ands	r2, r1
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	4b9f      	ldr	r3, [pc, #636]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	4b9e      	ldr	r3, [pc, #632]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002cb0:	499f      	ldr	r1, [pc, #636]	; (8002f30 <HAL_RCC_OscConfig+0x334>)
 8002cb2:	400a      	ands	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d014      	beq.n	8002ce8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbe:	f7fe fa63 	bl	8001188 <HAL_GetTick>
 8002cc2:	0003      	movs	r3, r0
 8002cc4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7fe fa5e 	bl	8001188 <HAL_GetTick>
 8002ccc:	0002      	movs	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	; 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e293      	b.n	8003202 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cda:	4b93      	ldr	r3, [pc, #588]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	2380      	movs	r3, #128	; 0x80
 8002ce0:	029b      	lsls	r3, r3, #10
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0xcc>
 8002ce6:	e015      	b.n	8002d14 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fa4e 	bl	8001188 <HAL_GetTick>
 8002cec:	0003      	movs	r3, r0
 8002cee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf2:	f7fe fa49 	bl	8001188 <HAL_GetTick>
 8002cf6:	0002      	movs	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b64      	cmp	r3, #100	; 0x64
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e27e      	b.n	8003202 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d04:	4b88      	ldr	r3, [pc, #544]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	029b      	lsls	r3, r3, #10
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d1f0      	bne.n	8002cf2 <HAL_RCC_OscConfig+0xf6>
 8002d10:	e000      	b.n	8002d14 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d12:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d100      	bne.n	8002d20 <HAL_RCC_OscConfig+0x124>
 8002d1e:	e099      	b.n	8002e54 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d20:	4b81      	ldr	r3, [pc, #516]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2238      	movs	r2, #56	; 0x38
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d2a:	4b7f      	ldr	r3, [pc, #508]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	2203      	movs	r2, #3
 8002d30:	4013      	ands	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	2b10      	cmp	r3, #16
 8002d38:	d102      	bne.n	8002d40 <HAL_RCC_OscConfig+0x144>
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d002      	beq.n	8002d46 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d135      	bne.n	8002db2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d46:	4b78      	ldr	r3, [pc, #480]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d005      	beq.n	8002d5e <HAL_RCC_OscConfig+0x162>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e251      	b.n	8003202 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5e:	4b72      	ldr	r3, [pc, #456]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	4a74      	ldr	r2, [pc, #464]	; (8002f34 <HAL_RCC_OscConfig+0x338>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	0019      	movs	r1, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	021a      	lsls	r2, r3, #8
 8002d6e:	4b6e      	ldr	r3, [pc, #440]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002d70:	430a      	orrs	r2, r1
 8002d72:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d112      	bne.n	8002da0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d7a:	4b6b      	ldr	r3, [pc, #428]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a6e      	ldr	r2, [pc, #440]	; (8002f38 <HAL_RCC_OscConfig+0x33c>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	0019      	movs	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	4b67      	ldr	r3, [pc, #412]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002d8e:	4b66      	ldr	r3, [pc, #408]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	0adb      	lsrs	r3, r3, #11
 8002d94:	2207      	movs	r2, #7
 8002d96:	4013      	ands	r3, r2
 8002d98:	4a68      	ldr	r2, [pc, #416]	; (8002f3c <HAL_RCC_OscConfig+0x340>)
 8002d9a:	40da      	lsrs	r2, r3
 8002d9c:	4b68      	ldr	r3, [pc, #416]	; (8002f40 <HAL_RCC_OscConfig+0x344>)
 8002d9e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002da0:	4b68      	ldr	r3, [pc, #416]	; (8002f44 <HAL_RCC_OscConfig+0x348>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	0018      	movs	r0, r3
 8002da6:	f7fe f993 	bl	80010d0 <HAL_InitTick>
 8002daa:	1e03      	subs	r3, r0, #0
 8002dac:	d051      	beq.n	8002e52 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e227      	b.n	8003202 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d030      	beq.n	8002e1c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002dba:	4b5b      	ldr	r3, [pc, #364]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a5e      	ldr	r2, [pc, #376]	; (8002f38 <HAL_RCC_OscConfig+0x33c>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	4b57      	ldr	r3, [pc, #348]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002dce:	4b56      	ldr	r3, [pc, #344]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4b55      	ldr	r3, [pc, #340]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002dd4:	2180      	movs	r1, #128	; 0x80
 8002dd6:	0049      	lsls	r1, r1, #1
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fe f9d4 	bl	8001188 <HAL_GetTick>
 8002de0:	0003      	movs	r3, r0
 8002de2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de6:	f7fe f9cf 	bl	8001188 <HAL_GetTick>
 8002dea:	0002      	movs	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e204      	b.n	8003202 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002df8:	4b4b      	ldr	r3, [pc, #300]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	2380      	movs	r3, #128	; 0x80
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4013      	ands	r3, r2
 8002e02:	d0f0      	beq.n	8002de6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e04:	4b48      	ldr	r3, [pc, #288]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4a4a      	ldr	r2, [pc, #296]	; (8002f34 <HAL_RCC_OscConfig+0x338>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	021a      	lsls	r2, r3, #8
 8002e14:	4b44      	ldr	r3, [pc, #272]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	e01b      	b.n	8002e54 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002e1c:	4b42      	ldr	r3, [pc, #264]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4b41      	ldr	r3, [pc, #260]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002e22:	4949      	ldr	r1, [pc, #292]	; (8002f48 <HAL_RCC_OscConfig+0x34c>)
 8002e24:	400a      	ands	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fe f9ae 	bl	8001188 <HAL_GetTick>
 8002e2c:	0003      	movs	r3, r0
 8002e2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e30:	e008      	b.n	8002e44 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e32:	f7fe f9a9 	bl	8001188 <HAL_GetTick>
 8002e36:	0002      	movs	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e1de      	b.n	8003202 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e44:	4b38      	ldr	r3, [pc, #224]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d1f0      	bne.n	8002e32 <HAL_RCC_OscConfig+0x236>
 8002e50:	e000      	b.n	8002e54 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e52:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2208      	movs	r2, #8
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d047      	beq.n	8002eee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002e5e:	4b32      	ldr	r3, [pc, #200]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2238      	movs	r2, #56	; 0x38
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b18      	cmp	r3, #24
 8002e68:	d10a      	bne.n	8002e80 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002e6a:	4b2f      	ldr	r3, [pc, #188]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e6e:	2202      	movs	r2, #2
 8002e70:	4013      	ands	r3, r2
 8002e72:	d03c      	beq.n	8002eee <HAL_RCC_OscConfig+0x2f2>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d138      	bne.n	8002eee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e1c0      	b.n	8003202 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d019      	beq.n	8002ebc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002e88:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002e8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e8c:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002e8e:	2101      	movs	r1, #1
 8002e90:	430a      	orrs	r2, r1
 8002e92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7fe f978 	bl	8001188 <HAL_GetTick>
 8002e98:	0003      	movs	r3, r0
 8002e9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e9e:	f7fe f973 	bl	8001188 <HAL_GetTick>
 8002ea2:	0002      	movs	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e1a8      	b.n	8003202 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002eb0:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d0f1      	beq.n	8002e9e <HAL_RCC_OscConfig+0x2a2>
 8002eba:	e018      	b.n	8002eee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002ebc:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002ebe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ec0:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	438a      	bics	r2, r1
 8002ec6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fe f95e 	bl	8001188 <HAL_GetTick>
 8002ecc:	0003      	movs	r3, r0
 8002ece:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed2:	f7fe f959 	bl	8001188 <HAL_GetTick>
 8002ed6:	0002      	movs	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e18e      	b.n	8003202 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ee4:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee8:	2202      	movs	r2, #2
 8002eea:	4013      	ands	r3, r2
 8002eec:	d1f1      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d100      	bne.n	8002efa <HAL_RCC_OscConfig+0x2fe>
 8002ef8:	e0c6      	b.n	8003088 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002efa:	231f      	movs	r3, #31
 8002efc:	18fb      	adds	r3, r7, r3
 8002efe:	2200      	movs	r2, #0
 8002f00:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f02:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2238      	movs	r2, #56	; 0x38
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b20      	cmp	r3, #32
 8002f0c:	d11e      	bne.n	8002f4c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002f0e:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <HAL_RCC_OscConfig+0x32c>)
 8002f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f12:	2202      	movs	r2, #2
 8002f14:	4013      	ands	r3, r2
 8002f16:	d100      	bne.n	8002f1a <HAL_RCC_OscConfig+0x31e>
 8002f18:	e0b6      	b.n	8003088 <HAL_RCC_OscConfig+0x48c>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d000      	beq.n	8002f24 <HAL_RCC_OscConfig+0x328>
 8002f22:	e0b1      	b.n	8003088 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e16c      	b.n	8003202 <HAL_RCC_OscConfig+0x606>
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	fffeffff 	.word	0xfffeffff
 8002f30:	fffbffff 	.word	0xfffbffff
 8002f34:	ffff80ff 	.word	0xffff80ff
 8002f38:	ffffc7ff 	.word	0xffffc7ff
 8002f3c:	00f42400 	.word	0x00f42400
 8002f40:	20000000 	.word	0x20000000
 8002f44:	20000004 	.word	0x20000004
 8002f48:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f4c:	4baf      	ldr	r3, [pc, #700]	; (800320c <HAL_RCC_OscConfig+0x610>)
 8002f4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	055b      	lsls	r3, r3, #21
 8002f54:	4013      	ands	r3, r2
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_OscConfig+0x360>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <HAL_RCC_OscConfig+0x362>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d011      	beq.n	8002f86 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002f62:	4baa      	ldr	r3, [pc, #680]	; (800320c <HAL_RCC_OscConfig+0x610>)
 8002f64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f66:	4ba9      	ldr	r3, [pc, #676]	; (800320c <HAL_RCC_OscConfig+0x610>)
 8002f68:	2180      	movs	r1, #128	; 0x80
 8002f6a:	0549      	lsls	r1, r1, #21
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f70:	4ba6      	ldr	r3, [pc, #664]	; (800320c <HAL_RCC_OscConfig+0x610>)
 8002f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	055b      	lsls	r3, r3, #21
 8002f78:	4013      	ands	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002f7e:	231f      	movs	r3, #31
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f86:	4ba2      	ldr	r3, [pc, #648]	; (8003210 <HAL_RCC_OscConfig+0x614>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	2380      	movs	r3, #128	; 0x80
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d11a      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f92:	4b9f      	ldr	r3, [pc, #636]	; (8003210 <HAL_RCC_OscConfig+0x614>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	4b9e      	ldr	r3, [pc, #632]	; (8003210 <HAL_RCC_OscConfig+0x614>)
 8002f98:	2180      	movs	r1, #128	; 0x80
 8002f9a:	0049      	lsls	r1, r1, #1
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002fa0:	f7fe f8f2 	bl	8001188 <HAL_GetTick>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002faa:	f7fe f8ed 	bl	8001188 <HAL_GetTick>
 8002fae:	0002      	movs	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e122      	b.n	8003202 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fbc:	4b94      	ldr	r3, [pc, #592]	; (8003210 <HAL_RCC_OscConfig+0x614>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d0f0      	beq.n	8002faa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d106      	bne.n	8002fde <HAL_RCC_OscConfig+0x3e2>
 8002fd0:	4b8e      	ldr	r3, [pc, #568]	; (800320c <HAL_RCC_OscConfig+0x610>)
 8002fd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fd4:	4b8d      	ldr	r3, [pc, #564]	; (800320c <HAL_RCC_OscConfig+0x610>)
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	65da      	str	r2, [r3, #92]	; 0x5c
 8002fdc:	e01c      	b.n	8003018 <HAL_RCC_OscConfig+0x41c>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b05      	cmp	r3, #5
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCC_OscConfig+0x404>
 8002fe6:	4b89      	ldr	r3, [pc, #548]	; (800320c <HAL_RCC_OscConfig+0x610>)
 8002fe8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fea:	4b88      	ldr	r3, [pc, #544]	; (800320c <HAL_RCC_OscConfig+0x610>)
 8002fec:	2104      	movs	r1, #4
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ff2:	4b86      	ldr	r3, [pc, #536]	; (800320c <HAL_RCC_OscConfig+0x610>)
 8002ff4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ff6:	4b85      	ldr	r3, [pc, #532]	; (800320c <HAL_RCC_OscConfig+0x610>)
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ffe:	e00b      	b.n	8003018 <HAL_RCC_OscConfig+0x41c>
 8003000:	4b82      	ldr	r3, [pc, #520]	; (800320c <HAL_RCC_OscConfig+0x610>)
 8003002:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003004:	4b81      	ldr	r3, [pc, #516]	; (800320c <HAL_RCC_OscConfig+0x610>)
 8003006:	2101      	movs	r1, #1
 8003008:	438a      	bics	r2, r1
 800300a:	65da      	str	r2, [r3, #92]	; 0x5c
 800300c:	4b7f      	ldr	r3, [pc, #508]	; (800320c <HAL_RCC_OscConfig+0x610>)
 800300e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003010:	4b7e      	ldr	r3, [pc, #504]	; (800320c <HAL_RCC_OscConfig+0x610>)
 8003012:	2104      	movs	r1, #4
 8003014:	438a      	bics	r2, r1
 8003016:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d014      	beq.n	800304a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7fe f8b2 	bl	8001188 <HAL_GetTick>
 8003024:	0003      	movs	r3, r0
 8003026:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003028:	e009      	b.n	800303e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302a:	f7fe f8ad 	bl	8001188 <HAL_GetTick>
 800302e:	0002      	movs	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	4a77      	ldr	r2, [pc, #476]	; (8003214 <HAL_RCC_OscConfig+0x618>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e0e1      	b.n	8003202 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800303e:	4b73      	ldr	r3, [pc, #460]	; (800320c <HAL_RCC_OscConfig+0x610>)
 8003040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003042:	2202      	movs	r2, #2
 8003044:	4013      	ands	r3, r2
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x42e>
 8003048:	e013      	b.n	8003072 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304a:	f7fe f89d 	bl	8001188 <HAL_GetTick>
 800304e:	0003      	movs	r3, r0
 8003050:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003052:	e009      	b.n	8003068 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003054:	f7fe f898 	bl	8001188 <HAL_GetTick>
 8003058:	0002      	movs	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	4a6d      	ldr	r2, [pc, #436]	; (8003214 <HAL_RCC_OscConfig+0x618>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e0cc      	b.n	8003202 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003068:	4b68      	ldr	r3, [pc, #416]	; (800320c <HAL_RCC_OscConfig+0x610>)
 800306a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306c:	2202      	movs	r2, #2
 800306e:	4013      	ands	r3, r2
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003072:	231f      	movs	r3, #31
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d105      	bne.n	8003088 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800307c:	4b63      	ldr	r3, [pc, #396]	; (800320c <HAL_RCC_OscConfig+0x610>)
 800307e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003080:	4b62      	ldr	r3, [pc, #392]	; (800320c <HAL_RCC_OscConfig+0x610>)
 8003082:	4965      	ldr	r1, [pc, #404]	; (8003218 <HAL_RCC_OscConfig+0x61c>)
 8003084:	400a      	ands	r2, r1
 8003086:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d100      	bne.n	8003092 <HAL_RCC_OscConfig+0x496>
 8003090:	e0b6      	b.n	8003200 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003092:	4b5e      	ldr	r3, [pc, #376]	; (800320c <HAL_RCC_OscConfig+0x610>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2238      	movs	r2, #56	; 0x38
 8003098:	4013      	ands	r3, r2
 800309a:	2b10      	cmp	r3, #16
 800309c:	d100      	bne.n	80030a0 <HAL_RCC_OscConfig+0x4a4>
 800309e:	e07e      	b.n	800319e <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d153      	bne.n	8003150 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a8:	4b58      	ldr	r3, [pc, #352]	; (800320c <HAL_RCC_OscConfig+0x610>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4b57      	ldr	r3, [pc, #348]	; (800320c <HAL_RCC_OscConfig+0x610>)
 80030ae:	495b      	ldr	r1, [pc, #364]	; (800321c <HAL_RCC_OscConfig+0x620>)
 80030b0:	400a      	ands	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fe f868 	bl	8001188 <HAL_GetTick>
 80030b8:	0003      	movs	r3, r0
 80030ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030be:	f7fe f863 	bl	8001188 <HAL_GetTick>
 80030c2:	0002      	movs	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e098      	b.n	8003202 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d0:	4b4e      	ldr	r3, [pc, #312]	; (800320c <HAL_RCC_OscConfig+0x610>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	2380      	movs	r3, #128	; 0x80
 80030d6:	049b      	lsls	r3, r3, #18
 80030d8:	4013      	ands	r3, r2
 80030da:	d1f0      	bne.n	80030be <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030dc:	4b4b      	ldr	r3, [pc, #300]	; (800320c <HAL_RCC_OscConfig+0x610>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4a4f      	ldr	r2, [pc, #316]	; (8003220 <HAL_RCC_OscConfig+0x624>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	0019      	movs	r1, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1a      	ldr	r2, [r3, #32]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	021b      	lsls	r3, r3, #8
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	431a      	orrs	r2, r3
 8003104:	4b41      	ldr	r3, [pc, #260]	; (800320c <HAL_RCC_OscConfig+0x610>)
 8003106:	430a      	orrs	r2, r1
 8003108:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800310a:	4b40      	ldr	r3, [pc, #256]	; (800320c <HAL_RCC_OscConfig+0x610>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	4b3f      	ldr	r3, [pc, #252]	; (800320c <HAL_RCC_OscConfig+0x610>)
 8003110:	2180      	movs	r1, #128	; 0x80
 8003112:	0449      	lsls	r1, r1, #17
 8003114:	430a      	orrs	r2, r1
 8003116:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003118:	4b3c      	ldr	r3, [pc, #240]	; (800320c <HAL_RCC_OscConfig+0x610>)
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	4b3b      	ldr	r3, [pc, #236]	; (800320c <HAL_RCC_OscConfig+0x610>)
 800311e:	2180      	movs	r1, #128	; 0x80
 8003120:	0549      	lsls	r1, r1, #21
 8003122:	430a      	orrs	r2, r1
 8003124:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003126:	f7fe f82f 	bl	8001188 <HAL_GetTick>
 800312a:	0003      	movs	r3, r0
 800312c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003130:	f7fe f82a 	bl	8001188 <HAL_GetTick>
 8003134:	0002      	movs	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e05f      	b.n	8003202 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003142:	4b32      	ldr	r3, [pc, #200]	; (800320c <HAL_RCC_OscConfig+0x610>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	2380      	movs	r3, #128	; 0x80
 8003148:	049b      	lsls	r3, r3, #18
 800314a:	4013      	ands	r3, r2
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x534>
 800314e:	e057      	b.n	8003200 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003150:	4b2e      	ldr	r3, [pc, #184]	; (800320c <HAL_RCC_OscConfig+0x610>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	4b2d      	ldr	r3, [pc, #180]	; (800320c <HAL_RCC_OscConfig+0x610>)
 8003156:	4931      	ldr	r1, [pc, #196]	; (800321c <HAL_RCC_OscConfig+0x620>)
 8003158:	400a      	ands	r2, r1
 800315a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800315c:	4b2b      	ldr	r3, [pc, #172]	; (800320c <HAL_RCC_OscConfig+0x610>)
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	4b2a      	ldr	r3, [pc, #168]	; (800320c <HAL_RCC_OscConfig+0x610>)
 8003162:	2103      	movs	r1, #3
 8003164:	438a      	bics	r2, r1
 8003166:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003168:	4b28      	ldr	r3, [pc, #160]	; (800320c <HAL_RCC_OscConfig+0x610>)
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	4b27      	ldr	r3, [pc, #156]	; (800320c <HAL_RCC_OscConfig+0x610>)
 800316e:	492d      	ldr	r1, [pc, #180]	; (8003224 <HAL_RCC_OscConfig+0x628>)
 8003170:	400a      	ands	r2, r1
 8003172:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fe f808 	bl	8001188 <HAL_GetTick>
 8003178:	0003      	movs	r3, r0
 800317a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317e:	f7fe f803 	bl	8001188 <HAL_GetTick>
 8003182:	0002      	movs	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e038      	b.n	8003202 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003190:	4b1e      	ldr	r3, [pc, #120]	; (800320c <HAL_RCC_OscConfig+0x610>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	049b      	lsls	r3, r3, #18
 8003198:	4013      	ands	r3, r2
 800319a:	d1f0      	bne.n	800317e <HAL_RCC_OscConfig+0x582>
 800319c:	e030      	b.n	8003200 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e02b      	b.n	8003202 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80031aa:	4b18      	ldr	r3, [pc, #96]	; (800320c <HAL_RCC_OscConfig+0x610>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2203      	movs	r2, #3
 80031b4:	401a      	ands	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d11e      	bne.n	80031fc <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2270      	movs	r2, #112	; 0x70
 80031c2:	401a      	ands	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d117      	bne.n	80031fc <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	23fe      	movs	r3, #254	; 0xfe
 80031d0:	01db      	lsls	r3, r3, #7
 80031d2:	401a      	ands	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d10e      	bne.n	80031fc <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	23f8      	movs	r3, #248	; 0xf8
 80031e2:	039b      	lsls	r3, r3, #14
 80031e4:	401a      	ands	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d106      	bne.n	80031fc <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	0f5b      	lsrs	r3, r3, #29
 80031f2:	075a      	lsls	r2, r3, #29
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	0018      	movs	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	b008      	add	sp, #32
 8003208:	bd80      	pop	{r7, pc}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	40021000 	.word	0x40021000
 8003210:	40007000 	.word	0x40007000
 8003214:	00001388 	.word	0x00001388
 8003218:	efffffff 	.word	0xefffffff
 800321c:	feffffff 	.word	0xfeffffff
 8003220:	1fc1808c 	.word	0x1fc1808c
 8003224:	effeffff 	.word	0xeffeffff

08003228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0e9      	b.n	8003410 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800323c:	4b76      	ldr	r3, [pc, #472]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2207      	movs	r2, #7
 8003242:	4013      	ands	r3, r2
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d91e      	bls.n	8003288 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	4b73      	ldr	r3, [pc, #460]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2207      	movs	r2, #7
 8003250:	4393      	bics	r3, r2
 8003252:	0019      	movs	r1, r3
 8003254:	4b70      	ldr	r3, [pc, #448]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800325c:	f7fd ff94 	bl	8001188 <HAL_GetTick>
 8003260:	0003      	movs	r3, r0
 8003262:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003264:	e009      	b.n	800327a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003266:	f7fd ff8f 	bl	8001188 <HAL_GetTick>
 800326a:	0002      	movs	r2, r0
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	4a6a      	ldr	r2, [pc, #424]	; (800341c <HAL_RCC_ClockConfig+0x1f4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d901      	bls.n	800327a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e0ca      	b.n	8003410 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800327a:	4b67      	ldr	r3, [pc, #412]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2207      	movs	r2, #7
 8003280:	4013      	ands	r3, r2
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d1ee      	bne.n	8003266 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2202      	movs	r2, #2
 800328e:	4013      	ands	r3, r2
 8003290:	d015      	beq.n	80032be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2204      	movs	r2, #4
 8003298:	4013      	ands	r3, r2
 800329a:	d006      	beq.n	80032aa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800329c:	4b60      	ldr	r3, [pc, #384]	; (8003420 <HAL_RCC_ClockConfig+0x1f8>)
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	4b5f      	ldr	r3, [pc, #380]	; (8003420 <HAL_RCC_ClockConfig+0x1f8>)
 80032a2:	21e0      	movs	r1, #224	; 0xe0
 80032a4:	01c9      	lsls	r1, r1, #7
 80032a6:	430a      	orrs	r2, r1
 80032a8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032aa:	4b5d      	ldr	r3, [pc, #372]	; (8003420 <HAL_RCC_ClockConfig+0x1f8>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	4a5d      	ldr	r2, [pc, #372]	; (8003424 <HAL_RCC_ClockConfig+0x1fc>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	0019      	movs	r1, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	4b59      	ldr	r3, [pc, #356]	; (8003420 <HAL_RCC_ClockConfig+0x1f8>)
 80032ba:	430a      	orrs	r2, r1
 80032bc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2201      	movs	r2, #1
 80032c4:	4013      	ands	r3, r2
 80032c6:	d057      	beq.n	8003378 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d107      	bne.n	80032e0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032d0:	4b53      	ldr	r3, [pc, #332]	; (8003420 <HAL_RCC_ClockConfig+0x1f8>)
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	029b      	lsls	r3, r3, #10
 80032d8:	4013      	ands	r3, r2
 80032da:	d12b      	bne.n	8003334 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e097      	b.n	8003410 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d107      	bne.n	80032f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032e8:	4b4d      	ldr	r3, [pc, #308]	; (8003420 <HAL_RCC_ClockConfig+0x1f8>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	049b      	lsls	r3, r3, #18
 80032f0:	4013      	ands	r3, r2
 80032f2:	d11f      	bne.n	8003334 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e08b      	b.n	8003410 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d107      	bne.n	8003310 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003300:	4b47      	ldr	r3, [pc, #284]	; (8003420 <HAL_RCC_ClockConfig+0x1f8>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	2380      	movs	r3, #128	; 0x80
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4013      	ands	r3, r2
 800330a:	d113      	bne.n	8003334 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e07f      	b.n	8003410 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d106      	bne.n	8003326 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003318:	4b41      	ldr	r3, [pc, #260]	; (8003420 <HAL_RCC_ClockConfig+0x1f8>)
 800331a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331c:	2202      	movs	r2, #2
 800331e:	4013      	ands	r3, r2
 8003320:	d108      	bne.n	8003334 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e074      	b.n	8003410 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003326:	4b3e      	ldr	r3, [pc, #248]	; (8003420 <HAL_RCC_ClockConfig+0x1f8>)
 8003328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332a:	2202      	movs	r2, #2
 800332c:	4013      	ands	r3, r2
 800332e:	d101      	bne.n	8003334 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e06d      	b.n	8003410 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003334:	4b3a      	ldr	r3, [pc, #232]	; (8003420 <HAL_RCC_ClockConfig+0x1f8>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2207      	movs	r2, #7
 800333a:	4393      	bics	r3, r2
 800333c:	0019      	movs	r1, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	4b37      	ldr	r3, [pc, #220]	; (8003420 <HAL_RCC_ClockConfig+0x1f8>)
 8003344:	430a      	orrs	r2, r1
 8003346:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003348:	f7fd ff1e 	bl	8001188 <HAL_GetTick>
 800334c:	0003      	movs	r3, r0
 800334e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003350:	e009      	b.n	8003366 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003352:	f7fd ff19 	bl	8001188 <HAL_GetTick>
 8003356:	0002      	movs	r2, r0
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	4a2f      	ldr	r2, [pc, #188]	; (800341c <HAL_RCC_ClockConfig+0x1f4>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e054      	b.n	8003410 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003366:	4b2e      	ldr	r3, [pc, #184]	; (8003420 <HAL_RCC_ClockConfig+0x1f8>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2238      	movs	r2, #56	; 0x38
 800336c:	401a      	ands	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	429a      	cmp	r2, r3
 8003376:	d1ec      	bne.n	8003352 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003378:	4b27      	ldr	r3, [pc, #156]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2207      	movs	r2, #7
 800337e:	4013      	ands	r3, r2
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d21e      	bcs.n	80033c4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003386:	4b24      	ldr	r3, [pc, #144]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2207      	movs	r2, #7
 800338c:	4393      	bics	r3, r2
 800338e:	0019      	movs	r1, r3
 8003390:	4b21      	ldr	r3, [pc, #132]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003398:	f7fd fef6 	bl	8001188 <HAL_GetTick>
 800339c:	0003      	movs	r3, r0
 800339e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033a0:	e009      	b.n	80033b6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a2:	f7fd fef1 	bl	8001188 <HAL_GetTick>
 80033a6:	0002      	movs	r2, r0
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	4a1b      	ldr	r2, [pc, #108]	; (800341c <HAL_RCC_ClockConfig+0x1f4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e02c      	b.n	8003410 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033b6:	4b18      	ldr	r3, [pc, #96]	; (8003418 <HAL_RCC_ClockConfig+0x1f0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2207      	movs	r2, #7
 80033bc:	4013      	ands	r3, r2
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d1ee      	bne.n	80033a2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2204      	movs	r2, #4
 80033ca:	4013      	ands	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80033ce:	4b14      	ldr	r3, [pc, #80]	; (8003420 <HAL_RCC_ClockConfig+0x1f8>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	4a15      	ldr	r2, [pc, #84]	; (8003428 <HAL_RCC_ClockConfig+0x200>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	0019      	movs	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	4b10      	ldr	r3, [pc, #64]	; (8003420 <HAL_RCC_ClockConfig+0x1f8>)
 80033de:	430a      	orrs	r2, r1
 80033e0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80033e2:	f000 f829 	bl	8003438 <HAL_RCC_GetSysClockFreq>
 80033e6:	0001      	movs	r1, r0
 80033e8:	4b0d      	ldr	r3, [pc, #52]	; (8003420 <HAL_RCC_ClockConfig+0x1f8>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	0a1b      	lsrs	r3, r3, #8
 80033ee:	220f      	movs	r2, #15
 80033f0:	401a      	ands	r2, r3
 80033f2:	4b0e      	ldr	r3, [pc, #56]	; (800342c <HAL_RCC_ClockConfig+0x204>)
 80033f4:	0092      	lsls	r2, r2, #2
 80033f6:	58d3      	ldr	r3, [r2, r3]
 80033f8:	221f      	movs	r2, #31
 80033fa:	4013      	ands	r3, r2
 80033fc:	000a      	movs	r2, r1
 80033fe:	40da      	lsrs	r2, r3
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <HAL_RCC_ClockConfig+0x208>)
 8003402:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <HAL_RCC_ClockConfig+0x20c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	0018      	movs	r0, r3
 800340a:	f7fd fe61 	bl	80010d0 <HAL_InitTick>
 800340e:	0003      	movs	r3, r0
}
 8003410:	0018      	movs	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	b004      	add	sp, #16
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40022000 	.word	0x40022000
 800341c:	00001388 	.word	0x00001388
 8003420:	40021000 	.word	0x40021000
 8003424:	fffff0ff 	.word	0xfffff0ff
 8003428:	ffff8fff 	.word	0xffff8fff
 800342c:	080055a8 	.word	0x080055a8
 8003430:	20000000 	.word	0x20000000
 8003434:	20000004 	.word	0x20000004

08003438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800343e:	4b3c      	ldr	r3, [pc, #240]	; (8003530 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2238      	movs	r2, #56	; 0x38
 8003444:	4013      	ands	r3, r2
 8003446:	d10f      	bne.n	8003468 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003448:	4b39      	ldr	r3, [pc, #228]	; (8003530 <HAL_RCC_GetSysClockFreq+0xf8>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	0adb      	lsrs	r3, r3, #11
 800344e:	2207      	movs	r2, #7
 8003450:	4013      	ands	r3, r2
 8003452:	2201      	movs	r2, #1
 8003454:	409a      	lsls	r2, r3
 8003456:	0013      	movs	r3, r2
 8003458:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800345a:	6839      	ldr	r1, [r7, #0]
 800345c:	4835      	ldr	r0, [pc, #212]	; (8003534 <HAL_RCC_GetSysClockFreq+0xfc>)
 800345e:	f7fc fe4f 	bl	8000100 <__udivsi3>
 8003462:	0003      	movs	r3, r0
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	e05d      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003468:	4b31      	ldr	r3, [pc, #196]	; (8003530 <HAL_RCC_GetSysClockFreq+0xf8>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2238      	movs	r2, #56	; 0x38
 800346e:	4013      	ands	r3, r2
 8003470:	2b08      	cmp	r3, #8
 8003472:	d102      	bne.n	800347a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003474:	4b30      	ldr	r3, [pc, #192]	; (8003538 <HAL_RCC_GetSysClockFreq+0x100>)
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	e054      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800347a:	4b2d      	ldr	r3, [pc, #180]	; (8003530 <HAL_RCC_GetSysClockFreq+0xf8>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2238      	movs	r2, #56	; 0x38
 8003480:	4013      	ands	r3, r2
 8003482:	2b10      	cmp	r3, #16
 8003484:	d138      	bne.n	80034f8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003486:	4b2a      	ldr	r3, [pc, #168]	; (8003530 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	2203      	movs	r2, #3
 800348c:	4013      	ands	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003490:	4b27      	ldr	r3, [pc, #156]	; (8003530 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	091b      	lsrs	r3, r3, #4
 8003496:	2207      	movs	r2, #7
 8003498:	4013      	ands	r3, r2
 800349a:	3301      	adds	r3, #1
 800349c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d10d      	bne.n	80034c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034a4:	68b9      	ldr	r1, [r7, #8]
 80034a6:	4824      	ldr	r0, [pc, #144]	; (8003538 <HAL_RCC_GetSysClockFreq+0x100>)
 80034a8:	f7fc fe2a 	bl	8000100 <__udivsi3>
 80034ac:	0003      	movs	r3, r0
 80034ae:	0019      	movs	r1, r3
 80034b0:	4b1f      	ldr	r3, [pc, #124]	; (8003530 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	0a1b      	lsrs	r3, r3, #8
 80034b6:	227f      	movs	r2, #127	; 0x7f
 80034b8:	4013      	ands	r3, r2
 80034ba:	434b      	muls	r3, r1
 80034bc:	617b      	str	r3, [r7, #20]
        break;
 80034be:	e00d      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	481c      	ldr	r0, [pc, #112]	; (8003534 <HAL_RCC_GetSysClockFreq+0xfc>)
 80034c4:	f7fc fe1c 	bl	8000100 <__udivsi3>
 80034c8:	0003      	movs	r3, r0
 80034ca:	0019      	movs	r1, r3
 80034cc:	4b18      	ldr	r3, [pc, #96]	; (8003530 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	0a1b      	lsrs	r3, r3, #8
 80034d2:	227f      	movs	r2, #127	; 0x7f
 80034d4:	4013      	ands	r3, r2
 80034d6:	434b      	muls	r3, r1
 80034d8:	617b      	str	r3, [r7, #20]
        break;
 80034da:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80034dc:	4b14      	ldr	r3, [pc, #80]	; (8003530 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	0f5b      	lsrs	r3, r3, #29
 80034e2:	2207      	movs	r2, #7
 80034e4:	4013      	ands	r3, r2
 80034e6:	3301      	adds	r3, #1
 80034e8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	6978      	ldr	r0, [r7, #20]
 80034ee:	f7fc fe07 	bl	8000100 <__udivsi3>
 80034f2:	0003      	movs	r3, r0
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	e015      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80034f8:	4b0d      	ldr	r3, [pc, #52]	; (8003530 <HAL_RCC_GetSysClockFreq+0xf8>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2238      	movs	r2, #56	; 0x38
 80034fe:	4013      	ands	r3, r2
 8003500:	2b20      	cmp	r3, #32
 8003502:	d103      	bne.n	800350c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003504:	2380      	movs	r3, #128	; 0x80
 8003506:	021b      	lsls	r3, r3, #8
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	e00b      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800350c:	4b08      	ldr	r3, [pc, #32]	; (8003530 <HAL_RCC_GetSysClockFreq+0xf8>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2238      	movs	r2, #56	; 0x38
 8003512:	4013      	ands	r3, r2
 8003514:	2b18      	cmp	r3, #24
 8003516:	d103      	bne.n	8003520 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003518:	23fa      	movs	r3, #250	; 0xfa
 800351a:	01db      	lsls	r3, r3, #7
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	e001      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003524:	693b      	ldr	r3, [r7, #16]
}
 8003526:	0018      	movs	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	b006      	add	sp, #24
 800352c:	bd80      	pop	{r7, pc}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	40021000 	.word	0x40021000
 8003534:	00f42400 	.word	0x00f42400
 8003538:	007a1200 	.word	0x007a1200

0800353c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003540:	4b02      	ldr	r3, [pc, #8]	; (800354c <HAL_RCC_GetHCLKFreq+0x10>)
 8003542:	681b      	ldr	r3, [r3, #0]
}
 8003544:	0018      	movs	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	20000000 	.word	0x20000000

08003550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003550:	b5b0      	push	{r4, r5, r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003554:	f7ff fff2 	bl	800353c <HAL_RCC_GetHCLKFreq>
 8003558:	0004      	movs	r4, r0
 800355a:	f7ff fb43 	bl	8002be4 <LL_RCC_GetAPB1Prescaler>
 800355e:	0003      	movs	r3, r0
 8003560:	0b1a      	lsrs	r2, r3, #12
 8003562:	4b05      	ldr	r3, [pc, #20]	; (8003578 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003564:	0092      	lsls	r2, r2, #2
 8003566:	58d3      	ldr	r3, [r2, r3]
 8003568:	221f      	movs	r2, #31
 800356a:	4013      	ands	r3, r2
 800356c:	40dc      	lsrs	r4, r3
 800356e:	0023      	movs	r3, r4
}
 8003570:	0018      	movs	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	bdb0      	pop	{r4, r5, r7, pc}
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	080055e8 	.word	0x080055e8

0800357c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003584:	2313      	movs	r3, #19
 8003586:	18fb      	adds	r3, r7, r3
 8003588:	2200      	movs	r2, #0
 800358a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800358c:	2312      	movs	r3, #18
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	2380      	movs	r3, #128	; 0x80
 800359a:	029b      	lsls	r3, r3, #10
 800359c:	4013      	ands	r3, r2
 800359e:	d100      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80035a0:	e0a3      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035a2:	2011      	movs	r0, #17
 80035a4:	183b      	adds	r3, r7, r0
 80035a6:	2200      	movs	r2, #0
 80035a8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035aa:	4b7f      	ldr	r3, [pc, #508]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80035ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035ae:	2380      	movs	r3, #128	; 0x80
 80035b0:	055b      	lsls	r3, r3, #21
 80035b2:	4013      	ands	r3, r2
 80035b4:	d110      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b6:	4b7c      	ldr	r3, [pc, #496]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80035b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035ba:	4b7b      	ldr	r3, [pc, #492]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80035bc:	2180      	movs	r1, #128	; 0x80
 80035be:	0549      	lsls	r1, r1, #21
 80035c0:	430a      	orrs	r2, r1
 80035c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80035c4:	4b78      	ldr	r3, [pc, #480]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80035c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035c8:	2380      	movs	r3, #128	; 0x80
 80035ca:	055b      	lsls	r3, r3, #21
 80035cc:	4013      	ands	r3, r2
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d2:	183b      	adds	r3, r7, r0
 80035d4:	2201      	movs	r2, #1
 80035d6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035d8:	4b74      	ldr	r3, [pc, #464]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	4b73      	ldr	r3, [pc, #460]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80035de:	2180      	movs	r1, #128	; 0x80
 80035e0:	0049      	lsls	r1, r1, #1
 80035e2:	430a      	orrs	r2, r1
 80035e4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035e6:	f7fd fdcf 	bl	8001188 <HAL_GetTick>
 80035ea:	0003      	movs	r3, r0
 80035ec:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035ee:	e00b      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f0:	f7fd fdca 	bl	8001188 <HAL_GetTick>
 80035f4:	0002      	movs	r2, r0
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d904      	bls.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80035fe:	2313      	movs	r3, #19
 8003600:	18fb      	adds	r3, r7, r3
 8003602:	2203      	movs	r2, #3
 8003604:	701a      	strb	r2, [r3, #0]
        break;
 8003606:	e005      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003608:	4b68      	ldr	r3, [pc, #416]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	4013      	ands	r3, r2
 8003612:	d0ed      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003614:	2313      	movs	r3, #19
 8003616:	18fb      	adds	r3, r7, r3
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d154      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800361e:	4b62      	ldr	r3, [pc, #392]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003620:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003622:	23c0      	movs	r3, #192	; 0xc0
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4013      	ands	r3, r2
 8003628:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d019      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	429a      	cmp	r2, r3
 8003638:	d014      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800363a:	4b5b      	ldr	r3, [pc, #364]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800363c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363e:	4a5c      	ldr	r2, [pc, #368]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003640:	4013      	ands	r3, r2
 8003642:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003644:	4b58      	ldr	r3, [pc, #352]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003646:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003648:	4b57      	ldr	r3, [pc, #348]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800364a:	2180      	movs	r1, #128	; 0x80
 800364c:	0249      	lsls	r1, r1, #9
 800364e:	430a      	orrs	r2, r1
 8003650:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003652:	4b55      	ldr	r3, [pc, #340]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003654:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003656:	4b54      	ldr	r3, [pc, #336]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003658:	4956      	ldr	r1, [pc, #344]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800365a:	400a      	ands	r2, r1
 800365c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800365e:	4b52      	ldr	r3, [pc, #328]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2201      	movs	r2, #1
 8003668:	4013      	ands	r3, r2
 800366a:	d016      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7fd fd8c 	bl	8001188 <HAL_GetTick>
 8003670:	0003      	movs	r3, r0
 8003672:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003674:	e00c      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003676:	f7fd fd87 	bl	8001188 <HAL_GetTick>
 800367a:	0002      	movs	r2, r0
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	4a4d      	ldr	r2, [pc, #308]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d904      	bls.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003686:	2313      	movs	r3, #19
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	2203      	movs	r2, #3
 800368c:	701a      	strb	r2, [r3, #0]
            break;
 800368e:	e004      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003690:	4b45      	ldr	r3, [pc, #276]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003694:	2202      	movs	r2, #2
 8003696:	4013      	ands	r3, r2
 8003698:	d0ed      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800369a:	2313      	movs	r3, #19
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10a      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036a4:	4b40      	ldr	r3, [pc, #256]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80036a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a8:	4a41      	ldr	r2, [pc, #260]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80036aa:	4013      	ands	r3, r2
 80036ac:	0019      	movs	r1, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	4b3d      	ldr	r3, [pc, #244]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80036b4:	430a      	orrs	r2, r1
 80036b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80036b8:	e00c      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036ba:	2312      	movs	r3, #18
 80036bc:	18fb      	adds	r3, r7, r3
 80036be:	2213      	movs	r2, #19
 80036c0:	18ba      	adds	r2, r7, r2
 80036c2:	7812      	ldrb	r2, [r2, #0]
 80036c4:	701a      	strb	r2, [r3, #0]
 80036c6:	e005      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c8:	2312      	movs	r3, #18
 80036ca:	18fb      	adds	r3, r7, r3
 80036cc:	2213      	movs	r2, #19
 80036ce:	18ba      	adds	r2, r7, r2
 80036d0:	7812      	ldrb	r2, [r2, #0]
 80036d2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036d4:	2311      	movs	r3, #17
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d105      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036de:	4b32      	ldr	r3, [pc, #200]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80036e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036e2:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80036e4:	4935      	ldr	r1, [pc, #212]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036e6:	400a      	ands	r2, r1
 80036e8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2201      	movs	r2, #1
 80036f0:	4013      	ands	r3, r2
 80036f2:	d009      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036f4:	4b2c      	ldr	r3, [pc, #176]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80036f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f8:	2203      	movs	r2, #3
 80036fa:	4393      	bics	r3, r2
 80036fc:	0019      	movs	r1, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	4b29      	ldr	r3, [pc, #164]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003704:	430a      	orrs	r2, r1
 8003706:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2220      	movs	r2, #32
 800370e:	4013      	ands	r3, r2
 8003710:	d009      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003712:	4b25      	ldr	r3, [pc, #148]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003716:	4a2a      	ldr	r2, [pc, #168]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003718:	4013      	ands	r3, r2
 800371a:	0019      	movs	r1, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	4b21      	ldr	r3, [pc, #132]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003722:	430a      	orrs	r2, r1
 8003724:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	2380      	movs	r3, #128	; 0x80
 800372c:	01db      	lsls	r3, r3, #7
 800372e:	4013      	ands	r3, r2
 8003730:	d015      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003732:	4b1d      	ldr	r3, [pc, #116]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	0899      	lsrs	r1, r3, #2
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691a      	ldr	r2, [r3, #16]
 800373e:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003740:	430a      	orrs	r2, r1
 8003742:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	2380      	movs	r3, #128	; 0x80
 800374a:	05db      	lsls	r3, r3, #23
 800374c:	429a      	cmp	r2, r3
 800374e:	d106      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003750:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	4b14      	ldr	r3, [pc, #80]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003756:	2180      	movs	r1, #128	; 0x80
 8003758:	0249      	lsls	r1, r1, #9
 800375a:	430a      	orrs	r2, r1
 800375c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	2380      	movs	r3, #128	; 0x80
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	4013      	ands	r3, r2
 8003768:	d016      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800376a:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800376c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376e:	4a15      	ldr	r2, [pc, #84]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003770:	4013      	ands	r3, r2
 8003772:	0019      	movs	r1, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800377a:	430a      	orrs	r2, r1
 800377c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	2380      	movs	r3, #128	; 0x80
 8003784:	01db      	lsls	r3, r3, #7
 8003786:	429a      	cmp	r2, r3
 8003788:	d106      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800378a:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003790:	2180      	movs	r1, #128	; 0x80
 8003792:	0249      	lsls	r1, r1, #9
 8003794:	430a      	orrs	r2, r1
 8003796:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003798:	2312      	movs	r3, #18
 800379a:	18fb      	adds	r3, r7, r3
 800379c:	781b      	ldrb	r3, [r3, #0]
}
 800379e:	0018      	movs	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b006      	add	sp, #24
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40007000 	.word	0x40007000
 80037b0:	fffffcff 	.word	0xfffffcff
 80037b4:	fffeffff 	.word	0xfffeffff
 80037b8:	00001388 	.word	0x00001388
 80037bc:	efffffff 	.word	0xefffffff
 80037c0:	ffffcfff 	.word	0xffffcfff
 80037c4:	ffff3fff 	.word	0xffff3fff

080037c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e0a8      	b.n	800392c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	2382      	movs	r3, #130	; 0x82
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d009      	beq.n	8003802 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	61da      	str	r2, [r3, #28]
 80037f4:	e005      	b.n	8003802 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	225d      	movs	r2, #93	; 0x5d
 800380c:	5c9b      	ldrb	r3, [r3, r2]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d107      	bne.n	8003824 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	225c      	movs	r2, #92	; 0x5c
 8003818:	2100      	movs	r1, #0
 800381a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	0018      	movs	r0, r3
 8003820:	f7fd fa56 	bl	8000cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	225d      	movs	r2, #93	; 0x5d
 8003828:	2102      	movs	r1, #2
 800382a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2140      	movs	r1, #64	; 0x40
 8003838:	438a      	bics	r2, r1
 800383a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	23e0      	movs	r3, #224	; 0xe0
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	429a      	cmp	r2, r3
 8003846:	d902      	bls.n	800384e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e002      	b.n	8003854 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800384e:	2380      	movs	r3, #128	; 0x80
 8003850:	015b      	lsls	r3, r3, #5
 8003852:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	23f0      	movs	r3, #240	; 0xf0
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	429a      	cmp	r2, r3
 800385e:	d008      	beq.n	8003872 <HAL_SPI_Init+0xaa>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	23e0      	movs	r3, #224	; 0xe0
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	429a      	cmp	r2, r3
 800386a:	d002      	beq.n	8003872 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	2382      	movs	r3, #130	; 0x82
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	401a      	ands	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6899      	ldr	r1, [r3, #8]
 8003880:	2384      	movs	r3, #132	; 0x84
 8003882:	021b      	lsls	r3, r3, #8
 8003884:	400b      	ands	r3, r1
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	2102      	movs	r1, #2
 800388e:	400b      	ands	r3, r1
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	2101      	movs	r1, #1
 8003898:	400b      	ands	r3, r1
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6999      	ldr	r1, [r3, #24]
 80038a0:	2380      	movs	r3, #128	; 0x80
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	400b      	ands	r3, r1
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	2138      	movs	r1, #56	; 0x38
 80038ae:	400b      	ands	r3, r1
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	2180      	movs	r1, #128	; 0x80
 80038b8:	400b      	ands	r3, r1
 80038ba:	431a      	orrs	r2, r3
 80038bc:	0011      	movs	r1, r2
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	019b      	lsls	r3, r3, #6
 80038c6:	401a      	ands	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	0c1b      	lsrs	r3, r3, #16
 80038d6:	2204      	movs	r2, #4
 80038d8:	401a      	ands	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	2110      	movs	r1, #16
 80038e0:	400b      	ands	r3, r1
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e8:	2108      	movs	r1, #8
 80038ea:	400b      	ands	r3, r1
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68d9      	ldr	r1, [r3, #12]
 80038f2:	23f0      	movs	r3, #240	; 0xf0
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	400b      	ands	r3, r1
 80038f8:	431a      	orrs	r2, r3
 80038fa:	0011      	movs	r1, r2
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	2380      	movs	r3, #128	; 0x80
 8003900:	015b      	lsls	r3, r3, #5
 8003902:	401a      	ands	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69da      	ldr	r2, [r3, #28]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4907      	ldr	r1, [pc, #28]	; (8003934 <HAL_SPI_Init+0x16c>)
 8003918:	400a      	ands	r2, r1
 800391a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	225d      	movs	r2, #93	; 0x5d
 8003926:	2101      	movs	r1, #1
 8003928:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	0018      	movs	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	b004      	add	sp, #16
 8003932:	bd80      	pop	{r7, pc}
 8003934:	fffff7ff 	.word	0xfffff7ff

08003938 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e046      	b.n	80039d8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2284      	movs	r2, #132	; 0x84
 800394e:	589b      	ldr	r3, [r3, r2]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d107      	bne.n	8003964 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2280      	movs	r2, #128	; 0x80
 8003958:	2100      	movs	r1, #0
 800395a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	0018      	movs	r0, r3
 8003960:	f7fd fa00 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2284      	movs	r2, #132	; 0x84
 8003968:	2124      	movs	r1, #36	; 0x24
 800396a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2101      	movs	r1, #1
 8003978:	438a      	bics	r2, r1
 800397a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	0018      	movs	r0, r3
 8003980:	f000 fcd2 	bl	8004328 <UART_SetConfig>
 8003984:	0003      	movs	r3, r0
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e024      	b.n	80039d8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	0018      	movs	r0, r3
 800399a:	f000 fe2f 	bl	80045fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	490d      	ldr	r1, [pc, #52]	; (80039e0 <HAL_UART_Init+0xa8>)
 80039aa:	400a      	ands	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	212a      	movs	r1, #42	; 0x2a
 80039ba:	438a      	bics	r2, r1
 80039bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2101      	movs	r1, #1
 80039ca:	430a      	orrs	r2, r1
 80039cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	0018      	movs	r0, r3
 80039d2:	f000 fec7 	bl	8004764 <UART_CheckIdleState>
 80039d6:	0003      	movs	r3, r0
}
 80039d8:	0018      	movs	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	b002      	add	sp, #8
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	ffffb7ff 	.word	0xffffb7ff

080039e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08a      	sub	sp, #40	; 0x28
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	603b      	str	r3, [r7, #0]
 80039f0:	1dbb      	adds	r3, r7, #6
 80039f2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2284      	movs	r2, #132	; 0x84
 80039f8:	589b      	ldr	r3, [r3, r2]
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	d000      	beq.n	8003a00 <HAL_UART_Transmit+0x1c>
 80039fe:	e097      	b.n	8003b30 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_UART_Transmit+0x2a>
 8003a06:	1dbb      	adds	r3, r7, #6
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e08f      	b.n	8003b32 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	2380      	movs	r3, #128	; 0x80
 8003a18:	015b      	lsls	r3, r3, #5
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d109      	bne.n	8003a32 <HAL_UART_Transmit+0x4e>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d105      	bne.n	8003a32 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d001      	beq.n	8003a32 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e07f      	b.n	8003b32 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2280      	movs	r2, #128	; 0x80
 8003a36:	5c9b      	ldrb	r3, [r3, r2]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_UART_Transmit+0x5c>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e078      	b.n	8003b32 <HAL_UART_Transmit+0x14e>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2280      	movs	r2, #128	; 0x80
 8003a44:	2101      	movs	r1, #1
 8003a46:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	228c      	movs	r2, #140	; 0x8c
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2284      	movs	r2, #132	; 0x84
 8003a54:	2121      	movs	r1, #33	; 0x21
 8003a56:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a58:	f7fd fb96 	bl	8001188 <HAL_GetTick>
 8003a5c:	0003      	movs	r3, r0
 8003a5e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1dba      	adds	r2, r7, #6
 8003a64:	2154      	movs	r1, #84	; 0x54
 8003a66:	8812      	ldrh	r2, [r2, #0]
 8003a68:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1dba      	adds	r2, r7, #6
 8003a6e:	2156      	movs	r1, #86	; 0x56
 8003a70:	8812      	ldrh	r2, [r2, #0]
 8003a72:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	2380      	movs	r3, #128	; 0x80
 8003a7a:	015b      	lsls	r3, r3, #5
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d108      	bne.n	8003a92 <HAL_UART_Transmit+0xae>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d104      	bne.n	8003a92 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	61bb      	str	r3, [r7, #24]
 8003a90:	e003      	b.n	8003a9a <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2280      	movs	r2, #128	; 0x80
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003aa2:	e02c      	b.n	8003afe <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	0013      	movs	r3, r2
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2180      	movs	r1, #128	; 0x80
 8003ab2:	f000 fea1 	bl	80047f8 <UART_WaitOnFlagUntilTimeout>
 8003ab6:	1e03      	subs	r3, r0, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e039      	b.n	8003b32 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10b      	bne.n	8003adc <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	001a      	movs	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	05d2      	lsls	r2, r2, #23
 8003ad0:	0dd2      	lsrs	r2, r2, #23
 8003ad2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	3302      	adds	r3, #2
 8003ad8:	61bb      	str	r3, [r7, #24]
 8003ada:	e007      	b.n	8003aec <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	781a      	ldrb	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2256      	movs	r2, #86	; 0x56
 8003af0:	5a9b      	ldrh	r3, [r3, r2]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b299      	uxth	r1, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2256      	movs	r2, #86	; 0x56
 8003afc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2256      	movs	r2, #86	; 0x56
 8003b02:	5a9b      	ldrh	r3, [r3, r2]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1cc      	bne.n	8003aa4 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	0013      	movs	r3, r2
 8003b14:	2200      	movs	r2, #0
 8003b16:	2140      	movs	r1, #64	; 0x40
 8003b18:	f000 fe6e 	bl	80047f8 <UART_WaitOnFlagUntilTimeout>
 8003b1c:	1e03      	subs	r3, r0, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e006      	b.n	8003b32 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2284      	movs	r2, #132	; 0x84
 8003b28:	2120      	movs	r1, #32
 8003b2a:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	e000      	b.n	8003b32 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8003b30:	2302      	movs	r3, #2
  }
}
 8003b32:	0018      	movs	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	b008      	add	sp, #32
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08c      	sub	sp, #48	; 0x30
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	1dbb      	adds	r3, r7, #6
 8003b48:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2284      	movs	r2, #132	; 0x84
 8003b4e:	589b      	ldr	r3, [r3, r2]
 8003b50:	2b20      	cmp	r3, #32
 8003b52:	d000      	beq.n	8003b56 <HAL_UART_Transmit_IT+0x1a>
 8003b54:	e0a0      	b.n	8003c98 <HAL_UART_Transmit_IT+0x15c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_UART_Transmit_IT+0x28>
 8003b5c:	1dbb      	adds	r3, r7, #6
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e098      	b.n	8003c9a <HAL_UART_Transmit_IT+0x15e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	2380      	movs	r3, #128	; 0x80
 8003b6e:	015b      	lsls	r3, r3, #5
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d109      	bne.n	8003b88 <HAL_UART_Transmit_IT+0x4c>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d105      	bne.n	8003b88 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	4013      	ands	r3, r2
 8003b82:	d001      	beq.n	8003b88 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e088      	b.n	8003c9a <HAL_UART_Transmit_IT+0x15e>
      }
    }

    __HAL_LOCK(huart);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2280      	movs	r2, #128	; 0x80
 8003b8c:	5c9b      	ldrb	r3, [r3, r2]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_UART_Transmit_IT+0x5a>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e081      	b.n	8003c9a <HAL_UART_Transmit_IT+0x15e>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2280      	movs	r2, #128	; 0x80
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	1dba      	adds	r2, r7, #6
 8003ba8:	2154      	movs	r1, #84	; 0x54
 8003baa:	8812      	ldrh	r2, [r2, #0]
 8003bac:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1dba      	adds	r2, r7, #6
 8003bb2:	2156      	movs	r1, #86	; 0x56
 8003bb4:	8812      	ldrh	r2, [r2, #0]
 8003bb6:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	228c      	movs	r2, #140	; 0x8c
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2284      	movs	r2, #132	; 0x84
 8003bca:	2121      	movs	r1, #33	; 0x21
 8003bcc:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003bd2:	2380      	movs	r3, #128	; 0x80
 8003bd4:	059b      	lsls	r3, r3, #22
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d12e      	bne.n	8003c38 <HAL_UART_Transmit_IT+0xfc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	2380      	movs	r3, #128	; 0x80
 8003be0:	015b      	lsls	r3, r3, #5
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d107      	bne.n	8003bf6 <HAL_UART_Transmit_IT+0xba>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d103      	bne.n	8003bf6 <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4a2c      	ldr	r2, [pc, #176]	; (8003ca4 <HAL_UART_Transmit_IT+0x168>)
 8003bf2:	675a      	str	r2, [r3, #116]	; 0x74
 8003bf4:	e002      	b.n	8003bfc <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4a2b      	ldr	r2, [pc, #172]	; (8003ca8 <HAL_UART_Transmit_IT+0x16c>)
 8003bfa:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2280      	movs	r2, #128	; 0x80
 8003c00:	2100      	movs	r1, #0
 8003c02:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c04:	f3ef 8310 	mrs	r3, PRIMASK
 8003c08:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c0a:	69fb      	ldr	r3, [r7, #28]

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c0e:	2301      	movs	r3, #1
 8003c10:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	f383 8810 	msr	PRIMASK, r3
}
 8003c18:	46c0      	nop			; (mov r8, r8)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2180      	movs	r1, #128	; 0x80
 8003c26:	0409      	lsls	r1, r1, #16
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	609a      	str	r2, [r3, #8]
 8003c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	f383 8810 	msr	PRIMASK, r3
}
 8003c36:	e02d      	b.n	8003c94 <HAL_UART_Transmit_IT+0x158>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	2380      	movs	r3, #128	; 0x80
 8003c3e:	015b      	lsls	r3, r3, #5
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d107      	bne.n	8003c54 <HAL_UART_Transmit_IT+0x118>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d103      	bne.n	8003c54 <HAL_UART_Transmit_IT+0x118>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4a17      	ldr	r2, [pc, #92]	; (8003cac <HAL_UART_Transmit_IT+0x170>)
 8003c50:	675a      	str	r2, [r3, #116]	; 0x74
 8003c52:	e002      	b.n	8003c5a <HAL_UART_Transmit_IT+0x11e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4a16      	ldr	r2, [pc, #88]	; (8003cb0 <HAL_UART_Transmit_IT+0x174>)
 8003c58:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2280      	movs	r2, #128	; 0x80
 8003c5e:	2100      	movs	r1, #0
 8003c60:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c62:	f3ef 8310 	mrs	r3, PRIMASK
 8003c66:	613b      	str	r3, [r7, #16]
  return(result);
 8003c68:	693b      	ldr	r3, [r7, #16]

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f383 8810 	msr	PRIMASK, r3
}
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2180      	movs	r1, #128	; 0x80
 8003c84:	430a      	orrs	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	f383 8810 	msr	PRIMASK, r3
}
 8003c92:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	e000      	b.n	8003c9a <HAL_UART_Transmit_IT+0x15e>
  }
  else
  {
    return HAL_BUSY;
 8003c98:	2302      	movs	r3, #2
  }
}
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	b00c      	add	sp, #48	; 0x30
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	08005095 	.word	0x08005095
 8003ca8:	08004fa9 	.word	0x08004fa9
 8003cac:	08004ee9 	.word	0x08004ee9
 8003cb0:	08004e35 	.word	0x08004e35

08003cb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cb4:	b5b0      	push	{r4, r5, r7, lr}
 8003cb6:	b0aa      	sub	sp, #168	; 0xa8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	22a4      	movs	r2, #164	; 0xa4
 8003cc4:	18b9      	adds	r1, r7, r2
 8003cc6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	20a0      	movs	r0, #160	; 0xa0
 8003cd0:	1839      	adds	r1, r7, r0
 8003cd2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	249c      	movs	r4, #156	; 0x9c
 8003cdc:	1939      	adds	r1, r7, r4
 8003cde:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ce0:	0011      	movs	r1, r2
 8003ce2:	18bb      	adds	r3, r7, r2
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4aa0      	ldr	r2, [pc, #640]	; (8003f68 <HAL_UART_IRQHandler+0x2b4>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2298      	movs	r2, #152	; 0x98
 8003cec:	18bd      	adds	r5, r7, r2
 8003cee:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003cf0:	18bb      	adds	r3, r7, r2
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d11a      	bne.n	8003d2e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003cf8:	187b      	adds	r3, r7, r1
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d015      	beq.n	8003d2e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d02:	183b      	adds	r3, r7, r0
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2220      	movs	r2, #32
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d105      	bne.n	8003d18 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d0c:	193b      	adds	r3, r7, r4
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	055b      	lsls	r3, r3, #21
 8003d14:	4013      	ands	r3, r2
 8003d16:	d00a      	beq.n	8003d2e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d100      	bne.n	8003d22 <HAL_UART_IRQHandler+0x6e>
 8003d20:	e2cf      	b.n	80042c2 <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	0010      	movs	r0, r2
 8003d2a:	4798      	blx	r3
      }
      return;
 8003d2c:	e2c9      	b.n	80042c2 <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003d2e:	2398      	movs	r3, #152	; 0x98
 8003d30:	18fb      	adds	r3, r7, r3
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d100      	bne.n	8003d3a <HAL_UART_IRQHandler+0x86>
 8003d38:	e11e      	b.n	8003f78 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003d3a:	239c      	movs	r3, #156	; 0x9c
 8003d3c:	18fb      	adds	r3, r7, r3
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a8a      	ldr	r2, [pc, #552]	; (8003f6c <HAL_UART_IRQHandler+0x2b8>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	d106      	bne.n	8003d54 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003d46:	23a0      	movs	r3, #160	; 0xa0
 8003d48:	18fb      	adds	r3, r7, r3
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a88      	ldr	r2, [pc, #544]	; (8003f70 <HAL_UART_IRQHandler+0x2bc>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d100      	bne.n	8003d54 <HAL_UART_IRQHandler+0xa0>
 8003d52:	e111      	b.n	8003f78 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d54:	23a4      	movs	r3, #164	; 0xa4
 8003d56:	18fb      	adds	r3, r7, r3
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d012      	beq.n	8003d86 <HAL_UART_IRQHandler+0xd2>
 8003d60:	23a0      	movs	r3, #160	; 0xa0
 8003d62:	18fb      	adds	r3, r7, r3
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	2380      	movs	r3, #128	; 0x80
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d00b      	beq.n	8003d86 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2201      	movs	r2, #1
 8003d74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	228c      	movs	r2, #140	; 0x8c
 8003d7a:	589b      	ldr	r3, [r3, r2]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	218c      	movs	r1, #140	; 0x8c
 8003d84:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d86:	23a4      	movs	r3, #164	; 0xa4
 8003d88:	18fb      	adds	r3, r7, r3
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d011      	beq.n	8003db6 <HAL_UART_IRQHandler+0x102>
 8003d92:	239c      	movs	r3, #156	; 0x9c
 8003d94:	18fb      	adds	r3, r7, r3
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d00b      	beq.n	8003db6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2202      	movs	r2, #2
 8003da4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	228c      	movs	r2, #140	; 0x8c
 8003daa:	589b      	ldr	r3, [r3, r2]
 8003dac:	2204      	movs	r2, #4
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	218c      	movs	r1, #140	; 0x8c
 8003db4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003db6:	23a4      	movs	r3, #164	; 0xa4
 8003db8:	18fb      	adds	r3, r7, r3
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2204      	movs	r2, #4
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d011      	beq.n	8003de6 <HAL_UART_IRQHandler+0x132>
 8003dc2:	239c      	movs	r3, #156	; 0x9c
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d00b      	beq.n	8003de6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	228c      	movs	r2, #140	; 0x8c
 8003dda:	589b      	ldr	r3, [r3, r2]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	218c      	movs	r1, #140	; 0x8c
 8003de4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003de6:	23a4      	movs	r3, #164	; 0xa4
 8003de8:	18fb      	adds	r3, r7, r3
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2208      	movs	r2, #8
 8003dee:	4013      	ands	r3, r2
 8003df0:	d017      	beq.n	8003e22 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003df2:	23a0      	movs	r3, #160	; 0xa0
 8003df4:	18fb      	adds	r3, r7, r3
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d105      	bne.n	8003e0a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003dfe:	239c      	movs	r3, #156	; 0x9c
 8003e00:	18fb      	adds	r3, r7, r3
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a59      	ldr	r2, [pc, #356]	; (8003f6c <HAL_UART_IRQHandler+0x2b8>)
 8003e06:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003e08:	d00b      	beq.n	8003e22 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2208      	movs	r2, #8
 8003e10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	228c      	movs	r2, #140	; 0x8c
 8003e16:	589b      	ldr	r3, [r3, r2]
 8003e18:	2208      	movs	r2, #8
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	218c      	movs	r1, #140	; 0x8c
 8003e20:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e22:	23a4      	movs	r3, #164	; 0xa4
 8003e24:	18fb      	adds	r3, r7, r3
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <HAL_UART_IRQHandler+0x1a4>
 8003e30:	23a0      	movs	r3, #160	; 0xa0
 8003e32:	18fb      	adds	r3, r7, r3
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	2380      	movs	r3, #128	; 0x80
 8003e38:	04db      	lsls	r3, r3, #19
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	d00c      	beq.n	8003e58 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2280      	movs	r2, #128	; 0x80
 8003e44:	0112      	lsls	r2, r2, #4
 8003e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	228c      	movs	r2, #140	; 0x8c
 8003e4c:	589b      	ldr	r3, [r3, r2]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	218c      	movs	r1, #140	; 0x8c
 8003e56:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	228c      	movs	r2, #140	; 0x8c
 8003e5c:	589b      	ldr	r3, [r3, r2]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d100      	bne.n	8003e64 <HAL_UART_IRQHandler+0x1b0>
 8003e62:	e230      	b.n	80042c6 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e64:	23a4      	movs	r3, #164	; 0xa4
 8003e66:	18fb      	adds	r3, r7, r3
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d015      	beq.n	8003e9c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e70:	23a0      	movs	r3, #160	; 0xa0
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2220      	movs	r2, #32
 8003e78:	4013      	ands	r3, r2
 8003e7a:	d106      	bne.n	8003e8a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e7c:	239c      	movs	r3, #156	; 0x9c
 8003e7e:	18fb      	adds	r3, r7, r3
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	2380      	movs	r3, #128	; 0x80
 8003e84:	055b      	lsls	r3, r3, #21
 8003e86:	4013      	ands	r3, r2
 8003e88:	d008      	beq.n	8003e9c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d004      	beq.n	8003e9c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	0010      	movs	r0, r2
 8003e9a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	228c      	movs	r2, #140	; 0x8c
 8003ea0:	589b      	ldr	r3, [r3, r2]
 8003ea2:	2194      	movs	r1, #148	; 0x94
 8003ea4:	187a      	adds	r2, r7, r1
 8003ea6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2240      	movs	r2, #64	; 0x40
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b40      	cmp	r3, #64	; 0x40
 8003eb4:	d004      	beq.n	8003ec0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003eb6:	187b      	adds	r3, r7, r1
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2228      	movs	r2, #40	; 0x28
 8003ebc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ebe:	d047      	beq.n	8003f50 <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f000 fe44 	bl	8004b50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2240      	movs	r2, #64	; 0x40
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b40      	cmp	r3, #64	; 0x40
 8003ed4:	d137      	bne.n	8003f46 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8003eda:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003edc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ede:	2090      	movs	r0, #144	; 0x90
 8003ee0:	183a      	adds	r2, r7, r0
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eea:	f383 8810 	msr	PRIMASK, r3
}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2140      	movs	r1, #64	; 0x40
 8003efc:	438a      	bics	r2, r1
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	183b      	adds	r3, r7, r0
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f08:	f383 8810 	msr	PRIMASK, r3
}
 8003f0c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d012      	beq.n	8003f3c <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f1a:	4a16      	ldr	r2, [pc, #88]	; (8003f74 <HAL_UART_IRQHandler+0x2c0>)
 8003f1c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f22:	0018      	movs	r0, r3
 8003f24:	f7fd fbb6 	bl	8001694 <HAL_DMA_Abort_IT>
 8003f28:	1e03      	subs	r3, r0, #0
 8003f2a:	d01a      	beq.n	8003f62 <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f36:	0018      	movs	r0, r3
 8003f38:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f3a:	e012      	b.n	8003f62 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f000 f9ea 	bl	8004318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f44:	e00d      	b.n	8003f62 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f000 f9e5 	bl	8004318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4e:	e008      	b.n	8003f62 <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	0018      	movs	r0, r3
 8003f54:	f000 f9e0 	bl	8004318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	228c      	movs	r2, #140	; 0x8c
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003f60:	e1b1      	b.n	80042c6 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f62:	46c0      	nop			; (mov r8, r8)
    return;
 8003f64:	e1af      	b.n	80042c6 <HAL_UART_IRQHandler+0x612>
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	0000080f 	.word	0x0000080f
 8003f6c:	10000001 	.word	0x10000001
 8003f70:	04000120 	.word	0x04000120
 8003f74:	08004e07 	.word	0x08004e07

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d000      	beq.n	8003f82 <HAL_UART_IRQHandler+0x2ce>
 8003f80:	e135      	b.n	80041ee <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f82:	23a4      	movs	r3, #164	; 0xa4
 8003f84:	18fb      	adds	r3, r7, r3
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2210      	movs	r2, #16
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d100      	bne.n	8003f90 <HAL_UART_IRQHandler+0x2dc>
 8003f8e:	e12e      	b.n	80041ee <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f90:	23a0      	movs	r3, #160	; 0xa0
 8003f92:	18fb      	adds	r3, r7, r3
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2210      	movs	r2, #16
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d100      	bne.n	8003f9e <HAL_UART_IRQHandler+0x2ea>
 8003f9c:	e127      	b.n	80041ee <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2210      	movs	r2, #16
 8003fa4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2240      	movs	r2, #64	; 0x40
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b40      	cmp	r3, #64	; 0x40
 8003fb2:	d000      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x302>
 8003fb4:	e09e      	b.n	80040f4 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	217e      	movs	r1, #126	; 0x7e
 8003fc0:	187b      	adds	r3, r7, r1
 8003fc2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003fc4:	187b      	adds	r3, r7, r1
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d100      	bne.n	8003fce <HAL_UART_IRQHandler+0x31a>
 8003fcc:	e17d      	b.n	80042ca <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	225c      	movs	r2, #92	; 0x5c
 8003fd2:	5a9b      	ldrh	r3, [r3, r2]
 8003fd4:	187a      	adds	r2, r7, r1
 8003fd6:	8812      	ldrh	r2, [r2, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d300      	bcc.n	8003fde <HAL_UART_IRQHandler+0x32a>
 8003fdc:	e175      	b.n	80042ca <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	187a      	adds	r2, r7, r1
 8003fe2:	215e      	movs	r1, #94	; 0x5e
 8003fe4:	8812      	ldrh	r2, [r2, #0]
 8003fe6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d16f      	bne.n	80040d6 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8003ffa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ffe:	67bb      	str	r3, [r7, #120]	; 0x78
 8004000:	2301      	movs	r3, #1
 8004002:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004006:	f383 8810 	msr	PRIMASK, r3
}
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	49b1      	ldr	r1, [pc, #708]	; (80042dc <HAL_UART_IRQHandler+0x628>)
 8004018:	400a      	ands	r2, r1
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800401e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004022:	f383 8810 	msr	PRIMASK, r3
}
 8004026:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004028:	f3ef 8310 	mrs	r3, PRIMASK
 800402c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800402e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004030:	677b      	str	r3, [r7, #116]	; 0x74
 8004032:	2301      	movs	r3, #1
 8004034:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004038:	f383 8810 	msr	PRIMASK, r3
}
 800403c:	46c0      	nop			; (mov r8, r8)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2101      	movs	r1, #1
 800404a:	438a      	bics	r2, r1
 800404c:	609a      	str	r2, [r3, #8]
 800404e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004050:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004054:	f383 8810 	msr	PRIMASK, r3
}
 8004058:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800405a:	f3ef 8310 	mrs	r3, PRIMASK
 800405e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004060:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004062:	673b      	str	r3, [r7, #112]	; 0x70
 8004064:	2301      	movs	r3, #1
 8004066:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800406a:	f383 8810 	msr	PRIMASK, r3
}
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2140      	movs	r1, #64	; 0x40
 800407c:	438a      	bics	r2, r1
 800407e:	609a      	str	r2, [r3, #8]
 8004080:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004082:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004086:	f383 8810 	msr	PRIMASK, r3
}
 800408a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2288      	movs	r2, #136	; 0x88
 8004090:	2120      	movs	r1, #32
 8004092:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800409a:	f3ef 8310 	mrs	r3, PRIMASK
 800409e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80040a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040a4:	2301      	movs	r3, #1
 80040a6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040aa:	f383 8810 	msr	PRIMASK, r3
}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2110      	movs	r1, #16
 80040bc:	438a      	bics	r2, r1
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040c6:	f383 8810 	msr	PRIMASK, r3
}
 80040ca:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040d0:	0018      	movs	r0, r3
 80040d2:	f7fd fa7d 	bl	80015d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	225c      	movs	r2, #92	; 0x5c
 80040da:	5a9a      	ldrh	r2, [r3, r2]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	215e      	movs	r1, #94	; 0x5e
 80040e0:	5a5b      	ldrh	r3, [r3, r1]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	0011      	movs	r1, r2
 80040ec:	0018      	movs	r0, r3
 80040ee:	f7fc fa5b 	bl	80005a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040f2:	e0ea      	b.n	80042ca <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	225c      	movs	r2, #92	; 0x5c
 80040f8:	5a99      	ldrh	r1, [r3, r2]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	225e      	movs	r2, #94	; 0x5e
 80040fe:	5a9b      	ldrh	r3, [r3, r2]
 8004100:	b29a      	uxth	r2, r3
 8004102:	208e      	movs	r0, #142	; 0x8e
 8004104:	183b      	adds	r3, r7, r0
 8004106:	1a8a      	subs	r2, r1, r2
 8004108:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	225e      	movs	r2, #94	; 0x5e
 800410e:	5a9b      	ldrh	r3, [r3, r2]
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d100      	bne.n	8004118 <HAL_UART_IRQHandler+0x464>
 8004116:	e0da      	b.n	80042ce <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8004118:	183b      	adds	r3, r7, r0
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d100      	bne.n	8004122 <HAL_UART_IRQHandler+0x46e>
 8004120:	e0d5      	b.n	80042ce <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004122:	f3ef 8310 	mrs	r3, PRIMASK
 8004126:	60fb      	str	r3, [r7, #12]
  return(result);
 8004128:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800412a:	2488      	movs	r4, #136	; 0x88
 800412c:	193a      	adds	r2, r7, r4
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	2301      	movs	r3, #1
 8004132:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f383 8810 	msr	PRIMASK, r3
}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4966      	ldr	r1, [pc, #408]	; (80042e0 <HAL_UART_IRQHandler+0x62c>)
 8004148:	400a      	ands	r2, r1
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	193b      	adds	r3, r7, r4
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f383 8810 	msr	PRIMASK, r3
}
 8004158:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800415a:	f3ef 8310 	mrs	r3, PRIMASK
 800415e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004160:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004162:	2484      	movs	r4, #132	; 0x84
 8004164:	193a      	adds	r2, r7, r4
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	2301      	movs	r3, #1
 800416a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f383 8810 	msr	PRIMASK, r3
}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689a      	ldr	r2, [r3, #8]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4959      	ldr	r1, [pc, #356]	; (80042e4 <HAL_UART_IRQHandler+0x630>)
 8004180:	400a      	ands	r2, r1
 8004182:	609a      	str	r2, [r3, #8]
 8004184:	193b      	adds	r3, r7, r4
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	f383 8810 	msr	PRIMASK, r3
}
 8004190:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2288      	movs	r2, #136	; 0x88
 8004196:	2120      	movs	r1, #32
 8004198:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041a6:	f3ef 8310 	mrs	r3, PRIMASK
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ae:	2480      	movs	r4, #128	; 0x80
 80041b0:	193a      	adds	r2, r7, r4
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	2301      	movs	r3, #1
 80041b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ba:	f383 8810 	msr	PRIMASK, r3
}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2110      	movs	r1, #16
 80041cc:	438a      	bics	r2, r1
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	193b      	adds	r3, r7, r4
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d8:	f383 8810 	msr	PRIMASK, r3
}
 80041dc:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041de:	183b      	adds	r3, r7, r0
 80041e0:	881a      	ldrh	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	0011      	movs	r1, r2
 80041e6:	0018      	movs	r0, r3
 80041e8:	f7fc f9de 	bl	80005a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041ec:	e06f      	b.n	80042ce <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80041ee:	23a4      	movs	r3, #164	; 0xa4
 80041f0:	18fb      	adds	r3, r7, r3
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	2380      	movs	r3, #128	; 0x80
 80041f6:	035b      	lsls	r3, r3, #13
 80041f8:	4013      	ands	r3, r2
 80041fa:	d010      	beq.n	800421e <HAL_UART_IRQHandler+0x56a>
 80041fc:	239c      	movs	r3, #156	; 0x9c
 80041fe:	18fb      	adds	r3, r7, r3
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	2380      	movs	r3, #128	; 0x80
 8004204:	03db      	lsls	r3, r3, #15
 8004206:	4013      	ands	r3, r2
 8004208:	d009      	beq.n	800421e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2280      	movs	r2, #128	; 0x80
 8004210:	0352      	lsls	r2, r2, #13
 8004212:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	0018      	movs	r0, r3
 8004218:	f000 ffe2 	bl	80051e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800421c:	e05a      	b.n	80042d4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800421e:	23a4      	movs	r3, #164	; 0xa4
 8004220:	18fb      	adds	r3, r7, r3
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2280      	movs	r2, #128	; 0x80
 8004226:	4013      	ands	r3, r2
 8004228:	d016      	beq.n	8004258 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800422a:	23a0      	movs	r3, #160	; 0xa0
 800422c:	18fb      	adds	r3, r7, r3
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2280      	movs	r2, #128	; 0x80
 8004232:	4013      	ands	r3, r2
 8004234:	d106      	bne.n	8004244 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004236:	239c      	movs	r3, #156	; 0x9c
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	2380      	movs	r3, #128	; 0x80
 800423e:	041b      	lsls	r3, r3, #16
 8004240:	4013      	ands	r3, r2
 8004242:	d009      	beq.n	8004258 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004248:	2b00      	cmp	r3, #0
 800424a:	d042      	beq.n	80042d2 <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	0010      	movs	r0, r2
 8004254:	4798      	blx	r3
    }
    return;
 8004256:	e03c      	b.n	80042d2 <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004258:	23a4      	movs	r3, #164	; 0xa4
 800425a:	18fb      	adds	r3, r7, r3
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2240      	movs	r2, #64	; 0x40
 8004260:	4013      	ands	r3, r2
 8004262:	d00a      	beq.n	800427a <HAL_UART_IRQHandler+0x5c6>
 8004264:	23a0      	movs	r3, #160	; 0xa0
 8004266:	18fb      	adds	r3, r7, r3
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2240      	movs	r2, #64	; 0x40
 800426c:	4013      	ands	r3, r2
 800426e:	d004      	beq.n	800427a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	0018      	movs	r0, r3
 8004274:	f000 ff88 	bl	8005188 <UART_EndTransmit_IT>
    return;
 8004278:	e02c      	b.n	80042d4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800427a:	23a4      	movs	r3, #164	; 0xa4
 800427c:	18fb      	adds	r3, r7, r3
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	2380      	movs	r3, #128	; 0x80
 8004282:	041b      	lsls	r3, r3, #16
 8004284:	4013      	ands	r3, r2
 8004286:	d00b      	beq.n	80042a0 <HAL_UART_IRQHandler+0x5ec>
 8004288:	23a0      	movs	r3, #160	; 0xa0
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	2380      	movs	r3, #128	; 0x80
 8004290:	05db      	lsls	r3, r3, #23
 8004292:	4013      	ands	r3, r2
 8004294:	d004      	beq.n	80042a0 <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	0018      	movs	r0, r3
 800429a:	f000 ffb1 	bl	8005200 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800429e:	e019      	b.n	80042d4 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80042a0:	23a4      	movs	r3, #164	; 0xa4
 80042a2:	18fb      	adds	r3, r7, r3
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	2380      	movs	r3, #128	; 0x80
 80042a8:	045b      	lsls	r3, r3, #17
 80042aa:	4013      	ands	r3, r2
 80042ac:	d012      	beq.n	80042d4 <HAL_UART_IRQHandler+0x620>
 80042ae:	23a0      	movs	r3, #160	; 0xa0
 80042b0:	18fb      	adds	r3, r7, r3
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	da0d      	bge.n	80042d4 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	0018      	movs	r0, r3
 80042bc:	f000 ff98 	bl	80051f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042c0:	e008      	b.n	80042d4 <HAL_UART_IRQHandler+0x620>
      return;
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	e006      	b.n	80042d4 <HAL_UART_IRQHandler+0x620>
    return;
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	e004      	b.n	80042d4 <HAL_UART_IRQHandler+0x620>
      return;
 80042ca:	46c0      	nop			; (mov r8, r8)
 80042cc:	e002      	b.n	80042d4 <HAL_UART_IRQHandler+0x620>
      return;
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	e000      	b.n	80042d4 <HAL_UART_IRQHandler+0x620>
    return;
 80042d2:	46c0      	nop			; (mov r8, r8)
  }
}
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b02a      	add	sp, #168	; 0xa8
 80042d8:	bdb0      	pop	{r4, r5, r7, pc}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	fffffeff 	.word	0xfffffeff
 80042e0:	fffffedf 	.word	0xfffffedf
 80042e4:	effffffe 	.word	0xeffffffe

080042e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80042f0:	46c0      	nop			; (mov r8, r8)
 80042f2:	46bd      	mov	sp, r7
 80042f4:	b002      	add	sp, #8
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004300:	46c0      	nop			; (mov r8, r8)
 8004302:	46bd      	mov	sp, r7
 8004304:	b002      	add	sp, #8
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004310:	46c0      	nop			; (mov r8, r8)
 8004312:	46bd      	mov	sp, r7
 8004314:	b002      	add	sp, #8
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004320:	46c0      	nop			; (mov r8, r8)
 8004322:	46bd      	mov	sp, r7
 8004324:	b002      	add	sp, #8
 8004326:	bd80      	pop	{r7, pc}

08004328 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004330:	231a      	movs	r3, #26
 8004332:	18fb      	adds	r3, r7, r3
 8004334:	2200      	movs	r2, #0
 8004336:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	4313      	orrs	r3, r2
 800434e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4aa1      	ldr	r2, [pc, #644]	; (80045dc <UART_SetConfig+0x2b4>)
 8004358:	4013      	ands	r3, r2
 800435a:	0019      	movs	r1, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	430a      	orrs	r2, r1
 8004364:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	4a9c      	ldr	r2, [pc, #624]	; (80045e0 <UART_SetConfig+0x2b8>)
 800436e:	4013      	ands	r3, r2
 8004370:	0019      	movs	r1, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	4313      	orrs	r3, r2
 800438c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	4a93      	ldr	r2, [pc, #588]	; (80045e4 <UART_SetConfig+0x2bc>)
 8004396:	4013      	ands	r3, r2
 8004398:	0019      	movs	r1, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69fa      	ldr	r2, [r7, #28]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	220f      	movs	r2, #15
 80043ac:	4393      	bics	r3, r2
 80043ae:	0019      	movs	r1, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a89      	ldr	r2, [pc, #548]	; (80045e8 <UART_SetConfig+0x2c0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d127      	bne.n	8004416 <UART_SetConfig+0xee>
 80043c6:	4b89      	ldr	r3, [pc, #548]	; (80045ec <UART_SetConfig+0x2c4>)
 80043c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ca:	2203      	movs	r2, #3
 80043cc:	4013      	ands	r3, r2
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d017      	beq.n	8004402 <UART_SetConfig+0xda>
 80043d2:	d81b      	bhi.n	800440c <UART_SetConfig+0xe4>
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d00a      	beq.n	80043ee <UART_SetConfig+0xc6>
 80043d8:	d818      	bhi.n	800440c <UART_SetConfig+0xe4>
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <UART_SetConfig+0xbc>
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d00a      	beq.n	80043f8 <UART_SetConfig+0xd0>
 80043e2:	e013      	b.n	800440c <UART_SetConfig+0xe4>
 80043e4:	231b      	movs	r3, #27
 80043e6:	18fb      	adds	r3, r7, r3
 80043e8:	2200      	movs	r2, #0
 80043ea:	701a      	strb	r2, [r3, #0]
 80043ec:	e021      	b.n	8004432 <UART_SetConfig+0x10a>
 80043ee:	231b      	movs	r3, #27
 80043f0:	18fb      	adds	r3, r7, r3
 80043f2:	2202      	movs	r2, #2
 80043f4:	701a      	strb	r2, [r3, #0]
 80043f6:	e01c      	b.n	8004432 <UART_SetConfig+0x10a>
 80043f8:	231b      	movs	r3, #27
 80043fa:	18fb      	adds	r3, r7, r3
 80043fc:	2204      	movs	r2, #4
 80043fe:	701a      	strb	r2, [r3, #0]
 8004400:	e017      	b.n	8004432 <UART_SetConfig+0x10a>
 8004402:	231b      	movs	r3, #27
 8004404:	18fb      	adds	r3, r7, r3
 8004406:	2208      	movs	r2, #8
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	e012      	b.n	8004432 <UART_SetConfig+0x10a>
 800440c:	231b      	movs	r3, #27
 800440e:	18fb      	adds	r3, r7, r3
 8004410:	2210      	movs	r2, #16
 8004412:	701a      	strb	r2, [r3, #0]
 8004414:	e00d      	b.n	8004432 <UART_SetConfig+0x10a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a75      	ldr	r2, [pc, #468]	; (80045f0 <UART_SetConfig+0x2c8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d104      	bne.n	800442a <UART_SetConfig+0x102>
 8004420:	231b      	movs	r3, #27
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	2200      	movs	r2, #0
 8004426:	701a      	strb	r2, [r3, #0]
 8004428:	e003      	b.n	8004432 <UART_SetConfig+0x10a>
 800442a:	231b      	movs	r3, #27
 800442c:	18fb      	adds	r3, r7, r3
 800442e:	2210      	movs	r2, #16
 8004430:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69da      	ldr	r2, [r3, #28]
 8004436:	2380      	movs	r3, #128	; 0x80
 8004438:	021b      	lsls	r3, r3, #8
 800443a:	429a      	cmp	r2, r3
 800443c:	d000      	beq.n	8004440 <UART_SetConfig+0x118>
 800443e:	e066      	b.n	800450e <UART_SetConfig+0x1e6>
  {
    switch (clocksource)
 8004440:	231b      	movs	r3, #27
 8004442:	18fb      	adds	r3, r7, r3
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b08      	cmp	r3, #8
 8004448:	d015      	beq.n	8004476 <UART_SetConfig+0x14e>
 800444a:	dc18      	bgt.n	800447e <UART_SetConfig+0x156>
 800444c:	2b04      	cmp	r3, #4
 800444e:	d00d      	beq.n	800446c <UART_SetConfig+0x144>
 8004450:	dc15      	bgt.n	800447e <UART_SetConfig+0x156>
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <UART_SetConfig+0x134>
 8004456:	2b02      	cmp	r3, #2
 8004458:	d005      	beq.n	8004466 <UART_SetConfig+0x13e>
 800445a:	e010      	b.n	800447e <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800445c:	f7ff f878 	bl	8003550 <HAL_RCC_GetPCLK1Freq>
 8004460:	0003      	movs	r3, r0
 8004462:	617b      	str	r3, [r7, #20]
        break;
 8004464:	e012      	b.n	800448c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004466:	4b63      	ldr	r3, [pc, #396]	; (80045f4 <UART_SetConfig+0x2cc>)
 8004468:	617b      	str	r3, [r7, #20]
        break;
 800446a:	e00f      	b.n	800448c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800446c:	f7fe ffe4 	bl	8003438 <HAL_RCC_GetSysClockFreq>
 8004470:	0003      	movs	r3, r0
 8004472:	617b      	str	r3, [r7, #20]
        break;
 8004474:	e00a      	b.n	800448c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004476:	2380      	movs	r3, #128	; 0x80
 8004478:	021b      	lsls	r3, r3, #8
 800447a:	617b      	str	r3, [r7, #20]
        break;
 800447c:	e006      	b.n	800448c <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004482:	231a      	movs	r3, #26
 8004484:	18fb      	adds	r3, r7, r3
 8004486:	2201      	movs	r2, #1
 8004488:	701a      	strb	r2, [r3, #0]
        break;
 800448a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d100      	bne.n	8004494 <UART_SetConfig+0x16c>
 8004492:	e08e      	b.n	80045b2 <UART_SetConfig+0x28a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004498:	4b57      	ldr	r3, [pc, #348]	; (80045f8 <UART_SetConfig+0x2d0>)
 800449a:	0052      	lsls	r2, r2, #1
 800449c:	5ad3      	ldrh	r3, [r2, r3]
 800449e:	0019      	movs	r1, r3
 80044a0:	6978      	ldr	r0, [r7, #20]
 80044a2:	f7fb fe2d 	bl	8000100 <__udivsi3>
 80044a6:	0003      	movs	r3, r0
 80044a8:	005a      	lsls	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	085b      	lsrs	r3, r3, #1
 80044b0:	18d2      	adds	r2, r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	0019      	movs	r1, r3
 80044b8:	0010      	movs	r0, r2
 80044ba:	f7fb fe21 	bl	8000100 <__udivsi3>
 80044be:	0003      	movs	r3, r0
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	2b0f      	cmp	r3, #15
 80044c8:	d91c      	bls.n	8004504 <UART_SetConfig+0x1dc>
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	2380      	movs	r3, #128	; 0x80
 80044ce:	025b      	lsls	r3, r3, #9
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d217      	bcs.n	8004504 <UART_SetConfig+0x1dc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	200e      	movs	r0, #14
 80044da:	183b      	adds	r3, r7, r0
 80044dc:	210f      	movs	r1, #15
 80044de:	438a      	bics	r2, r1
 80044e0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	085b      	lsrs	r3, r3, #1
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2207      	movs	r2, #7
 80044ea:	4013      	ands	r3, r2
 80044ec:	b299      	uxth	r1, r3
 80044ee:	183b      	adds	r3, r7, r0
 80044f0:	183a      	adds	r2, r7, r0
 80044f2:	8812      	ldrh	r2, [r2, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	183a      	adds	r2, r7, r0
 80044fe:	8812      	ldrh	r2, [r2, #0]
 8004500:	60da      	str	r2, [r3, #12]
 8004502:	e056      	b.n	80045b2 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
 8004504:	231a      	movs	r3, #26
 8004506:	18fb      	adds	r3, r7, r3
 8004508:	2201      	movs	r2, #1
 800450a:	701a      	strb	r2, [r3, #0]
 800450c:	e051      	b.n	80045b2 <UART_SetConfig+0x28a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800450e:	231b      	movs	r3, #27
 8004510:	18fb      	adds	r3, r7, r3
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b08      	cmp	r3, #8
 8004516:	d015      	beq.n	8004544 <UART_SetConfig+0x21c>
 8004518:	dc18      	bgt.n	800454c <UART_SetConfig+0x224>
 800451a:	2b04      	cmp	r3, #4
 800451c:	d00d      	beq.n	800453a <UART_SetConfig+0x212>
 800451e:	dc15      	bgt.n	800454c <UART_SetConfig+0x224>
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <UART_SetConfig+0x202>
 8004524:	2b02      	cmp	r3, #2
 8004526:	d005      	beq.n	8004534 <UART_SetConfig+0x20c>
 8004528:	e010      	b.n	800454c <UART_SetConfig+0x224>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800452a:	f7ff f811 	bl	8003550 <HAL_RCC_GetPCLK1Freq>
 800452e:	0003      	movs	r3, r0
 8004530:	617b      	str	r3, [r7, #20]
        break;
 8004532:	e012      	b.n	800455a <UART_SetConfig+0x232>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004534:	4b2f      	ldr	r3, [pc, #188]	; (80045f4 <UART_SetConfig+0x2cc>)
 8004536:	617b      	str	r3, [r7, #20]
        break;
 8004538:	e00f      	b.n	800455a <UART_SetConfig+0x232>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800453a:	f7fe ff7d 	bl	8003438 <HAL_RCC_GetSysClockFreq>
 800453e:	0003      	movs	r3, r0
 8004540:	617b      	str	r3, [r7, #20]
        break;
 8004542:	e00a      	b.n	800455a <UART_SetConfig+0x232>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004544:	2380      	movs	r3, #128	; 0x80
 8004546:	021b      	lsls	r3, r3, #8
 8004548:	617b      	str	r3, [r7, #20]
        break;
 800454a:	e006      	b.n	800455a <UART_SetConfig+0x232>
      default:
        pclk = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004550:	231a      	movs	r3, #26
 8004552:	18fb      	adds	r3, r7, r3
 8004554:	2201      	movs	r2, #1
 8004556:	701a      	strb	r2, [r3, #0]
        break;
 8004558:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d028      	beq.n	80045b2 <UART_SetConfig+0x28a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004564:	4b24      	ldr	r3, [pc, #144]	; (80045f8 <UART_SetConfig+0x2d0>)
 8004566:	0052      	lsls	r2, r2, #1
 8004568:	5ad3      	ldrh	r3, [r2, r3]
 800456a:	0019      	movs	r1, r3
 800456c:	6978      	ldr	r0, [r7, #20]
 800456e:	f7fb fdc7 	bl	8000100 <__udivsi3>
 8004572:	0003      	movs	r3, r0
 8004574:	001a      	movs	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	085b      	lsrs	r3, r3, #1
 800457c:	18d2      	adds	r2, r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	0019      	movs	r1, r3
 8004584:	0010      	movs	r0, r2
 8004586:	f7fb fdbb 	bl	8000100 <__udivsi3>
 800458a:	0003      	movs	r3, r0
 800458c:	b29b      	uxth	r3, r3
 800458e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	2b0f      	cmp	r3, #15
 8004594:	d909      	bls.n	80045aa <UART_SetConfig+0x282>
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	2380      	movs	r3, #128	; 0x80
 800459a:	025b      	lsls	r3, r3, #9
 800459c:	429a      	cmp	r2, r3
 800459e:	d204      	bcs.n	80045aa <UART_SetConfig+0x282>
      {
        huart->Instance->BRR = usartdiv;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	60da      	str	r2, [r3, #12]
 80045a8:	e003      	b.n	80045b2 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
 80045aa:	231a      	movs	r3, #26
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	2201      	movs	r2, #1
 80045b0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	226a      	movs	r2, #106	; 0x6a
 80045b6:	2101      	movs	r1, #1
 80045b8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2268      	movs	r2, #104	; 0x68
 80045be:	2101      	movs	r1, #1
 80045c0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80045ce:	231a      	movs	r3, #26
 80045d0:	18fb      	adds	r3, r7, r3
 80045d2:	781b      	ldrb	r3, [r3, #0]
}
 80045d4:	0018      	movs	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b008      	add	sp, #32
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	cfff69f3 	.word	0xcfff69f3
 80045e0:	ffffcfff 	.word	0xffffcfff
 80045e4:	11fff4ff 	.word	0x11fff4ff
 80045e8:	40013800 	.word	0x40013800
 80045ec:	40021000 	.word	0x40021000
 80045f0:	40004400 	.word	0x40004400
 80045f4:	00f42400 	.word	0x00f42400
 80045f8:	08005608 	.word	0x08005608

080045fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004608:	2201      	movs	r2, #1
 800460a:	4013      	ands	r3, r2
 800460c:	d00b      	beq.n	8004626 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	4a4a      	ldr	r2, [pc, #296]	; (8004740 <UART_AdvFeatureConfig+0x144>)
 8004616:	4013      	ands	r3, r2
 8004618:	0019      	movs	r1, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462a:	2202      	movs	r2, #2
 800462c:	4013      	ands	r3, r2
 800462e:	d00b      	beq.n	8004648 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	4a43      	ldr	r2, [pc, #268]	; (8004744 <UART_AdvFeatureConfig+0x148>)
 8004638:	4013      	ands	r3, r2
 800463a:	0019      	movs	r1, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464c:	2204      	movs	r2, #4
 800464e:	4013      	ands	r3, r2
 8004650:	d00b      	beq.n	800466a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	4a3b      	ldr	r2, [pc, #236]	; (8004748 <UART_AdvFeatureConfig+0x14c>)
 800465a:	4013      	ands	r3, r2
 800465c:	0019      	movs	r1, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466e:	2208      	movs	r2, #8
 8004670:	4013      	ands	r3, r2
 8004672:	d00b      	beq.n	800468c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	4a34      	ldr	r2, [pc, #208]	; (800474c <UART_AdvFeatureConfig+0x150>)
 800467c:	4013      	ands	r3, r2
 800467e:	0019      	movs	r1, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004690:	2210      	movs	r2, #16
 8004692:	4013      	ands	r3, r2
 8004694:	d00b      	beq.n	80046ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	4a2c      	ldr	r2, [pc, #176]	; (8004750 <UART_AdvFeatureConfig+0x154>)
 800469e:	4013      	ands	r3, r2
 80046a0:	0019      	movs	r1, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b2:	2220      	movs	r2, #32
 80046b4:	4013      	ands	r3, r2
 80046b6:	d00b      	beq.n	80046d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	4a25      	ldr	r2, [pc, #148]	; (8004754 <UART_AdvFeatureConfig+0x158>)
 80046c0:	4013      	ands	r3, r2
 80046c2:	0019      	movs	r1, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d4:	2240      	movs	r2, #64	; 0x40
 80046d6:	4013      	ands	r3, r2
 80046d8:	d01d      	beq.n	8004716 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	4a1d      	ldr	r2, [pc, #116]	; (8004758 <UART_AdvFeatureConfig+0x15c>)
 80046e2:	4013      	ands	r3, r2
 80046e4:	0019      	movs	r1, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046f6:	2380      	movs	r3, #128	; 0x80
 80046f8:	035b      	lsls	r3, r3, #13
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d10b      	bne.n	8004716 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	4a15      	ldr	r2, [pc, #84]	; (800475c <UART_AdvFeatureConfig+0x160>)
 8004706:	4013      	ands	r3, r2
 8004708:	0019      	movs	r1, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471a:	2280      	movs	r2, #128	; 0x80
 800471c:	4013      	ands	r3, r2
 800471e:	d00b      	beq.n	8004738 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	4a0e      	ldr	r2, [pc, #56]	; (8004760 <UART_AdvFeatureConfig+0x164>)
 8004728:	4013      	ands	r3, r2
 800472a:	0019      	movs	r1, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	605a      	str	r2, [r3, #4]
  }
}
 8004738:	46c0      	nop			; (mov r8, r8)
 800473a:	46bd      	mov	sp, r7
 800473c:	b002      	add	sp, #8
 800473e:	bd80      	pop	{r7, pc}
 8004740:	fffdffff 	.word	0xfffdffff
 8004744:	fffeffff 	.word	0xfffeffff
 8004748:	fffbffff 	.word	0xfffbffff
 800474c:	ffff7fff 	.word	0xffff7fff
 8004750:	ffffefff 	.word	0xffffefff
 8004754:	ffffdfff 	.word	0xffffdfff
 8004758:	ffefffff 	.word	0xffefffff
 800475c:	ff9fffff 	.word	0xff9fffff
 8004760:	fff7ffff 	.word	0xfff7ffff

08004764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af02      	add	r7, sp, #8
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	228c      	movs	r2, #140	; 0x8c
 8004770:	2100      	movs	r1, #0
 8004772:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004774:	f7fc fd08 	bl	8001188 <HAL_GetTick>
 8004778:	0003      	movs	r3, r0
 800477a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2208      	movs	r2, #8
 8004784:	4013      	ands	r3, r2
 8004786:	2b08      	cmp	r3, #8
 8004788:	d10c      	bne.n	80047a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2280      	movs	r2, #128	; 0x80
 800478e:	0391      	lsls	r1, r2, #14
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	4a18      	ldr	r2, [pc, #96]	; (80047f4 <UART_CheckIdleState+0x90>)
 8004794:	9200      	str	r2, [sp, #0]
 8004796:	2200      	movs	r2, #0
 8004798:	f000 f82e 	bl	80047f8 <UART_WaitOnFlagUntilTimeout>
 800479c:	1e03      	subs	r3, r0, #0
 800479e:	d001      	beq.n	80047a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e023      	b.n	80047ec <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2204      	movs	r2, #4
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d10c      	bne.n	80047cc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2280      	movs	r2, #128	; 0x80
 80047b6:	03d1      	lsls	r1, r2, #15
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	4a0e      	ldr	r2, [pc, #56]	; (80047f4 <UART_CheckIdleState+0x90>)
 80047bc:	9200      	str	r2, [sp, #0]
 80047be:	2200      	movs	r2, #0
 80047c0:	f000 f81a 	bl	80047f8 <UART_WaitOnFlagUntilTimeout>
 80047c4:	1e03      	subs	r3, r0, #0
 80047c6:	d001      	beq.n	80047cc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e00f      	b.n	80047ec <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2284      	movs	r2, #132	; 0x84
 80047d0:	2120      	movs	r1, #32
 80047d2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2288      	movs	r2, #136	; 0x88
 80047d8:	2120      	movs	r1, #32
 80047da:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2280      	movs	r2, #128	; 0x80
 80047e6:	2100      	movs	r1, #0
 80047e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	0018      	movs	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b004      	add	sp, #16
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	01ffffff 	.word	0x01ffffff

080047f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b094      	sub	sp, #80	; 0x50
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	1dfb      	adds	r3, r7, #7
 8004806:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004808:	e0a7      	b.n	800495a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800480a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800480c:	3301      	adds	r3, #1
 800480e:	d100      	bne.n	8004812 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004810:	e0a3      	b.n	800495a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004812:	f7fc fcb9 	bl	8001188 <HAL_GetTick>
 8004816:	0002      	movs	r2, r0
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800481e:	429a      	cmp	r2, r3
 8004820:	d302      	bcc.n	8004828 <UART_WaitOnFlagUntilTimeout+0x30>
 8004822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004824:	2b00      	cmp	r3, #0
 8004826:	d13f      	bne.n	80048a8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004828:	f3ef 8310 	mrs	r3, PRIMASK
 800482c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800482e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004830:	647b      	str	r3, [r7, #68]	; 0x44
 8004832:	2301      	movs	r3, #1
 8004834:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004838:	f383 8810 	msr	PRIMASK, r3
}
 800483c:	46c0      	nop			; (mov r8, r8)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	494e      	ldr	r1, [pc, #312]	; (8004984 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800484a:	400a      	ands	r2, r1
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004850:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004854:	f383 8810 	msr	PRIMASK, r3
}
 8004858:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800485a:	f3ef 8310 	mrs	r3, PRIMASK
 800485e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004862:	643b      	str	r3, [r7, #64]	; 0x40
 8004864:	2301      	movs	r3, #1
 8004866:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486a:	f383 8810 	msr	PRIMASK, r3
}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2101      	movs	r1, #1
 800487c:	438a      	bics	r2, r1
 800487e:	609a      	str	r2, [r3, #8]
 8004880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004882:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004886:	f383 8810 	msr	PRIMASK, r3
}
 800488a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2284      	movs	r2, #132	; 0x84
 8004890:	2120      	movs	r1, #32
 8004892:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2288      	movs	r2, #136	; 0x88
 8004898:	2120      	movs	r1, #32
 800489a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2280      	movs	r2, #128	; 0x80
 80048a0:	2100      	movs	r1, #0
 80048a2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e069      	b.n	800497c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2204      	movs	r2, #4
 80048b0:	4013      	ands	r3, r2
 80048b2:	d052      	beq.n	800495a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	69da      	ldr	r2, [r3, #28]
 80048ba:	2380      	movs	r3, #128	; 0x80
 80048bc:	011b      	lsls	r3, r3, #4
 80048be:	401a      	ands	r2, r3
 80048c0:	2380      	movs	r3, #128	; 0x80
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d148      	bne.n	800495a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2280      	movs	r2, #128	; 0x80
 80048ce:	0112      	lsls	r2, r2, #4
 80048d0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d2:	f3ef 8310 	mrs	r3, PRIMASK
 80048d6:	613b      	str	r3, [r7, #16]
  return(result);
 80048d8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80048da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048dc:	2301      	movs	r3, #1
 80048de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f383 8810 	msr	PRIMASK, r3
}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4924      	ldr	r1, [pc, #144]	; (8004984 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80048f4:	400a      	ands	r2, r1
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	f383 8810 	msr	PRIMASK, r3
}
 8004902:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004904:	f3ef 8310 	mrs	r3, PRIMASK
 8004908:	61fb      	str	r3, [r7, #28]
  return(result);
 800490a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490c:	64bb      	str	r3, [r7, #72]	; 0x48
 800490e:	2301      	movs	r3, #1
 8004910:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	f383 8810 	msr	PRIMASK, r3
}
 8004918:	46c0      	nop			; (mov r8, r8)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2101      	movs	r1, #1
 8004926:	438a      	bics	r2, r1
 8004928:	609a      	str	r2, [r3, #8]
 800492a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	f383 8810 	msr	PRIMASK, r3
}
 8004934:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2284      	movs	r2, #132	; 0x84
 800493a:	2120      	movs	r1, #32
 800493c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2288      	movs	r2, #136	; 0x88
 8004942:	2120      	movs	r1, #32
 8004944:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	228c      	movs	r2, #140	; 0x8c
 800494a:	2120      	movs	r1, #32
 800494c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2280      	movs	r2, #128	; 0x80
 8004952:	2100      	movs	r1, #0
 8004954:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e010      	b.n	800497c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	4013      	ands	r3, r2
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	425a      	negs	r2, r3
 800496a:	4153      	adcs	r3, r2
 800496c:	b2db      	uxtb	r3, r3
 800496e:	001a      	movs	r2, r3
 8004970:	1dfb      	adds	r3, r7, #7
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d100      	bne.n	800497a <UART_WaitOnFlagUntilTimeout+0x182>
 8004978:	e747      	b.n	800480a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	0018      	movs	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	b014      	add	sp, #80	; 0x50
 8004982:	bd80      	pop	{r7, pc}
 8004984:	fffffe5f 	.word	0xfffffe5f

08004988 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b090      	sub	sp, #64	; 0x40
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	1dbb      	adds	r3, r7, #6
 8004994:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	1dba      	adds	r2, r7, #6
 80049a0:	215c      	movs	r1, #92	; 0x5c
 80049a2:	8812      	ldrh	r2, [r2, #0]
 80049a4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	228c      	movs	r2, #140	; 0x8c
 80049aa:	2100      	movs	r1, #0
 80049ac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2288      	movs	r2, #136	; 0x88
 80049b2:	2122      	movs	r1, #34	; 0x22
 80049b4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d02c      	beq.n	8004a18 <UART_Start_Receive_DMA+0x90>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049c2:	4a40      	ldr	r2, [pc, #256]	; (8004ac4 <UART_Start_Receive_DMA+0x13c>)
 80049c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049ca:	4a3f      	ldr	r2, [pc, #252]	; (8004ac8 <UART_Start_Receive_DMA+0x140>)
 80049cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049d2:	4a3e      	ldr	r2, [pc, #248]	; (8004acc <UART_Start_Receive_DMA+0x144>)
 80049d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049da:	2200      	movs	r2, #0
 80049dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3324      	adds	r3, #36	; 0x24
 80049e8:	0019      	movs	r1, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ee:	001a      	movs	r2, r3
 80049f0:	1dbb      	adds	r3, r7, #6
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	f7fc fd66 	bl	80014c4 <HAL_DMA_Start_IT>
 80049f8:	1e03      	subs	r3, r0, #0
 80049fa:	d00d      	beq.n	8004a18 <UART_Start_Receive_DMA+0x90>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	228c      	movs	r2, #140	; 0x8c
 8004a00:	2110      	movs	r1, #16
 8004a02:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2280      	movs	r2, #128	; 0x80
 8004a08:	2100      	movs	r1, #0
 8004a0a:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2288      	movs	r2, #136	; 0x88
 8004a10:	2120      	movs	r1, #32
 8004a12:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e050      	b.n	8004aba <UART_Start_Receive_DMA+0x132>
    }
  }
  __HAL_UNLOCK(huart);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2280      	movs	r2, #128	; 0x80
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a20:	f3ef 8310 	mrs	r3, PRIMASK
 8004a24:	613b      	str	r3, [r7, #16]
  return(result);
 8004a26:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f383 8810 	msr	PRIMASK, r3
}
 8004a34:	46c0      	nop			; (mov r8, r8)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2180      	movs	r1, #128	; 0x80
 8004a42:	0049      	lsls	r1, r1, #1
 8004a44:	430a      	orrs	r2, r1
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	f383 8810 	msr	PRIMASK, r3
}
 8004a52:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a54:	f3ef 8310 	mrs	r3, PRIMASK
 8004a58:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a5a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a5e:	2301      	movs	r3, #1
 8004a60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	f383 8810 	msr	PRIMASK, r3
}
 8004a68:	46c0      	nop			; (mov r8, r8)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2101      	movs	r1, #1
 8004a76:	430a      	orrs	r2, r1
 8004a78:	609a      	str	r2, [r3, #8]
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	f383 8810 	msr	PRIMASK, r3
}
 8004a84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a86:	f3ef 8310 	mrs	r3, PRIMASK
 8004a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a90:	2301      	movs	r3, #1
 8004a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a96:	f383 8810 	msr	PRIMASK, r3
}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2140      	movs	r1, #64	; 0x40
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	609a      	str	r2, [r3, #8]
 8004aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aae:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab2:	f383 8810 	msr	PRIMASK, r3
}
 8004ab6:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	0018      	movs	r0, r3
 8004abc:	46bd      	mov	sp, r7
 8004abe:	b010      	add	sp, #64	; 0x40
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	46c0      	nop			; (mov r8, r8)
 8004ac4:	08004c1d 	.word	0x08004c1d
 8004ac8:	08004d45 	.word	0x08004d45
 8004acc:	08004d81 	.word	0x08004d81

08004ad0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08a      	sub	sp, #40	; 0x28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8004adc:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ade:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f383 8810 	msr	PRIMASK, r3
}
 8004aec:	46c0      	nop			; (mov r8, r8)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	21c0      	movs	r1, #192	; 0xc0
 8004afa:	438a      	bics	r2, r1
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f383 8810 	msr	PRIMASK, r3
}
 8004b08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b0e:	617b      	str	r3, [r7, #20]
  return(result);
 8004b10:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004b12:	623b      	str	r3, [r7, #32]
 8004b14:	2301      	movs	r3, #1
 8004b16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	f383 8810 	msr	PRIMASK, r3
}
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4908      	ldr	r1, [pc, #32]	; (8004b4c <UART_EndTxTransfer+0x7c>)
 8004b2c:	400a      	ands	r2, r1
 8004b2e:	609a      	str	r2, [r3, #8]
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	f383 8810 	msr	PRIMASK, r3
}
 8004b3a:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2284      	movs	r2, #132	; 0x84
 8004b40:	2120      	movs	r1, #32
 8004b42:	5099      	str	r1, [r3, r2]
}
 8004b44:	46c0      	nop			; (mov r8, r8)
 8004b46:	46bd      	mov	sp, r7
 8004b48:	b00a      	add	sp, #40	; 0x28
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	ff7fffff 	.word	0xff7fffff

08004b50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08e      	sub	sp, #56	; 0x38
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b58:	f3ef 8310 	mrs	r3, PRIMASK
 8004b5c:	617b      	str	r3, [r7, #20]
  return(result);
 8004b5e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b60:	637b      	str	r3, [r7, #52]	; 0x34
 8004b62:	2301      	movs	r3, #1
 8004b64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	f383 8810 	msr	PRIMASK, r3
}
 8004b6c:	46c0      	nop			; (mov r8, r8)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4926      	ldr	r1, [pc, #152]	; (8004c14 <UART_EndRxTransfer+0xc4>)
 8004b7a:	400a      	ands	r2, r1
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	f383 8810 	msr	PRIMASK, r3
}
 8004b88:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b8e:	623b      	str	r3, [r7, #32]
  return(result);
 8004b90:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b92:	633b      	str	r3, [r7, #48]	; 0x30
 8004b94:	2301      	movs	r3, #1
 8004b96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	f383 8810 	msr	PRIMASK, r3
}
 8004b9e:	46c0      	nop			; (mov r8, r8)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	491b      	ldr	r1, [pc, #108]	; (8004c18 <UART_EndRxTransfer+0xc8>)
 8004bac:	400a      	ands	r2, r1
 8004bae:	609a      	str	r2, [r3, #8]
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb6:	f383 8810 	msr	PRIMASK, r3
}
 8004bba:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d118      	bne.n	8004bf6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bc4:	f3ef 8310 	mrs	r3, PRIMASK
 8004bc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bce:	2301      	movs	r3, #1
 8004bd0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f383 8810 	msr	PRIMASK, r3
}
 8004bd8:	46c0      	nop			; (mov r8, r8)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2110      	movs	r1, #16
 8004be6:	438a      	bics	r2, r1
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f383 8810 	msr	PRIMASK, r3
}
 8004bf4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2288      	movs	r2, #136	; 0x88
 8004bfa:	2120      	movs	r1, #32
 8004bfc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b00e      	add	sp, #56	; 0x38
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	fffffedf 	.word	0xfffffedf
 8004c18:	effffffe 	.word	0xeffffffe

08004c1c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b094      	sub	sp, #80	; 0x50
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c28:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2220      	movs	r2, #32
 8004c32:	4013      	ands	r3, r2
 8004c34:	d16f      	bne.n	8004d16 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c38:	225e      	movs	r2, #94	; 0x5e
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c42:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c44:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c46:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c48:	2301      	movs	r3, #1
 8004c4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f383 8810 	msr	PRIMASK, r3
}
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4938      	ldr	r1, [pc, #224]	; (8004d40 <UART_DMAReceiveCplt+0x124>)
 8004c60:	400a      	ands	r2, r1
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	f383 8810 	msr	PRIMASK, r3
}
 8004c6e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c70:	f3ef 8310 	mrs	r3, PRIMASK
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c78:	647b      	str	r3, [r7, #68]	; 0x44
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	f383 8810 	msr	PRIMASK, r3
}
 8004c84:	46c0      	nop			; (mov r8, r8)
 8004c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2101      	movs	r1, #1
 8004c92:	438a      	bics	r2, r1
 8004c94:	609a      	str	r2, [r3, #8]
 8004c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9c:	f383 8810 	msr	PRIMASK, r3
}
 8004ca0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ca6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004caa:	643b      	str	r3, [r7, #64]	; 0x40
 8004cac:	2301      	movs	r3, #1
 8004cae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb2:	f383 8810 	msr	PRIMASK, r3
}
 8004cb6:	46c0      	nop			; (mov r8, r8)
 8004cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2140      	movs	r1, #64	; 0x40
 8004cc4:	438a      	bics	r2, r1
 8004cc6:	609a      	str	r2, [r3, #8]
 8004cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cce:	f383 8810 	msr	PRIMASK, r3
}
 8004cd2:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cd6:	2288      	movs	r2, #136	; 0x88
 8004cd8:	2120      	movs	r1, #32
 8004cda:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d118      	bne.n	8004d16 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ce4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ce8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cea:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cee:	2301      	movs	r3, #1
 8004cf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f383 8810 	msr	PRIMASK, r3
}
 8004cf8:	46c0      	nop			; (mov r8, r8)
 8004cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2110      	movs	r1, #16
 8004d06:	438a      	bics	r2, r1
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f383 8810 	msr	PRIMASK, r3
}
 8004d14:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d108      	bne.n	8004d30 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d20:	225c      	movs	r2, #92	; 0x5c
 8004d22:	5a9a      	ldrh	r2, [r3, r2]
 8004d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d26:	0011      	movs	r1, r2
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f7fb fc3d 	bl	80005a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d2e:	e003      	b.n	8004d38 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8004d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d32:	0018      	movs	r0, r3
 8004d34:	f7ff fae0 	bl	80042f8 <HAL_UART_RxCpltCallback>
}
 8004d38:	46c0      	nop			; (mov r8, r8)
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	b014      	add	sp, #80	; 0x50
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	fffffeff 	.word	0xfffffeff

08004d44 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d50:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d10a      	bne.n	8004d70 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	225c      	movs	r2, #92	; 0x5c
 8004d5e:	5a9b      	ldrh	r3, [r3, r2]
 8004d60:	085b      	lsrs	r3, r3, #1
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	0011      	movs	r1, r2
 8004d68:	0018      	movs	r0, r3
 8004d6a:	f7fb fc1d 	bl	80005a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d6e:	e003      	b.n	8004d78 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	0018      	movs	r0, r3
 8004d74:	f7ff fac8 	bl	8004308 <HAL_UART_RxHalfCpltCallback>
}
 8004d78:	46c0      	nop			; (mov r8, r8)
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	b004      	add	sp, #16
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2284      	movs	r2, #132	; 0x84
 8004d92:	589b      	ldr	r3, [r3, r2]
 8004d94:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2288      	movs	r2, #136	; 0x88
 8004d9a:	589b      	ldr	r3, [r3, r2]
 8004d9c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2280      	movs	r2, #128	; 0x80
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b80      	cmp	r3, #128	; 0x80
 8004daa:	d10a      	bne.n	8004dc2 <UART_DMAError+0x42>
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b21      	cmp	r3, #33	; 0x21
 8004db0:	d107      	bne.n	8004dc2 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2256      	movs	r2, #86	; 0x56
 8004db6:	2100      	movs	r1, #0
 8004db8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f7ff fe87 	bl	8004ad0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2240      	movs	r2, #64	; 0x40
 8004dca:	4013      	ands	r3, r2
 8004dcc:	2b40      	cmp	r3, #64	; 0x40
 8004dce:	d10a      	bne.n	8004de6 <UART_DMAError+0x66>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2b22      	cmp	r3, #34	; 0x22
 8004dd4:	d107      	bne.n	8004de6 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	225e      	movs	r2, #94	; 0x5e
 8004dda:	2100      	movs	r1, #0
 8004ddc:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	0018      	movs	r0, r3
 8004de2:	f7ff feb5 	bl	8004b50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	228c      	movs	r2, #140	; 0x8c
 8004dea:	589b      	ldr	r3, [r3, r2]
 8004dec:	2210      	movs	r2, #16
 8004dee:	431a      	orrs	r2, r3
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	218c      	movs	r1, #140	; 0x8c
 8004df4:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f7ff fa8d 	bl	8004318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	46bd      	mov	sp, r7
 8004e02:	b006      	add	sp, #24
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b084      	sub	sp, #16
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	225e      	movs	r2, #94	; 0x5e
 8004e18:	2100      	movs	r1, #0
 8004e1a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2256      	movs	r2, #86	; 0x56
 8004e20:	2100      	movs	r1, #0
 8004e22:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	0018      	movs	r0, r3
 8004e28:	f7ff fa76 	bl	8004318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e2c:	46c0      	nop			; (mov r8, r8)
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	b004      	add	sp, #16
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08a      	sub	sp, #40	; 0x28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2284      	movs	r2, #132	; 0x84
 8004e40:	589b      	ldr	r3, [r3, r2]
 8004e42:	2b21      	cmp	r3, #33	; 0x21
 8004e44:	d14c      	bne.n	8004ee0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2256      	movs	r2, #86	; 0x56
 8004e4a:	5a9b      	ldrh	r3, [r3, r2]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d132      	bne.n	8004eb8 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e52:	f3ef 8310 	mrs	r3, PRIMASK
 8004e56:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e58:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f383 8810 	msr	PRIMASK, r3
}
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2180      	movs	r1, #128	; 0x80
 8004e74:	438a      	bics	r2, r1
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f383 8810 	msr	PRIMASK, r3
}
 8004e82:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e84:	f3ef 8310 	mrs	r3, PRIMASK
 8004e88:	617b      	str	r3, [r7, #20]
  return(result);
 8004e8a:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e8c:	623b      	str	r3, [r7, #32]
 8004e8e:	2301      	movs	r3, #1
 8004e90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	f383 8810 	msr	PRIMASK, r3
}
 8004e98:	46c0      	nop			; (mov r8, r8)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2140      	movs	r1, #64	; 0x40
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	f383 8810 	msr	PRIMASK, r3
}
 8004eb4:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004eb6:	e013      	b.n	8004ee0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ebc:	781a      	ldrb	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2256      	movs	r2, #86	; 0x56
 8004ed2:	5a9b      	ldrh	r3, [r3, r2]
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b299      	uxth	r1, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2256      	movs	r2, #86	; 0x56
 8004ede:	5299      	strh	r1, [r3, r2]
}
 8004ee0:	46c0      	nop			; (mov r8, r8)
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	b00a      	add	sp, #40	; 0x28
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08c      	sub	sp, #48	; 0x30
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2284      	movs	r2, #132	; 0x84
 8004ef4:	589b      	ldr	r3, [r3, r2]
 8004ef6:	2b21      	cmp	r3, #33	; 0x21
 8004ef8:	d151      	bne.n	8004f9e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2256      	movs	r2, #86	; 0x56
 8004efe:	5a9b      	ldrh	r3, [r3, r2]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d132      	bne.n	8004f6c <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f06:	f3ef 8310 	mrs	r3, PRIMASK
 8004f0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f10:	2301      	movs	r3, #1
 8004f12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f383 8810 	msr	PRIMASK, r3
}
 8004f1a:	46c0      	nop			; (mov r8, r8)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2180      	movs	r1, #128	; 0x80
 8004f28:	438a      	bics	r2, r1
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f383 8810 	msr	PRIMASK, r3
}
 8004f36:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f38:	f3ef 8310 	mrs	r3, PRIMASK
 8004f3c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f3e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
 8004f42:	2301      	movs	r3, #1
 8004f44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	f383 8810 	msr	PRIMASK, r3
}
 8004f4c:	46c0      	nop			; (mov r8, r8)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2140      	movs	r1, #64	; 0x40
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	f383 8810 	msr	PRIMASK, r3
}
 8004f68:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004f6a:	e018      	b.n	8004f9e <UART_TxISR_16BIT+0xb6>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f70:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	001a      	movs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	05d2      	lsls	r2, r2, #23
 8004f7e:	0dd2      	lsrs	r2, r2, #23
 8004f80:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f86:	1c9a      	adds	r2, r3, #2
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2256      	movs	r2, #86	; 0x56
 8004f90:	5a9b      	ldrh	r3, [r3, r2]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b299      	uxth	r1, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2256      	movs	r2, #86	; 0x56
 8004f9c:	5299      	strh	r1, [r3, r2]
}
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	b00c      	add	sp, #48	; 0x30
 8004fa4:	bd80      	pop	{r7, pc}
	...

08004fa8 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08c      	sub	sp, #48	; 0x30
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2284      	movs	r2, #132	; 0x84
 8004fb4:	589b      	ldr	r3, [r3, r2]
 8004fb6:	2b21      	cmp	r3, #33	; 0x21
 8004fb8:	d165      	bne.n	8005086 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004fba:	232e      	movs	r3, #46	; 0x2e
 8004fbc:	18fb      	adds	r3, r7, r3
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	216a      	movs	r1, #106	; 0x6a
 8004fc2:	5a52      	ldrh	r2, [r2, r1]
 8004fc4:	801a      	strh	r2, [r3, #0]
 8004fc6:	e059      	b.n	800507c <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2256      	movs	r2, #86	; 0x56
 8004fcc:	5a9b      	ldrh	r3, [r3, r2]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d133      	bne.n	800503c <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd4:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fda:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fde:	2301      	movs	r3, #1
 8004fe0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f383 8810 	msr	PRIMASK, r3
}
 8004fe8:	46c0      	nop			; (mov r8, r8)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4926      	ldr	r1, [pc, #152]	; (8005090 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8004ff6:	400a      	ands	r2, r1
 8004ff8:	609a      	str	r2, [r3, #8]
 8004ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f383 8810 	msr	PRIMASK, r3
}
 8005004:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005006:	f3ef 8310 	mrs	r3, PRIMASK
 800500a:	61bb      	str	r3, [r7, #24]
  return(result);
 800500c:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
 8005010:	2301      	movs	r3, #1
 8005012:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f383 8810 	msr	PRIMASK, r3
}
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2140      	movs	r1, #64	; 0x40
 8005028:	430a      	orrs	r2, r1
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	f383 8810 	msr	PRIMASK, r3
}
 8005036:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8005038:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800503a:	e024      	b.n	8005086 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	2280      	movs	r2, #128	; 0x80
 8005044:	4013      	ands	r3, r2
 8005046:	d013      	beq.n	8005070 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800504c:	781a      	ldrb	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2256      	movs	r2, #86	; 0x56
 8005062:	5a9b      	ldrh	r3, [r3, r2]
 8005064:	b29b      	uxth	r3, r3
 8005066:	3b01      	subs	r3, #1
 8005068:	b299      	uxth	r1, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2256      	movs	r2, #86	; 0x56
 800506e:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005070:	212e      	movs	r1, #46	; 0x2e
 8005072:	187b      	adds	r3, r7, r1
 8005074:	881a      	ldrh	r2, [r3, #0]
 8005076:	187b      	adds	r3, r7, r1
 8005078:	3a01      	subs	r2, #1
 800507a:	801a      	strh	r2, [r3, #0]
 800507c:	232e      	movs	r3, #46	; 0x2e
 800507e:	18fb      	adds	r3, r7, r3
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1a0      	bne.n	8004fc8 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8005086:	46c0      	nop			; (mov r8, r8)
 8005088:	46bd      	mov	sp, r7
 800508a:	b00c      	add	sp, #48	; 0x30
 800508c:	bd80      	pop	{r7, pc}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	ff7fffff 	.word	0xff7fffff

08005094 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b08c      	sub	sp, #48	; 0x30
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2284      	movs	r2, #132	; 0x84
 80050a0:	589b      	ldr	r3, [r3, r2]
 80050a2:	2b21      	cmp	r3, #33	; 0x21
 80050a4:	d16a      	bne.n	800517c <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80050a6:	232e      	movs	r3, #46	; 0x2e
 80050a8:	18fb      	adds	r3, r7, r3
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	216a      	movs	r1, #106	; 0x6a
 80050ae:	5a52      	ldrh	r2, [r2, r1]
 80050b0:	801a      	strh	r2, [r3, #0]
 80050b2:	e05e      	b.n	8005172 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2256      	movs	r2, #86	; 0x56
 80050b8:	5a9b      	ldrh	r3, [r3, r2]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d133      	bne.n	8005128 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050c0:	f3ef 8310 	mrs	r3, PRIMASK
 80050c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80050c6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ca:	2301      	movs	r3, #1
 80050cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f383 8810 	msr	PRIMASK, r3
}
 80050d4:	46c0      	nop			; (mov r8, r8)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4928      	ldr	r1, [pc, #160]	; (8005184 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 80050e2:	400a      	ands	r2, r1
 80050e4:	609a      	str	r2, [r3, #8]
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f383 8810 	msr	PRIMASK, r3
}
 80050f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050f2:	f3ef 8310 	mrs	r3, PRIMASK
 80050f6:	617b      	str	r3, [r7, #20]
  return(result);
 80050f8:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050fa:	623b      	str	r3, [r7, #32]
 80050fc:	2301      	movs	r3, #1
 80050fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	f383 8810 	msr	PRIMASK, r3
}
 8005106:	46c0      	nop			; (mov r8, r8)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2140      	movs	r1, #64	; 0x40
 8005114:	430a      	orrs	r2, r1
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f383 8810 	msr	PRIMASK, r3
}
 8005122:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8005124:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8005126:	e029      	b.n	800517c <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	2280      	movs	r2, #128	; 0x80
 8005130:	4013      	ands	r3, r2
 8005132:	d018      	beq.n	8005166 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005138:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800513a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	001a      	movs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	05d2      	lsls	r2, r2, #23
 8005146:	0dd2      	lsrs	r2, r2, #23
 8005148:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800514e:	1c9a      	adds	r2, r3, #2
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2256      	movs	r2, #86	; 0x56
 8005158:	5a9b      	ldrh	r3, [r3, r2]
 800515a:	b29b      	uxth	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	b299      	uxth	r1, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2256      	movs	r2, #86	; 0x56
 8005164:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005166:	212e      	movs	r1, #46	; 0x2e
 8005168:	187b      	adds	r3, r7, r1
 800516a:	881a      	ldrh	r2, [r3, #0]
 800516c:	187b      	adds	r3, r7, r1
 800516e:	3a01      	subs	r2, #1
 8005170:	801a      	strh	r2, [r3, #0]
 8005172:	232e      	movs	r3, #46	; 0x2e
 8005174:	18fb      	adds	r3, r7, r3
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d19b      	bne.n	80050b4 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 800517c:	46c0      	nop			; (mov r8, r8)
 800517e:	46bd      	mov	sp, r7
 8005180:	b00c      	add	sp, #48	; 0x30
 8005182:	bd80      	pop	{r7, pc}
 8005184:	ff7fffff 	.word	0xff7fffff

08005188 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005190:	f3ef 8310 	mrs	r3, PRIMASK
 8005194:	60bb      	str	r3, [r7, #8]
  return(result);
 8005196:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	2301      	movs	r3, #1
 800519c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f383 8810 	msr	PRIMASK, r3
}
 80051a4:	46c0      	nop			; (mov r8, r8)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2140      	movs	r1, #64	; 0x40
 80051b2:	438a      	bics	r2, r1
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f383 8810 	msr	PRIMASK, r3
}
 80051c0:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2284      	movs	r2, #132	; 0x84
 80051c6:	2120      	movs	r1, #32
 80051c8:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	0018      	movs	r0, r3
 80051d4:	f7ff f888 	bl	80042e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051d8:	46c0      	nop			; (mov r8, r8)
 80051da:	46bd      	mov	sp, r7
 80051dc:	b006      	add	sp, #24
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80051e8:	46c0      	nop			; (mov r8, r8)
 80051ea:	46bd      	mov	sp, r7
 80051ec:	b002      	add	sp, #8
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80051f8:	46c0      	nop			; (mov r8, r8)
 80051fa:	46bd      	mov	sp, r7
 80051fc:	b002      	add	sp, #8
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005208:	46c0      	nop			; (mov r8, r8)
 800520a:	46bd      	mov	sp, r7
 800520c:	b002      	add	sp, #8
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2280      	movs	r2, #128	; 0x80
 800521c:	5c9b      	ldrb	r3, [r3, r2]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d101      	bne.n	8005226 <HAL_UARTEx_DisableFifoMode+0x16>
 8005222:	2302      	movs	r3, #2
 8005224:	e027      	b.n	8005276 <HAL_UARTEx_DisableFifoMode+0x66>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2280      	movs	r2, #128	; 0x80
 800522a:	2101      	movs	r1, #1
 800522c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2284      	movs	r2, #132	; 0x84
 8005232:	2124      	movs	r1, #36	; 0x24
 8005234:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2101      	movs	r1, #1
 800524a:	438a      	bics	r2, r1
 800524c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4a0b      	ldr	r2, [pc, #44]	; (8005280 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005252:	4013      	ands	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2284      	movs	r2, #132	; 0x84
 8005268:	2120      	movs	r1, #32
 800526a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2280      	movs	r2, #128	; 0x80
 8005270:	2100      	movs	r1, #0
 8005272:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	0018      	movs	r0, r3
 8005278:	46bd      	mov	sp, r7
 800527a:	b004      	add	sp, #16
 800527c:	bd80      	pop	{r7, pc}
 800527e:	46c0      	nop			; (mov r8, r8)
 8005280:	dfffffff 	.word	0xdfffffff

08005284 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2280      	movs	r2, #128	; 0x80
 8005292:	5c9b      	ldrb	r3, [r3, r2]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d101      	bne.n	800529c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005298:	2302      	movs	r3, #2
 800529a:	e02e      	b.n	80052fa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2280      	movs	r2, #128	; 0x80
 80052a0:	2101      	movs	r1, #1
 80052a2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2284      	movs	r2, #132	; 0x84
 80052a8:	2124      	movs	r1, #36	; 0x24
 80052aa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2101      	movs	r1, #1
 80052c0:	438a      	bics	r2, r1
 80052c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	08d9      	lsrs	r1, r3, #3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	0018      	movs	r0, r3
 80052dc:	f000 f8c4 	bl	8005468 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2284      	movs	r2, #132	; 0x84
 80052ec:	2120      	movs	r1, #32
 80052ee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2280      	movs	r2, #128	; 0x80
 80052f4:	2100      	movs	r1, #0
 80052f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	0018      	movs	r0, r3
 80052fc:	46bd      	mov	sp, r7
 80052fe:	b004      	add	sp, #16
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2280      	movs	r2, #128	; 0x80
 8005312:	5c9b      	ldrb	r3, [r3, r2]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005318:	2302      	movs	r3, #2
 800531a:	e02f      	b.n	800537c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2280      	movs	r2, #128	; 0x80
 8005320:	2101      	movs	r1, #1
 8005322:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2284      	movs	r2, #132	; 0x84
 8005328:	2124      	movs	r1, #36	; 0x24
 800532a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2101      	movs	r1, #1
 8005340:	438a      	bics	r2, r1
 8005342:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	4a0e      	ldr	r2, [pc, #56]	; (8005384 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800534c:	4013      	ands	r3, r2
 800534e:	0019      	movs	r1, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	0018      	movs	r0, r3
 800535e:	f000 f883 	bl	8005468 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2284      	movs	r2, #132	; 0x84
 800536e:	2120      	movs	r1, #32
 8005370:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2280      	movs	r2, #128	; 0x80
 8005376:	2100      	movs	r1, #0
 8005378:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	0018      	movs	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	b004      	add	sp, #16
 8005382:	bd80      	pop	{r7, pc}
 8005384:	f1ffffff 	.word	0xf1ffffff

08005388 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005388:	b5b0      	push	{r4, r5, r7, lr}
 800538a:	b08a      	sub	sp, #40	; 0x28
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	1dbb      	adds	r3, r7, #6
 8005394:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2288      	movs	r2, #136	; 0x88
 800539a:	589b      	ldr	r3, [r3, r2]
 800539c:	2b20      	cmp	r3, #32
 800539e:	d15e      	bne.n	800545e <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
  {
    if ((pData == NULL) || (Size == 0U))
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80053a6:	1dbb      	adds	r3, r7, #6
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e056      	b.n	8005460 <HAL_UARTEx_ReceiveToIdle_DMA+0xd8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	2380      	movs	r3, #128	; 0x80
 80053b8:	015b      	lsls	r3, r3, #5
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d109      	bne.n	80053d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d105      	bne.n	80053d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2201      	movs	r2, #1
 80053ca:	4013      	ands	r3, r2
 80053cc:	d001      	beq.n	80053d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e046      	b.n	8005460 <HAL_UARTEx_ReceiveToIdle_DMA+0xd8>
      }
    }

    __HAL_LOCK(huart);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2280      	movs	r2, #128	; 0x80
 80053d6:	5c9b      	ldrb	r3, [r3, r2]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d101      	bne.n	80053e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x58>
 80053dc:	2302      	movs	r3, #2
 80053de:	e03f      	b.n	8005460 <HAL_UARTEx_ReceiveToIdle_DMA+0xd8>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2280      	movs	r2, #128	; 0x80
 80053e4:	2101      	movs	r1, #1
 80053e6:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80053ee:	2527      	movs	r5, #39	; 0x27
 80053f0:	197c      	adds	r4, r7, r5
 80053f2:	1dbb      	adds	r3, r7, #6
 80053f4:	881a      	ldrh	r2, [r3, #0]
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	0018      	movs	r0, r3
 80053fc:	f7ff fac4 	bl	8004988 <UART_Start_Receive_DMA>
 8005400:	0003      	movs	r3, r0
 8005402:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005404:	197b      	adds	r3, r7, r5
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d124      	bne.n	8005456 <HAL_UARTEx_ReceiveToIdle_DMA+0xce>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005410:	2b01      	cmp	r3, #1
 8005412:	d11c      	bne.n	800544e <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2210      	movs	r2, #16
 800541a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800541c:	f3ef 8310 	mrs	r3, PRIMASK
 8005420:	617b      	str	r3, [r7, #20]
  return(result);
 8005422:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005424:	623b      	str	r3, [r7, #32]
 8005426:	2301      	movs	r3, #1
 8005428:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	f383 8810 	msr	PRIMASK, r3
}
 8005430:	46c0      	nop			; (mov r8, r8)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2110      	movs	r1, #16
 800543e:	430a      	orrs	r2, r1
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	f383 8810 	msr	PRIMASK, r3
}
 800544c:	e003      	b.n	8005456 <HAL_UARTEx_ReceiveToIdle_DMA+0xce>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800544e:	2327      	movs	r3, #39	; 0x27
 8005450:	18fb      	adds	r3, r7, r3
 8005452:	2201      	movs	r2, #1
 8005454:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8005456:	2327      	movs	r3, #39	; 0x27
 8005458:	18fb      	adds	r3, r7, r3
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	e000      	b.n	8005460 <HAL_UARTEx_ReceiveToIdle_DMA+0xd8>
  }
  else
  {
    return HAL_BUSY;
 800545e:	2302      	movs	r3, #2
  }
}
 8005460:	0018      	movs	r0, r3
 8005462:	46bd      	mov	sp, r7
 8005464:	b00a      	add	sp, #40	; 0x28
 8005466:	bdb0      	pop	{r4, r5, r7, pc}

08005468 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005474:	2b00      	cmp	r3, #0
 8005476:	d108      	bne.n	800548a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	226a      	movs	r2, #106	; 0x6a
 800547c:	2101      	movs	r1, #1
 800547e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2268      	movs	r2, #104	; 0x68
 8005484:	2101      	movs	r1, #1
 8005486:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005488:	e043      	b.n	8005512 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800548a:	260f      	movs	r6, #15
 800548c:	19bb      	adds	r3, r7, r6
 800548e:	2208      	movs	r2, #8
 8005490:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005492:	200e      	movs	r0, #14
 8005494:	183b      	adds	r3, r7, r0
 8005496:	2208      	movs	r2, #8
 8005498:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	0e5b      	lsrs	r3, r3, #25
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	240d      	movs	r4, #13
 80054a6:	193b      	adds	r3, r7, r4
 80054a8:	2107      	movs	r1, #7
 80054aa:	400a      	ands	r2, r1
 80054ac:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	0f5b      	lsrs	r3, r3, #29
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	250c      	movs	r5, #12
 80054ba:	197b      	adds	r3, r7, r5
 80054bc:	2107      	movs	r1, #7
 80054be:	400a      	ands	r2, r1
 80054c0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054c2:	183b      	adds	r3, r7, r0
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	197a      	adds	r2, r7, r5
 80054c8:	7812      	ldrb	r2, [r2, #0]
 80054ca:	4914      	ldr	r1, [pc, #80]	; (800551c <UARTEx_SetNbDataToProcess+0xb4>)
 80054cc:	5c8a      	ldrb	r2, [r1, r2]
 80054ce:	435a      	muls	r2, r3
 80054d0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80054d2:	197b      	adds	r3, r7, r5
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	4a12      	ldr	r2, [pc, #72]	; (8005520 <UARTEx_SetNbDataToProcess+0xb8>)
 80054d8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054da:	0019      	movs	r1, r3
 80054dc:	f7fa fe9a 	bl	8000214 <__divsi3>
 80054e0:	0003      	movs	r3, r0
 80054e2:	b299      	uxth	r1, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	226a      	movs	r2, #106	; 0x6a
 80054e8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054ea:	19bb      	adds	r3, r7, r6
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	193a      	adds	r2, r7, r4
 80054f0:	7812      	ldrb	r2, [r2, #0]
 80054f2:	490a      	ldr	r1, [pc, #40]	; (800551c <UARTEx_SetNbDataToProcess+0xb4>)
 80054f4:	5c8a      	ldrb	r2, [r1, r2]
 80054f6:	435a      	muls	r2, r3
 80054f8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80054fa:	193b      	adds	r3, r7, r4
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	4a08      	ldr	r2, [pc, #32]	; (8005520 <UARTEx_SetNbDataToProcess+0xb8>)
 8005500:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005502:	0019      	movs	r1, r3
 8005504:	f7fa fe86 	bl	8000214 <__divsi3>
 8005508:	0003      	movs	r3, r0
 800550a:	b299      	uxth	r1, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2268      	movs	r2, #104	; 0x68
 8005510:	5299      	strh	r1, [r3, r2]
}
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	46bd      	mov	sp, r7
 8005516:	b005      	add	sp, #20
 8005518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800551a:	46c0      	nop			; (mov r8, r8)
 800551c:	08005620 	.word	0x08005620
 8005520:	08005628 	.word	0x08005628

08005524 <__libc_init_array>:
 8005524:	b570      	push	{r4, r5, r6, lr}
 8005526:	2600      	movs	r6, #0
 8005528:	4d0c      	ldr	r5, [pc, #48]	; (800555c <__libc_init_array+0x38>)
 800552a:	4c0d      	ldr	r4, [pc, #52]	; (8005560 <__libc_init_array+0x3c>)
 800552c:	1b64      	subs	r4, r4, r5
 800552e:	10a4      	asrs	r4, r4, #2
 8005530:	42a6      	cmp	r6, r4
 8005532:	d109      	bne.n	8005548 <__libc_init_array+0x24>
 8005534:	2600      	movs	r6, #0
 8005536:	f000 f82b 	bl	8005590 <_init>
 800553a:	4d0a      	ldr	r5, [pc, #40]	; (8005564 <__libc_init_array+0x40>)
 800553c:	4c0a      	ldr	r4, [pc, #40]	; (8005568 <__libc_init_array+0x44>)
 800553e:	1b64      	subs	r4, r4, r5
 8005540:	10a4      	asrs	r4, r4, #2
 8005542:	42a6      	cmp	r6, r4
 8005544:	d105      	bne.n	8005552 <__libc_init_array+0x2e>
 8005546:	bd70      	pop	{r4, r5, r6, pc}
 8005548:	00b3      	lsls	r3, r6, #2
 800554a:	58eb      	ldr	r3, [r5, r3]
 800554c:	4798      	blx	r3
 800554e:	3601      	adds	r6, #1
 8005550:	e7ee      	b.n	8005530 <__libc_init_array+0xc>
 8005552:	00b3      	lsls	r3, r6, #2
 8005554:	58eb      	ldr	r3, [r5, r3]
 8005556:	4798      	blx	r3
 8005558:	3601      	adds	r6, #1
 800555a:	e7f2      	b.n	8005542 <__libc_init_array+0x1e>
 800555c:	08005630 	.word	0x08005630
 8005560:	08005630 	.word	0x08005630
 8005564:	08005630 	.word	0x08005630
 8005568:	08005634 	.word	0x08005634

0800556c <memcpy>:
 800556c:	2300      	movs	r3, #0
 800556e:	b510      	push	{r4, lr}
 8005570:	429a      	cmp	r2, r3
 8005572:	d100      	bne.n	8005576 <memcpy+0xa>
 8005574:	bd10      	pop	{r4, pc}
 8005576:	5ccc      	ldrb	r4, [r1, r3]
 8005578:	54c4      	strb	r4, [r0, r3]
 800557a:	3301      	adds	r3, #1
 800557c:	e7f8      	b.n	8005570 <memcpy+0x4>

0800557e <memset>:
 800557e:	0003      	movs	r3, r0
 8005580:	1882      	adds	r2, r0, r2
 8005582:	4293      	cmp	r3, r2
 8005584:	d100      	bne.n	8005588 <memset+0xa>
 8005586:	4770      	bx	lr
 8005588:	7019      	strb	r1, [r3, #0]
 800558a:	3301      	adds	r3, #1
 800558c:	e7f9      	b.n	8005582 <memset+0x4>
	...

08005590 <_init>:
 8005590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005596:	bc08      	pop	{r3}
 8005598:	469e      	mov	lr, r3
 800559a:	4770      	bx	lr

0800559c <_fini>:
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a2:	bc08      	pop	{r3}
 80055a4:	469e      	mov	lr, r3
 80055a6:	4770      	bx	lr
