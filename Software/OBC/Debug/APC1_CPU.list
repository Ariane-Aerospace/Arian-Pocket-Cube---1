
APC1_CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012c34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08012dd4  08012dd4  00022dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012fe0  08012fe0  0003017c  2**0
                  CONTENTS
  4 .ARM          00000008  08012fe0  08012fe0  00022fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012fe8  08012fe8  0003017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012fe8  08012fe8  00022fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012fec  08012fec  00022fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08012ff0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008128  2000017c  0801316c  0003017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200082a4  0801316c  000382a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fab1  00000000  00000000  000301ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000675e  00000000  00000000  0005fc5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002618  00000000  00000000  000663c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002390  00000000  00000000  000689d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020222  00000000  00000000  0006ad68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031d53  00000000  00000000  0008af8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aecb3  00000000  00000000  000bccdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016b990  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a76c  00000000  00000000  0016b9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000017c 	.word	0x2000017c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012dbc 	.word	0x08012dbc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000180 	.word	0x20000180
 80001dc:	08012dbc 	.word	0x08012dbc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f06:	4804      	ldr	r0, [pc, #16]	; (8000f18 <SELECT+0x1c>)
 8000f08:	f002 fb00 	bl	800350c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f001 fcad 	bl	800286c <HAL_Delay>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40020800 	.word	0x40020800

08000f1c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f26:	4804      	ldr	r0, [pc, #16]	; (8000f38 <DESELECT+0x1c>)
 8000f28:	f002 faf0 	bl	800350c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f001 fc9d 	bl	800286c <HAL_Delay>
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40020800 	.word	0x40020800

08000f3c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f46:	bf00      	nop
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <SPI_TxByte+0x30>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d1f8      	bne.n	8000f48 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000f56:	1df9      	adds	r1, r7, #7
 8000f58:	2364      	movs	r3, #100	; 0x64
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <SPI_TxByte+0x30>)
 8000f5e:	f005 fa2e 	bl	80063be <HAL_SPI_Transmit>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000238 	.word	0x20000238

08000f70 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f7c:	bf00      	nop
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <SPI_TxBuffer+0x30>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d1f8      	bne.n	8000f7e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000f8c:	887a      	ldrh	r2, [r7, #2]
 8000f8e:	2364      	movs	r3, #100	; 0x64
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <SPI_TxBuffer+0x30>)
 8000f94:	f005 fa13 	bl	80063be <HAL_SPI_Transmit>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000238 	.word	0x20000238

08000fa4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000faa:	23ff      	movs	r3, #255	; 0xff
 8000fac:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fae:	bf00      	nop
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <SPI_RxByte+0x34>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d1f8      	bne.n	8000fb0 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000fbe:	1dba      	adds	r2, r7, #6
 8000fc0:	1df9      	adds	r1, r7, #7
 8000fc2:	2364      	movs	r3, #100	; 0x64
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <SPI_RxByte+0x34>)
 8000fca:	f005 fb34 	bl	8006636 <HAL_SPI_TransmitReceive>

	return data;
 8000fce:	79bb      	ldrb	r3, [r7, #6]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000238 	.word	0x20000238

08000fdc <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000fe4:	f7ff ffde 	bl	8000fa4 <SPI_RxByte>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	701a      	strb	r2, [r3, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <SD_ReadyWait+0x30>)
 8001000:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001004:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001006:	f7ff ffcd 	bl	8000fa4 <SPI_RxByte>
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	2bff      	cmp	r3, #255	; 0xff
 8001012:	d004      	beq.n	800101e <SD_ReadyWait+0x26>
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <SD_ReadyWait+0x30>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	b29b      	uxth	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f3      	bne.n	8001006 <SD_ReadyWait+0xe>

	return res;
 800101e:	79fb      	ldrb	r3, [r7, #7]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20002461 	.word	0x20002461

0800102c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001032:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001036:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001038:	f7ff ff70 	bl	8000f1c <DESELECT>
	for(int i = 0; i < 10; i++)
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	e005      	b.n	800104e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001042:	20ff      	movs	r0, #255	; 0xff
 8001044:	f7ff ff7a 	bl	8000f3c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	3301      	adds	r3, #1
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	2b09      	cmp	r3, #9
 8001052:	ddf6      	ble.n	8001042 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001054:	f7ff ff52 	bl	8000efc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001058:	2340      	movs	r3, #64	; 0x40
 800105a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800106c:	2395      	movs	r3, #149	; 0x95
 800106e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001070:	463b      	mov	r3, r7
 8001072:	2106      	movs	r1, #6
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff7b 	bl	8000f70 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800107a:	e002      	b.n	8001082 <SD_PowerOn+0x56>
	{
		cnt--;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	3b01      	subs	r3, #1
 8001080:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001082:	f7ff ff8f 	bl	8000fa4 <SPI_RxByte>
 8001086:	4603      	mov	r3, r0
 8001088:	2b01      	cmp	r3, #1
 800108a:	d002      	beq.n	8001092 <SD_PowerOn+0x66>
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f4      	bne.n	800107c <SD_PowerOn+0x50>
	}

	DESELECT();
 8001092:	f7ff ff43 	bl	8000f1c <DESELECT>
	SPI_TxByte(0XFF);
 8001096:	20ff      	movs	r0, #255	; 0xff
 8001098:	f7ff ff50 	bl	8000f3c <SPI_TxByte>

	PowerFlag = 1;
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <SD_PowerOn+0x80>)
 800109e:	2201      	movs	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]
}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000199 	.word	0x20000199

080010b0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <SD_PowerOff+0x14>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	20000199 	.word	0x20000199

080010c8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	return PowerFlag;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <SD_CheckPower+0x14>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000199 	.word	0x20000199

080010e0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <SD_RxDataBlock+0x5c>)
 80010ec:	22c8      	movs	r2, #200	; 0xc8
 80010ee:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80010f0:	f7ff ff58 	bl	8000fa4 <SPI_RxByte>
 80010f4:	4603      	mov	r3, r0
 80010f6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	2bff      	cmp	r3, #255	; 0xff
 80010fc:	d104      	bne.n	8001108 <SD_RxDataBlock+0x28>
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <SD_RxDataBlock+0x5c>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	b29b      	uxth	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1f3      	bne.n	80010f0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	2bfe      	cmp	r3, #254	; 0xfe
 800110c:	d001      	beq.n	8001112 <SD_RxDataBlock+0x32>
 800110e:	2300      	movs	r3, #0
 8001110:	e00f      	b.n	8001132 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	1c5a      	adds	r2, r3, #1
 8001116:	607a      	str	r2, [r7, #4]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff5f 	bl	8000fdc <SPI_RxBytePtr>
	} while(len--);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	1e5a      	subs	r2, r3, #1
 8001122:	603a      	str	r2, [r7, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1f4      	bne.n	8001112 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8001128:	f7ff ff3c 	bl	8000fa4 <SPI_RxByte>
	SPI_RxByte();
 800112c:	f7ff ff3a 	bl	8000fa4 <SPI_RxByte>

	return TRUE;
 8001130:	2301      	movs	r3, #1
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20002460 	.word	0x20002460

08001140 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001150:	f7ff ff52 	bl	8000ff8 <SD_ReadyWait>
 8001154:	4603      	mov	r3, r0
 8001156:	2bff      	cmp	r3, #255	; 0xff
 8001158:	d001      	beq.n	800115e <SD_TxDataBlock+0x1e>
 800115a:	2300      	movs	r3, #0
 800115c:	e02f      	b.n	80011be <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff feeb 	bl	8000f3c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	2bfd      	cmp	r3, #253	; 0xfd
 800116a:	d020      	beq.n	80011ae <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800116c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff fefd 	bl	8000f70 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001176:	f7ff ff15 	bl	8000fa4 <SPI_RxByte>
		SPI_RxByte();
 800117a:	f7ff ff13 	bl	8000fa4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800117e:	e00b      	b.n	8001198 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001180:	f7ff ff10 	bl	8000fa4 <SPI_RxByte>
 8001184:	4603      	mov	r3, r0
 8001186:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	f003 031f 	and.w	r3, r3, #31
 800118e:	2b05      	cmp	r3, #5
 8001190:	d006      	beq.n	80011a0 <SD_TxDataBlock+0x60>
			i++;
 8001192:	7bbb      	ldrb	r3, [r7, #14]
 8001194:	3301      	adds	r3, #1
 8001196:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001198:	7bbb      	ldrb	r3, [r7, #14]
 800119a:	2b40      	cmp	r3, #64	; 0x40
 800119c:	d9f0      	bls.n	8001180 <SD_TxDataBlock+0x40>
 800119e:	e000      	b.n	80011a2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80011a0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80011a2:	bf00      	nop
 80011a4:	f7ff fefe 	bl	8000fa4 <SPI_RxByte>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0fa      	beq.n	80011a4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	f003 031f 	and.w	r3, r3, #31
 80011b4:	2b05      	cmp	r3, #5
 80011b6:	d101      	bne.n	80011bc <SD_TxDataBlock+0x7c>
 80011b8:	2301      	movs	r3, #1
 80011ba:	e000      	b.n	80011be <SD_TxDataBlock+0x7e>

	return FALSE;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b084      	sub	sp, #16
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	6039      	str	r1, [r7, #0]
 80011d0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80011d2:	f7ff ff11 	bl	8000ff8 <SD_ReadyWait>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2bff      	cmp	r3, #255	; 0xff
 80011da:	d001      	beq.n	80011e0 <SD_SendCmd+0x1a>
 80011dc:	23ff      	movs	r3, #255	; 0xff
 80011de:	e042      	b.n	8001266 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff feaa 	bl	8000f3c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	0e1b      	lsrs	r3, r3, #24
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fea4 	bl	8000f3c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	0c1b      	lsrs	r3, r3, #16
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fe9e 	bl	8000f3c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	0a1b      	lsrs	r3, r3, #8
 8001204:	b2db      	uxtb	r3, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fe98 	bl	8000f3c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fe93 	bl	8000f3c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	2b40      	cmp	r3, #64	; 0x40
 800121a:	d102      	bne.n	8001222 <SD_SendCmd+0x5c>
 800121c:	2395      	movs	r3, #149	; 0x95
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e007      	b.n	8001232 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b48      	cmp	r3, #72	; 0x48
 8001226:	d102      	bne.n	800122e <SD_SendCmd+0x68>
 8001228:	2387      	movs	r3, #135	; 0x87
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	e001      	b.n	8001232 <SD_SendCmd+0x6c>
	else crc = 1;
 800122e:	2301      	movs	r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fe81 	bl	8000f3c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	2b4c      	cmp	r3, #76	; 0x4c
 800123e:	d101      	bne.n	8001244 <SD_SendCmd+0x7e>
 8001240:	f7ff feb0 	bl	8000fa4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001244:	230a      	movs	r3, #10
 8001246:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001248:	f7ff feac 	bl	8000fa4 <SPI_RxByte>
 800124c:	4603      	mov	r3, r0
 800124e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001250:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001254:	2b00      	cmp	r3, #0
 8001256:	da05      	bge.n	8001264 <SD_SendCmd+0x9e>
 8001258:	7bbb      	ldrb	r3, [r7, #14]
 800125a:	3b01      	subs	r3, #1
 800125c:	73bb      	strb	r3, [r7, #14]
 800125e:	7bbb      	ldrb	r3, [r7, #14]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1f1      	bne.n	8001248 <SD_SendCmd+0x82>

	return res;
 8001264:	7b7b      	ldrb	r3, [r7, #13]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <SD_disk_initialize+0x14>
 8001280:	2301      	movs	r3, #1
 8001282:	e0d6      	b.n	8001432 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001284:	4b6d      	ldr	r3, [pc, #436]	; (800143c <SD_disk_initialize+0x1cc>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <SD_disk_initialize+0x2a>
 8001292:	4b6a      	ldr	r3, [pc, #424]	; (800143c <SD_disk_initialize+0x1cc>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	e0cb      	b.n	8001432 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800129a:	f7ff fec7 	bl	800102c <SD_PowerOn>

	/* slave select */
	SELECT();
 800129e:	f7ff fe2d 	bl	8000efc <SELECT>

	/* check disk type */
	type = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80012a6:	2100      	movs	r1, #0
 80012a8:	2040      	movs	r0, #64	; 0x40
 80012aa:	f7ff ff8c 	bl	80011c6 <SD_SendCmd>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	f040 80a6 	bne.w	8001402 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80012b6:	4b62      	ldr	r3, [pc, #392]	; (8001440 <SD_disk_initialize+0x1d0>)
 80012b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012bc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80012be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80012c2:	2048      	movs	r0, #72	; 0x48
 80012c4:	f7ff ff7f 	bl	80011c6 <SD_SendCmd>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d158      	bne.n	8001380 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	73fb      	strb	r3, [r7, #15]
 80012d2:	e00c      	b.n	80012ee <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80012d4:	7bfc      	ldrb	r4, [r7, #15]
 80012d6:	f7ff fe65 	bl	8000fa4 <SPI_RxByte>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	f104 0310 	add.w	r3, r4, #16
 80012e2:	443b      	add	r3, r7
 80012e4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	3301      	adds	r3, #1
 80012ec:	73fb      	strb	r3, [r7, #15]
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	2b03      	cmp	r3, #3
 80012f2:	d9ef      	bls.n	80012d4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80012f4:	7abb      	ldrb	r3, [r7, #10]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	f040 8083 	bne.w	8001402 <SD_disk_initialize+0x192>
 80012fc:	7afb      	ldrb	r3, [r7, #11]
 80012fe:	2baa      	cmp	r3, #170	; 0xaa
 8001300:	d17f      	bne.n	8001402 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001302:	2100      	movs	r1, #0
 8001304:	2077      	movs	r0, #119	; 0x77
 8001306:	f7ff ff5e 	bl	80011c6 <SD_SendCmd>
 800130a:	4603      	mov	r3, r0
 800130c:	2b01      	cmp	r3, #1
 800130e:	d807      	bhi.n	8001320 <SD_disk_initialize+0xb0>
 8001310:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001314:	2069      	movs	r0, #105	; 0x69
 8001316:	f7ff ff56 	bl	80011c6 <SD_SendCmd>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d005      	beq.n	800132c <SD_disk_initialize+0xbc>
				} while (Timer1);
 8001320:	4b47      	ldr	r3, [pc, #284]	; (8001440 <SD_disk_initialize+0x1d0>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	b29b      	uxth	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1eb      	bne.n	8001302 <SD_disk_initialize+0x92>
 800132a:	e000      	b.n	800132e <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800132c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800132e:	4b44      	ldr	r3, [pc, #272]	; (8001440 <SD_disk_initialize+0x1d0>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	b29b      	uxth	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d064      	beq.n	8001402 <SD_disk_initialize+0x192>
 8001338:	2100      	movs	r1, #0
 800133a:	207a      	movs	r0, #122	; 0x7a
 800133c:	f7ff ff43 	bl	80011c6 <SD_SendCmd>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d15d      	bne.n	8001402 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001346:	2300      	movs	r3, #0
 8001348:	73fb      	strb	r3, [r7, #15]
 800134a:	e00c      	b.n	8001366 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 800134c:	7bfc      	ldrb	r4, [r7, #15]
 800134e:	f7ff fe29 	bl	8000fa4 <SPI_RxByte>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	f104 0310 	add.w	r3, r4, #16
 800135a:	443b      	add	r3, r7
 800135c:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	3301      	adds	r3, #1
 8001364:	73fb      	strb	r3, [r7, #15]
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	2b03      	cmp	r3, #3
 800136a:	d9ef      	bls.n	800134c <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800136c:	7a3b      	ldrb	r3, [r7, #8]
 800136e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <SD_disk_initialize+0x10a>
 8001376:	230c      	movs	r3, #12
 8001378:	e000      	b.n	800137c <SD_disk_initialize+0x10c>
 800137a:	2304      	movs	r3, #4
 800137c:	73bb      	strb	r3, [r7, #14]
 800137e:	e040      	b.n	8001402 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001380:	2100      	movs	r1, #0
 8001382:	2077      	movs	r0, #119	; 0x77
 8001384:	f7ff ff1f 	bl	80011c6 <SD_SendCmd>
 8001388:	4603      	mov	r3, r0
 800138a:	2b01      	cmp	r3, #1
 800138c:	d808      	bhi.n	80013a0 <SD_disk_initialize+0x130>
 800138e:	2100      	movs	r1, #0
 8001390:	2069      	movs	r0, #105	; 0x69
 8001392:	f7ff ff18 	bl	80011c6 <SD_SendCmd>
 8001396:	4603      	mov	r3, r0
 8001398:	2b01      	cmp	r3, #1
 800139a:	d801      	bhi.n	80013a0 <SD_disk_initialize+0x130>
 800139c:	2302      	movs	r3, #2
 800139e:	e000      	b.n	80013a2 <SD_disk_initialize+0x132>
 80013a0:	2301      	movs	r3, #1
 80013a2:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80013a4:	7bbb      	ldrb	r3, [r7, #14]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d10e      	bne.n	80013c8 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80013aa:	2100      	movs	r1, #0
 80013ac:	2077      	movs	r0, #119	; 0x77
 80013ae:	f7ff ff0a 	bl	80011c6 <SD_SendCmd>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d80e      	bhi.n	80013d6 <SD_disk_initialize+0x166>
 80013b8:	2100      	movs	r1, #0
 80013ba:	2069      	movs	r0, #105	; 0x69
 80013bc:	f7ff ff03 	bl	80011c6 <SD_SendCmd>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d107      	bne.n	80013d6 <SD_disk_initialize+0x166>
 80013c6:	e00d      	b.n	80013e4 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80013c8:	2100      	movs	r1, #0
 80013ca:	2041      	movs	r0, #65	; 0x41
 80013cc:	f7ff fefb 	bl	80011c6 <SD_SendCmd>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <SD_disk_initialize+0x1d0>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1e1      	bne.n	80013a4 <SD_disk_initialize+0x134>
 80013e0:	e000      	b.n	80013e4 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80013e2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <SD_disk_initialize+0x1d0>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d007      	beq.n	80013fe <SD_disk_initialize+0x18e>
 80013ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f2:	2050      	movs	r0, #80	; 0x50
 80013f4:	f7ff fee7 	bl	80011c6 <SD_SendCmd>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SD_disk_initialize+0x192>
 80013fe:	2300      	movs	r3, #0
 8001400:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001402:	4a10      	ldr	r2, [pc, #64]	; (8001444 <SD_disk_initialize+0x1d4>)
 8001404:	7bbb      	ldrb	r3, [r7, #14]
 8001406:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001408:	f7ff fd88 	bl	8000f1c <DESELECT>
	SPI_RxByte();
 800140c:	f7ff fdca 	bl	8000fa4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001410:	7bbb      	ldrb	r3, [r7, #14]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d008      	beq.n	8001428 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <SD_disk_initialize+0x1cc>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f023 0301 	bic.w	r3, r3, #1
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <SD_disk_initialize+0x1cc>)
 8001424:	701a      	strb	r2, [r3, #0]
 8001426:	e001      	b.n	800142c <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001428:	f7ff fe42 	bl	80010b0 <SD_PowerOff>
	}

	return Stat;
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <SD_disk_initialize+0x1cc>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b2db      	uxtb	r3, r3
}
 8001432:	4618      	mov	r0, r3
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	bd90      	pop	{r4, r7, pc}
 800143a:	bf00      	nop
 800143c:	20000000 	.word	0x20000000
 8001440:	20002460 	.word	0x20002460
 8001444:	20000198 	.word	0x20000198

08001448 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <SD_disk_status+0x14>
 8001458:	2301      	movs	r3, #1
 800145a:	e002      	b.n	8001462 <SD_disk_status+0x1a>
	return Stat;
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <SD_disk_status+0x28>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	b2db      	uxtb	r3, r3
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000000 	.word	0x20000000

08001474 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	4603      	mov	r3, r0
 8001482:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d102      	bne.n	8001490 <SD_disk_read+0x1c>
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <SD_disk_read+0x20>
 8001490:	2304      	movs	r3, #4
 8001492:	e051      	b.n	8001538 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001494:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <SD_disk_read+0xcc>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SD_disk_read+0x32>
 80014a2:	2303      	movs	r3, #3
 80014a4:	e048      	b.n	8001538 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80014a6:	4b27      	ldr	r3, [pc, #156]	; (8001544 <SD_disk_read+0xd0>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d102      	bne.n	80014b8 <SD_disk_read+0x44>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	025b      	lsls	r3, r3, #9
 80014b6:	607b      	str	r3, [r7, #4]

	SELECT();
 80014b8:	f7ff fd20 	bl	8000efc <SELECT>

	if (count == 1)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d111      	bne.n	80014e6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	2051      	movs	r0, #81	; 0x51
 80014c6:	f7ff fe7e 	bl	80011c6 <SD_SendCmd>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d129      	bne.n	8001524 <SD_disk_read+0xb0>
 80014d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d4:	68b8      	ldr	r0, [r7, #8]
 80014d6:	f7ff fe03 	bl	80010e0 <SD_RxDataBlock>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d021      	beq.n	8001524 <SD_disk_read+0xb0>
 80014e0:	2300      	movs	r3, #0
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	e01e      	b.n	8001524 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	2052      	movs	r0, #82	; 0x52
 80014ea:	f7ff fe6c 	bl	80011c6 <SD_SendCmd>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d117      	bne.n	8001524 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80014f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f8:	68b8      	ldr	r0, [r7, #8]
 80014fa:	f7ff fdf1 	bl	80010e0 <SD_RxDataBlock>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00a      	beq.n	800151a <SD_disk_read+0xa6>
				buff += 512;
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800150a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	3b01      	subs	r3, #1
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1ed      	bne.n	80014f4 <SD_disk_read+0x80>
 8001518:	e000      	b.n	800151c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800151a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800151c:	2100      	movs	r1, #0
 800151e:	204c      	movs	r0, #76	; 0x4c
 8001520:	f7ff fe51 	bl	80011c6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001524:	f7ff fcfa 	bl	8000f1c <DESELECT>
	SPI_RxByte();
 8001528:	f7ff fd3c 	bl	8000fa4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	bf14      	ite	ne
 8001532:	2301      	movne	r3, #1
 8001534:	2300      	moveq	r3, #0
 8001536:	b2db      	uxtb	r3, r3
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000000 	.word	0x20000000
 8001544:	20000198 	.word	0x20000198

08001548 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	4603      	mov	r3, r0
 8001556:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d102      	bne.n	8001564 <SD_disk_write+0x1c>
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <SD_disk_write+0x20>
 8001564:	2304      	movs	r3, #4
 8001566:	e06b      	b.n	8001640 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001568:	4b37      	ldr	r3, [pc, #220]	; (8001648 <SD_disk_write+0x100>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <SD_disk_write+0x32>
 8001576:	2303      	movs	r3, #3
 8001578:	e062      	b.n	8001640 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800157a:	4b33      	ldr	r3, [pc, #204]	; (8001648 <SD_disk_write+0x100>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <SD_disk_write+0x44>
 8001588:	2302      	movs	r3, #2
 800158a:	e059      	b.n	8001640 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800158c:	4b2f      	ldr	r3, [pc, #188]	; (800164c <SD_disk_write+0x104>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	d102      	bne.n	800159e <SD_disk_write+0x56>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	025b      	lsls	r3, r3, #9
 800159c:	607b      	str	r3, [r7, #4]

	SELECT();
 800159e:	f7ff fcad 	bl	8000efc <SELECT>

	if (count == 1)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d110      	bne.n	80015ca <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	2058      	movs	r0, #88	; 0x58
 80015ac:	f7ff fe0b 	bl	80011c6 <SD_SendCmd>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d13a      	bne.n	800162c <SD_disk_write+0xe4>
 80015b6:	21fe      	movs	r1, #254	; 0xfe
 80015b8:	68b8      	ldr	r0, [r7, #8]
 80015ba:	f7ff fdc1 	bl	8001140 <SD_TxDataBlock>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d033      	beq.n	800162c <SD_disk_write+0xe4>
			count = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	e030      	b.n	800162c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <SD_disk_write+0x104>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d007      	beq.n	80015e6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80015d6:	2100      	movs	r1, #0
 80015d8:	2077      	movs	r0, #119	; 0x77
 80015da:	f7ff fdf4 	bl	80011c6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80015de:	6839      	ldr	r1, [r7, #0]
 80015e0:	2057      	movs	r0, #87	; 0x57
 80015e2:	f7ff fdf0 	bl	80011c6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	2059      	movs	r0, #89	; 0x59
 80015ea:	f7ff fdec 	bl	80011c6 <SD_SendCmd>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d11b      	bne.n	800162c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80015f4:	21fc      	movs	r1, #252	; 0xfc
 80015f6:	68b8      	ldr	r0, [r7, #8]
 80015f8:	f7ff fda2 	bl	8001140 <SD_TxDataBlock>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00a      	beq.n	8001618 <SD_disk_write+0xd0>
				buff += 512;
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001608:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	3b01      	subs	r3, #1
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1ee      	bne.n	80015f4 <SD_disk_write+0xac>
 8001616:	e000      	b.n	800161a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001618:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800161a:	21fd      	movs	r1, #253	; 0xfd
 800161c:	2000      	movs	r0, #0
 800161e:	f7ff fd8f 	bl	8001140 <SD_TxDataBlock>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <SD_disk_write+0xe4>
			{
				count = 1;
 8001628:	2301      	movs	r3, #1
 800162a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800162c:	f7ff fc76 	bl	8000f1c <DESELECT>
	SPI_RxByte();
 8001630:	f7ff fcb8 	bl	8000fa4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	bf14      	ite	ne
 800163a:	2301      	movne	r3, #1
 800163c:	2300      	moveq	r3, #0
 800163e:	b2db      	uxtb	r3, r3
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000000 	.word	0x20000000
 800164c:	20000198 	.word	0x20000198

08001650 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b08b      	sub	sp, #44	; 0x2c
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	603a      	str	r2, [r7, #0]
 800165a:	71fb      	strb	r3, [r7, #7]
 800165c:	460b      	mov	r3, r1
 800165e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SD_disk_ioctl+0x1e>
 800166a:	2304      	movs	r3, #4
 800166c:	e115      	b.n	800189a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001674:	79bb      	ldrb	r3, [r7, #6]
 8001676:	2b05      	cmp	r3, #5
 8001678:	d124      	bne.n	80016c4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d012      	beq.n	80016a8 <SD_disk_ioctl+0x58>
 8001682:	2b02      	cmp	r3, #2
 8001684:	dc1a      	bgt.n	80016bc <SD_disk_ioctl+0x6c>
 8001686:	2b00      	cmp	r3, #0
 8001688:	d002      	beq.n	8001690 <SD_disk_ioctl+0x40>
 800168a:	2b01      	cmp	r3, #1
 800168c:	d006      	beq.n	800169c <SD_disk_ioctl+0x4c>
 800168e:	e015      	b.n	80016bc <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001690:	f7ff fd0e 	bl	80010b0 <SD_PowerOff>
			res = RES_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800169a:	e0fc      	b.n	8001896 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800169c:	f7ff fcc6 	bl	800102c <SD_PowerOn>
			res = RES_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016a6:	e0f6      	b.n	8001896 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80016a8:	6a3b      	ldr	r3, [r7, #32]
 80016aa:	1c5c      	adds	r4, r3, #1
 80016ac:	f7ff fd0c 	bl	80010c8 <SD_CheckPower>
 80016b0:	4603      	mov	r3, r0
 80016b2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80016b4:	2300      	movs	r3, #0
 80016b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016ba:	e0ec      	b.n	8001896 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80016bc:	2304      	movs	r3, #4
 80016be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016c2:	e0e8      	b.n	8001896 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80016c4:	4b77      	ldr	r3, [pc, #476]	; (80018a4 <SD_disk_ioctl+0x254>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SD_disk_ioctl+0x86>
 80016d2:	2303      	movs	r3, #3
 80016d4:	e0e1      	b.n	800189a <SD_disk_ioctl+0x24a>

		SELECT();
 80016d6:	f7ff fc11 	bl	8000efc <SELECT>

		switch (ctrl)
 80016da:	79bb      	ldrb	r3, [r7, #6]
 80016dc:	2b0d      	cmp	r3, #13
 80016de:	f200 80cb 	bhi.w	8001878 <SD_disk_ioctl+0x228>
 80016e2:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <SD_disk_ioctl+0x98>)
 80016e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e8:	080017e3 	.word	0x080017e3
 80016ec:	08001721 	.word	0x08001721
 80016f0:	080017d3 	.word	0x080017d3
 80016f4:	08001879 	.word	0x08001879
 80016f8:	08001879 	.word	0x08001879
 80016fc:	08001879 	.word	0x08001879
 8001700:	08001879 	.word	0x08001879
 8001704:	08001879 	.word	0x08001879
 8001708:	08001879 	.word	0x08001879
 800170c:	08001879 	.word	0x08001879
 8001710:	08001879 	.word	0x08001879
 8001714:	080017f5 	.word	0x080017f5
 8001718:	08001819 	.word	0x08001819
 800171c:	0800183d 	.word	0x0800183d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001720:	2100      	movs	r1, #0
 8001722:	2049      	movs	r0, #73	; 0x49
 8001724:	f7ff fd4f 	bl	80011c6 <SD_SendCmd>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	f040 80a8 	bne.w	8001880 <SD_disk_ioctl+0x230>
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	2110      	movs	r1, #16
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fcd2 	bl	80010e0 <SD_RxDataBlock>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 809e 	beq.w	8001880 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001744:	7b3b      	ldrb	r3, [r7, #12]
 8001746:	099b      	lsrs	r3, r3, #6
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b01      	cmp	r3, #1
 800174c:	d10e      	bne.n	800176c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800174e:	7d7b      	ldrb	r3, [r7, #21]
 8001750:	b29a      	uxth	r2, r3
 8001752:	7d3b      	ldrb	r3, [r7, #20]
 8001754:	b29b      	uxth	r3, r3
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	b29b      	uxth	r3, r3
 800175a:	4413      	add	r3, r2
 800175c:	b29b      	uxth	r3, r3
 800175e:	3301      	adds	r3, #1
 8001760:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001762:	8bfb      	ldrh	r3, [r7, #30]
 8001764:	029a      	lsls	r2, r3, #10
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	e02e      	b.n	80017ca <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800176c:	7c7b      	ldrb	r3, [r7, #17]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	b2da      	uxtb	r2, r3
 8001774:	7dbb      	ldrb	r3, [r7, #22]
 8001776:	09db      	lsrs	r3, r3, #7
 8001778:	b2db      	uxtb	r3, r3
 800177a:	4413      	add	r3, r2
 800177c:	b2da      	uxtb	r2, r3
 800177e:	7d7b      	ldrb	r3, [r7, #21]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	f003 0306 	and.w	r3, r3, #6
 8001788:	b2db      	uxtb	r3, r3
 800178a:	4413      	add	r3, r2
 800178c:	b2db      	uxtb	r3, r3
 800178e:	3302      	adds	r3, #2
 8001790:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001794:	7d3b      	ldrb	r3, [r7, #20]
 8001796:	099b      	lsrs	r3, r3, #6
 8001798:	b2db      	uxtb	r3, r3
 800179a:	b29a      	uxth	r2, r3
 800179c:	7cfb      	ldrb	r3, [r7, #19]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	4413      	add	r3, r2
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	7cbb      	ldrb	r3, [r7, #18]
 80017aa:	029b      	lsls	r3, r3, #10
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	4413      	add	r3, r2
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	3301      	adds	r3, #1
 80017ba:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80017bc:	8bfa      	ldrh	r2, [r7, #30]
 80017be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017c2:	3b09      	subs	r3, #9
 80017c4:	409a      	lsls	r2, r3
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80017d0:	e056      	b.n	8001880 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017e0:	e055      	b.n	800188e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80017e2:	f7ff fc09 	bl	8000ff8 <SD_ReadyWait>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2bff      	cmp	r3, #255	; 0xff
 80017ea:	d14b      	bne.n	8001884 <SD_disk_ioctl+0x234>
 80017ec:	2300      	movs	r3, #0
 80017ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017f2:	e047      	b.n	8001884 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80017f4:	2100      	movs	r1, #0
 80017f6:	2049      	movs	r0, #73	; 0x49
 80017f8:	f7ff fce5 	bl	80011c6 <SD_SendCmd>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d142      	bne.n	8001888 <SD_disk_ioctl+0x238>
 8001802:	2110      	movs	r1, #16
 8001804:	6a38      	ldr	r0, [r7, #32]
 8001806:	f7ff fc6b 	bl	80010e0 <SD_RxDataBlock>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d03b      	beq.n	8001888 <SD_disk_ioctl+0x238>
 8001810:	2300      	movs	r3, #0
 8001812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001816:	e037      	b.n	8001888 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001818:	2100      	movs	r1, #0
 800181a:	204a      	movs	r0, #74	; 0x4a
 800181c:	f7ff fcd3 	bl	80011c6 <SD_SendCmd>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d132      	bne.n	800188c <SD_disk_ioctl+0x23c>
 8001826:	2110      	movs	r1, #16
 8001828:	6a38      	ldr	r0, [r7, #32]
 800182a:	f7ff fc59 	bl	80010e0 <SD_RxDataBlock>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d02b      	beq.n	800188c <SD_disk_ioctl+0x23c>
 8001834:	2300      	movs	r3, #0
 8001836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800183a:	e027      	b.n	800188c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800183c:	2100      	movs	r1, #0
 800183e:	207a      	movs	r0, #122	; 0x7a
 8001840:	f7ff fcc1 	bl	80011c6 <SD_SendCmd>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d116      	bne.n	8001878 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800184a:	2300      	movs	r3, #0
 800184c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001850:	e00b      	b.n	800186a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001852:	6a3c      	ldr	r4, [r7, #32]
 8001854:	1c63      	adds	r3, r4, #1
 8001856:	623b      	str	r3, [r7, #32]
 8001858:	f7ff fba4 	bl	8000fa4 <SPI_RxByte>
 800185c:	4603      	mov	r3, r0
 800185e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001860:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001864:	3301      	adds	r3, #1
 8001866:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800186a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800186e:	2b03      	cmp	r3, #3
 8001870:	d9ef      	bls.n	8001852 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001878:	2304      	movs	r3, #4
 800187a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800187e:	e006      	b.n	800188e <SD_disk_ioctl+0x23e>
			break;
 8001880:	bf00      	nop
 8001882:	e004      	b.n	800188e <SD_disk_ioctl+0x23e>
			break;
 8001884:	bf00      	nop
 8001886:	e002      	b.n	800188e <SD_disk_ioctl+0x23e>
			break;
 8001888:	bf00      	nop
 800188a:	e000      	b.n	800188e <SD_disk_ioctl+0x23e>
			break;
 800188c:	bf00      	nop
		}

		DESELECT();
 800188e:	f7ff fb45 	bl	8000f1c <DESELECT>
		SPI_RxByte();
 8001892:	f7ff fb87 	bl	8000fa4 <SPI_RxByte>
	}

	return res;
 8001896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800189a:	4618      	mov	r0, r3
 800189c:	372c      	adds	r7, #44	; 0x2c
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd90      	pop	{r4, r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000000 	.word	0x20000000

080018a8 <GetAllData>:
uint32_t FloatToBin(float A);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void GetAllData(struct TelemetryStruct* TelemetryStruct){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b090      	sub	sp, #64	; 0x40
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

/*TIME*/ 	TelemetryStruct->time = (float)__HAL_TIM_GET_COUNTER(&htim2);
 80018b0:	4b39      	ldr	r3, [pc, #228]	; (8001998 <GetAllData+0xf0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	ee07 3a90 	vmov	s15, r3
 80018ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	edc3 7a00 	vstr	s15, [r3]

/*VBAT*/	HAL_ADC_PollForConversion(&hadc1, 1);
 80018c4:	2101      	movs	r1, #1
 80018c6:	4835      	ldr	r0, [pc, #212]	; (800199c <GetAllData+0xf4>)
 80018c8:	f001 f8ec 	bl	8002aa4 <HAL_ADC_PollForConversion>
/*VBAT*/	uint16_t VbatRaw = HAL_ADC_GetValue(&hadc1);
 80018cc:	4833      	ldr	r0, [pc, #204]	; (800199c <GetAllData+0xf4>)
 80018ce:	f001 f974 	bl	8002bba <HAL_ADC_GetValue>
 80018d2:	4603      	mov	r3, r0
 80018d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
/*VBAT*/	HAL_ADC_Start(&hadc1);
 80018d6:	4831      	ldr	r0, [pc, #196]	; (800199c <GetAllData+0xf4>)
 80018d8:	f001 f830 	bl	800293c <HAL_ADC_Start>
/*VBAT*/	TelemetryStruct->Vbat = ADC_ConvertVBat(VbatRaw);
 80018dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 fc5e 	bl	80021a0 <ADC_ConvertVBat>
 80018e4:	eef0 7a40 	vmov.f32	s15, s0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	edc3 7a01 	vstr	s15, [r3, #4]

/*DS18*/	uint16_t DS18_Temp = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
/*DS18*/	DS18_GetData(DS18_SKIP_ROM, &DS18_Temp);
 80018f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018f6:	461a      	mov	r2, r3
 80018f8:	f04f 0000 	mov.w	r0, #0
 80018fc:	f04f 0100 	mov.w	r1, #0
 8001900:	f010 f974 	bl	8011bec <DS18_GetData>
/*DS18*/	DS18_StartConv(DS18_SKIP_ROM);
 8001904:	f04f 0000 	mov.w	r0, #0
 8001908:	f04f 0100 	mov.w	r1, #0
 800190c:	f010 f956 	bl	8011bbc <DS18_StartConv>
/*DS18*/	TelemetryStruct->DS18_temp = DS18_TempConvert(DS18_Temp);
 8001910:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001912:	4618      	mov	r0, r3
 8001914:	f010 f9a0 	bl	8011c58 <DS18_TempConvert>
 8001918:	eef0 7a40 	vmov.f32	s15, s0
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	edc3 7a02 	vstr	s15, [r3, #8]

/*LSM6*/	int16_t LSM6DS3_AccRaw[3]; 	int16_t LSM6DS3_GyroRaw[3];
/*LSM6*/	float 	AccelG[4];			float 	GyroDS[4];
/*LSM6*/    LSM6DS3_GetData(	  LSM6DS3_AccRaw, LSM6DS3_GyroRaw);
 8001922:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001926:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f010 fa75 	bl	8011e1c <LSM6DS3_GetData>
/*LSM6*/	LSM6DS3_AccelConvert( LSM6DS3_AccRaw,  AccelG);
 8001932:	f107 021c 	add.w	r2, r7, #28
 8001936:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f010 fb1d 	bl	8011f7c <LSM6DS3_AccelConvert>
/*LSM6*/	LSM6DS3_GyroConvert(  LSM6DS3_GyroRaw, GyroDS);
 8001942:	f107 020c 	add.w	r2, r7, #12
 8001946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f010 fb8f 	bl	8012070 <LSM6DS3_GyroConvert>
/*LSM6*/	TelemetryStruct->AccX = AccelG[0];	TelemetryStruct->GyroX = GyroDS[0];
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	615a      	str	r2, [r3, #20]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	625a      	str	r2, [r3, #36]	; 0x24
/*LSM6*/	TelemetryStruct->AccY = AccelG[1];	TelemetryStruct->GyroY = GyroDS[1];
 800195e:	6a3a      	ldr	r2, [r7, #32]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	619a      	str	r2, [r3, #24]
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	629a      	str	r2, [r3, #40]	; 0x28
/*LSM6*/	TelemetryStruct->AccZ = AccelG[2];	TelemetryStruct->GyroZ = GyroDS[2];
 800196a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	61da      	str	r2, [r3, #28]
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	62da      	str	r2, [r3, #44]	; 0x2c
/*LSM6*/	TelemetryStruct->AccAbs = AccelG[3];TelemetryStruct->GyroAbs = GyroDS[3];
 8001976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	621a      	str	r2, [r3, #32]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	631a      	str	r2, [r3, #48]	; 0x30

/*MS56*/	uint32_t MS56_Pres = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
/*MS56*/	MS5607_GetPres(&MS56_Pres);
 8001986:	f107 0308 	add.w	r3, r7, #8
 800198a:	4618      	mov	r0, r3
 800198c:	f000 fef8 	bl	8002780 <MS5607_GetPres>

}
 8001990:	bf00      	nop
 8001992:	3740      	adds	r7, #64	; 0x40
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000290 	.word	0x20000290
 800199c:	2000019c 	.word	0x2000019c

080019a0 <SendAllData>:

void SendAllData(struct TelemetryStruct* TelemetryStruct){
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b0a4      	sub	sp, #144	; 0x90
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

	uint8_t USB_buffer[100];

	USB_buffer[0] = 0x0D;
 80019a8:	230d      	movs	r3, #13
 80019aa:	733b      	strb	r3, [r7, #12]
	USB_buffer[1] = 'T';
 80019ac:	2354      	movs	r3, #84	; 0x54
 80019ae:	737b      	strb	r3, [r7, #13]

	uint32_t Time = FloatToBin(TelemetryStruct->time);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	edd3 7a00 	vldr	s15, [r3]
 80019b6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ba:	f000 fbdd 	bl	8002178 <FloatToBin>
 80019be:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	USB_buffer[2] = (uint8_t)(Time>>24);
 80019c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019c6:	0e1b      	lsrs	r3, r3, #24
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	73bb      	strb	r3, [r7, #14]
	USB_buffer[3] = (uint8_t)(Time>>16);
 80019cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019d0:	0c1b      	lsrs	r3, r3, #16
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	73fb      	strb	r3, [r7, #15]
	USB_buffer[4] = (uint8_t)(Time>>8);
 80019d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019da:	0a1b      	lsrs	r3, r3, #8
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	743b      	strb	r3, [r7, #16]
	USB_buffer[5] = (uint8_t)(Time);
 80019e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	747b      	strb	r3, [r7, #17]

	uint32_t Vbat = FloatToBin(TelemetryStruct->Vbat);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80019ee:	eeb0 0a67 	vmov.f32	s0, s15
 80019f2:	f000 fbc1 	bl	8002178 <FloatToBin>
 80019f6:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	USB_buffer[6] = (uint8_t)(Vbat>>24);
 80019fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019fe:	0e1b      	lsrs	r3, r3, #24
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	74bb      	strb	r3, [r7, #18]
	USB_buffer[7] = (uint8_t)(Vbat>>16);
 8001a04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a08:	0c1b      	lsrs	r3, r3, #16
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	74fb      	strb	r3, [r7, #19]
	USB_buffer[8] = (uint8_t)(Vbat>>8);
 8001a0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a12:	0a1b      	lsrs	r3, r3, #8
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	753b      	strb	r3, [r7, #20]
	USB_buffer[9] = (uint8_t)(Vbat);
 8001a18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	757b      	strb	r3, [r7, #21]

	uint32_t DS18_temp = FloatToBin(TelemetryStruct->DS18_temp);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a26:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2a:	f000 fba5 	bl	8002178 <FloatToBin>
 8001a2e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	USB_buffer[10] = (uint8_t)(DS18_temp>>24);
 8001a32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a36:	0e1b      	lsrs	r3, r3, #24
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	75bb      	strb	r3, [r7, #22]
	USB_buffer[11] = (uint8_t)(DS18_temp>>16);
 8001a3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a40:	0c1b      	lsrs	r3, r3, #16
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	75fb      	strb	r3, [r7, #23]
	USB_buffer[12] = (uint8_t)(DS18_temp>>8);
 8001a46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a4a:	0a1b      	lsrs	r3, r3, #8
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	763b      	strb	r3, [r7, #24]
	USB_buffer[13] = (uint8_t)(DS18_temp);
 8001a50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	767b      	strb	r3, [r7, #25]

	uint32_t AccelAbs = FloatToBin(TelemetryStruct->AccAbs);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a62:	f000 fb89 	bl	8002178 <FloatToBin>
 8001a66:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	USB_buffer[14] = (uint8_t)(AccelAbs>>24);
 8001a6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a6e:	0e1b      	lsrs	r3, r3, #24
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	76bb      	strb	r3, [r7, #26]
	USB_buffer[15] = (uint8_t)(AccelAbs>>16);
 8001a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a78:	0c1b      	lsrs	r3, r3, #16
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	76fb      	strb	r3, [r7, #27]
	USB_buffer[16] = (uint8_t)(AccelAbs>>8);
 8001a7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a82:	0a1b      	lsrs	r3, r3, #8
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	773b      	strb	r3, [r7, #28]
	USB_buffer[17] = (uint8_t)(AccelAbs);
 8001a88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	777b      	strb	r3, [r7, #29]

	uint32_t AccelX = FloatToBin(TelemetryStruct->AccX);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a96:	eeb0 0a67 	vmov.f32	s0, s15
 8001a9a:	f000 fb6d 	bl	8002178 <FloatToBin>
 8001a9e:	67f8      	str	r0, [r7, #124]	; 0x7c
	USB_buffer[18] = (uint8_t)(AccelX>>24);
 8001aa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001aa2:	0e1b      	lsrs	r3, r3, #24
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	77bb      	strb	r3, [r7, #30]
	USB_buffer[19] = (uint8_t)(AccelX>>16);
 8001aa8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001aaa:	0c1b      	lsrs	r3, r3, #16
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	77fb      	strb	r3, [r7, #31]
	USB_buffer[20] = (uint8_t)(AccelX>>8);
 8001ab0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ab2:	0a1b      	lsrs	r3, r3, #8
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	f887 3020 	strb.w	r3, [r7, #32]
	USB_buffer[21] = (uint8_t)(AccelX);
 8001aba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint32_t AccelY = FloatToBin(TelemetryStruct->AccY);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8001acc:	f000 fb54 	bl	8002178 <FloatToBin>
 8001ad0:	67b8      	str	r0, [r7, #120]	; 0x78
	USB_buffer[22] = (uint8_t)(AccelY>>24);
 8001ad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ad4:	0e1b      	lsrs	r3, r3, #24
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	USB_buffer[23] = (uint8_t)(AccelY>>16);
 8001adc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ade:	0c1b      	lsrs	r3, r3, #16
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	USB_buffer[24] = (uint8_t)(AccelY>>8);
 8001ae6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	USB_buffer[25] = (uint8_t)(AccelY);
 8001af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint32_t AccelZ = FloatToBin(TelemetryStruct->AccZ);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	edd3 7a07 	vldr	s15, [r3, #28]
 8001afe:	eeb0 0a67 	vmov.f32	s0, s15
 8001b02:	f000 fb39 	bl	8002178 <FloatToBin>
 8001b06:	6778      	str	r0, [r7, #116]	; 0x74
	USB_buffer[26] = (uint8_t)(AccelZ>>24);
 8001b08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b0a:	0e1b      	lsrs	r3, r3, #24
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	USB_buffer[27] = (uint8_t)(AccelZ>>16);
 8001b12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b14:	0c1b      	lsrs	r3, r3, #16
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	USB_buffer[28] = (uint8_t)(AccelZ>>8);
 8001b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b1e:	0a1b      	lsrs	r3, r3, #8
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	USB_buffer[29] = (uint8_t)(AccelZ);
 8001b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	uint32_t GyroAbs = FloatToBin(TelemetryStruct->GyroAbs);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001b34:	eeb0 0a67 	vmov.f32	s0, s15
 8001b38:	f000 fb1e 	bl	8002178 <FloatToBin>
 8001b3c:	6738      	str	r0, [r7, #112]	; 0x70
	USB_buffer[30] = (uint8_t)(GyroAbs>>24);
 8001b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b40:	0e1b      	lsrs	r3, r3, #24
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	USB_buffer[31] = (uint8_t)(GyroAbs>>16);
 8001b48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b4a:	0c1b      	lsrs	r3, r3, #16
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	USB_buffer[32] = (uint8_t)(GyroAbs>>8);
 8001b52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	USB_buffer[33] = (uint8_t)(GyroAbs);
 8001b5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	CDC_Transmit_FS(USB_buffer, 34);
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	2122      	movs	r1, #34	; 0x22
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f00f fbd4 	bl	8011318 <CDC_Transmit_FS>
	HAL_UART_Transmit(&huart2, USB_buffer, 34, 1000);
 8001b70:	f107 010c 	add.w	r1, r7, #12
 8001b74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b78:	2222      	movs	r2, #34	; 0x22
 8001b7a:	4803      	ldr	r0, [pc, #12]	; (8001b88 <SendAllData+0x1e8>)
 8001b7c:	f005 fc5b 	bl	8007436 <HAL_UART_Transmit>
}
 8001b80:	bf00      	nop
 8001b82:	3790      	adds	r7, #144	; 0x90
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000364 	.word	0x20000364

08001b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b0a0      	sub	sp, #128	; 0x80
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b92:	f000 fe29 	bl	80027e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b96:	f000 f87b 	bl	8001c90 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b9a:	f000 fa5f 	bl	800205c <MX_GPIO_Init>
  MX_TIM11_Init();
 8001b9e:	f000 f9e5 	bl	8001f6c <MX_TIM11_Init>
  MX_ADC1_Init();
 8001ba2:	f000 f8df 	bl	8001d64 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001ba6:	f000 f95d 	bl	8001e64 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001baa:	f000 f991 	bl	8001ed0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001bae:	f000 f92b 	bl	8001e08 <MX_I2C1_Init>
  MX_FATFS_Init();
 8001bb2:	f007 fc03 	bl	80093bc <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8001bb6:	f000 f9fd 	bl	8001fb4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001bba:	f000 fa25 	bl	8002008 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  fresult = f_mount(&fs, "", 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	4929      	ldr	r1, [pc, #164]	; (8001c68 <main+0xdc>)
 8001bc2:	482a      	ldr	r0, [pc, #168]	; (8001c6c <main+0xe0>)
 8001bc4:	f00b fa74 	bl	800d0b0 <f_mount>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <main+0xe4>)
 8001bce:	701a      	strb	r2, [r3, #0]
	uint8_t Data[4] = { 48, 49, 50, 51 };
 8001bd0:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <main+0xe8>)
 8001bd2:	67bb      	str	r3, [r7, #120]	; 0x78
	UINT bw;
	uint8_t n= 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	char fname[35];
	sprintf(&fname[0],"%d.jpeg", n++);
 8001bda:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001bde:	1c5a      	adds	r2, r3, #1
 8001be0:	f887 207f 	strb.w	r2, [r7, #127]	; 0x7f
 8001be4:	461a      	mov	r2, r3
 8001be6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001bea:	4923      	ldr	r1, [pc, #140]	; (8001c78 <main+0xec>)
 8001bec:	4618      	mov	r0, r3
 8001bee:	f010 fc4d 	bl	801248c <siprintf>
	fresult = f_open(&fil, &fname[0], FA_OPEN_APPEND | FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001bf2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001bf6:	2233      	movs	r2, #51	; 0x33
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4820      	ldr	r0, [pc, #128]	; (8001c7c <main+0xf0>)
 8001bfc:	f00b fabc 	bl	800d178 <f_open>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <main+0xe4>)
 8001c06:	701a      	strb	r2, [r3, #0]

	fresult = f_write(&fil, Data, 4, &bw);
 8001c08:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c0c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001c10:	2204      	movs	r2, #4
 8001c12:	481a      	ldr	r0, [pc, #104]	; (8001c7c <main+0xf0>)
 8001c14:	f00b fc83 	bl	800d51e <f_write>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <main+0xe4>)
 8001c1e:	701a      	strb	r2, [r3, #0]

	fresult = f_close(&fil);
 8001c20:	4816      	ldr	r0, [pc, #88]	; (8001c7c <main+0xf0>)
 8001c22:	f00b fec8 	bl	800d9b6 <f_close>
 8001c26:	4603      	mov	r3, r0
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <main+0xe4>)
 8001c2c:	701a      	strb	r2, [r3, #0]
  struct TelemetryStruct TelemetryStruct;

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001c2e:	f00b ffd7 	bl	800dbe0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001c32:	4a13      	ldr	r2, [pc, #76]	; (8001c80 <main+0xf4>)
 8001c34:	2100      	movs	r1, #0
 8001c36:	4813      	ldr	r0, [pc, #76]	; (8001c84 <main+0xf8>)
 8001c38:	f00c f81c 	bl	800dc74 <osThreadNew>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <main+0xfc>)
 8001c40:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001c42:	f00b fff1 	bl	800dc28 <osKernelStart>
  while (1)
  {
	  //uint8_t data[32] = "Hello World!\r\n";
	  //MSR_SendData(data);

	  GetAllData(&TelemetryStruct);
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fe2d 	bl	80018a8 <GetAllData>
	  SendAllData(&TelemetryStruct);
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fea5 	bl	80019a0 <SendAllData>

	  HAL_GPIO_TogglePin(SD_CS_GPIO_Port, SD_CS_Pin);
 8001c56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c5a:	480c      	ldr	r0, [pc, #48]	; (8001c8c <main+0x100>)
 8001c5c:	f001 fc6f 	bl	800353e <HAL_GPIO_TogglePin>

	  HAL_Delay(100);
 8001c60:	2064      	movs	r0, #100	; 0x64
 8001c62:	f000 fe03 	bl	800286c <HAL_Delay>
	  GetAllData(&TelemetryStruct);
 8001c66:	e7ee      	b.n	8001c46 <main+0xba>
 8001c68:	08012de8 	.word	0x08012de8
 8001c6c:	200003ac 	.word	0x200003ac
 8001c70:	20002414 	.word	0x20002414
 8001c74:	33323130 	.word	0x33323130
 8001c78:	08012de0 	.word	0x08012de0
 8001c7c:	200013e4 	.word	0x200013e4
 8001c80:	08012e90 	.word	0x08012e90
 8001c84:	080021e1 	.word	0x080021e1
 8001c88:	200003a8 	.word	0x200003a8
 8001c8c:	40020800 	.word	0x40020800

08001c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b094      	sub	sp, #80	; 0x50
 8001c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c96:	f107 0320 	add.w	r3, r7, #32
 8001c9a:	2230      	movs	r2, #48	; 0x30
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f010 fade 	bl	8012260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <SystemClock_Config+0xcc>)
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	4a27      	ldr	r2, [pc, #156]	; (8001d5c <SystemClock_Config+0xcc>)
 8001cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc4:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <SystemClock_Config+0xcc>)
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <SystemClock_Config+0xd0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cdc:	4a20      	ldr	r2, [pc, #128]	; (8001d60 <SystemClock_Config+0xd0>)
 8001cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <SystemClock_Config+0xd0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001d04:	2306      	movs	r3, #6
 8001d06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d08:	23a8      	movs	r3, #168	; 0xa8
 8001d0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d0c:	2304      	movs	r3, #4
 8001d0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d10:	2307      	movs	r3, #7
 8001d12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d14:	f107 0320 	add.w	r3, r7, #32
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f003 fe3d 	bl	8005998 <HAL_RCC_OscConfig>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d24:	f000 fa80 	bl	8002228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d28:	230f      	movs	r3, #15
 8001d2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d3e:	f107 030c 	add.w	r3, r7, #12
 8001d42:	2102      	movs	r1, #2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f004 f89f 	bl	8005e88 <HAL_RCC_ClockConfig>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d50:	f000 fa6a 	bl	8002228 <Error_Handler>
  }
}
 8001d54:	bf00      	nop
 8001d56:	3750      	adds	r7, #80	; 0x50
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40007000 	.word	0x40007000

08001d64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d76:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001d78:	4a21      	ldr	r2, [pc, #132]	; (8001e00 <MX_ADC1_Init+0x9c>)
 8001d7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001d7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d84:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d90:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d9e:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001da4:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001da6:	4a17      	ldr	r2, [pc, #92]	; (8001e04 <MX_ADC1_Init+0xa0>)
 8001da8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001daa:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dc4:	480d      	ldr	r0, [pc, #52]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001dc6:	f000 fd75 	bl	80028b4 <HAL_ADC_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001dd0:	f000 fa2a 	bl	8002228 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001de0:	463b      	mov	r3, r7
 8001de2:	4619      	mov	r1, r3
 8001de4:	4805      	ldr	r0, [pc, #20]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001de6:	f000 fef5 	bl	8002bd4 <HAL_ADC_ConfigChannel>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001df0:	f000 fa1a 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001df4:	bf00      	nop
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	2000019c 	.word	0x2000019c
 8001e00:	40012000 	.word	0x40012000
 8001e04:	0f000001 	.word	0x0f000001

08001e08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <MX_I2C1_Init+0x50>)
 8001e0e:	4a13      	ldr	r2, [pc, #76]	; (8001e5c <MX_I2C1_Init+0x54>)
 8001e10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <MX_I2C1_Init+0x50>)
 8001e14:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <MX_I2C1_Init+0x58>)
 8001e16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <MX_I2C1_Init+0x50>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <MX_I2C1_Init+0x50>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <MX_I2C1_Init+0x50>)
 8001e26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <MX_I2C1_Init+0x50>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <MX_I2C1_Init+0x50>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e38:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <MX_I2C1_Init+0x50>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <MX_I2C1_Init+0x50>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e44:	4804      	ldr	r0, [pc, #16]	; (8001e58 <MX_I2C1_Init+0x50>)
 8001e46:	f001 fb95 	bl	8003574 <HAL_I2C_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e50:	f000 f9ea 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	200001e4 	.word	0x200001e4
 8001e5c:	40005400 	.word	0x40005400
 8001e60:	000186a0 	.word	0x000186a0

08001e64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e68:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <MX_SPI1_Init+0x64>)
 8001e6a:	4a18      	ldr	r2, [pc, #96]	; (8001ecc <MX_SPI1_Init+0x68>)
 8001e6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e6e:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <MX_SPI1_Init+0x64>)
 8001e70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e76:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <MX_SPI1_Init+0x64>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <MX_SPI1_Init+0x64>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <MX_SPI1_Init+0x64>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <MX_SPI1_Init+0x64>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <MX_SPI1_Init+0x64>)
 8001e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <MX_SPI1_Init+0x64>)
 8001e98:	2230      	movs	r2, #48	; 0x30
 8001e9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <MX_SPI1_Init+0x64>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <MX_SPI1_Init+0x64>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ea8:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <MX_SPI1_Init+0x64>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <MX_SPI1_Init+0x64>)
 8001eb0:	220a      	movs	r2, #10
 8001eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001eb4:	4804      	ldr	r0, [pc, #16]	; (8001ec8 <MX_SPI1_Init+0x64>)
 8001eb6:	f004 f9f9 	bl	80062ac <HAL_SPI_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ec0:	f000 f9b2 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000238 	.word	0x20000238
 8001ecc:	40013000 	.word	0x40013000

08001ed0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eec:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <MX_TIM2_Init+0x98>)
 8001eee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ef2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001ef4:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <MX_TIM2_Init+0x98>)
 8001ef6:	f240 3247 	movw	r2, #839	; 0x347
 8001efa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efc:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <MX_TIM2_Init+0x98>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f02:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <MX_TIM2_Init+0x98>)
 8001f04:	f04f 32ff 	mov.w	r2, #4294967295
 8001f08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <MX_TIM2_Init+0x98>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f10:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <MX_TIM2_Init+0x98>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f16:	4814      	ldr	r0, [pc, #80]	; (8001f68 <MX_TIM2_Init+0x98>)
 8001f18:	f004 fdfa 	bl	8006b10 <HAL_TIM_Base_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001f22:	f000 f981 	bl	8002228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f2c:	f107 0308 	add.w	r3, r7, #8
 8001f30:	4619      	mov	r1, r3
 8001f32:	480d      	ldr	r0, [pc, #52]	; (8001f68 <MX_TIM2_Init+0x98>)
 8001f34:	f004 ffa6 	bl	8006e84 <HAL_TIM_ConfigClockSource>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001f3e:	f000 f973 	bl	8002228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f4a:	463b      	mov	r3, r7
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4806      	ldr	r0, [pc, #24]	; (8001f68 <MX_TIM2_Init+0x98>)
 8001f50:	f005 f9a2 	bl	8007298 <HAL_TIMEx_MasterConfigSynchronization>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f5a:	f000 f965 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f5e:	bf00      	nop
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000290 	.word	0x20000290

08001f6c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001f70:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <MX_TIM11_Init+0x40>)
 8001f72:	4a0f      	ldr	r2, [pc, #60]	; (8001fb0 <MX_TIM11_Init+0x44>)
 8001f74:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 8001f76:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <MX_TIM11_Init+0x40>)
 8001f78:	2253      	movs	r2, #83	; 0x53
 8001f7a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <MX_TIM11_Init+0x40>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001f82:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <MX_TIM11_Init+0x40>)
 8001f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f88:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <MX_TIM11_Init+0x40>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <MX_TIM11_Init+0x40>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001f96:	4805      	ldr	r0, [pc, #20]	; (8001fac <MX_TIM11_Init+0x40>)
 8001f98:	f004 fdba 	bl	8006b10 <HAL_TIM_Base_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001fa2:	f000 f941 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200002d8 	.word	0x200002d8
 8001fb0:	40014800 	.word	0x40014800

08001fb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fba:	4a12      	ldr	r2, [pc, #72]	; (8002004 <MX_USART1_UART_Init+0x50>)
 8001fbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fda:	220c      	movs	r2, #12
 8001fdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fea:	4805      	ldr	r0, [pc, #20]	; (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fec:	f005 f9d6 	bl	800739c <HAL_UART_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ff6:	f000 f917 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000320 	.word	0x20000320
 8002004:	40011000 	.word	0x40011000

08002008 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <MX_USART2_UART_Init+0x4c>)
 800200e:	4a12      	ldr	r2, [pc, #72]	; (8002058 <MX_USART2_UART_Init+0x50>)
 8002010:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <MX_USART2_UART_Init+0x4c>)
 8002014:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002018:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800201a:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <MX_USART2_UART_Init+0x4c>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <MX_USART2_UART_Init+0x4c>)
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <MX_USART2_UART_Init+0x4c>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800202c:	4b09      	ldr	r3, [pc, #36]	; (8002054 <MX_USART2_UART_Init+0x4c>)
 800202e:	220c      	movs	r2, #12
 8002030:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002032:	4b08      	ldr	r3, [pc, #32]	; (8002054 <MX_USART2_UART_Init+0x4c>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <MX_USART2_UART_Init+0x4c>)
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800203e:	4805      	ldr	r0, [pc, #20]	; (8002054 <MX_USART2_UART_Init+0x4c>)
 8002040:	f005 f9ac 	bl	800739c <HAL_UART_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800204a:	f000 f8ed 	bl	8002228 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000364 	.word	0x20000364
 8002058:	40004400 	.word	0x40004400

0800205c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002062:	f107 0314 	add.w	r3, r7, #20
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
 8002070:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	4b3c      	ldr	r3, [pc, #240]	; (8002168 <MX_GPIO_Init+0x10c>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a3b      	ldr	r2, [pc, #236]	; (8002168 <MX_GPIO_Init+0x10c>)
 800207c:	f043 0304 	orr.w	r3, r3, #4
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b39      	ldr	r3, [pc, #228]	; (8002168 <MX_GPIO_Init+0x10c>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b35      	ldr	r3, [pc, #212]	; (8002168 <MX_GPIO_Init+0x10c>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a34      	ldr	r2, [pc, #208]	; (8002168 <MX_GPIO_Init+0x10c>)
 8002098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b32      	ldr	r3, [pc, #200]	; (8002168 <MX_GPIO_Init+0x10c>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	4b2e      	ldr	r3, [pc, #184]	; (8002168 <MX_GPIO_Init+0x10c>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a2d      	ldr	r2, [pc, #180]	; (8002168 <MX_GPIO_Init+0x10c>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b2b      	ldr	r3, [pc, #172]	; (8002168 <MX_GPIO_Init+0x10c>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	4b27      	ldr	r3, [pc, #156]	; (8002168 <MX_GPIO_Init+0x10c>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a26      	ldr	r2, [pc, #152]	; (8002168 <MX_GPIO_Init+0x10c>)
 80020d0:	f043 0302 	orr.w	r3, r3, #2
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b24      	ldr	r3, [pc, #144]	; (8002168 <MX_GPIO_Init+0x10c>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80020e2:	2200      	movs	r2, #0
 80020e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020e8:	4820      	ldr	r0, [pc, #128]	; (800216c <MX_GPIO_Init+0x110>)
 80020ea:	f001 fa0f 	bl	800350c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LSM_CS_Pin|CS_RF_Pin, GPIO_PIN_SET);
 80020ee:	2201      	movs	r2, #1
 80020f0:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 80020f4:	481e      	ldr	r0, [pc, #120]	; (8002170 <MX_GPIO_Init+0x114>)
 80020f6:	f001 fa09 	bl	800350c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_DQ_GPIO_Port, DS18B20_DQ_Pin, GPIO_PIN_RESET);
 80020fa:	2200      	movs	r2, #0
 80020fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002100:	481c      	ldr	r0, [pc, #112]	; (8002174 <MX_GPIO_Init+0x118>)
 8002102:	f001 fa03 	bl	800350c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002106:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800210a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210c:	2301      	movs	r3, #1
 800210e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002114:	2300      	movs	r3, #0
 8002116:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	4619      	mov	r1, r3
 800211e:	4813      	ldr	r0, [pc, #76]	; (800216c <MX_GPIO_Init+0x110>)
 8002120:	f001 f858 	bl	80031d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LSM_CS_Pin CS_RF_Pin */
  GPIO_InitStruct.Pin = LSM_CS_Pin|CS_RF_Pin;
 8002124:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8002128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800212a:	2311      	movs	r3, #17
 800212c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800212e:	2301      	movs	r3, #1
 8002130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	480c      	ldr	r0, [pc, #48]	; (8002170 <MX_GPIO_Init+0x114>)
 800213e:	f001 f849 	bl	80031d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_DQ_Pin */
  GPIO_InitStruct.Pin = DS18B20_DQ_Pin;
 8002142:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002148:	2311      	movs	r3, #17
 800214a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800214c:	2301      	movs	r3, #1
 800214e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002150:	2300      	movs	r3, #0
 8002152:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DS18B20_DQ_GPIO_Port, &GPIO_InitStruct);
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	4619      	mov	r1, r3
 800215a:	4806      	ldr	r0, [pc, #24]	; (8002174 <MX_GPIO_Init+0x118>)
 800215c:	f001 f83a 	bl	80031d4 <HAL_GPIO_Init>

}
 8002160:	bf00      	nop
 8002162:	3728      	adds	r7, #40	; 0x28
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40023800 	.word	0x40023800
 800216c:	40020800 	.word	0x40020800
 8002170:	40020400 	.word	0x40020400
 8002174:	40020000 	.word	0x40020000

08002178 <FloatToBin>:

/* USER CODE BEGIN 4 */

uint32_t FloatToBin(float A)
{
 8002178:	b480      	push	{r7}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	ed87 0a01 	vstr	s0, [r7, #4]

	float* pA = &A;
 8002182:	1d3b      	adds	r3, r7, #4
 8002184:	617b      	str	r3, [r7, #20]
	uint32_t* pB = (uint32_t*)pA;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	613b      	str	r3, [r7, #16]
	uint32_t B = *pB;
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	60fb      	str	r3, [r7, #12]
	return B;
 8002190:	68fb      	ldr	r3, [r7, #12]
}
 8002192:	4618      	mov	r0, r3
 8002194:	371c      	adds	r7, #28
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <ADC_ConvertVBat>:

float ADC_ConvertVBat(uint16_t VbatRaw)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	80fb      	strh	r3, [r7, #6]
	return 2 * (VbatRaw * 3.3f / 4096.0f);
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	ee07 3a90 	vmov	s15, r3
 80021b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80021d8 <ADC_ConvertVBat+0x38>
 80021b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021bc:	eddf 6a07 	vldr	s13, [pc, #28]	; 80021dc <ADC_ConvertVBat+0x3c>
 80021c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
}
 80021c8:	eeb0 0a67 	vmov.f32	s0, s15
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40533333 	.word	0x40533333
 80021dc:	45800000 	.word	0x45800000

080021e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80021e8:	f00e ffd8 	bl	801119c <MX_USB_DEVICE_Init>
	fresult = f_open(&fil, &fname[0], FA_OPEN_APPEND | FA_OPEN_ALWAYS | FA_READ | FA_WRITE);

	fresult = f_write(&fil, Data, 4, &bw);

	fresult = f_close(&fil);*/
	  HAL_GPIO_TogglePin(SD_CS_GPIO_Port, SD_CS_Pin);
 80021ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021f0:	4803      	ldr	r0, [pc, #12]	; (8002200 <StartDefaultTask+0x20>)
 80021f2:	f001 f9a4 	bl	800353e <HAL_GPIO_TogglePin>
	osDelay(1000);
 80021f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021fa:	f00b fdcd 	bl	800dd98 <osDelay>
	  HAL_GPIO_TogglePin(SD_CS_GPIO_Port, SD_CS_Pin);
 80021fe:	e7f5      	b.n	80021ec <StartDefaultTask+0xc>
 8002200:	40020800 	.word	0x40020800

08002204 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a04      	ldr	r2, [pc, #16]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d101      	bne.n	800221a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002216:	f000 fb09 	bl	800282c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40014400 	.word	0x40014400

08002228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800222c:	b672      	cpsid	i
}
 800222e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002230:	e7fe      	b.n	8002230 <Error_Handler+0x8>
	...

08002234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_MspInit+0x54>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	4a11      	ldr	r2, [pc, #68]	; (8002288 <HAL_MspInit+0x54>)
 8002244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002248:	6453      	str	r3, [r2, #68]	; 0x44
 800224a:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <HAL_MspInit+0x54>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_MspInit+0x54>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <HAL_MspInit+0x54>)
 8002260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
 8002266:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_MspInit+0x54>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	210f      	movs	r1, #15
 8002276:	f06f 0001 	mvn.w	r0, #1
 800227a:	f000 ff81 	bl	8003180 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800

0800228c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a17      	ldr	r2, [pc, #92]	; (8002308 <HAL_ADC_MspInit+0x7c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d127      	bne.n	80022fe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	4b16      	ldr	r3, [pc, #88]	; (800230c <HAL_ADC_MspInit+0x80>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	4a15      	ldr	r2, [pc, #84]	; (800230c <HAL_ADC_MspInit+0x80>)
 80022b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022bc:	6453      	str	r3, [r2, #68]	; 0x44
 80022be:	4b13      	ldr	r3, [pc, #76]	; (800230c <HAL_ADC_MspInit+0x80>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	4b0f      	ldr	r3, [pc, #60]	; (800230c <HAL_ADC_MspInit+0x80>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a0e      	ldr	r2, [pc, #56]	; (800230c <HAL_ADC_MspInit+0x80>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b0c      	ldr	r3, [pc, #48]	; (800230c <HAL_ADC_MspInit+0x80>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022e6:	2301      	movs	r3, #1
 80022e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022ea:	2303      	movs	r3, #3
 80022ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f2:	f107 0314 	add.w	r3, r7, #20
 80022f6:	4619      	mov	r1, r3
 80022f8:	4805      	ldr	r0, [pc, #20]	; (8002310 <HAL_ADC_MspInit+0x84>)
 80022fa:	f000 ff6b 	bl	80031d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022fe:	bf00      	nop
 8002300:	3728      	adds	r7, #40	; 0x28
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40012000 	.word	0x40012000
 800230c:	40023800 	.word	0x40023800
 8002310:	40020000 	.word	0x40020000

08002314 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08a      	sub	sp, #40	; 0x28
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a19      	ldr	r2, [pc, #100]	; (8002398 <HAL_I2C_MspInit+0x84>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d12c      	bne.n	8002390 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	4b18      	ldr	r3, [pc, #96]	; (800239c <HAL_I2C_MspInit+0x88>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a17      	ldr	r2, [pc, #92]	; (800239c <HAL_I2C_MspInit+0x88>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b15      	ldr	r3, [pc, #84]	; (800239c <HAL_I2C_MspInit+0x88>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002352:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002358:	2312      	movs	r3, #18
 800235a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800235c:	2301      	movs	r3, #1
 800235e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002360:	2303      	movs	r3, #3
 8002362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002364:	2304      	movs	r3, #4
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	4619      	mov	r1, r3
 800236e:	480c      	ldr	r0, [pc, #48]	; (80023a0 <HAL_I2C_MspInit+0x8c>)
 8002370:	f000 ff30 	bl	80031d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <HAL_I2C_MspInit+0x88>)
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	4a07      	ldr	r2, [pc, #28]	; (800239c <HAL_I2C_MspInit+0x88>)
 800237e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002382:	6413      	str	r3, [r2, #64]	; 0x40
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <HAL_I2C_MspInit+0x88>)
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002390:	bf00      	nop
 8002392:	3728      	adds	r7, #40	; 0x28
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40005400 	.word	0x40005400
 800239c:	40023800 	.word	0x40023800
 80023a0:	40020400 	.word	0x40020400

080023a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a19      	ldr	r2, [pc, #100]	; (8002428 <HAL_SPI_MspInit+0x84>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d12b      	bne.n	800241e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <HAL_SPI_MspInit+0x88>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	4a17      	ldr	r2, [pc, #92]	; (800242c <HAL_SPI_MspInit+0x88>)
 80023d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023d4:	6453      	str	r3, [r2, #68]	; 0x44
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <HAL_SPI_MspInit+0x88>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_SPI_MspInit+0x88>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a10      	ldr	r2, [pc, #64]	; (800242c <HAL_SPI_MspInit+0x88>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <HAL_SPI_MspInit+0x88>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80023fe:	23e0      	movs	r3, #224	; 0xe0
 8002400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240a:	2303      	movs	r3, #3
 800240c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800240e:	2305      	movs	r3, #5
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4619      	mov	r1, r3
 8002418:	4805      	ldr	r0, [pc, #20]	; (8002430 <HAL_SPI_MspInit+0x8c>)
 800241a:	f000 fedb 	bl	80031d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800241e:	bf00      	nop
 8002420:	3728      	adds	r7, #40	; 0x28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40013000 	.word	0x40013000
 800242c:	40023800 	.word	0x40023800
 8002430:	40020000 	.word	0x40020000

08002434 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002444:	d10e      	bne.n	8002464 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	4b13      	ldr	r3, [pc, #76]	; (8002498 <HAL_TIM_Base_MspInit+0x64>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	4a12      	ldr	r2, [pc, #72]	; (8002498 <HAL_TIM_Base_MspInit+0x64>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6413      	str	r3, [r2, #64]	; 0x40
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <HAL_TIM_Base_MspInit+0x64>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002462:	e012      	b.n	800248a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM11)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0c      	ldr	r2, [pc, #48]	; (800249c <HAL_TIM_Base_MspInit+0x68>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d10d      	bne.n	800248a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_TIM_Base_MspInit+0x64>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	4a08      	ldr	r2, [pc, #32]	; (8002498 <HAL_TIM_Base_MspInit+0x64>)
 8002478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800247c:	6453      	str	r3, [r2, #68]	; 0x44
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_TIM_Base_MspInit+0x64>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	68bb      	ldr	r3, [r7, #8]
}
 800248a:	bf00      	nop
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800
 800249c:	40014800 	.word	0x40014800

080024a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08c      	sub	sp, #48	; 0x30
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a8:	f107 031c 	add.w	r3, r7, #28
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a32      	ldr	r2, [pc, #200]	; (8002588 <HAL_UART_MspInit+0xe8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d12d      	bne.n	800251e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	61bb      	str	r3, [r7, #24]
 80024c6:	4b31      	ldr	r3, [pc, #196]	; (800258c <HAL_UART_MspInit+0xec>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	4a30      	ldr	r2, [pc, #192]	; (800258c <HAL_UART_MspInit+0xec>)
 80024cc:	f043 0310 	orr.w	r3, r3, #16
 80024d0:	6453      	str	r3, [r2, #68]	; 0x44
 80024d2:	4b2e      	ldr	r3, [pc, #184]	; (800258c <HAL_UART_MspInit+0xec>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	f003 0310 	and.w	r3, r3, #16
 80024da:	61bb      	str	r3, [r7, #24]
 80024dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	4b2a      	ldr	r3, [pc, #168]	; (800258c <HAL_UART_MspInit+0xec>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a29      	ldr	r2, [pc, #164]	; (800258c <HAL_UART_MspInit+0xec>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b27      	ldr	r3, [pc, #156]	; (800258c <HAL_UART_MspInit+0xec>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002500:	2302      	movs	r3, #2
 8002502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002508:	2303      	movs	r3, #3
 800250a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800250c:	2307      	movs	r3, #7
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002510:	f107 031c 	add.w	r3, r7, #28
 8002514:	4619      	mov	r1, r3
 8002516:	481e      	ldr	r0, [pc, #120]	; (8002590 <HAL_UART_MspInit+0xf0>)
 8002518:	f000 fe5c 	bl	80031d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800251c:	e030      	b.n	8002580 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <HAL_UART_MspInit+0xf4>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d12b      	bne.n	8002580 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002528:	2300      	movs	r3, #0
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	4b17      	ldr	r3, [pc, #92]	; (800258c <HAL_UART_MspInit+0xec>)
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	4a16      	ldr	r2, [pc, #88]	; (800258c <HAL_UART_MspInit+0xec>)
 8002532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002536:	6413      	str	r3, [r2, #64]	; 0x40
 8002538:	4b14      	ldr	r3, [pc, #80]	; (800258c <HAL_UART_MspInit+0xec>)
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	4b10      	ldr	r3, [pc, #64]	; (800258c <HAL_UART_MspInit+0xec>)
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	4a0f      	ldr	r2, [pc, #60]	; (800258c <HAL_UART_MspInit+0xec>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6313      	str	r3, [r2, #48]	; 0x30
 8002554:	4b0d      	ldr	r3, [pc, #52]	; (800258c <HAL_UART_MspInit+0xec>)
 8002556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002560:	230c      	movs	r3, #12
 8002562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002564:	2302      	movs	r3, #2
 8002566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800256c:	2303      	movs	r3, #3
 800256e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002570:	2307      	movs	r3, #7
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002574:	f107 031c 	add.w	r3, r7, #28
 8002578:	4619      	mov	r1, r3
 800257a:	4805      	ldr	r0, [pc, #20]	; (8002590 <HAL_UART_MspInit+0xf0>)
 800257c:	f000 fe2a 	bl	80031d4 <HAL_GPIO_Init>
}
 8002580:	bf00      	nop
 8002582:	3730      	adds	r7, #48	; 0x30
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40011000 	.word	0x40011000
 800258c:	40023800 	.word	0x40023800
 8002590:	40020000 	.word	0x40020000
 8002594:	40004400 	.word	0x40004400

08002598 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08c      	sub	sp, #48	; 0x30
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80025a8:	2200      	movs	r2, #0
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	2019      	movs	r0, #25
 80025ae:	f000 fde7 	bl	8003180 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80025b2:	2019      	movs	r0, #25
 80025b4:	f000 fe00 	bl	80031b8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	4b1e      	ldr	r3, [pc, #120]	; (8002638 <HAL_InitTick+0xa0>)
 80025be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c0:	4a1d      	ldr	r2, [pc, #116]	; (8002638 <HAL_InitTick+0xa0>)
 80025c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c6:	6453      	str	r3, [r2, #68]	; 0x44
 80025c8:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <HAL_InitTick+0xa0>)
 80025ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025d4:	f107 0210 	add.w	r2, r7, #16
 80025d8:	f107 0314 	add.w	r3, r7, #20
 80025dc:	4611      	mov	r1, r2
 80025de:	4618      	mov	r0, r3
 80025e0:	f003 fe32 	bl	8006248 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80025e4:	f003 fe1c 	bl	8006220 <HAL_RCC_GetPCLK2Freq>
 80025e8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ec:	4a13      	ldr	r2, [pc, #76]	; (800263c <HAL_InitTick+0xa4>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	0c9b      	lsrs	r3, r3, #18
 80025f4:	3b01      	subs	r3, #1
 80025f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80025f8:	4b11      	ldr	r3, [pc, #68]	; (8002640 <HAL_InitTick+0xa8>)
 80025fa:	4a12      	ldr	r2, [pc, #72]	; (8002644 <HAL_InitTick+0xac>)
 80025fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <HAL_InitTick+0xa8>)
 8002600:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002604:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8002606:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <HAL_InitTick+0xa8>)
 8002608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260a:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <HAL_InitTick+0xa8>)
 800260e:	2200      	movs	r2, #0
 8002610:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <HAL_InitTick+0xa8>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8002618:	4809      	ldr	r0, [pc, #36]	; (8002640 <HAL_InitTick+0xa8>)
 800261a:	f004 fa79 	bl	8006b10 <HAL_TIM_Base_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d104      	bne.n	800262e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8002624:	4806      	ldr	r0, [pc, #24]	; (8002640 <HAL_InitTick+0xa8>)
 8002626:	f004 fac3 	bl	8006bb0 <HAL_TIM_Base_Start_IT>
 800262a:	4603      	mov	r3, r0
 800262c:	e000      	b.n	8002630 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
}
 8002630:	4618      	mov	r0, r3
 8002632:	3730      	adds	r7, #48	; 0x30
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40023800 	.word	0x40023800
 800263c:	431bde83 	.word	0x431bde83
 8002640:	20002418 	.word	0x20002418
 8002644:	40014400 	.word	0x40014400

08002648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800264c:	e7fe      	b.n	800264c <NMI_Handler+0x4>

0800264e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002652:	e7fe      	b.n	8002652 <HardFault_Handler+0x4>

08002654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <MemManage_Handler+0x4>

0800265a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800265e:	e7fe      	b.n	800265e <BusFault_Handler+0x4>

08002660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002664:	e7fe      	b.n	8002664 <UsageFault_Handler+0x4>

08002666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800267a:	f004 fafb 	bl	8006c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20002418 	.word	0x20002418

08002688 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800268c:	4802      	ldr	r0, [pc, #8]	; (8002698 <OTG_FS_IRQHandler+0x10>)
 800268e:	f002 f856 	bl	800473e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20007b68 	.word	0x20007b68

0800269c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026a4:	4a14      	ldr	r2, [pc, #80]	; (80026f8 <_sbrk+0x5c>)
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <_sbrk+0x60>)
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b0:	4b13      	ldr	r3, [pc, #76]	; (8002700 <_sbrk+0x64>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d102      	bne.n	80026be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <_sbrk+0x64>)
 80026ba:	4a12      	ldr	r2, [pc, #72]	; (8002704 <_sbrk+0x68>)
 80026bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <_sbrk+0x64>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4413      	add	r3, r2
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d207      	bcs.n	80026dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026cc:	f00f fd8e 	bl	80121ec <__errno>
 80026d0:	4603      	mov	r3, r0
 80026d2:	220c      	movs	r2, #12
 80026d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026d6:	f04f 33ff 	mov.w	r3, #4294967295
 80026da:	e009      	b.n	80026f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026dc:	4b08      	ldr	r3, [pc, #32]	; (8002700 <_sbrk+0x64>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026e2:	4b07      	ldr	r3, [pc, #28]	; (8002700 <_sbrk+0x64>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	4a05      	ldr	r2, [pc, #20]	; (8002700 <_sbrk+0x64>)
 80026ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ee:	68fb      	ldr	r3, [r7, #12]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20010000 	.word	0x20010000
 80026fc:	00000400 	.word	0x00000400
 8002700:	20002464 	.word	0x20002464
 8002704:	200082a8 	.word	0x200082a8

08002708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <SystemInit+0x20>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	4a05      	ldr	r2, [pc, #20]	; (8002728 <SystemInit+0x20>)
 8002714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800272c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002764 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002730:	480d      	ldr	r0, [pc, #52]	; (8002768 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002732:	490e      	ldr	r1, [pc, #56]	; (800276c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002734:	4a0e      	ldr	r2, [pc, #56]	; (8002770 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002738:	e002      	b.n	8002740 <LoopCopyDataInit>

0800273a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800273a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800273c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800273e:	3304      	adds	r3, #4

08002740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002744:	d3f9      	bcc.n	800273a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002746:	4a0b      	ldr	r2, [pc, #44]	; (8002774 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002748:	4c0b      	ldr	r4, [pc, #44]	; (8002778 <LoopFillZerobss+0x26>)
  movs r3, #0
 800274a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800274c:	e001      	b.n	8002752 <LoopFillZerobss>

0800274e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800274e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002750:	3204      	adds	r2, #4

08002752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002754:	d3fb      	bcc.n	800274e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002756:	f7ff ffd7 	bl	8002708 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800275a:	f00f fd4d 	bl	80121f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800275e:	f7ff fa15 	bl	8001b8c <main>
  bx  lr    
 8002762:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002764:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800276c:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8002770:	08012ff0 	.word	0x08012ff0
  ldr r2, =_sbss
 8002774:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8002778:	200082a4 	.word	0x200082a4

0800277c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800277c:	e7fe      	b.n	800277c <ADC_IRQHandler>
	...

08002780 <MS5607_GetPres>:



}
void MS5607_GetPres(uint32_t* pres)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af02      	add	r7, sp, #8
 8002786:	6078      	str	r0, [r7, #4]

	uint8_t txData =  0x00;
 8002788:	2300      	movs	r3, #0
 800278a:	73fb      	strb	r3, [r7, #15]
	uint8_t rxData[3];
	HAL_I2C_Master_Transmit(&hi2c1, MS5607_DEV_ADDR_7B, &txData, 1, 100);
 800278c:	f107 020f 	add.w	r2, r7, #15
 8002790:	2364      	movs	r3, #100	; 0x64
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2301      	movs	r3, #1
 8002796:	21ee      	movs	r1, #238	; 0xee
 8002798:	4812      	ldr	r0, [pc, #72]	; (80027e4 <MS5607_GetPres+0x64>)
 800279a:	f001 f82f 	bl	80037fc <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, MS5607_DEV_ADDR_7B, rxData, 3, 100);
 800279e:	f107 020c 	add.w	r2, r7, #12
 80027a2:	2364      	movs	r3, #100	; 0x64
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	2303      	movs	r3, #3
 80027a8:	21ee      	movs	r1, #238	; 0xee
 80027aa:	480e      	ldr	r0, [pc, #56]	; (80027e4 <MS5607_GetPres+0x64>)
 80027ac:	f001 f924 	bl	80039f8 <HAL_I2C_Master_Receive>
	*pres = rxData[0]<<16 | rxData[1]<<8 |  rxData[2];
 80027b0:	7b3b      	ldrb	r3, [r7, #12]
 80027b2:	041a      	lsls	r2, r3, #16
 80027b4:	7b7b      	ldrb	r3, [r7, #13]
 80027b6:	021b      	lsls	r3, r3, #8
 80027b8:	4313      	orrs	r3, r2
 80027ba:	7bba      	ldrb	r2, [r7, #14]
 80027bc:	4313      	orrs	r3, r2
 80027be:	461a      	mov	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	601a      	str	r2, [r3, #0]

	txData =  0x48;
 80027c4:	2348      	movs	r3, #72	; 0x48
 80027c6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, MS5607_DEV_ADDR_7B, &txData, 1, 100); //Start pres conv
 80027c8:	f107 020f 	add.w	r2, r7, #15
 80027cc:	2364      	movs	r3, #100	; 0x64
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	2301      	movs	r3, #1
 80027d2:	21ee      	movs	r1, #238	; 0xee
 80027d4:	4803      	ldr	r0, [pc, #12]	; (80027e4 <MS5607_GetPres+0x64>)
 80027d6:	f001 f811 	bl	80037fc <HAL_I2C_Master_Transmit>

}
 80027da:	bf00      	nop
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	200001e4 	.word	0x200001e4

080027e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027ec:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <HAL_Init+0x40>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a0d      	ldr	r2, [pc, #52]	; (8002828 <HAL_Init+0x40>)
 80027f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_Init+0x40>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <HAL_Init+0x40>)
 80027fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002802:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <HAL_Init+0x40>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a07      	ldr	r2, [pc, #28]	; (8002828 <HAL_Init+0x40>)
 800280a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002810:	2003      	movs	r0, #3
 8002812:	f000 fcaa 	bl	800316a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002816:	200f      	movs	r0, #15
 8002818:	f7ff febe 	bl	8002598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800281c:	f7ff fd0a 	bl	8002234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40023c00 	.word	0x40023c00

0800282c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_IncTick+0x20>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_IncTick+0x24>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4413      	add	r3, r2
 800283c:	4a04      	ldr	r2, [pc, #16]	; (8002850 <HAL_IncTick+0x24>)
 800283e:	6013      	str	r3, [r2, #0]
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	2000000c 	.word	0x2000000c
 8002850:	20002468 	.word	0x20002468

08002854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return uwTick;
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <HAL_GetTick+0x14>)
 800285a:	681b      	ldr	r3, [r3, #0]
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	20002468 	.word	0x20002468

0800286c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002874:	f7ff ffee 	bl	8002854 <HAL_GetTick>
 8002878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002884:	d005      	beq.n	8002892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002886:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <HAL_Delay+0x44>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4413      	add	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002892:	bf00      	nop
 8002894:	f7ff ffde 	bl	8002854 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d8f7      	bhi.n	8002894 <HAL_Delay+0x28>
  {
  }
}
 80028a4:	bf00      	nop
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	2000000c 	.word	0x2000000c

080028b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e033      	b.n	8002932 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d109      	bne.n	80028e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff fcda 	bl	800228c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f003 0310 	and.w	r3, r3, #16
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d118      	bne.n	8002924 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028fa:	f023 0302 	bic.w	r3, r3, #2
 80028fe:	f043 0202 	orr.w	r2, r3, #2
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fa86 	bl	8002e18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f023 0303 	bic.w	r3, r3, #3
 800291a:	f043 0201 	orr.w	r2, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	641a      	str	r2, [r3, #64]	; 0x40
 8002922:	e001      	b.n	8002928 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002930:	7bfb      	ldrb	r3, [r7, #15]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_ADC_Start+0x1a>
 8002952:	2302      	movs	r3, #2
 8002954:	e097      	b.n	8002a86 <HAL_ADC_Start+0x14a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b01      	cmp	r3, #1
 800296a:	d018      	beq.n	800299e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800297c:	4b45      	ldr	r3, [pc, #276]	; (8002a94 <HAL_ADC_Start+0x158>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a45      	ldr	r2, [pc, #276]	; (8002a98 <HAL_ADC_Start+0x15c>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	0c9a      	lsrs	r2, r3, #18
 8002988:	4613      	mov	r3, r2
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	4413      	add	r3, r2
 800298e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002990:	e002      	b.n	8002998 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	3b01      	subs	r3, #1
 8002996:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f9      	bne.n	8002992 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d15f      	bne.n	8002a6c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80029b4:	f023 0301 	bic.w	r3, r3, #1
 80029b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d007      	beq.n	80029de <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ea:	d106      	bne.n	80029fa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f0:	f023 0206 	bic.w	r2, r3, #6
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	645a      	str	r2, [r3, #68]	; 0x44
 80029f8:	e002      	b.n	8002a00 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a08:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <HAL_ADC_Start+0x160>)
 8002a0a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a14:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f003 031f 	and.w	r3, r3, #31
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10f      	bne.n	8002a42 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d129      	bne.n	8002a84 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	e020      	b.n	8002a84 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a16      	ldr	r2, [pc, #88]	; (8002aa0 <HAL_ADC_Start+0x164>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d11b      	bne.n	8002a84 <HAL_ADC_Start+0x148>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d114      	bne.n	8002a84 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a68:	609a      	str	r2, [r3, #8]
 8002a6a:	e00b      	b.n	8002a84 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	f043 0210 	orr.w	r2, r3, #16
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7c:	f043 0201 	orr.w	r2, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20000004 	.word	0x20000004
 8002a98:	431bde83 	.word	0x431bde83
 8002a9c:	40012300 	.word	0x40012300
 8002aa0:	40012000 	.word	0x40012000

08002aa4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ac0:	d113      	bne.n	8002aea <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad0:	d10b      	bne.n	8002aea <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f043 0220 	orr.w	r2, r3, #32
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e063      	b.n	8002bb2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002aea:	f7ff feb3 	bl	8002854 <HAL_GetTick>
 8002aee:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002af0:	e021      	b.n	8002b36 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af8:	d01d      	beq.n	8002b36 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_ADC_PollForConversion+0x6c>
 8002b00:	f7ff fea8 	bl	8002854 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d212      	bcs.n	8002b36 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d00b      	beq.n	8002b36 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f043 0204 	orr.w	r2, r3, #4
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e03d      	b.n	8002bb2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d1d6      	bne.n	8002af2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0212 	mvn.w	r2, #18
 8002b4c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d123      	bne.n	8002bb0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d11f      	bne.n	8002bb0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d006      	beq.n	8002b8c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d111      	bne.n	8002bb0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d105      	bne.n	8002bb0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	f043 0201 	orr.w	r2, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x1c>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e105      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x228>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b09      	cmp	r3, #9
 8002bfe:	d925      	bls.n	8002c4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68d9      	ldr	r1, [r3, #12]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4613      	mov	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	4413      	add	r3, r2
 8002c14:	3b1e      	subs	r3, #30
 8002c16:	2207      	movs	r2, #7
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43da      	mvns	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	400a      	ands	r2, r1
 8002c24:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68d9      	ldr	r1, [r3, #12]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	4618      	mov	r0, r3
 8002c38:	4603      	mov	r3, r0
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4403      	add	r3, r0
 8002c3e:	3b1e      	subs	r3, #30
 8002c40:	409a      	lsls	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	e022      	b.n	8002c92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6919      	ldr	r1, [r3, #16]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	4413      	add	r3, r2
 8002c60:	2207      	movs	r2, #7
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43da      	mvns	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	400a      	ands	r2, r1
 8002c6e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6919      	ldr	r1, [r3, #16]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	4618      	mov	r0, r3
 8002c82:	4603      	mov	r3, r0
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4403      	add	r3, r0
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b06      	cmp	r3, #6
 8002c98:	d824      	bhi.n	8002ce4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	3b05      	subs	r3, #5
 8002cac:	221f      	movs	r2, #31
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	400a      	ands	r2, r1
 8002cba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	4618      	mov	r0, r3
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3b05      	subs	r3, #5
 8002cd6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ce2:	e04c      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b0c      	cmp	r3, #12
 8002cea:	d824      	bhi.n	8002d36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3b23      	subs	r3, #35	; 0x23
 8002cfe:	221f      	movs	r2, #31
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43da      	mvns	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	400a      	ands	r2, r1
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	3b23      	subs	r3, #35	; 0x23
 8002d28:	fa00 f203 	lsl.w	r2, r0, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
 8002d34:	e023      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	3b41      	subs	r3, #65	; 0x41
 8002d48:	221f      	movs	r2, #31
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43da      	mvns	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	400a      	ands	r2, r1
 8002d56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	4618      	mov	r0, r3
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	3b41      	subs	r3, #65	; 0x41
 8002d72:	fa00 f203 	lsl.w	r2, r0, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d7e:	4b22      	ldr	r3, [pc, #136]	; (8002e08 <HAL_ADC_ConfigChannel+0x234>)
 8002d80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a21      	ldr	r2, [pc, #132]	; (8002e0c <HAL_ADC_ConfigChannel+0x238>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d109      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x1cc>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b12      	cmp	r3, #18
 8002d92:	d105      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a19      	ldr	r2, [pc, #100]	; (8002e0c <HAL_ADC_ConfigChannel+0x238>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d123      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x21e>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b10      	cmp	r3, #16
 8002db0:	d003      	beq.n	8002dba <HAL_ADC_ConfigChannel+0x1e6>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b11      	cmp	r3, #17
 8002db8:	d11b      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b10      	cmp	r3, #16
 8002dcc:	d111      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dce:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <HAL_ADC_ConfigChannel+0x23c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a10      	ldr	r2, [pc, #64]	; (8002e14 <HAL_ADC_ConfigChannel+0x240>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	0c9a      	lsrs	r2, r3, #18
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002de4:	e002      	b.n	8002dec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	3b01      	subs	r3, #1
 8002dea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f9      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	40012300 	.word	0x40012300
 8002e0c:	40012000 	.word	0x40012000
 8002e10:	20000004 	.word	0x20000004
 8002e14:	431bde83 	.word	0x431bde83

08002e18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e20:	4b79      	ldr	r3, [pc, #484]	; (8003008 <ADC_Init+0x1f0>)
 8002e22:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6859      	ldr	r1, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	021a      	lsls	r2, r3, #8
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6859      	ldr	r1, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6899      	ldr	r1, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	4a58      	ldr	r2, [pc, #352]	; (800300c <ADC_Init+0x1f4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d022      	beq.n	8002ef6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ebe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6899      	ldr	r1, [r3, #8]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ee0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6899      	ldr	r1, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	e00f      	b.n	8002f16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0202 	bic.w	r2, r2, #2
 8002f24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6899      	ldr	r1, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	7e1b      	ldrb	r3, [r3, #24]
 8002f30:	005a      	lsls	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d01b      	beq.n	8002f7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6859      	ldr	r1, [r3, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	035a      	lsls	r2, r3, #13
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	e007      	b.n	8002f8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	051a      	lsls	r2, r3, #20
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6899      	ldr	r1, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fce:	025a      	lsls	r2, r3, #9
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6899      	ldr	r1, [r3, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	029a      	lsls	r2, r3, #10
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	609a      	str	r2, [r3, #8]
}
 8002ffc:	bf00      	nop
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	40012300 	.word	0x40012300
 800300c:	0f000001 	.word	0x0f000001

08003010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <__NVIC_SetPriorityGrouping+0x44>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800302c:	4013      	ands	r3, r2
 800302e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800303c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003042:	4a04      	ldr	r2, [pc, #16]	; (8003054 <__NVIC_SetPriorityGrouping+0x44>)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	60d3      	str	r3, [r2, #12]
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800305c:	4b04      	ldr	r3, [pc, #16]	; (8003070 <__NVIC_GetPriorityGrouping+0x18>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	0a1b      	lsrs	r3, r3, #8
 8003062:	f003 0307 	and.w	r3, r3, #7
}
 8003066:	4618      	mov	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800307e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003082:	2b00      	cmp	r3, #0
 8003084:	db0b      	blt.n	800309e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	f003 021f 	and.w	r2, r3, #31
 800308c:	4907      	ldr	r1, [pc, #28]	; (80030ac <__NVIC_EnableIRQ+0x38>)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	2001      	movs	r0, #1
 8003096:	fa00 f202 	lsl.w	r2, r0, r2
 800309a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	e000e100 	.word	0xe000e100

080030b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	6039      	str	r1, [r7, #0]
 80030ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	db0a      	blt.n	80030da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	490c      	ldr	r1, [pc, #48]	; (80030fc <__NVIC_SetPriority+0x4c>)
 80030ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ce:	0112      	lsls	r2, r2, #4
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	440b      	add	r3, r1
 80030d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030d8:	e00a      	b.n	80030f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	4908      	ldr	r1, [pc, #32]	; (8003100 <__NVIC_SetPriority+0x50>)
 80030e0:	79fb      	ldrb	r3, [r7, #7]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	3b04      	subs	r3, #4
 80030e8:	0112      	lsls	r2, r2, #4
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	440b      	add	r3, r1
 80030ee:	761a      	strb	r2, [r3, #24]
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	e000e100 	.word	0xe000e100
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003104:	b480      	push	{r7}
 8003106:	b089      	sub	sp, #36	; 0x24
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f1c3 0307 	rsb	r3, r3, #7
 800311e:	2b04      	cmp	r3, #4
 8003120:	bf28      	it	cs
 8003122:	2304      	movcs	r3, #4
 8003124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	3304      	adds	r3, #4
 800312a:	2b06      	cmp	r3, #6
 800312c:	d902      	bls.n	8003134 <NVIC_EncodePriority+0x30>
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3b03      	subs	r3, #3
 8003132:	e000      	b.n	8003136 <NVIC_EncodePriority+0x32>
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003138:	f04f 32ff 	mov.w	r2, #4294967295
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43da      	mvns	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	401a      	ands	r2, r3
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800314c:	f04f 31ff 	mov.w	r1, #4294967295
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	fa01 f303 	lsl.w	r3, r1, r3
 8003156:	43d9      	mvns	r1, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800315c:	4313      	orrs	r3, r2
         );
}
 800315e:	4618      	mov	r0, r3
 8003160:	3724      	adds	r7, #36	; 0x24
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff ff4c 	bl	8003010 <__NVIC_SetPriorityGrouping>
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003192:	f7ff ff61 	bl	8003058 <__NVIC_GetPriorityGrouping>
 8003196:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	68b9      	ldr	r1, [r7, #8]
 800319c:	6978      	ldr	r0, [r7, #20]
 800319e:	f7ff ffb1 	bl	8003104 <NVIC_EncodePriority>
 80031a2:	4602      	mov	r2, r0
 80031a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff ff80 	bl	80030b0 <__NVIC_SetPriority>
}
 80031b0:	bf00      	nop
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff ff54 	bl	8003074 <__NVIC_EnableIRQ>
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b089      	sub	sp, #36	; 0x24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	e159      	b.n	80034a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031f0:	2201      	movs	r2, #1
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4013      	ands	r3, r2
 8003202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	429a      	cmp	r2, r3
 800320a:	f040 8148 	bne.w	800349e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b01      	cmp	r3, #1
 8003218:	d005      	beq.n	8003226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003222:	2b02      	cmp	r3, #2
 8003224:	d130      	bne.n	8003288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	2203      	movs	r2, #3
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4013      	ands	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800325c:	2201      	movs	r2, #1
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	091b      	lsrs	r3, r3, #4
 8003272:	f003 0201 	and.w	r2, r3, #1
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	2b03      	cmp	r3, #3
 8003292:	d017      	beq.n	80032c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	2203      	movs	r2, #3
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d123      	bne.n	8003318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	08da      	lsrs	r2, r3, #3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3208      	adds	r2, #8
 80032d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	220f      	movs	r2, #15
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	08da      	lsrs	r2, r3, #3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3208      	adds	r2, #8
 8003312:	69b9      	ldr	r1, [r7, #24]
 8003314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	2203      	movs	r2, #3
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 0203 	and.w	r2, r3, #3
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80a2 	beq.w	800349e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	4b57      	ldr	r3, [pc, #348]	; (80034bc <HAL_GPIO_Init+0x2e8>)
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	4a56      	ldr	r2, [pc, #344]	; (80034bc <HAL_GPIO_Init+0x2e8>)
 8003364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003368:	6453      	str	r3, [r2, #68]	; 0x44
 800336a:	4b54      	ldr	r3, [pc, #336]	; (80034bc <HAL_GPIO_Init+0x2e8>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003376:	4a52      	ldr	r2, [pc, #328]	; (80034c0 <HAL_GPIO_Init+0x2ec>)
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	3302      	adds	r3, #2
 800337e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	220f      	movs	r2, #15
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4013      	ands	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a49      	ldr	r2, [pc, #292]	; (80034c4 <HAL_GPIO_Init+0x2f0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d019      	beq.n	80033d6 <HAL_GPIO_Init+0x202>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a48      	ldr	r2, [pc, #288]	; (80034c8 <HAL_GPIO_Init+0x2f4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <HAL_GPIO_Init+0x1fe>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a47      	ldr	r2, [pc, #284]	; (80034cc <HAL_GPIO_Init+0x2f8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00d      	beq.n	80033ce <HAL_GPIO_Init+0x1fa>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a46      	ldr	r2, [pc, #280]	; (80034d0 <HAL_GPIO_Init+0x2fc>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d007      	beq.n	80033ca <HAL_GPIO_Init+0x1f6>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a45      	ldr	r2, [pc, #276]	; (80034d4 <HAL_GPIO_Init+0x300>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d101      	bne.n	80033c6 <HAL_GPIO_Init+0x1f2>
 80033c2:	2304      	movs	r3, #4
 80033c4:	e008      	b.n	80033d8 <HAL_GPIO_Init+0x204>
 80033c6:	2307      	movs	r3, #7
 80033c8:	e006      	b.n	80033d8 <HAL_GPIO_Init+0x204>
 80033ca:	2303      	movs	r3, #3
 80033cc:	e004      	b.n	80033d8 <HAL_GPIO_Init+0x204>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e002      	b.n	80033d8 <HAL_GPIO_Init+0x204>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_GPIO_Init+0x204>
 80033d6:	2300      	movs	r3, #0
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	f002 0203 	and.w	r2, r2, #3
 80033de:	0092      	lsls	r2, r2, #2
 80033e0:	4093      	lsls	r3, r2
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033e8:	4935      	ldr	r1, [pc, #212]	; (80034c0 <HAL_GPIO_Init+0x2ec>)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	089b      	lsrs	r3, r3, #2
 80033ee:	3302      	adds	r3, #2
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033f6:	4b38      	ldr	r3, [pc, #224]	; (80034d8 <HAL_GPIO_Init+0x304>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	43db      	mvns	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800341a:	4a2f      	ldr	r2, [pc, #188]	; (80034d8 <HAL_GPIO_Init+0x304>)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003420:	4b2d      	ldr	r3, [pc, #180]	; (80034d8 <HAL_GPIO_Init+0x304>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003444:	4a24      	ldr	r2, [pc, #144]	; (80034d8 <HAL_GPIO_Init+0x304>)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800344a:	4b23      	ldr	r3, [pc, #140]	; (80034d8 <HAL_GPIO_Init+0x304>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	43db      	mvns	r3, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800346e:	4a1a      	ldr	r2, [pc, #104]	; (80034d8 <HAL_GPIO_Init+0x304>)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003474:	4b18      	ldr	r3, [pc, #96]	; (80034d8 <HAL_GPIO_Init+0x304>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003498:	4a0f      	ldr	r2, [pc, #60]	; (80034d8 <HAL_GPIO_Init+0x304>)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3301      	adds	r3, #1
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b0f      	cmp	r3, #15
 80034a8:	f67f aea2 	bls.w	80031f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	3724      	adds	r7, #36	; 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40023800 	.word	0x40023800
 80034c0:	40013800 	.word	0x40013800
 80034c4:	40020000 	.word	0x40020000
 80034c8:	40020400 	.word	0x40020400
 80034cc:	40020800 	.word	0x40020800
 80034d0:	40020c00 	.word	0x40020c00
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40013c00 	.word	0x40013c00

080034dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	887b      	ldrh	r3, [r7, #2]
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
 80034f8:	e001      	b.n	80034fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034fa:	2300      	movs	r3, #0
 80034fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	807b      	strh	r3, [r7, #2]
 8003518:	4613      	mov	r3, r2
 800351a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800351c:	787b      	ldrb	r3, [r7, #1]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003522:	887a      	ldrh	r2, [r7, #2]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003528:	e003      	b.n	8003532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800352a:	887b      	ldrh	r3, [r7, #2]
 800352c:	041a      	lsls	r2, r3, #16
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	619a      	str	r2, [r3, #24]
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800353e:	b480      	push	{r7}
 8003540:	b085      	sub	sp, #20
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	460b      	mov	r3, r1
 8003548:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003550:	887a      	ldrh	r2, [r7, #2]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4013      	ands	r3, r2
 8003556:	041a      	lsls	r2, r3, #16
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	43d9      	mvns	r1, r3
 800355c:	887b      	ldrh	r3, [r7, #2]
 800355e:	400b      	ands	r3, r1
 8003560:	431a      	orrs	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	619a      	str	r2, [r3, #24]
}
 8003566:	bf00      	nop
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e12b      	b.n	80037de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fe feba 	bl	8002314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2224      	movs	r2, #36	; 0x24
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0201 	bic.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035d8:	f002 fe0e 	bl	80061f8 <HAL_RCC_GetPCLK1Freq>
 80035dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	4a81      	ldr	r2, [pc, #516]	; (80037e8 <HAL_I2C_Init+0x274>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d807      	bhi.n	80035f8 <HAL_I2C_Init+0x84>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4a80      	ldr	r2, [pc, #512]	; (80037ec <HAL_I2C_Init+0x278>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	bf94      	ite	ls
 80035f0:	2301      	movls	r3, #1
 80035f2:	2300      	movhi	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	e006      	b.n	8003606 <HAL_I2C_Init+0x92>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4a7d      	ldr	r2, [pc, #500]	; (80037f0 <HAL_I2C_Init+0x27c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	bf94      	ite	ls
 8003600:	2301      	movls	r3, #1
 8003602:	2300      	movhi	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e0e7      	b.n	80037de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4a78      	ldr	r2, [pc, #480]	; (80037f4 <HAL_I2C_Init+0x280>)
 8003612:	fba2 2303 	umull	r2, r3, r2, r3
 8003616:	0c9b      	lsrs	r3, r3, #18
 8003618:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	4a6a      	ldr	r2, [pc, #424]	; (80037e8 <HAL_I2C_Init+0x274>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d802      	bhi.n	8003648 <HAL_I2C_Init+0xd4>
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	3301      	adds	r3, #1
 8003646:	e009      	b.n	800365c <HAL_I2C_Init+0xe8>
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800364e:	fb02 f303 	mul.w	r3, r2, r3
 8003652:	4a69      	ldr	r2, [pc, #420]	; (80037f8 <HAL_I2C_Init+0x284>)
 8003654:	fba2 2303 	umull	r2, r3, r2, r3
 8003658:	099b      	lsrs	r3, r3, #6
 800365a:	3301      	adds	r3, #1
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	6812      	ldr	r2, [r2, #0]
 8003660:	430b      	orrs	r3, r1
 8003662:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800366e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	495c      	ldr	r1, [pc, #368]	; (80037e8 <HAL_I2C_Init+0x274>)
 8003678:	428b      	cmp	r3, r1
 800367a:	d819      	bhi.n	80036b0 <HAL_I2C_Init+0x13c>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	1e59      	subs	r1, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	fbb1 f3f3 	udiv	r3, r1, r3
 800368a:	1c59      	adds	r1, r3, #1
 800368c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003690:	400b      	ands	r3, r1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <HAL_I2C_Init+0x138>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1e59      	subs	r1, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80036a4:	3301      	adds	r3, #1
 80036a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036aa:	e051      	b.n	8003750 <HAL_I2C_Init+0x1dc>
 80036ac:	2304      	movs	r3, #4
 80036ae:	e04f      	b.n	8003750 <HAL_I2C_Init+0x1dc>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d111      	bne.n	80036dc <HAL_I2C_Init+0x168>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	1e58      	subs	r0, r3, #1
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6859      	ldr	r1, [r3, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	440b      	add	r3, r1
 80036c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ca:	3301      	adds	r3, #1
 80036cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	e012      	b.n	8003702 <HAL_I2C_Init+0x18e>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	1e58      	subs	r0, r3, #1
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6859      	ldr	r1, [r3, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	0099      	lsls	r1, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f2:	3301      	adds	r3, #1
 80036f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	bf0c      	ite	eq
 80036fc:	2301      	moveq	r3, #1
 80036fe:	2300      	movne	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_I2C_Init+0x196>
 8003706:	2301      	movs	r3, #1
 8003708:	e022      	b.n	8003750 <HAL_I2C_Init+0x1dc>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10e      	bne.n	8003730 <HAL_I2C_Init+0x1bc>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1e58      	subs	r0, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6859      	ldr	r1, [r3, #4]
 800371a:	460b      	mov	r3, r1
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	440b      	add	r3, r1
 8003720:	fbb0 f3f3 	udiv	r3, r0, r3
 8003724:	3301      	adds	r3, #1
 8003726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800372a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800372e:	e00f      	b.n	8003750 <HAL_I2C_Init+0x1dc>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	1e58      	subs	r0, r3, #1
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6859      	ldr	r1, [r3, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	0099      	lsls	r1, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	fbb0 f3f3 	udiv	r3, r0, r3
 8003746:	3301      	adds	r3, #1
 8003748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800374c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	6809      	ldr	r1, [r1, #0]
 8003754:	4313      	orrs	r3, r2
 8003756:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69da      	ldr	r2, [r3, #28]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800377e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6911      	ldr	r1, [r2, #16]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	68d2      	ldr	r2, [r2, #12]
 800378a:	4311      	orrs	r1, r2
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	430b      	orrs	r3, r1
 8003792:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695a      	ldr	r2, [r3, #20]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	000186a0 	.word	0x000186a0
 80037ec:	001e847f 	.word	0x001e847f
 80037f0:	003d08ff 	.word	0x003d08ff
 80037f4:	431bde83 	.word	0x431bde83
 80037f8:	10624dd3 	.word	0x10624dd3

080037fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af02      	add	r7, sp, #8
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	461a      	mov	r2, r3
 8003808:	460b      	mov	r3, r1
 800380a:	817b      	strh	r3, [r7, #10]
 800380c:	4613      	mov	r3, r2
 800380e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003810:	f7ff f820 	bl	8002854 <HAL_GetTick>
 8003814:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b20      	cmp	r3, #32
 8003820:	f040 80e0 	bne.w	80039e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	2319      	movs	r3, #25
 800382a:	2201      	movs	r2, #1
 800382c:	4970      	ldr	r1, [pc, #448]	; (80039f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 fc58 	bl	80040e4 <I2C_WaitOnFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800383a:	2302      	movs	r3, #2
 800383c:	e0d3      	b.n	80039e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_I2C_Master_Transmit+0x50>
 8003848:	2302      	movs	r3, #2
 800384a:	e0cc      	b.n	80039e6 <HAL_I2C_Master_Transmit+0x1ea>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b01      	cmp	r3, #1
 8003860:	d007      	beq.n	8003872 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0201 	orr.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003880:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2221      	movs	r2, #33	; 0x21
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2210      	movs	r2, #16
 800388e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	893a      	ldrh	r2, [r7, #8]
 80038a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4a50      	ldr	r2, [pc, #320]	; (80039f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80038b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038b4:	8979      	ldrh	r1, [r7, #10]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	6a3a      	ldr	r2, [r7, #32]
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 fac2 	bl	8003e44 <I2C_MasterRequestWrite>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e08d      	b.n	80039e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ca:	2300      	movs	r3, #0
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038e0:	e066      	b.n	80039b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	6a39      	ldr	r1, [r7, #32]
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 fcd2 	bl	8004290 <I2C_WaitOnTXEFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00d      	beq.n	800390e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d107      	bne.n	800390a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003908:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e06b      	b.n	80039e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	781a      	ldrb	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b04      	cmp	r3, #4
 800394a:	d11b      	bne.n	8003984 <HAL_I2C_Master_Transmit+0x188>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003950:	2b00      	cmp	r3, #0
 8003952:	d017      	beq.n	8003984 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	781a      	ldrb	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	6a39      	ldr	r1, [r7, #32]
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 fcc2 	bl	8004312 <I2C_WaitOnBTFFlagUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00d      	beq.n	80039b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	2b04      	cmp	r3, #4
 800399a:	d107      	bne.n	80039ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e01a      	b.n	80039e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d194      	bne.n	80038e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	e000      	b.n	80039e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80039e4:	2302      	movs	r3, #2
  }
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	00100002 	.word	0x00100002
 80039f4:	ffff0000 	.word	0xffff0000

080039f8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08c      	sub	sp, #48	; 0x30
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	607a      	str	r2, [r7, #4]
 8003a02:	461a      	mov	r2, r3
 8003a04:	460b      	mov	r3, r1
 8003a06:	817b      	strh	r3, [r7, #10]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a0c:	f7fe ff22 	bl	8002854 <HAL_GetTick>
 8003a10:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	f040 820b 	bne.w	8003e36 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	2319      	movs	r3, #25
 8003a26:	2201      	movs	r2, #1
 8003a28:	497c      	ldr	r1, [pc, #496]	; (8003c1c <HAL_I2C_Master_Receive+0x224>)
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 fb5a 	bl	80040e4 <I2C_WaitOnFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003a36:	2302      	movs	r3, #2
 8003a38:	e1fe      	b.n	8003e38 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_I2C_Master_Receive+0x50>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e1f7      	b.n	8003e38 <HAL_I2C_Master_Receive+0x440>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d007      	beq.n	8003a6e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0201 	orr.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2222      	movs	r2, #34	; 0x22
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2210      	movs	r2, #16
 8003a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	893a      	ldrh	r2, [r7, #8]
 8003a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4a5c      	ldr	r2, [pc, #368]	; (8003c20 <HAL_I2C_Master_Receive+0x228>)
 8003aae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ab0:	8979      	ldrh	r1, [r7, #10]
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fa46 	bl	8003f48 <I2C_MasterRequestRead>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e1b8      	b.n	8003e38 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d113      	bne.n	8003af6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ace:	2300      	movs	r3, #0
 8003ad0:	623b      	str	r3, [r7, #32]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	623b      	str	r3, [r7, #32]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	623b      	str	r3, [r7, #32]
 8003ae2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	e18c      	b.n	8003e10 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d11b      	bne.n	8003b36 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	61fb      	str	r3, [r7, #28]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	61fb      	str	r3, [r7, #28]
 8003b22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	e16c      	b.n	8003e10 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d11b      	bne.n	8003b76 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	61bb      	str	r3, [r7, #24]
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	e14c      	b.n	8003e10 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b9c:	e138      	b.n	8003e10 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	f200 80f1 	bhi.w	8003d8a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d123      	bne.n	8003bf8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 fbed 	bl	8004394 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e139      	b.n	8003e38 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bf6:	e10b      	b.n	8003e10 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d14e      	bne.n	8003c9e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	2200      	movs	r2, #0
 8003c08:	4906      	ldr	r1, [pc, #24]	; (8003c24 <HAL_I2C_Master_Receive+0x22c>)
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 fa6a 	bl	80040e4 <I2C_WaitOnFlagUntilTimeout>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d008      	beq.n	8003c28 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e10e      	b.n	8003e38 <HAL_I2C_Master_Receive+0x440>
 8003c1a:	bf00      	nop
 8003c1c:	00100002 	.word	0x00100002
 8003c20:	ffff0000 	.word	0xffff0000
 8003c24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691a      	ldr	r2, [r3, #16]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	1c5a      	adds	r2, r3, #1
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c9c:	e0b8      	b.n	8003e10 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	4966      	ldr	r1, [pc, #408]	; (8003e40 <HAL_I2C_Master_Receive+0x448>)
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 fa1b 	bl	80040e4 <I2C_WaitOnFlagUntilTimeout>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0bf      	b.n	8003e38 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	691a      	ldr	r2, [r3, #16]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d00:	2200      	movs	r2, #0
 8003d02:	494f      	ldr	r1, [pc, #316]	; (8003e40 <HAL_I2C_Master_Receive+0x448>)
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 f9ed 	bl	80040e4 <I2C_WaitOnFlagUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e091      	b.n	8003e38 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d88:	e042      	b.n	8003e10 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 fb00 	bl	8004394 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e04c      	b.n	8003e38 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	691a      	ldr	r2, [r3, #16]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d118      	bne.n	8003e10 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f47f aec2 	bne.w	8003b9e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	e000      	b.n	8003e38 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003e36:	2302      	movs	r3, #2
  }
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3728      	adds	r7, #40	; 0x28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	00010004 	.word	0x00010004

08003e44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	607a      	str	r2, [r7, #4]
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	460b      	mov	r3, r1
 8003e52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d006      	beq.n	8003e6e <I2C_MasterRequestWrite+0x2a>
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d003      	beq.n	8003e6e <I2C_MasterRequestWrite+0x2a>
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e6c:	d108      	bne.n	8003e80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	e00b      	b.n	8003e98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	2b12      	cmp	r3, #18
 8003e86:	d107      	bne.n	8003e98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 f91d 	bl	80040e4 <I2C_WaitOnFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00d      	beq.n	8003ecc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ebe:	d103      	bne.n	8003ec8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e035      	b.n	8003f38 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ed4:	d108      	bne.n	8003ee8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ed6:	897b      	ldrh	r3, [r7, #10]
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	461a      	mov	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ee4:	611a      	str	r2, [r3, #16]
 8003ee6:	e01b      	b.n	8003f20 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ee8:	897b      	ldrh	r3, [r7, #10]
 8003eea:	11db      	asrs	r3, r3, #7
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f003 0306 	and.w	r3, r3, #6
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f063 030f 	orn	r3, r3, #15
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	490e      	ldr	r1, [pc, #56]	; (8003f40 <I2C_MasterRequestWrite+0xfc>)
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 f943 	bl	8004192 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e010      	b.n	8003f38 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f16:	897b      	ldrh	r3, [r7, #10]
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4907      	ldr	r1, [pc, #28]	; (8003f44 <I2C_MasterRequestWrite+0x100>)
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 f933 	bl	8004192 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	00010008 	.word	0x00010008
 8003f44:	00010002 	.word	0x00010002

08003f48 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b088      	sub	sp, #32
 8003f4c:	af02      	add	r7, sp, #8
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	607a      	str	r2, [r7, #4]
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	460b      	mov	r3, r1
 8003f56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f6c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d006      	beq.n	8003f82 <I2C_MasterRequestRead+0x3a>
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d003      	beq.n	8003f82 <I2C_MasterRequestRead+0x3a>
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f80:	d108      	bne.n	8003f94 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	e00b      	b.n	8003fac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	2b11      	cmp	r3, #17
 8003f9a:	d107      	bne.n	8003fac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003faa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 f893 	bl	80040e4 <I2C_WaitOnFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00d      	beq.n	8003fe0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fd2:	d103      	bne.n	8003fdc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e079      	b.n	80040d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fe8:	d108      	bne.n	8003ffc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fea:	897b      	ldrh	r3, [r7, #10]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	611a      	str	r2, [r3, #16]
 8003ffa:	e05f      	b.n	80040bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ffc:	897b      	ldrh	r3, [r7, #10]
 8003ffe:	11db      	asrs	r3, r3, #7
 8004000:	b2db      	uxtb	r3, r3
 8004002:	f003 0306 	and.w	r3, r3, #6
 8004006:	b2db      	uxtb	r3, r3
 8004008:	f063 030f 	orn	r3, r3, #15
 800400c:	b2da      	uxtb	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	4930      	ldr	r1, [pc, #192]	; (80040dc <I2C_MasterRequestRead+0x194>)
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f8b9 	bl	8004192 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e054      	b.n	80040d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800402a:	897b      	ldrh	r3, [r7, #10]
 800402c:	b2da      	uxtb	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	4929      	ldr	r1, [pc, #164]	; (80040e0 <I2C_MasterRequestRead+0x198>)
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 f8a9 	bl	8004192 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e044      	b.n	80040d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404a:	2300      	movs	r3, #0
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800406e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f831 	bl	80040e4 <I2C_WaitOnFlagUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00d      	beq.n	80040a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004096:	d103      	bne.n	80040a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800409e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e017      	b.n	80040d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80040a4:	897b      	ldrh	r3, [r7, #10]
 80040a6:	11db      	asrs	r3, r3, #7
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f003 0306 	and.w	r3, r3, #6
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	f063 030e 	orn	r3, r3, #14
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4907      	ldr	r1, [pc, #28]	; (80040e0 <I2C_MasterRequestRead+0x198>)
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f865 	bl	8004192 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	00010008 	.word	0x00010008
 80040e0:	00010002 	.word	0x00010002

080040e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	4613      	mov	r3, r2
 80040f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040f4:	e025      	b.n	8004142 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fc:	d021      	beq.n	8004142 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fe:	f7fe fba9 	bl	8002854 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d302      	bcc.n	8004114 <I2C_WaitOnFlagUntilTimeout+0x30>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d116      	bne.n	8004142 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	f043 0220 	orr.w	r2, r3, #32
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e023      	b.n	800418a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	0c1b      	lsrs	r3, r3, #16
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b01      	cmp	r3, #1
 800414a:	d10d      	bne.n	8004168 <I2C_WaitOnFlagUntilTimeout+0x84>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	43da      	mvns	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4013      	ands	r3, r2
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	bf0c      	ite	eq
 800415e:	2301      	moveq	r3, #1
 8004160:	2300      	movne	r3, #0
 8004162:	b2db      	uxtb	r3, r3
 8004164:	461a      	mov	r2, r3
 8004166:	e00c      	b.n	8004182 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	43da      	mvns	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4013      	ands	r3, r2
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	bf0c      	ite	eq
 800417a:	2301      	moveq	r3, #1
 800417c:	2300      	movne	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	461a      	mov	r2, r3
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	429a      	cmp	r2, r3
 8004186:	d0b6      	beq.n	80040f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041a0:	e051      	b.n	8004246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b0:	d123      	bne.n	80041fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f043 0204 	orr.w	r2, r3, #4
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e046      	b.n	8004288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004200:	d021      	beq.n	8004246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004202:	f7fe fb27 	bl	8002854 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	429a      	cmp	r2, r3
 8004210:	d302      	bcc.n	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d116      	bne.n	8004246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2220      	movs	r2, #32
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	f043 0220 	orr.w	r2, r3, #32
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e020      	b.n	8004288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	0c1b      	lsrs	r3, r3, #16
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b01      	cmp	r3, #1
 800424e:	d10c      	bne.n	800426a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	43da      	mvns	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4013      	ands	r3, r2
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	bf14      	ite	ne
 8004262:	2301      	movne	r3, #1
 8004264:	2300      	moveq	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	e00b      	b.n	8004282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	43da      	mvns	r2, r3
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	4013      	ands	r3, r2
 8004276:	b29b      	uxth	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	bf14      	ite	ne
 800427c:	2301      	movne	r3, #1
 800427e:	2300      	moveq	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d18d      	bne.n	80041a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800429c:	e02d      	b.n	80042fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f8ce 	bl	8004440 <I2C_IsAcknowledgeFailed>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e02d      	b.n	800430a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b4:	d021      	beq.n	80042fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b6:	f7fe facd 	bl	8002854 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d302      	bcc.n	80042cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d116      	bne.n	80042fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f043 0220 	orr.w	r2, r3, #32
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e007      	b.n	800430a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004304:	2b80      	cmp	r3, #128	; 0x80
 8004306:	d1ca      	bne.n	800429e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b084      	sub	sp, #16
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800431e:	e02d      	b.n	800437c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f88d 	bl	8004440 <I2C_IsAcknowledgeFailed>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e02d      	b.n	800438c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004336:	d021      	beq.n	800437c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004338:	f7fe fa8c 	bl	8002854 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	429a      	cmp	r2, r3
 8004346:	d302      	bcc.n	800434e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d116      	bne.n	800437c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	f043 0220 	orr.w	r2, r3, #32
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e007      	b.n	800438c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b04      	cmp	r3, #4
 8004388:	d1ca      	bne.n	8004320 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043a0:	e042      	b.n	8004428 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	f003 0310 	and.w	r3, r3, #16
 80043ac:	2b10      	cmp	r3, #16
 80043ae:	d119      	bne.n	80043e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f06f 0210 	mvn.w	r2, #16
 80043b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e029      	b.n	8004438 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e4:	f7fe fa36 	bl	8002854 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d302      	bcc.n	80043fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d116      	bne.n	8004428 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	f043 0220 	orr.w	r2, r3, #32
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e007      	b.n	8004438 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004432:	2b40      	cmp	r3, #64	; 0x40
 8004434:	d1b5      	bne.n	80043a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004456:	d11b      	bne.n	8004490 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004460:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	f043 0204 	orr.w	r2, r3, #4
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800449e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044a0:	b08f      	sub	sp, #60	; 0x3c
 80044a2:	af0a      	add	r7, sp, #40	; 0x28
 80044a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e10f      	b.n	80046d0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f00d f86c 	bl	80115a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2203      	movs	r2, #3
 80044d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d102      	bne.n	80044ea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f003 fc2b 	bl	8007d4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	603b      	str	r3, [r7, #0]
 80044fa:	687e      	ldr	r6, [r7, #4]
 80044fc:	466d      	mov	r5, sp
 80044fe:	f106 0410 	add.w	r4, r6, #16
 8004502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800450a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800450e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004512:	1d33      	adds	r3, r6, #4
 8004514:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004516:	6838      	ldr	r0, [r7, #0]
 8004518:	f003 fb02 	bl	8007b20 <USB_CoreInit>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d005      	beq.n	800452e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2202      	movs	r2, #2
 8004526:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e0d0      	b.n	80046d0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2100      	movs	r1, #0
 8004534:	4618      	mov	r0, r3
 8004536:	f003 fc19 	bl	8007d6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800453a:	2300      	movs	r3, #0
 800453c:	73fb      	strb	r3, [r7, #15]
 800453e:	e04a      	b.n	80045d6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004540:	7bfa      	ldrb	r2, [r7, #15]
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	333d      	adds	r3, #61	; 0x3d
 8004550:	2201      	movs	r2, #1
 8004552:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004554:	7bfa      	ldrb	r2, [r7, #15]
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	4613      	mov	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	333c      	adds	r3, #60	; 0x3c
 8004564:	7bfa      	ldrb	r2, [r7, #15]
 8004566:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004568:	7bfa      	ldrb	r2, [r7, #15]
 800456a:	7bfb      	ldrb	r3, [r7, #15]
 800456c:	b298      	uxth	r0, r3
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	3344      	adds	r3, #68	; 0x44
 800457c:	4602      	mov	r2, r0
 800457e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004580:	7bfa      	ldrb	r2, [r7, #15]
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	3340      	adds	r3, #64	; 0x40
 8004590:	2200      	movs	r2, #0
 8004592:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004594:	7bfa      	ldrb	r2, [r7, #15]
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	4613      	mov	r3, r2
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	3348      	adds	r3, #72	; 0x48
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045a8:	7bfa      	ldrb	r2, [r7, #15]
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	4613      	mov	r3, r2
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	334c      	adds	r3, #76	; 0x4c
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045bc:	7bfa      	ldrb	r2, [r7, #15]
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	4613      	mov	r3, r2
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	4413      	add	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	3354      	adds	r3, #84	; 0x54
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	3301      	adds	r3, #1
 80045d4:	73fb      	strb	r3, [r7, #15]
 80045d6:	7bfa      	ldrb	r2, [r7, #15]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d3af      	bcc.n	8004540 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045e0:	2300      	movs	r3, #0
 80045e2:	73fb      	strb	r3, [r7, #15]
 80045e4:	e044      	b.n	8004670 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045e6:	7bfa      	ldrb	r2, [r7, #15]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80045f8:	2200      	movs	r2, #0
 80045fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045fc:	7bfa      	ldrb	r2, [r7, #15]
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	4613      	mov	r3, r2
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800460e:	7bfa      	ldrb	r2, [r7, #15]
 8004610:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004612:	7bfa      	ldrb	r2, [r7, #15]
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	4613      	mov	r3, r2
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	440b      	add	r3, r1
 8004620:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004624:	2200      	movs	r2, #0
 8004626:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004628:	7bfa      	ldrb	r2, [r7, #15]
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	4413      	add	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800463e:	7bfa      	ldrb	r2, [r7, #15]
 8004640:	6879      	ldr	r1, [r7, #4]
 8004642:	4613      	mov	r3, r2
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	440b      	add	r3, r1
 800464c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004654:	7bfa      	ldrb	r2, [r7, #15]
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	4613      	mov	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800466a:	7bfb      	ldrb	r3, [r7, #15]
 800466c:	3301      	adds	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
 8004670:	7bfa      	ldrb	r2, [r7, #15]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	429a      	cmp	r2, r3
 8004678:	d3b5      	bcc.n	80045e6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	603b      	str	r3, [r7, #0]
 8004680:	687e      	ldr	r6, [r7, #4]
 8004682:	466d      	mov	r5, sp
 8004684:	f106 0410 	add.w	r4, r6, #16
 8004688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800468a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800468c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800468e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004690:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004694:	e885 0003 	stmia.w	r5, {r0, r1}
 8004698:	1d33      	adds	r3, r6, #4
 800469a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800469c:	6838      	ldr	r0, [r7, #0]
 800469e:	f003 fbb1 	bl	8007e04 <USB_DevInit>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e00d      	b.n	80046d0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f004 fd00 	bl	80090ce <USB_DevDisconnect>

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_PCD_Start+0x1c>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e020      	b.n	8004736 <HAL_PCD_Start+0x5e>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004700:	2b01      	cmp	r3, #1
 8004702:	d109      	bne.n	8004718 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004708:	2b01      	cmp	r3, #1
 800470a:	d005      	beq.n	8004718 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004710:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4618      	mov	r0, r3
 800471e:	f003 fb03 	bl	8007d28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f004 fcb0 	bl	800908c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800473e:	b590      	push	{r4, r7, lr}
 8004740:	b08d      	sub	sp, #52	; 0x34
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f004 fd6e 	bl	8009236 <USB_GetMode>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	f040 848a 	bne.w	8005076 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f004 fcd2 	bl	8009110 <USB_ReadInterrupts>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 8480 	beq.w	8005074 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	0a1b      	lsrs	r3, r3, #8
 800477e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f004 fcbf 	bl	8009110 <USB_ReadInterrupts>
 8004792:	4603      	mov	r3, r0
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b02      	cmp	r3, #2
 800479a:	d107      	bne.n	80047ac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695a      	ldr	r2, [r3, #20]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f002 0202 	and.w	r2, r2, #2
 80047aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f004 fcad 	bl	8009110 <USB_ReadInterrupts>
 80047b6:	4603      	mov	r3, r0
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	2b10      	cmp	r3, #16
 80047be:	d161      	bne.n	8004884 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0210 	bic.w	r2, r2, #16
 80047ce:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	f003 020f 	and.w	r2, r3, #15
 80047dc:	4613      	mov	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4413      	add	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	4413      	add	r3, r2
 80047ec:	3304      	adds	r3, #4
 80047ee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	0c5b      	lsrs	r3, r3, #17
 80047f4:	f003 030f 	and.w	r3, r3, #15
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d124      	bne.n	8004846 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004802:	4013      	ands	r3, r2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d035      	beq.n	8004874 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	091b      	lsrs	r3, r3, #4
 8004810:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004812:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004816:	b29b      	uxth	r3, r3
 8004818:	461a      	mov	r2, r3
 800481a:	6a38      	ldr	r0, [r7, #32]
 800481c:	f004 fae4 	bl	8008de8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	091b      	lsrs	r3, r3, #4
 8004828:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800482c:	441a      	add	r2, r3
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	6a1a      	ldr	r2, [r3, #32]
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	091b      	lsrs	r3, r3, #4
 800483a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800483e:	441a      	add	r2, r3
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	621a      	str	r2, [r3, #32]
 8004844:	e016      	b.n	8004874 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	0c5b      	lsrs	r3, r3, #17
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	2b06      	cmp	r3, #6
 8004850:	d110      	bne.n	8004874 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004858:	2208      	movs	r2, #8
 800485a:	4619      	mov	r1, r3
 800485c:	6a38      	ldr	r0, [r7, #32]
 800485e:	f004 fac3 	bl	8008de8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	6a1a      	ldr	r2, [r3, #32]
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	091b      	lsrs	r3, r3, #4
 800486a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800486e:	441a      	add	r2, r3
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0210 	orr.w	r2, r2, #16
 8004882:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f004 fc41 	bl	8009110 <USB_ReadInterrupts>
 800488e:	4603      	mov	r3, r0
 8004890:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004894:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004898:	f040 80a7 	bne.w	80049ea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f004 fc46 	bl	8009136 <USB_ReadDevAllOutEpInterrupt>
 80048aa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80048ac:	e099      	b.n	80049e2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80048ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 808e 	beq.w	80049d6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	4611      	mov	r1, r2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f004 fc6a 	bl	800919e <USB_ReadDevOutEPInterrupt>
 80048ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00c      	beq.n	80048f0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e2:	461a      	mov	r2, r3
 80048e4:	2301      	movs	r3, #1
 80048e6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80048e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fec2 	bl	8005674 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00c      	beq.n	8004914 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004906:	461a      	mov	r2, r3
 8004908:	2308      	movs	r3, #8
 800490a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800490c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 ff98 	bl	8005844 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f003 0310 	and.w	r3, r3, #16
 800491a:	2b00      	cmp	r3, #0
 800491c:	d008      	beq.n	8004930 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492a:	461a      	mov	r2, r3
 800492c:	2310      	movs	r3, #16
 800492e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d030      	beq.n	800499c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004942:	2b80      	cmp	r3, #128	; 0x80
 8004944:	d109      	bne.n	800495a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004954:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004958:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800495a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495c:	4613      	mov	r3, r2
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	4413      	add	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	4413      	add	r3, r2
 800496c:	3304      	adds	r3, #4
 800496e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	78db      	ldrb	r3, [r3, #3]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d108      	bne.n	800498a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2200      	movs	r2, #0
 800497c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	b2db      	uxtb	r3, r3
 8004982:	4619      	mov	r1, r3
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f00c ff0b 	bl	80117a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004996:	461a      	mov	r2, r3
 8004998:	2302      	movs	r3, #2
 800499a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b2:	461a      	mov	r2, r3
 80049b4:	2320      	movs	r3, #32
 80049b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d009      	beq.n	80049d6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ce:	461a      	mov	r2, r3
 80049d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	3301      	adds	r3, #1
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80049dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049de:	085b      	lsrs	r3, r3, #1
 80049e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80049e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f47f af62 	bne.w	80048ae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f004 fb8e 	bl	8009110 <USB_ReadInterrupts>
 80049f4:	4603      	mov	r3, r0
 80049f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049fe:	f040 80db 	bne.w	8004bb8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f004 fbaf 	bl	800916a <USB_ReadDevAllInEpInterrupt>
 8004a0c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004a12:	e0cd      	b.n	8004bb0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 80c2 	beq.w	8004ba4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	4611      	mov	r1, r2
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f004 fbd5 	bl	80091da <USB_ReadDevInEPInterrupt>
 8004a30:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d057      	beq.n	8004aec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	2201      	movs	r2, #1
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	43db      	mvns	r3, r3
 8004a56:	69f9      	ldr	r1, [r7, #28]
 8004a58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	2301      	movs	r3, #1
 8004a70:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d132      	bne.n	8004ae0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7e:	4613      	mov	r3, r2
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	440b      	add	r3, r1
 8004a88:	334c      	adds	r3, #76	; 0x4c
 8004a8a:	6819      	ldr	r1, [r3, #0]
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a90:	4613      	mov	r3, r2
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	4413      	add	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4403      	add	r3, r0
 8004a9a:	3348      	adds	r3, #72	; 0x48
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4419      	add	r1, r3
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4403      	add	r3, r0
 8004aae:	334c      	adds	r3, #76	; 0x4c
 8004ab0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d113      	bne.n	8004ae0 <HAL_PCD_IRQHandler+0x3a2>
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abc:	4613      	mov	r3, r2
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	3354      	adds	r3, #84	; 0x54
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d108      	bne.n	8004ae0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ad8:	461a      	mov	r2, r3
 8004ada:	2101      	movs	r1, #1
 8004adc:	f004 fbdc 	bl	8009298 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f00c fddf 	bl	80116aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d008      	beq.n	8004b08 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b02:	461a      	mov	r2, r3
 8004b04:	2308      	movs	r3, #8
 8004b06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f003 0310 	and.w	r3, r3, #16
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d008      	beq.n	8004b24 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1e:	461a      	mov	r2, r3
 8004b20:	2310      	movs	r3, #16
 8004b22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d008      	beq.n	8004b40 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	2340      	movs	r3, #64	; 0x40
 8004b3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d023      	beq.n	8004b92 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004b4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b4c:	6a38      	ldr	r0, [r7, #32]
 8004b4e:	f003 fabd 	bl	80080cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b54:	4613      	mov	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	4413      	add	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	3338      	adds	r3, #56	; 0x38
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	4413      	add	r3, r2
 8004b62:	3304      	adds	r3, #4
 8004b64:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	78db      	ldrb	r3, [r3, #3]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d108      	bne.n	8004b80 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2200      	movs	r2, #0
 8004b72:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	4619      	mov	r1, r3
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f00c fe22 	bl	80117c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	2302      	movs	r3, #2
 8004b90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004b9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fcdb 	bl	800555a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	085b      	lsrs	r3, r3, #1
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f47f af2e 	bne.w	8004a14 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f004 faa7 	bl	8009110 <USB_ReadInterrupts>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bcc:	d122      	bne.n	8004c14 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bdc:	f023 0301 	bic.w	r3, r3, #1
 8004be0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d108      	bne.n	8004bfe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fec2 	bl	8005980 <HAL_PCDEx_LPM_Callback>
 8004bfc:	e002      	b.n	8004c04 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f00c fdc0 	bl	8011784 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695a      	ldr	r2, [r3, #20]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004c12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f004 fa79 	bl	8009110 <USB_ReadInterrupts>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c28:	d112      	bne.n	8004c50 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d102      	bne.n	8004c40 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f00c fd7c 	bl	8011738 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	695a      	ldr	r2, [r3, #20]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004c4e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f004 fa5b 	bl	8009110 <USB_ReadInterrupts>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c64:	f040 80b7 	bne.w	8004dd6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	69fa      	ldr	r2, [r7, #28]
 8004c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c76:	f023 0301 	bic.w	r3, r3, #1
 8004c7a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2110      	movs	r1, #16
 8004c82:	4618      	mov	r0, r3
 8004c84:	f003 fa22 	bl	80080cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c88:	2300      	movs	r3, #0
 8004c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c8c:	e046      	b.n	8004d1c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ca0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cb2:	0151      	lsls	r1, r2, #5
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	440a      	add	r2, r1
 8004cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cc0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cd4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ce6:	0151      	lsls	r1, r2, #5
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	440a      	add	r2, r1
 8004cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cf4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d06:	0151      	lsls	r1, r2, #5
 8004d08:	69fa      	ldr	r2, [r7, #28]
 8004d0a:	440a      	add	r2, r1
 8004d0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d14:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d18:	3301      	adds	r3, #1
 8004d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d3b3      	bcc.n	8004c8e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	69fa      	ldr	r2, [r7, #28]
 8004d30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d34:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004d38:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d016      	beq.n	8004d70 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d4c:	69fa      	ldr	r2, [r7, #28]
 8004d4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d52:	f043 030b 	orr.w	r3, r3, #11
 8004d56:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d62:	69fa      	ldr	r2, [r7, #28]
 8004d64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d68:	f043 030b 	orr.w	r3, r3, #11
 8004d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d6e:	e015      	b.n	8004d9c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d82:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004d86:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d96:	f043 030b 	orr.w	r3, r3, #11
 8004d9a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004daa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004dae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	f004 fa69 	bl	8009298 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695a      	ldr	r2, [r3, #20]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004dd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f004 f998 	bl	8009110 <USB_ReadInterrupts>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dea:	d124      	bne.n	8004e36 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f004 fa2e 	bl	8009252 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f003 f9e3 	bl	80081c6 <USB_GetDevSpeed>
 8004e00:	4603      	mov	r3, r0
 8004e02:	461a      	mov	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681c      	ldr	r4, [r3, #0]
 8004e0c:	f001 f9e8 	bl	80061e0 <HAL_RCC_GetHCLKFreq>
 8004e10:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	461a      	mov	r2, r3
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f002 fee2 	bl	8007be4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f00c fc6a 	bl	80116fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695a      	ldr	r2, [r3, #20]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004e34:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f004 f968 	bl	8009110 <USB_ReadInterrupts>
 8004e40:	4603      	mov	r3, r0
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d10a      	bne.n	8004e60 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f00c fc47 	bl	80116de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695a      	ldr	r2, [r3, #20]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f002 0208 	and.w	r2, r2, #8
 8004e5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f004 f953 	bl	8009110 <USB_ReadInterrupts>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e70:	2b80      	cmp	r3, #128	; 0x80
 8004e72:	d122      	bne.n	8004eba <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e80:	2301      	movs	r3, #1
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
 8004e84:	e014      	b.n	8004eb0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	00db      	lsls	r3, r3, #3
 8004e8e:	4413      	add	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	440b      	add	r3, r1
 8004e94:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d105      	bne.n	8004eaa <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fb27 	bl	80054f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	3301      	adds	r3, #1
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d3e5      	bcc.n	8004e86 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f004 f926 	bl	8009110 <USB_ReadInterrupts>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ece:	d13b      	bne.n	8004f48 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed4:	e02b      	b.n	8004f2e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eea:	4613      	mov	r3, r2
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	4413      	add	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	3340      	adds	r3, #64	; 0x40
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d115      	bne.n	8004f28 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004efc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	da12      	bge.n	8004f28 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f06:	4613      	mov	r3, r2
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	333f      	adds	r3, #63	; 0x3f
 8004f12:	2201      	movs	r2, #1
 8004f14:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	4619      	mov	r1, r3
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fae8 	bl	80054f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d3ce      	bcc.n	8004ed6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695a      	ldr	r2, [r3, #20]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004f46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f004 f8df 	bl	8009110 <USB_ReadInterrupts>
 8004f52:	4603      	mov	r3, r0
 8004f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f5c:	d155      	bne.n	800500a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f5e:	2301      	movs	r3, #1
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
 8004f62:	e045      	b.n	8004ff0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f78:	4613      	mov	r3, r2
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	440b      	add	r3, r1
 8004f82:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d12e      	bne.n	8004fea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	da2b      	bge.n	8004fea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004f9e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d121      	bne.n	8004fea <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004fa6:	6879      	ldr	r1, [r7, #4]
 8004fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004faa:	4613      	mov	r3, r2
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	4413      	add	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	440b      	add	r3, r1
 8004fb4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004fb8:	2201      	movs	r2, #1
 8004fba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10a      	bne.n	8004fea <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	69fa      	ldr	r2, [r7, #28]
 8004fde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fe2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fe6:	6053      	str	r3, [r2, #4]
            break;
 8004fe8:	e007      	b.n	8004ffa <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	3301      	adds	r3, #1
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d3b4      	bcc.n	8004f64 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695a      	ldr	r2, [r3, #20]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005008:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f004 f87e 	bl	8009110 <USB_ReadInterrupts>
 8005014:	4603      	mov	r3, r0
 8005016:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800501a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501e:	d10a      	bne.n	8005036 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f00c fbe1 	bl	80117e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	695a      	ldr	r2, [r3, #20]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005034:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f004 f868 	bl	8009110 <USB_ReadInterrupts>
 8005040:	4603      	mov	r3, r0
 8005042:	f003 0304 	and.w	r3, r3, #4
 8005046:	2b04      	cmp	r3, #4
 8005048:	d115      	bne.n	8005076 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f00c fbd1 	bl	8011804 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6859      	ldr	r1, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	430a      	orrs	r2, r1
 8005070:	605a      	str	r2, [r3, #4]
 8005072:	e000      	b.n	8005076 <HAL_PCD_IRQHandler+0x938>
      return;
 8005074:	bf00      	nop
    }
  }
}
 8005076:	3734      	adds	r7, #52	; 0x34
 8005078:	46bd      	mov	sp, r7
 800507a:	bd90      	pop	{r4, r7, pc}

0800507c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	460b      	mov	r3, r1
 8005086:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800508e:	2b01      	cmp	r3, #1
 8005090:	d101      	bne.n	8005096 <HAL_PCD_SetAddress+0x1a>
 8005092:	2302      	movs	r3, #2
 8005094:	e013      	b.n	80050be <HAL_PCD_SetAddress+0x42>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	78fa      	ldrb	r2, [r7, #3]
 80050a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	78fa      	ldrb	r2, [r7, #3]
 80050ac:	4611      	mov	r1, r2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f003 ffc6 	bl	8009040 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b084      	sub	sp, #16
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	4608      	mov	r0, r1
 80050d0:	4611      	mov	r1, r2
 80050d2:	461a      	mov	r2, r3
 80050d4:	4603      	mov	r3, r0
 80050d6:	70fb      	strb	r3, [r7, #3]
 80050d8:	460b      	mov	r3, r1
 80050da:	803b      	strh	r3, [r7, #0]
 80050dc:	4613      	mov	r3, r2
 80050de:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80050e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	da0f      	bge.n	800510c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050ec:	78fb      	ldrb	r3, [r7, #3]
 80050ee:	f003 020f 	and.w	r2, r3, #15
 80050f2:	4613      	mov	r3, r2
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	4413      	add	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	3338      	adds	r3, #56	; 0x38
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	4413      	add	r3, r2
 8005100:	3304      	adds	r3, #4
 8005102:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2201      	movs	r2, #1
 8005108:	705a      	strb	r2, [r3, #1]
 800510a:	e00f      	b.n	800512c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800510c:	78fb      	ldrb	r3, [r7, #3]
 800510e:	f003 020f 	and.w	r2, r3, #15
 8005112:	4613      	mov	r3, r2
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	4413      	add	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	4413      	add	r3, r2
 8005122:	3304      	adds	r3, #4
 8005124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800512c:	78fb      	ldrb	r3, [r7, #3]
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	b2da      	uxtb	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005138:	883a      	ldrh	r2, [r7, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	78ba      	ldrb	r2, [r7, #2]
 8005142:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	785b      	ldrb	r3, [r3, #1]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d004      	beq.n	8005156 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005156:	78bb      	ldrb	r3, [r7, #2]
 8005158:	2b02      	cmp	r3, #2
 800515a:	d102      	bne.n	8005162 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_PCD_EP_Open+0xaa>
 800516c:	2302      	movs	r3, #2
 800516e:	e00e      	b.n	800518e <HAL_PCD_EP_Open+0xc8>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68f9      	ldr	r1, [r7, #12]
 800517e:	4618      	mov	r0, r3
 8005180:	f003 f846 	bl	8008210 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800518c:	7afb      	ldrb	r3, [r7, #11]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b084      	sub	sp, #16
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	460b      	mov	r3, r1
 80051a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80051a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	da0f      	bge.n	80051ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051aa:	78fb      	ldrb	r3, [r7, #3]
 80051ac:	f003 020f 	and.w	r2, r3, #15
 80051b0:	4613      	mov	r3, r2
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	3338      	adds	r3, #56	; 0x38
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	4413      	add	r3, r2
 80051be:	3304      	adds	r3, #4
 80051c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	705a      	strb	r2, [r3, #1]
 80051c8:	e00f      	b.n	80051ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051ca:	78fb      	ldrb	r3, [r7, #3]
 80051cc:	f003 020f 	and.w	r2, r3, #15
 80051d0:	4613      	mov	r3, r2
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	4413      	add	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	4413      	add	r3, r2
 80051e0:	3304      	adds	r3, #4
 80051e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80051ea:	78fb      	ldrb	r3, [r7, #3]
 80051ec:	f003 030f 	and.w	r3, r3, #15
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_PCD_EP_Close+0x6e>
 8005200:	2302      	movs	r3, #2
 8005202:	e00e      	b.n	8005222 <HAL_PCD_EP_Close+0x8c>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68f9      	ldr	r1, [r7, #12]
 8005212:	4618      	mov	r0, r3
 8005214:	f003 f884 	bl	8008320 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b086      	sub	sp, #24
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
 8005236:	460b      	mov	r3, r1
 8005238:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800523a:	7afb      	ldrb	r3, [r7, #11]
 800523c:	f003 020f 	and.w	r2, r3, #15
 8005240:	4613      	mov	r3, r2
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	4413      	add	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	3304      	adds	r3, #4
 8005252:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2200      	movs	r2, #0
 8005264:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2200      	movs	r2, #0
 800526a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800526c:	7afb      	ldrb	r3, [r7, #11]
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	b2da      	uxtb	r2, r3
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d102      	bne.n	8005286 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005286:	7afb      	ldrb	r3, [r7, #11]
 8005288:	f003 030f 	and.w	r3, r3, #15
 800528c:	2b00      	cmp	r3, #0
 800528e:	d109      	bne.n	80052a4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6818      	ldr	r0, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	461a      	mov	r2, r3
 800529c:	6979      	ldr	r1, [r7, #20]
 800529e:	f003 fb63 	bl	8008968 <USB_EP0StartXfer>
 80052a2:	e008      	b.n	80052b6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6818      	ldr	r0, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	461a      	mov	r2, r3
 80052b0:	6979      	ldr	r1, [r7, #20]
 80052b2:	f003 f911 	bl	80084d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	460b      	mov	r3, r1
 80052ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	f003 020f 	and.w	r2, r3, #15
 80052d2:	6879      	ldr	r1, [r7, #4]
 80052d4:	4613      	mov	r3, r2
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80052e2:	681b      	ldr	r3, [r3, #0]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	607a      	str	r2, [r7, #4]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	460b      	mov	r3, r1
 80052fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005300:	7afb      	ldrb	r3, [r7, #11]
 8005302:	f003 020f 	and.w	r2, r3, #15
 8005306:	4613      	mov	r3, r2
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	4413      	add	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	3338      	adds	r3, #56	; 0x38
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	3304      	adds	r3, #4
 8005316:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	2200      	movs	r2, #0
 8005328:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2201      	movs	r2, #1
 800532e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005330:	7afb      	ldrb	r3, [r7, #11]
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	b2da      	uxtb	r2, r3
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d102      	bne.n	800534a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800534a:	7afb      	ldrb	r3, [r7, #11]
 800534c:	f003 030f 	and.w	r3, r3, #15
 8005350:	2b00      	cmp	r3, #0
 8005352:	d109      	bne.n	8005368 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6818      	ldr	r0, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	6979      	ldr	r1, [r7, #20]
 8005362:	f003 fb01 	bl	8008968 <USB_EP0StartXfer>
 8005366:	e008      	b.n	800537a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	b2db      	uxtb	r3, r3
 8005372:	461a      	mov	r2, r3
 8005374:	6979      	ldr	r1, [r7, #20]
 8005376:	f003 f8af 	bl	80084d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	460b      	mov	r3, r1
 800538e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	f003 020f 	and.w	r2, r3, #15
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	429a      	cmp	r2, r3
 800539c:	d901      	bls.n	80053a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e050      	b.n	8005444 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	da0f      	bge.n	80053ca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053aa:	78fb      	ldrb	r3, [r7, #3]
 80053ac:	f003 020f 	and.w	r2, r3, #15
 80053b0:	4613      	mov	r3, r2
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	4413      	add	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	3338      	adds	r3, #56	; 0x38
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	4413      	add	r3, r2
 80053be:	3304      	adds	r3, #4
 80053c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2201      	movs	r2, #1
 80053c6:	705a      	strb	r2, [r3, #1]
 80053c8:	e00d      	b.n	80053e6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80053ca:	78fa      	ldrb	r2, [r7, #3]
 80053cc:	4613      	mov	r3, r2
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	4413      	add	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	4413      	add	r3, r2
 80053dc:	3304      	adds	r3, #4
 80053de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053ec:	78fb      	ldrb	r3, [r7, #3]
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_PCD_EP_SetStall+0x82>
 8005402:	2302      	movs	r3, #2
 8005404:	e01e      	b.n	8005444 <HAL_PCD_EP_SetStall+0xc0>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68f9      	ldr	r1, [r7, #12]
 8005414:	4618      	mov	r0, r3
 8005416:	f003 fd3f 	bl	8008e98 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	f003 030f 	and.w	r3, r3, #15
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10a      	bne.n	800543a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	b2d9      	uxtb	r1, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005434:	461a      	mov	r2, r3
 8005436:	f003 ff2f 	bl	8009298 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005458:	78fb      	ldrb	r3, [r7, #3]
 800545a:	f003 020f 	and.w	r2, r3, #15
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	429a      	cmp	r2, r3
 8005464:	d901      	bls.n	800546a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e042      	b.n	80054f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800546a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800546e:	2b00      	cmp	r3, #0
 8005470:	da0f      	bge.n	8005492 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005472:	78fb      	ldrb	r3, [r7, #3]
 8005474:	f003 020f 	and.w	r2, r3, #15
 8005478:	4613      	mov	r3, r2
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	4413      	add	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	3338      	adds	r3, #56	; 0x38
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	4413      	add	r3, r2
 8005486:	3304      	adds	r3, #4
 8005488:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	705a      	strb	r2, [r3, #1]
 8005490:	e00f      	b.n	80054b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	f003 020f 	and.w	r2, r3, #15
 8005498:	4613      	mov	r3, r2
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	4413      	add	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	4413      	add	r3, r2
 80054a8:	3304      	adds	r3, #4
 80054aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054b8:	78fb      	ldrb	r3, [r7, #3]
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d101      	bne.n	80054d2 <HAL_PCD_EP_ClrStall+0x86>
 80054ce:	2302      	movs	r3, #2
 80054d0:	e00e      	b.n	80054f0 <HAL_PCD_EP_ClrStall+0xa4>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68f9      	ldr	r1, [r7, #12]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f003 fd47 	bl	8008f74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005504:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005508:	2b00      	cmp	r3, #0
 800550a:	da0c      	bge.n	8005526 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800550c:	78fb      	ldrb	r3, [r7, #3]
 800550e:	f003 020f 	and.w	r2, r3, #15
 8005512:	4613      	mov	r3, r2
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	4413      	add	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	3338      	adds	r3, #56	; 0x38
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	4413      	add	r3, r2
 8005520:	3304      	adds	r3, #4
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	e00c      	b.n	8005540 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005526:	78fb      	ldrb	r3, [r7, #3]
 8005528:	f003 020f 	and.w	r2, r3, #15
 800552c:	4613      	mov	r3, r2
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	4413      	add	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	4413      	add	r3, r2
 800553c:	3304      	adds	r3, #4
 800553e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68f9      	ldr	r1, [r7, #12]
 8005546:	4618      	mov	r0, r3
 8005548:	f003 fb66 	bl	8008c18 <USB_EPStopXfer>
 800554c:	4603      	mov	r3, r0
 800554e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005550:	7afb      	ldrb	r3, [r7, #11]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b08a      	sub	sp, #40	; 0x28
 800555e:	af02      	add	r7, sp, #8
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	4613      	mov	r3, r2
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	4413      	add	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	3338      	adds	r3, #56	; 0x38
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	4413      	add	r3, r2
 800557e:	3304      	adds	r3, #4
 8005580:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a1a      	ldr	r2, [r3, #32]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	429a      	cmp	r2, r3
 800558c:	d901      	bls.n	8005592 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e06c      	b.n	800566c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	699a      	ldr	r2, [r3, #24]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d902      	bls.n	80055ae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	3303      	adds	r3, #3
 80055b2:	089b      	lsrs	r3, r3, #2
 80055b4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80055b6:	e02b      	b.n	8005610 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	699a      	ldr	r2, [r3, #24]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	69fa      	ldr	r2, [r7, #28]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d902      	bls.n	80055d4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	3303      	adds	r3, #3
 80055d8:	089b      	lsrs	r3, r3, #2
 80055da:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6919      	ldr	r1, [r3, #16]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	4603      	mov	r3, r0
 80055f2:	6978      	ldr	r0, [r7, #20]
 80055f4:	f003 fbba 	bl	8008d6c <USB_WritePacket>

    ep->xfer_buff  += len;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	691a      	ldr	r2, [r3, #16]
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	441a      	add	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6a1a      	ldr	r2, [r3, #32]
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	441a      	add	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	4413      	add	r3, r2
 8005618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	b29b      	uxth	r3, r3
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	429a      	cmp	r2, r3
 8005624:	d809      	bhi.n	800563a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6a1a      	ldr	r2, [r3, #32]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800562e:	429a      	cmp	r2, r3
 8005630:	d203      	bcs.n	800563a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1be      	bne.n	80055b8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	699a      	ldr	r2, [r3, #24]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	429a      	cmp	r2, r3
 8005644:	d811      	bhi.n	800566a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	f003 030f 	and.w	r3, r3, #15
 800564c:	2201      	movs	r2, #1
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	43db      	mvns	r3, r3
 8005660:	6939      	ldr	r1, [r7, #16]
 8005662:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005666:	4013      	ands	r3, r2
 8005668:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3720      	adds	r7, #32
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b088      	sub	sp, #32
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	333c      	adds	r3, #60	; 0x3c
 800568c:	3304      	adds	r3, #4
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d17b      	bne.n	80057a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	f003 0308 	and.w	r3, r3, #8
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d015      	beq.n	80056e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	4a61      	ldr	r2, [pc, #388]	; (800583c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	f240 80b9 	bls.w	8005830 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 80b3 	beq.w	8005830 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d6:	461a      	mov	r2, r3
 80056d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056dc:	6093      	str	r3, [r2, #8]
 80056de:	e0a7      	b.n	8005830 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d009      	beq.n	80056fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	461a      	mov	r2, r3
 80056f8:	2320      	movs	r3, #32
 80056fa:	6093      	str	r3, [r2, #8]
 80056fc:	e098      	b.n	8005830 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005704:	2b00      	cmp	r3, #0
 8005706:	f040 8093 	bne.w	8005830 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	4a4b      	ldr	r2, [pc, #300]	; (800583c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d90f      	bls.n	8005732 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00a      	beq.n	8005732 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005728:	461a      	mov	r2, r3
 800572a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800572e:	6093      	str	r3, [r2, #8]
 8005730:	e07e      	b.n	8005830 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	4613      	mov	r3, r2
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	4413      	add	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	4413      	add	r3, r2
 8005744:	3304      	adds	r3, #4
 8005746:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	0159      	lsls	r1, r3, #5
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	440b      	add	r3, r1
 8005754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800575e:	1ad2      	subs	r2, r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d114      	bne.n	8005794 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d109      	bne.n	8005786 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6818      	ldr	r0, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800577c:	461a      	mov	r2, r3
 800577e:	2101      	movs	r1, #1
 8005780:	f003 fd8a 	bl	8009298 <USB_EP0_OutStart>
 8005784:	e006      	b.n	8005794 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	691a      	ldr	r2, [r3, #16]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	441a      	add	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	b2db      	uxtb	r3, r3
 8005798:	4619      	mov	r1, r3
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f00b ff6a 	bl	8011674 <HAL_PCD_DataOutStageCallback>
 80057a0:	e046      	b.n	8005830 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	4a26      	ldr	r2, [pc, #152]	; (8005840 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d124      	bne.n	80057f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00a      	beq.n	80057ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c0:	461a      	mov	r2, r3
 80057c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057c6:	6093      	str	r3, [r2, #8]
 80057c8:	e032      	b.n	8005830 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f003 0320 	and.w	r3, r3, #32
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d008      	beq.n	80057e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e0:	461a      	mov	r2, r3
 80057e2:	2320      	movs	r3, #32
 80057e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	4619      	mov	r1, r3
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f00b ff41 	bl	8011674 <HAL_PCD_DataOutStageCallback>
 80057f2:	e01d      	b.n	8005830 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d114      	bne.n	8005824 <PCD_EP_OutXfrComplete_int+0x1b0>
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	4613      	mov	r3, r2
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	440b      	add	r3, r1
 8005808:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d108      	bne.n	8005824 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800581c:	461a      	mov	r2, r3
 800581e:	2100      	movs	r1, #0
 8005820:	f003 fd3a 	bl	8009298 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	b2db      	uxtb	r3, r3
 8005828:	4619      	mov	r1, r3
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f00b ff22 	bl	8011674 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3720      	adds	r7, #32
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	4f54300a 	.word	0x4f54300a
 8005840:	4f54310a 	.word	0x4f54310a

08005844 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	333c      	adds	r3, #60	; 0x3c
 800585c:	3304      	adds	r3, #4
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	4a15      	ldr	r2, [pc, #84]	; (80058cc <PCD_EP_OutSetupPacket_int+0x88>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d90e      	bls.n	8005898 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005880:	2b00      	cmp	r3, #0
 8005882:	d009      	beq.n	8005898 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	461a      	mov	r2, r3
 8005892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005896:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f00b fed9 	bl	8011650 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4a0a      	ldr	r2, [pc, #40]	; (80058cc <PCD_EP_OutSetupPacket_int+0x88>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d90c      	bls.n	80058c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d108      	bne.n	80058c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6818      	ldr	r0, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80058b8:	461a      	mov	r2, r3
 80058ba:	2101      	movs	r1, #1
 80058bc:	f003 fcec 	bl	8009298 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	4f54300a 	.word	0x4f54300a

080058d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	460b      	mov	r3, r1
 80058da:	70fb      	strb	r3, [r7, #3]
 80058dc:	4613      	mov	r3, r2
 80058de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80058e8:	78fb      	ldrb	r3, [r7, #3]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d107      	bne.n	80058fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80058ee:	883b      	ldrh	r3, [r7, #0]
 80058f0:	0419      	lsls	r1, r3, #16
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	629a      	str	r2, [r3, #40]	; 0x28
 80058fc:	e028      	b.n	8005950 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005904:	0c1b      	lsrs	r3, r3, #16
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	4413      	add	r3, r2
 800590a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800590c:	2300      	movs	r3, #0
 800590e:	73fb      	strb	r3, [r7, #15]
 8005910:	e00d      	b.n	800592e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	7bfb      	ldrb	r3, [r7, #15]
 8005918:	3340      	adds	r3, #64	; 0x40
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	0c1b      	lsrs	r3, r3, #16
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	4413      	add	r3, r2
 8005926:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	3301      	adds	r3, #1
 800592c:	73fb      	strb	r3, [r7, #15]
 800592e:	7bfa      	ldrb	r2, [r7, #15]
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	3b01      	subs	r3, #1
 8005934:	429a      	cmp	r2, r3
 8005936:	d3ec      	bcc.n	8005912 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005938:	883b      	ldrh	r3, [r7, #0]
 800593a:	0418      	lsls	r0, r3, #16
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6819      	ldr	r1, [r3, #0]
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	3b01      	subs	r3, #1
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	4302      	orrs	r2, r0
 8005948:	3340      	adds	r3, #64	; 0x40
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	440b      	add	r3, r1
 800594e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	460b      	mov	r3, r1
 8005968:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	887a      	ldrh	r2, [r7, #2]
 8005970:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e267      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d075      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059b6:	4b88      	ldr	r3, [pc, #544]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f003 030c 	and.w	r3, r3, #12
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d00c      	beq.n	80059dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059c2:	4b85      	ldr	r3, [pc, #532]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059ca:	2b08      	cmp	r3, #8
 80059cc:	d112      	bne.n	80059f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ce:	4b82      	ldr	r3, [pc, #520]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059da:	d10b      	bne.n	80059f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059dc:	4b7e      	ldr	r3, [pc, #504]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d05b      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x108>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d157      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e242      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059fc:	d106      	bne.n	8005a0c <HAL_RCC_OscConfig+0x74>
 80059fe:	4b76      	ldr	r3, [pc, #472]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a75      	ldr	r2, [pc, #468]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a08:	6013      	str	r3, [r2, #0]
 8005a0a:	e01d      	b.n	8005a48 <HAL_RCC_OscConfig+0xb0>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a14:	d10c      	bne.n	8005a30 <HAL_RCC_OscConfig+0x98>
 8005a16:	4b70      	ldr	r3, [pc, #448]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a6f      	ldr	r2, [pc, #444]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	4b6d      	ldr	r3, [pc, #436]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a6c      	ldr	r2, [pc, #432]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	e00b      	b.n	8005a48 <HAL_RCC_OscConfig+0xb0>
 8005a30:	4b69      	ldr	r3, [pc, #420]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a68      	ldr	r2, [pc, #416]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	4b66      	ldr	r3, [pc, #408]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a65      	ldr	r2, [pc, #404]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d013      	beq.n	8005a78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a50:	f7fc ff00 	bl	8002854 <HAL_GetTick>
 8005a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a56:	e008      	b.n	8005a6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a58:	f7fc fefc 	bl	8002854 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	2b64      	cmp	r3, #100	; 0x64
 8005a64:	d901      	bls.n	8005a6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e207      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a6a:	4b5b      	ldr	r3, [pc, #364]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0f0      	beq.n	8005a58 <HAL_RCC_OscConfig+0xc0>
 8005a76:	e014      	b.n	8005aa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a78:	f7fc feec 	bl	8002854 <HAL_GetTick>
 8005a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a80:	f7fc fee8 	bl	8002854 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b64      	cmp	r3, #100	; 0x64
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e1f3      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a92:	4b51      	ldr	r3, [pc, #324]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1f0      	bne.n	8005a80 <HAL_RCC_OscConfig+0xe8>
 8005a9e:	e000      	b.n	8005aa2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d063      	beq.n	8005b76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005aae:	4b4a      	ldr	r3, [pc, #296]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 030c 	and.w	r3, r3, #12
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00b      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aba:	4b47      	ldr	r3, [pc, #284]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ac2:	2b08      	cmp	r3, #8
 8005ac4:	d11c      	bne.n	8005b00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ac6:	4b44      	ldr	r3, [pc, #272]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d116      	bne.n	8005b00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ad2:	4b41      	ldr	r3, [pc, #260]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d005      	beq.n	8005aea <HAL_RCC_OscConfig+0x152>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d001      	beq.n	8005aea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e1c7      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aea:	4b3b      	ldr	r3, [pc, #236]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	4937      	ldr	r1, [pc, #220]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005afe:	e03a      	b.n	8005b76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d020      	beq.n	8005b4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b08:	4b34      	ldr	r3, [pc, #208]	; (8005bdc <HAL_RCC_OscConfig+0x244>)
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0e:	f7fc fea1 	bl	8002854 <HAL_GetTick>
 8005b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b14:	e008      	b.n	8005b28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b16:	f7fc fe9d 	bl	8002854 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d901      	bls.n	8005b28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e1a8      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b28:	4b2b      	ldr	r3, [pc, #172]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d0f0      	beq.n	8005b16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b34:	4b28      	ldr	r3, [pc, #160]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	4925      	ldr	r1, [pc, #148]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	600b      	str	r3, [r1, #0]
 8005b48:	e015      	b.n	8005b76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b4a:	4b24      	ldr	r3, [pc, #144]	; (8005bdc <HAL_RCC_OscConfig+0x244>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b50:	f7fc fe80 	bl	8002854 <HAL_GetTick>
 8005b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b56:	e008      	b.n	8005b6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b58:	f7fc fe7c 	bl	8002854 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e187      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b6a:	4b1b      	ldr	r3, [pc, #108]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1f0      	bne.n	8005b58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d036      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d016      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b8a:	4b15      	ldr	r3, [pc, #84]	; (8005be0 <HAL_RCC_OscConfig+0x248>)
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b90:	f7fc fe60 	bl	8002854 <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b98:	f7fc fe5c 	bl	8002854 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e167      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005baa:	4b0b      	ldr	r3, [pc, #44]	; (8005bd8 <HAL_RCC_OscConfig+0x240>)
 8005bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d0f0      	beq.n	8005b98 <HAL_RCC_OscConfig+0x200>
 8005bb6:	e01b      	b.n	8005bf0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bb8:	4b09      	ldr	r3, [pc, #36]	; (8005be0 <HAL_RCC_OscConfig+0x248>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bbe:	f7fc fe49 	bl	8002854 <HAL_GetTick>
 8005bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bc4:	e00e      	b.n	8005be4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bc6:	f7fc fe45 	bl	8002854 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d907      	bls.n	8005be4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e150      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
 8005bd8:	40023800 	.word	0x40023800
 8005bdc:	42470000 	.word	0x42470000
 8005be0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005be4:	4b88      	ldr	r3, [pc, #544]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1ea      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 8097 	beq.w	8005d2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c02:	4b81      	ldr	r3, [pc, #516]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10f      	bne.n	8005c2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60bb      	str	r3, [r7, #8]
 8005c12:	4b7d      	ldr	r3, [pc, #500]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	4a7c      	ldr	r2, [pc, #496]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c1e:	4b7a      	ldr	r3, [pc, #488]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c26:	60bb      	str	r3, [r7, #8]
 8005c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c2e:	4b77      	ldr	r3, [pc, #476]	; (8005e0c <HAL_RCC_OscConfig+0x474>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d118      	bne.n	8005c6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c3a:	4b74      	ldr	r3, [pc, #464]	; (8005e0c <HAL_RCC_OscConfig+0x474>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a73      	ldr	r2, [pc, #460]	; (8005e0c <HAL_RCC_OscConfig+0x474>)
 8005c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c46:	f7fc fe05 	bl	8002854 <HAL_GetTick>
 8005c4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c4c:	e008      	b.n	8005c60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c4e:	f7fc fe01 	bl	8002854 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d901      	bls.n	8005c60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e10c      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c60:	4b6a      	ldr	r3, [pc, #424]	; (8005e0c <HAL_RCC_OscConfig+0x474>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0f0      	beq.n	8005c4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d106      	bne.n	8005c82 <HAL_RCC_OscConfig+0x2ea>
 8005c74:	4b64      	ldr	r3, [pc, #400]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c78:	4a63      	ldr	r2, [pc, #396]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005c7a:	f043 0301 	orr.w	r3, r3, #1
 8005c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c80:	e01c      	b.n	8005cbc <HAL_RCC_OscConfig+0x324>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	2b05      	cmp	r3, #5
 8005c88:	d10c      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x30c>
 8005c8a:	4b5f      	ldr	r3, [pc, #380]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8e:	4a5e      	ldr	r2, [pc, #376]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005c90:	f043 0304 	orr.w	r3, r3, #4
 8005c94:	6713      	str	r3, [r2, #112]	; 0x70
 8005c96:	4b5c      	ldr	r3, [pc, #368]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9a:	4a5b      	ldr	r2, [pc, #364]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005c9c:	f043 0301 	orr.w	r3, r3, #1
 8005ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ca2:	e00b      	b.n	8005cbc <HAL_RCC_OscConfig+0x324>
 8005ca4:	4b58      	ldr	r3, [pc, #352]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca8:	4a57      	ldr	r2, [pc, #348]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005caa:	f023 0301 	bic.w	r3, r3, #1
 8005cae:	6713      	str	r3, [r2, #112]	; 0x70
 8005cb0:	4b55      	ldr	r3, [pc, #340]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb4:	4a54      	ldr	r2, [pc, #336]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005cb6:	f023 0304 	bic.w	r3, r3, #4
 8005cba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d015      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc4:	f7fc fdc6 	bl	8002854 <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cca:	e00a      	b.n	8005ce2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ccc:	f7fc fdc2 	bl	8002854 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e0cb      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ce2:	4b49      	ldr	r3, [pc, #292]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d0ee      	beq.n	8005ccc <HAL_RCC_OscConfig+0x334>
 8005cee:	e014      	b.n	8005d1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cf0:	f7fc fdb0 	bl	8002854 <HAL_GetTick>
 8005cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cf6:	e00a      	b.n	8005d0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cf8:	f7fc fdac 	bl	8002854 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e0b5      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d0e:	4b3e      	ldr	r3, [pc, #248]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1ee      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d1a:	7dfb      	ldrb	r3, [r7, #23]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d105      	bne.n	8005d2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d20:	4b39      	ldr	r3, [pc, #228]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d24:	4a38      	ldr	r2, [pc, #224]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005d26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 80a1 	beq.w	8005e78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d36:	4b34      	ldr	r3, [pc, #208]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f003 030c 	and.w	r3, r3, #12
 8005d3e:	2b08      	cmp	r3, #8
 8005d40:	d05c      	beq.n	8005dfc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d141      	bne.n	8005dce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d4a:	4b31      	ldr	r3, [pc, #196]	; (8005e10 <HAL_RCC_OscConfig+0x478>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d50:	f7fc fd80 	bl	8002854 <HAL_GetTick>
 8005d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d56:	e008      	b.n	8005d6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d58:	f7fc fd7c 	bl	8002854 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e087      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d6a:	4b27      	ldr	r3, [pc, #156]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1f0      	bne.n	8005d58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69da      	ldr	r2, [r3, #28]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	019b      	lsls	r3, r3, #6
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8c:	085b      	lsrs	r3, r3, #1
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	041b      	lsls	r3, r3, #16
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	061b      	lsls	r3, r3, #24
 8005d9a:	491b      	ldr	r1, [pc, #108]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005da0:	4b1b      	ldr	r3, [pc, #108]	; (8005e10 <HAL_RCC_OscConfig+0x478>)
 8005da2:	2201      	movs	r2, #1
 8005da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da6:	f7fc fd55 	bl	8002854 <HAL_GetTick>
 8005daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dac:	e008      	b.n	8005dc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dae:	f7fc fd51 	bl	8002854 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e05c      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dc0:	4b11      	ldr	r3, [pc, #68]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0f0      	beq.n	8005dae <HAL_RCC_OscConfig+0x416>
 8005dcc:	e054      	b.n	8005e78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dce:	4b10      	ldr	r3, [pc, #64]	; (8005e10 <HAL_RCC_OscConfig+0x478>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd4:	f7fc fd3e 	bl	8002854 <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ddc:	f7fc fd3a 	bl	8002854 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e045      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dee:	4b06      	ldr	r3, [pc, #24]	; (8005e08 <HAL_RCC_OscConfig+0x470>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1f0      	bne.n	8005ddc <HAL_RCC_OscConfig+0x444>
 8005dfa:	e03d      	b.n	8005e78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d107      	bne.n	8005e14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e038      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
 8005e08:	40023800 	.word	0x40023800
 8005e0c:	40007000 	.word	0x40007000
 8005e10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e14:	4b1b      	ldr	r3, [pc, #108]	; (8005e84 <HAL_RCC_OscConfig+0x4ec>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d028      	beq.n	8005e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d121      	bne.n	8005e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d11a      	bne.n	8005e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e44:	4013      	ands	r3, r2
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d111      	bne.n	8005e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	085b      	lsrs	r3, r3, #1
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d107      	bne.n	8005e74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d001      	beq.n	8005e78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e000      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	40023800 	.word	0x40023800

08005e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e0cc      	b.n	8006036 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e9c:	4b68      	ldr	r3, [pc, #416]	; (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d90c      	bls.n	8005ec4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eaa:	4b65      	ldr	r3, [pc, #404]	; (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eb2:	4b63      	ldr	r3, [pc, #396]	; (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0307 	and.w	r3, r3, #7
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d001      	beq.n	8005ec4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e0b8      	b.n	8006036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d020      	beq.n	8005f12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005edc:	4b59      	ldr	r3, [pc, #356]	; (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	4a58      	ldr	r2, [pc, #352]	; (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ee6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0308 	and.w	r3, r3, #8
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d005      	beq.n	8005f00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ef4:	4b53      	ldr	r3, [pc, #332]	; (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	4a52      	ldr	r2, [pc, #328]	; (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005efa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005efe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f00:	4b50      	ldr	r3, [pc, #320]	; (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	494d      	ldr	r1, [pc, #308]	; (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d044      	beq.n	8005fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d107      	bne.n	8005f36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f26:	4b47      	ldr	r3, [pc, #284]	; (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d119      	bne.n	8005f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e07f      	b.n	8006036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d003      	beq.n	8005f46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d107      	bne.n	8005f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f46:	4b3f      	ldr	r3, [pc, #252]	; (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d109      	bne.n	8005f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e06f      	b.n	8006036 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f56:	4b3b      	ldr	r3, [pc, #236]	; (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e067      	b.n	8006036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f66:	4b37      	ldr	r3, [pc, #220]	; (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f023 0203 	bic.w	r2, r3, #3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	4934      	ldr	r1, [pc, #208]	; (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f78:	f7fc fc6c 	bl	8002854 <HAL_GetTick>
 8005f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f7e:	e00a      	b.n	8005f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f80:	f7fc fc68 	bl	8002854 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e04f      	b.n	8006036 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f96:	4b2b      	ldr	r3, [pc, #172]	; (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f003 020c 	and.w	r2, r3, #12
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d1eb      	bne.n	8005f80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fa8:	4b25      	ldr	r3, [pc, #148]	; (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d20c      	bcs.n	8005fd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fb6:	4b22      	ldr	r3, [pc, #136]	; (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	b2d2      	uxtb	r2, r2
 8005fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fbe:	4b20      	ldr	r3, [pc, #128]	; (8006040 <HAL_RCC_ClockConfig+0x1b8>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d001      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e032      	b.n	8006036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d008      	beq.n	8005fee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fdc:	4b19      	ldr	r3, [pc, #100]	; (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	4916      	ldr	r1, [pc, #88]	; (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0308 	and.w	r3, r3, #8
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d009      	beq.n	800600e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ffa:	4b12      	ldr	r3, [pc, #72]	; (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	490e      	ldr	r1, [pc, #56]	; (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 800600a:	4313      	orrs	r3, r2
 800600c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800600e:	f000 f821 	bl	8006054 <HAL_RCC_GetSysClockFreq>
 8006012:	4602      	mov	r2, r0
 8006014:	4b0b      	ldr	r3, [pc, #44]	; (8006044 <HAL_RCC_ClockConfig+0x1bc>)
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	091b      	lsrs	r3, r3, #4
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	490a      	ldr	r1, [pc, #40]	; (8006048 <HAL_RCC_ClockConfig+0x1c0>)
 8006020:	5ccb      	ldrb	r3, [r1, r3]
 8006022:	fa22 f303 	lsr.w	r3, r2, r3
 8006026:	4a09      	ldr	r2, [pc, #36]	; (800604c <HAL_RCC_ClockConfig+0x1c4>)
 8006028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800602a:	4b09      	ldr	r3, [pc, #36]	; (8006050 <HAL_RCC_ClockConfig+0x1c8>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4618      	mov	r0, r3
 8006030:	f7fc fab2 	bl	8002598 <HAL_InitTick>

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	40023c00 	.word	0x40023c00
 8006044:	40023800 	.word	0x40023800
 8006048:	08012eb4 	.word	0x08012eb4
 800604c:	20000004 	.word	0x20000004
 8006050:	20000008 	.word	0x20000008

08006054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006058:	b090      	sub	sp, #64	; 0x40
 800605a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	637b      	str	r3, [r7, #52]	; 0x34
 8006060:	2300      	movs	r3, #0
 8006062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006064:	2300      	movs	r3, #0
 8006066:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800606c:	4b59      	ldr	r3, [pc, #356]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 030c 	and.w	r3, r3, #12
 8006074:	2b08      	cmp	r3, #8
 8006076:	d00d      	beq.n	8006094 <HAL_RCC_GetSysClockFreq+0x40>
 8006078:	2b08      	cmp	r3, #8
 800607a:	f200 80a1 	bhi.w	80061c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800607e:	2b00      	cmp	r3, #0
 8006080:	d002      	beq.n	8006088 <HAL_RCC_GetSysClockFreq+0x34>
 8006082:	2b04      	cmp	r3, #4
 8006084:	d003      	beq.n	800608e <HAL_RCC_GetSysClockFreq+0x3a>
 8006086:	e09b      	b.n	80061c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006088:	4b53      	ldr	r3, [pc, #332]	; (80061d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800608a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800608c:	e09b      	b.n	80061c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800608e:	4b53      	ldr	r3, [pc, #332]	; (80061dc <HAL_RCC_GetSysClockFreq+0x188>)
 8006090:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006092:	e098      	b.n	80061c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006094:	4b4f      	ldr	r3, [pc, #316]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800609c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800609e:	4b4d      	ldr	r3, [pc, #308]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d028      	beq.n	80060fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060aa:	4b4a      	ldr	r3, [pc, #296]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	099b      	lsrs	r3, r3, #6
 80060b0:	2200      	movs	r2, #0
 80060b2:	623b      	str	r3, [r7, #32]
 80060b4:	627a      	str	r2, [r7, #36]	; 0x24
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80060bc:	2100      	movs	r1, #0
 80060be:	4b47      	ldr	r3, [pc, #284]	; (80061dc <HAL_RCC_GetSysClockFreq+0x188>)
 80060c0:	fb03 f201 	mul.w	r2, r3, r1
 80060c4:	2300      	movs	r3, #0
 80060c6:	fb00 f303 	mul.w	r3, r0, r3
 80060ca:	4413      	add	r3, r2
 80060cc:	4a43      	ldr	r2, [pc, #268]	; (80061dc <HAL_RCC_GetSysClockFreq+0x188>)
 80060ce:	fba0 1202 	umull	r1, r2, r0, r2
 80060d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060d4:	460a      	mov	r2, r1
 80060d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80060d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060da:	4413      	add	r3, r2
 80060dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e0:	2200      	movs	r2, #0
 80060e2:	61bb      	str	r3, [r7, #24]
 80060e4:	61fa      	str	r2, [r7, #28]
 80060e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80060ee:	f7fa fd83 	bl	8000bf8 <__aeabi_uldivmod>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	4613      	mov	r3, r2
 80060f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060fa:	e053      	b.n	80061a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060fc:	4b35      	ldr	r3, [pc, #212]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	099b      	lsrs	r3, r3, #6
 8006102:	2200      	movs	r2, #0
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	617a      	str	r2, [r7, #20]
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800610e:	f04f 0b00 	mov.w	fp, #0
 8006112:	4652      	mov	r2, sl
 8006114:	465b      	mov	r3, fp
 8006116:	f04f 0000 	mov.w	r0, #0
 800611a:	f04f 0100 	mov.w	r1, #0
 800611e:	0159      	lsls	r1, r3, #5
 8006120:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006124:	0150      	lsls	r0, r2, #5
 8006126:	4602      	mov	r2, r0
 8006128:	460b      	mov	r3, r1
 800612a:	ebb2 080a 	subs.w	r8, r2, sl
 800612e:	eb63 090b 	sbc.w	r9, r3, fp
 8006132:	f04f 0200 	mov.w	r2, #0
 8006136:	f04f 0300 	mov.w	r3, #0
 800613a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800613e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006142:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006146:	ebb2 0408 	subs.w	r4, r2, r8
 800614a:	eb63 0509 	sbc.w	r5, r3, r9
 800614e:	f04f 0200 	mov.w	r2, #0
 8006152:	f04f 0300 	mov.w	r3, #0
 8006156:	00eb      	lsls	r3, r5, #3
 8006158:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800615c:	00e2      	lsls	r2, r4, #3
 800615e:	4614      	mov	r4, r2
 8006160:	461d      	mov	r5, r3
 8006162:	eb14 030a 	adds.w	r3, r4, sl
 8006166:	603b      	str	r3, [r7, #0]
 8006168:	eb45 030b 	adc.w	r3, r5, fp
 800616c:	607b      	str	r3, [r7, #4]
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	f04f 0300 	mov.w	r3, #0
 8006176:	e9d7 4500 	ldrd	r4, r5, [r7]
 800617a:	4629      	mov	r1, r5
 800617c:	028b      	lsls	r3, r1, #10
 800617e:	4621      	mov	r1, r4
 8006180:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006184:	4621      	mov	r1, r4
 8006186:	028a      	lsls	r2, r1, #10
 8006188:	4610      	mov	r0, r2
 800618a:	4619      	mov	r1, r3
 800618c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618e:	2200      	movs	r2, #0
 8006190:	60bb      	str	r3, [r7, #8]
 8006192:	60fa      	str	r2, [r7, #12]
 8006194:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006198:	f7fa fd2e 	bl	8000bf8 <__aeabi_uldivmod>
 800619c:	4602      	mov	r2, r0
 800619e:	460b      	mov	r3, r1
 80061a0:	4613      	mov	r3, r2
 80061a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061a4:	4b0b      	ldr	r3, [pc, #44]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	0c1b      	lsrs	r3, r3, #16
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	3301      	adds	r3, #1
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80061b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061be:	e002      	b.n	80061c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061c0:	4b05      	ldr	r3, [pc, #20]	; (80061d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80061c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3740      	adds	r7, #64	; 0x40
 80061cc:	46bd      	mov	sp, r7
 80061ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061d2:	bf00      	nop
 80061d4:	40023800 	.word	0x40023800
 80061d8:	00f42400 	.word	0x00f42400
 80061dc:	00b71b00 	.word	0x00b71b00

080061e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061e0:	b480      	push	{r7}
 80061e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061e4:	4b03      	ldr	r3, [pc, #12]	; (80061f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80061e6:	681b      	ldr	r3, [r3, #0]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	20000004 	.word	0x20000004

080061f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061fc:	f7ff fff0 	bl	80061e0 <HAL_RCC_GetHCLKFreq>
 8006200:	4602      	mov	r2, r0
 8006202:	4b05      	ldr	r3, [pc, #20]	; (8006218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	0a9b      	lsrs	r3, r3, #10
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	4903      	ldr	r1, [pc, #12]	; (800621c <HAL_RCC_GetPCLK1Freq+0x24>)
 800620e:	5ccb      	ldrb	r3, [r1, r3]
 8006210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006214:	4618      	mov	r0, r3
 8006216:	bd80      	pop	{r7, pc}
 8006218:	40023800 	.word	0x40023800
 800621c:	08012ec4 	.word	0x08012ec4

08006220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006224:	f7ff ffdc 	bl	80061e0 <HAL_RCC_GetHCLKFreq>
 8006228:	4602      	mov	r2, r0
 800622a:	4b05      	ldr	r3, [pc, #20]	; (8006240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	0b5b      	lsrs	r3, r3, #13
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	4903      	ldr	r1, [pc, #12]	; (8006244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006236:	5ccb      	ldrb	r3, [r1, r3]
 8006238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800623c:	4618      	mov	r0, r3
 800623e:	bd80      	pop	{r7, pc}
 8006240:	40023800 	.word	0x40023800
 8006244:	08012ec4 	.word	0x08012ec4

08006248 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	220f      	movs	r2, #15
 8006256:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006258:	4b12      	ldr	r3, [pc, #72]	; (80062a4 <HAL_RCC_GetClockConfig+0x5c>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f003 0203 	and.w	r2, r3, #3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006264:	4b0f      	ldr	r3, [pc, #60]	; (80062a4 <HAL_RCC_GetClockConfig+0x5c>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006270:	4b0c      	ldr	r3, [pc, #48]	; (80062a4 <HAL_RCC_GetClockConfig+0x5c>)
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800627c:	4b09      	ldr	r3, [pc, #36]	; (80062a4 <HAL_RCC_GetClockConfig+0x5c>)
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	08db      	lsrs	r3, r3, #3
 8006282:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800628a:	4b07      	ldr	r3, [pc, #28]	; (80062a8 <HAL_RCC_GetClockConfig+0x60>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0207 	and.w	r2, r3, #7
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	601a      	str	r2, [r3, #0]
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	40023800 	.word	0x40023800
 80062a8:	40023c00 	.word	0x40023c00

080062ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e07b      	b.n	80063b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d108      	bne.n	80062d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ce:	d009      	beq.n	80062e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	61da      	str	r2, [r3, #28]
 80062d6:	e005      	b.n	80062e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d106      	bne.n	8006304 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fc f850 	bl	80023a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800631a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	431a      	orrs	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	431a      	orrs	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006368:	ea42 0103 	orr.w	r1, r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006370:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	0c1b      	lsrs	r3, r3, #16
 8006382:	f003 0104 	and.w	r1, r3, #4
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	f003 0210 	and.w	r2, r3, #16
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	69da      	ldr	r2, [r3, #28]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b088      	sub	sp, #32
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	60f8      	str	r0, [r7, #12]
 80063c6:	60b9      	str	r1, [r7, #8]
 80063c8:	603b      	str	r3, [r7, #0]
 80063ca:	4613      	mov	r3, r2
 80063cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d101      	bne.n	80063e0 <HAL_SPI_Transmit+0x22>
 80063dc:	2302      	movs	r3, #2
 80063de:	e126      	b.n	800662e <HAL_SPI_Transmit+0x270>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063e8:	f7fc fa34 	bl	8002854 <HAL_GetTick>
 80063ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063ee:	88fb      	ldrh	r3, [r7, #6]
 80063f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d002      	beq.n	8006404 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063fe:	2302      	movs	r3, #2
 8006400:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006402:	e10b      	b.n	800661c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <HAL_SPI_Transmit+0x52>
 800640a:	88fb      	ldrh	r3, [r7, #6]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d102      	bne.n	8006416 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006414:	e102      	b.n	800661c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2203      	movs	r2, #3
 800641a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	88fa      	ldrh	r2, [r7, #6]
 800642e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	88fa      	ldrh	r2, [r7, #6]
 8006434:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800645c:	d10f      	bne.n	800647e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800646c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800647c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006488:	2b40      	cmp	r3, #64	; 0x40
 800648a:	d007      	beq.n	800649c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800649a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064a4:	d14b      	bne.n	800653e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <HAL_SPI_Transmit+0xf6>
 80064ae:	8afb      	ldrh	r3, [r7, #22]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d13e      	bne.n	8006532 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b8:	881a      	ldrh	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c4:	1c9a      	adds	r2, r3, #2
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064d8:	e02b      	b.n	8006532 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f003 0302 	and.w	r3, r3, #2
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d112      	bne.n	800650e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ec:	881a      	ldrh	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f8:	1c9a      	adds	r2, r3, #2
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006502:	b29b      	uxth	r3, r3
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	86da      	strh	r2, [r3, #54]	; 0x36
 800650c:	e011      	b.n	8006532 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800650e:	f7fc f9a1 	bl	8002854 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d803      	bhi.n	8006526 <HAL_SPI_Transmit+0x168>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006524:	d102      	bne.n	800652c <HAL_SPI_Transmit+0x16e>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d102      	bne.n	8006532 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006530:	e074      	b.n	800661c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006536:	b29b      	uxth	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1ce      	bne.n	80064da <HAL_SPI_Transmit+0x11c>
 800653c:	e04c      	b.n	80065d8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <HAL_SPI_Transmit+0x18e>
 8006546:	8afb      	ldrh	r3, [r7, #22]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d140      	bne.n	80065ce <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	330c      	adds	r3, #12
 8006556:	7812      	ldrb	r2, [r2, #0]
 8006558:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006568:	b29b      	uxth	r3, r3
 800656a:	3b01      	subs	r3, #1
 800656c:	b29a      	uxth	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006572:	e02c      	b.n	80065ce <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b02      	cmp	r3, #2
 8006580:	d113      	bne.n	80065aa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	330c      	adds	r3, #12
 800658c:	7812      	ldrb	r2, [r2, #0]
 800658e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800659e:	b29b      	uxth	r3, r3
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80065a8:	e011      	b.n	80065ce <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065aa:	f7fc f953 	bl	8002854 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	683a      	ldr	r2, [r7, #0]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d803      	bhi.n	80065c2 <HAL_SPI_Transmit+0x204>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c0:	d102      	bne.n	80065c8 <HAL_SPI_Transmit+0x20a>
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d102      	bne.n	80065ce <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065cc:	e026      	b.n	800661c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1cd      	bne.n	8006574 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	6839      	ldr	r1, [r7, #0]
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 fa55 	bl	8006a8c <SPI_EndRxTxTransaction>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d002      	beq.n	80065ee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2220      	movs	r2, #32
 80065ec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10a      	bne.n	800660c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065f6:	2300      	movs	r3, #0
 80065f8:	613b      	str	r3, [r7, #16]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	613b      	str	r3, [r7, #16]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	613b      	str	r3, [r7, #16]
 800660a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006610:	2b00      	cmp	r3, #0
 8006612:	d002      	beq.n	800661a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	77fb      	strb	r3, [r7, #31]
 8006618:	e000      	b.n	800661c <HAL_SPI_Transmit+0x25e>
  }

error:
 800661a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800662c:	7ffb      	ldrb	r3, [r7, #31]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3720      	adds	r7, #32
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b08c      	sub	sp, #48	; 0x30
 800663a:	af00      	add	r7, sp, #0
 800663c:	60f8      	str	r0, [r7, #12]
 800663e:	60b9      	str	r1, [r7, #8]
 8006640:	607a      	str	r2, [r7, #4]
 8006642:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006644:	2301      	movs	r3, #1
 8006646:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006648:	2300      	movs	r3, #0
 800664a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006654:	2b01      	cmp	r3, #1
 8006656:	d101      	bne.n	800665c <HAL_SPI_TransmitReceive+0x26>
 8006658:	2302      	movs	r3, #2
 800665a:	e18a      	b.n	8006972 <HAL_SPI_TransmitReceive+0x33c>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006664:	f7fc f8f6 	bl	8002854 <HAL_GetTick>
 8006668:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006670:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800667a:	887b      	ldrh	r3, [r7, #2]
 800667c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800667e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006682:	2b01      	cmp	r3, #1
 8006684:	d00f      	beq.n	80066a6 <HAL_SPI_TransmitReceive+0x70>
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800668c:	d107      	bne.n	800669e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d103      	bne.n	800669e <HAL_SPI_TransmitReceive+0x68>
 8006696:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800669a:	2b04      	cmp	r3, #4
 800669c:	d003      	beq.n	80066a6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800669e:	2302      	movs	r3, #2
 80066a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80066a4:	e15b      	b.n	800695e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d005      	beq.n	80066b8 <HAL_SPI_TransmitReceive+0x82>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <HAL_SPI_TransmitReceive+0x82>
 80066b2:	887b      	ldrh	r3, [r7, #2]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d103      	bne.n	80066c0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80066be:	e14e      	b.n	800695e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b04      	cmp	r3, #4
 80066ca:	d003      	beq.n	80066d4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2205      	movs	r2, #5
 80066d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	887a      	ldrh	r2, [r7, #2]
 80066e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	887a      	ldrh	r2, [r7, #2]
 80066ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	887a      	ldrh	r2, [r7, #2]
 80066f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	887a      	ldrh	r2, [r7, #2]
 80066fc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006714:	2b40      	cmp	r3, #64	; 0x40
 8006716:	d007      	beq.n	8006728 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006726:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006730:	d178      	bne.n	8006824 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d002      	beq.n	8006740 <HAL_SPI_TransmitReceive+0x10a>
 800673a:	8b7b      	ldrh	r3, [r7, #26]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d166      	bne.n	800680e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006744:	881a      	ldrh	r2, [r3, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006750:	1c9a      	adds	r2, r3, #2
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800675a:	b29b      	uxth	r3, r3
 800675c:	3b01      	subs	r3, #1
 800675e:	b29a      	uxth	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006764:	e053      	b.n	800680e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f003 0302 	and.w	r3, r3, #2
 8006770:	2b02      	cmp	r3, #2
 8006772:	d11b      	bne.n	80067ac <HAL_SPI_TransmitReceive+0x176>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006778:	b29b      	uxth	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d016      	beq.n	80067ac <HAL_SPI_TransmitReceive+0x176>
 800677e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006780:	2b01      	cmp	r3, #1
 8006782:	d113      	bne.n	80067ac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006788:	881a      	ldrh	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006794:	1c9a      	adds	r2, r3, #2
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800679e:	b29b      	uxth	r3, r3
 80067a0:	3b01      	subs	r3, #1
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d119      	bne.n	80067ee <HAL_SPI_TransmitReceive+0x1b8>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067be:	b29b      	uxth	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d014      	beq.n	80067ee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ce:	b292      	uxth	r2, r2
 80067d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d6:	1c9a      	adds	r2, r3, #2
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067ea:	2301      	movs	r3, #1
 80067ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80067ee:	f7fc f831 	bl	8002854 <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d807      	bhi.n	800680e <HAL_SPI_TransmitReceive+0x1d8>
 80067fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006804:	d003      	beq.n	800680e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800680c:	e0a7      	b.n	800695e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006812:	b29b      	uxth	r3, r3
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1a6      	bne.n	8006766 <HAL_SPI_TransmitReceive+0x130>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800681c:	b29b      	uxth	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1a1      	bne.n	8006766 <HAL_SPI_TransmitReceive+0x130>
 8006822:	e07c      	b.n	800691e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <HAL_SPI_TransmitReceive+0x1fc>
 800682c:	8b7b      	ldrh	r3, [r7, #26]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d16b      	bne.n	800690a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	330c      	adds	r3, #12
 800683c:	7812      	ldrb	r2, [r2, #0]
 800683e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006844:	1c5a      	adds	r2, r3, #1
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800684e:	b29b      	uxth	r3, r3
 8006850:	3b01      	subs	r3, #1
 8006852:	b29a      	uxth	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006858:	e057      	b.n	800690a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b02      	cmp	r3, #2
 8006866:	d11c      	bne.n	80068a2 <HAL_SPI_TransmitReceive+0x26c>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800686c:	b29b      	uxth	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d017      	beq.n	80068a2 <HAL_SPI_TransmitReceive+0x26c>
 8006872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006874:	2b01      	cmp	r3, #1
 8006876:	d114      	bne.n	80068a2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	330c      	adds	r3, #12
 8006882:	7812      	ldrb	r2, [r2, #0]
 8006884:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006894:	b29b      	uxth	r3, r3
 8006896:	3b01      	subs	r3, #1
 8006898:	b29a      	uxth	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800689e:	2300      	movs	r3, #0
 80068a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d119      	bne.n	80068e4 <HAL_SPI_TransmitReceive+0x2ae>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d014      	beq.n	80068e4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68da      	ldr	r2, [r3, #12]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c4:	b2d2      	uxtb	r2, r2
 80068c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068e0:	2301      	movs	r3, #1
 80068e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80068e4:	f7fb ffb6 	bl	8002854 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d803      	bhi.n	80068fc <HAL_SPI_TransmitReceive+0x2c6>
 80068f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fa:	d102      	bne.n	8006902 <HAL_SPI_TransmitReceive+0x2cc>
 80068fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d103      	bne.n	800690a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006908:	e029      	b.n	800695e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800690e:	b29b      	uxth	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1a2      	bne.n	800685a <HAL_SPI_TransmitReceive+0x224>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006918:	b29b      	uxth	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d19d      	bne.n	800685a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800691e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006920:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 f8b2 	bl	8006a8c <SPI_EndRxTxTransaction>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d006      	beq.n	800693c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2220      	movs	r2, #32
 8006938:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800693a:	e010      	b.n	800695e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10b      	bne.n	800695c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006944:	2300      	movs	r3, #0
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	e000      	b.n	800695e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800695c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800696e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006972:	4618      	mov	r0, r3
 8006974:	3730      	adds	r7, #48	; 0x30
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
	...

0800697c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b088      	sub	sp, #32
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	603b      	str	r3, [r7, #0]
 8006988:	4613      	mov	r3, r2
 800698a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800698c:	f7fb ff62 	bl	8002854 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006994:	1a9b      	subs	r3, r3, r2
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	4413      	add	r3, r2
 800699a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800699c:	f7fb ff5a 	bl	8002854 <HAL_GetTick>
 80069a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069a2:	4b39      	ldr	r3, [pc, #228]	; (8006a88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	015b      	lsls	r3, r3, #5
 80069a8:	0d1b      	lsrs	r3, r3, #20
 80069aa:	69fa      	ldr	r2, [r7, #28]
 80069ac:	fb02 f303 	mul.w	r3, r2, r3
 80069b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069b2:	e054      	b.n	8006a5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ba:	d050      	beq.n	8006a5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069bc:	f7fb ff4a 	bl	8002854 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	69fa      	ldr	r2, [r7, #28]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d902      	bls.n	80069d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d13d      	bne.n	8006a4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069ea:	d111      	bne.n	8006a10 <SPI_WaitFlagStateUntilTimeout+0x94>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069f4:	d004      	beq.n	8006a00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069fe:	d107      	bne.n	8006a10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a18:	d10f      	bne.n	8006a3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e017      	b.n	8006a7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a54:	2300      	movs	r3, #0
 8006a56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	689a      	ldr	r2, [r3, #8]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	4013      	ands	r3, r2
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	bf0c      	ite	eq
 8006a6e:	2301      	moveq	r3, #1
 8006a70:	2300      	movne	r3, #0
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	461a      	mov	r2, r3
 8006a76:	79fb      	ldrb	r3, [r7, #7]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d19b      	bne.n	80069b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3720      	adds	r7, #32
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20000004 	.word	0x20000004

08006a8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b088      	sub	sp, #32
 8006a90:	af02      	add	r7, sp, #8
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a98:	4b1b      	ldr	r3, [pc, #108]	; (8006b08 <SPI_EndRxTxTransaction+0x7c>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a1b      	ldr	r2, [pc, #108]	; (8006b0c <SPI_EndRxTxTransaction+0x80>)
 8006a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa2:	0d5b      	lsrs	r3, r3, #21
 8006aa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006aa8:	fb02 f303 	mul.w	r3, r2, r3
 8006aac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ab6:	d112      	bne.n	8006ade <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2180      	movs	r1, #128	; 0x80
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f7ff ff5a 	bl	800697c <SPI_WaitFlagStateUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d016      	beq.n	8006afc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad2:	f043 0220 	orr.w	r2, r3, #32
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e00f      	b.n	8006afe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00a      	beq.n	8006afa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af4:	2b80      	cmp	r3, #128	; 0x80
 8006af6:	d0f2      	beq.n	8006ade <SPI_EndRxTxTransaction+0x52>
 8006af8:	e000      	b.n	8006afc <SPI_EndRxTxTransaction+0x70>
        break;
 8006afa:	bf00      	nop
  }

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3718      	adds	r7, #24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20000004 	.word	0x20000004
 8006b0c:	165e9f81 	.word	0x165e9f81

08006b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e041      	b.n	8006ba6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d106      	bne.n	8006b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7fb fc7c 	bl	8002434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	3304      	adds	r3, #4
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4610      	mov	r0, r2
 8006b50:	f000 fa88 	bl	8007064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d001      	beq.n	8006bc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e044      	b.n	8006c52 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f042 0201 	orr.w	r2, r2, #1
 8006bde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a1e      	ldr	r2, [pc, #120]	; (8006c60 <HAL_TIM_Base_Start_IT+0xb0>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d018      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x6c>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf2:	d013      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x6c>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a1a      	ldr	r2, [pc, #104]	; (8006c64 <HAL_TIM_Base_Start_IT+0xb4>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00e      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x6c>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a19      	ldr	r2, [pc, #100]	; (8006c68 <HAL_TIM_Base_Start_IT+0xb8>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d009      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x6c>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a17      	ldr	r2, [pc, #92]	; (8006c6c <HAL_TIM_Base_Start_IT+0xbc>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d004      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x6c>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a16      	ldr	r2, [pc, #88]	; (8006c70 <HAL_TIM_Base_Start_IT+0xc0>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d111      	bne.n	8006c40 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f003 0307 	and.w	r3, r3, #7
 8006c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2b06      	cmp	r3, #6
 8006c2c:	d010      	beq.n	8006c50 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f042 0201 	orr.w	r2, r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c3e:	e007      	b.n	8006c50 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0201 	orr.w	r2, r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40010000 	.word	0x40010000
 8006c64:	40000400 	.word	0x40000400
 8006c68:	40000800 	.word	0x40000800
 8006c6c:	40000c00 	.word	0x40000c00
 8006c70:	40014000 	.word	0x40014000

08006c74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d122      	bne.n	8006cd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f003 0302 	and.w	r3, r3, #2
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d11b      	bne.n	8006cd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f06f 0202 	mvn.w	r2, #2
 8006ca0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	f003 0303 	and.w	r3, r3, #3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f9b5 	bl	8007026 <HAL_TIM_IC_CaptureCallback>
 8006cbc:	e005      	b.n	8006cca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f9a7 	bl	8007012 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f9b8 	bl	800703a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	f003 0304 	and.w	r3, r3, #4
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	d122      	bne.n	8006d24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f003 0304 	and.w	r3, r3, #4
 8006ce8:	2b04      	cmp	r3, #4
 8006cea:	d11b      	bne.n	8006d24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f06f 0204 	mvn.w	r2, #4
 8006cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f98b 	bl	8007026 <HAL_TIM_IC_CaptureCallback>
 8006d10:	e005      	b.n	8006d1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f97d 	bl	8007012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f98e 	bl	800703a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	f003 0308 	and.w	r3, r3, #8
 8006d2e:	2b08      	cmp	r3, #8
 8006d30:	d122      	bne.n	8006d78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f003 0308 	and.w	r3, r3, #8
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	d11b      	bne.n	8006d78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f06f 0208 	mvn.w	r2, #8
 8006d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2204      	movs	r2, #4
 8006d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	f003 0303 	and.w	r3, r3, #3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f961 	bl	8007026 <HAL_TIM_IC_CaptureCallback>
 8006d64:	e005      	b.n	8006d72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f953 	bl	8007012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f964 	bl	800703a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	f003 0310 	and.w	r3, r3, #16
 8006d82:	2b10      	cmp	r3, #16
 8006d84:	d122      	bne.n	8006dcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f003 0310 	and.w	r3, r3, #16
 8006d90:	2b10      	cmp	r3, #16
 8006d92:	d11b      	bne.n	8006dcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f06f 0210 	mvn.w	r2, #16
 8006d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2208      	movs	r2, #8
 8006da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f937 	bl	8007026 <HAL_TIM_IC_CaptureCallback>
 8006db8:	e005      	b.n	8006dc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f929 	bl	8007012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f93a 	bl	800703a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d10e      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d107      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f06f 0201 	mvn.w	r2, #1
 8006df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7fb fa06 	bl	8002204 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e02:	2b80      	cmp	r3, #128	; 0x80
 8006e04:	d10e      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e10:	2b80      	cmp	r3, #128	; 0x80
 8006e12:	d107      	bne.n	8006e24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fab2 	bl	8007388 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2e:	2b40      	cmp	r3, #64	; 0x40
 8006e30:	d10e      	bne.n	8006e50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3c:	2b40      	cmp	r3, #64	; 0x40
 8006e3e:	d107      	bne.n	8006e50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f8ff 	bl	800704e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	f003 0320 	and.w	r3, r3, #32
 8006e5a:	2b20      	cmp	r3, #32
 8006e5c:	d10e      	bne.n	8006e7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	f003 0320 	and.w	r3, r3, #32
 8006e68:	2b20      	cmp	r3, #32
 8006e6a:	d107      	bne.n	8006e7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f06f 0220 	mvn.w	r2, #32
 8006e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fa7c 	bl	8007374 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e7c:	bf00      	nop
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d101      	bne.n	8006ea0 <HAL_TIM_ConfigClockSource+0x1c>
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	e0b4      	b.n	800700a <HAL_TIM_ConfigClockSource+0x186>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ec6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ed8:	d03e      	beq.n	8006f58 <HAL_TIM_ConfigClockSource+0xd4>
 8006eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ede:	f200 8087 	bhi.w	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ee6:	f000 8086 	beq.w	8006ff6 <HAL_TIM_ConfigClockSource+0x172>
 8006eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eee:	d87f      	bhi.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ef0:	2b70      	cmp	r3, #112	; 0x70
 8006ef2:	d01a      	beq.n	8006f2a <HAL_TIM_ConfigClockSource+0xa6>
 8006ef4:	2b70      	cmp	r3, #112	; 0x70
 8006ef6:	d87b      	bhi.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ef8:	2b60      	cmp	r3, #96	; 0x60
 8006efa:	d050      	beq.n	8006f9e <HAL_TIM_ConfigClockSource+0x11a>
 8006efc:	2b60      	cmp	r3, #96	; 0x60
 8006efe:	d877      	bhi.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006f00:	2b50      	cmp	r3, #80	; 0x50
 8006f02:	d03c      	beq.n	8006f7e <HAL_TIM_ConfigClockSource+0xfa>
 8006f04:	2b50      	cmp	r3, #80	; 0x50
 8006f06:	d873      	bhi.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006f08:	2b40      	cmp	r3, #64	; 0x40
 8006f0a:	d058      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x13a>
 8006f0c:	2b40      	cmp	r3, #64	; 0x40
 8006f0e:	d86f      	bhi.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006f10:	2b30      	cmp	r3, #48	; 0x30
 8006f12:	d064      	beq.n	8006fde <HAL_TIM_ConfigClockSource+0x15a>
 8006f14:	2b30      	cmp	r3, #48	; 0x30
 8006f16:	d86b      	bhi.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006f18:	2b20      	cmp	r3, #32
 8006f1a:	d060      	beq.n	8006fde <HAL_TIM_ConfigClockSource+0x15a>
 8006f1c:	2b20      	cmp	r3, #32
 8006f1e:	d867      	bhi.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d05c      	beq.n	8006fde <HAL_TIM_ConfigClockSource+0x15a>
 8006f24:	2b10      	cmp	r3, #16
 8006f26:	d05a      	beq.n	8006fde <HAL_TIM_ConfigClockSource+0x15a>
 8006f28:	e062      	b.n	8006ff0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6818      	ldr	r0, [r3, #0]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	6899      	ldr	r1, [r3, #8]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	f000 f98d 	bl	8007258 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	609a      	str	r2, [r3, #8]
      break;
 8006f56:	e04f      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6818      	ldr	r0, [r3, #0]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	6899      	ldr	r1, [r3, #8]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	f000 f976 	bl	8007258 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	689a      	ldr	r2, [r3, #8]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f7a:	609a      	str	r2, [r3, #8]
      break;
 8006f7c:	e03c      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	6859      	ldr	r1, [r3, #4]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	f000 f8ea 	bl	8007164 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2150      	movs	r1, #80	; 0x50
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 f943 	bl	8007222 <TIM_ITRx_SetConfig>
      break;
 8006f9c:	e02c      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6818      	ldr	r0, [r3, #0]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	6859      	ldr	r1, [r3, #4]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	461a      	mov	r2, r3
 8006fac:	f000 f909 	bl	80071c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2160      	movs	r1, #96	; 0x60
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 f933 	bl	8007222 <TIM_ITRx_SetConfig>
      break;
 8006fbc:	e01c      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6818      	ldr	r0, [r3, #0]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	6859      	ldr	r1, [r3, #4]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	f000 f8ca 	bl	8007164 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2140      	movs	r1, #64	; 0x40
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 f923 	bl	8007222 <TIM_ITRx_SetConfig>
      break;
 8006fdc:	e00c      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	4610      	mov	r0, r2
 8006fea:	f000 f91a 	bl	8007222 <TIM_ITRx_SetConfig>
      break;
 8006fee:	e003      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff4:	e000      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ff6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007008:	7bfb      	ldrb	r3, [r7, #15]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007012:	b480      	push	{r7}
 8007014:	b083      	sub	sp, #12
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800701a:	bf00      	nop
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007026:	b480      	push	{r7}
 8007028:	b083      	sub	sp, #12
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800702e:	bf00      	nop
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800703a:	b480      	push	{r7}
 800703c:	b083      	sub	sp, #12
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007042:	bf00      	nop
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800704e:	b480      	push	{r7}
 8007050:	b083      	sub	sp, #12
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007056:	bf00      	nop
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
	...

08007064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a34      	ldr	r2, [pc, #208]	; (8007148 <TIM_Base_SetConfig+0xe4>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d00f      	beq.n	800709c <TIM_Base_SetConfig+0x38>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007082:	d00b      	beq.n	800709c <TIM_Base_SetConfig+0x38>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a31      	ldr	r2, [pc, #196]	; (800714c <TIM_Base_SetConfig+0xe8>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d007      	beq.n	800709c <TIM_Base_SetConfig+0x38>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a30      	ldr	r2, [pc, #192]	; (8007150 <TIM_Base_SetConfig+0xec>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d003      	beq.n	800709c <TIM_Base_SetConfig+0x38>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a2f      	ldr	r2, [pc, #188]	; (8007154 <TIM_Base_SetConfig+0xf0>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d108      	bne.n	80070ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a25      	ldr	r2, [pc, #148]	; (8007148 <TIM_Base_SetConfig+0xe4>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d01b      	beq.n	80070ee <TIM_Base_SetConfig+0x8a>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070bc:	d017      	beq.n	80070ee <TIM_Base_SetConfig+0x8a>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a22      	ldr	r2, [pc, #136]	; (800714c <TIM_Base_SetConfig+0xe8>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d013      	beq.n	80070ee <TIM_Base_SetConfig+0x8a>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a21      	ldr	r2, [pc, #132]	; (8007150 <TIM_Base_SetConfig+0xec>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d00f      	beq.n	80070ee <TIM_Base_SetConfig+0x8a>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a20      	ldr	r2, [pc, #128]	; (8007154 <TIM_Base_SetConfig+0xf0>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d00b      	beq.n	80070ee <TIM_Base_SetConfig+0x8a>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a1f      	ldr	r2, [pc, #124]	; (8007158 <TIM_Base_SetConfig+0xf4>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d007      	beq.n	80070ee <TIM_Base_SetConfig+0x8a>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a1e      	ldr	r2, [pc, #120]	; (800715c <TIM_Base_SetConfig+0xf8>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d003      	beq.n	80070ee <TIM_Base_SetConfig+0x8a>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a1d      	ldr	r2, [pc, #116]	; (8007160 <TIM_Base_SetConfig+0xfc>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d108      	bne.n	8007100 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	4313      	orrs	r3, r2
 800710c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a08      	ldr	r2, [pc, #32]	; (8007148 <TIM_Base_SetConfig+0xe4>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d103      	bne.n	8007134 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	691a      	ldr	r2, [r3, #16]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	615a      	str	r2, [r3, #20]
}
 800713a:	bf00      	nop
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	40010000 	.word	0x40010000
 800714c:	40000400 	.word	0x40000400
 8007150:	40000800 	.word	0x40000800
 8007154:	40000c00 	.word	0x40000c00
 8007158:	40014000 	.word	0x40014000
 800715c:	40014400 	.word	0x40014400
 8007160:	40014800 	.word	0x40014800

08007164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007164:	b480      	push	{r7}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	f023 0201 	bic.w	r2, r3, #1
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800718e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	011b      	lsls	r3, r3, #4
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	4313      	orrs	r3, r2
 8007198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f023 030a 	bic.w	r3, r3, #10
 80071a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	621a      	str	r2, [r3, #32]
}
 80071b6:	bf00      	nop
 80071b8:	371c      	adds	r7, #28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b087      	sub	sp, #28
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	60f8      	str	r0, [r7, #12]
 80071ca:	60b9      	str	r1, [r7, #8]
 80071cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	f023 0210 	bic.w	r2, r3, #16
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	031b      	lsls	r3, r3, #12
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	011b      	lsls	r3, r3, #4
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	4313      	orrs	r3, r2
 8007208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	621a      	str	r2, [r3, #32]
}
 8007216:	bf00      	nop
 8007218:	371c      	adds	r7, #28
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007222:	b480      	push	{r7}
 8007224:	b085      	sub	sp, #20
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4313      	orrs	r3, r2
 8007240:	f043 0307 	orr.w	r3, r3, #7
 8007244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	609a      	str	r2, [r3, #8]
}
 800724c:	bf00      	nop
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	021a      	lsls	r2, r3, #8
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	431a      	orrs	r2, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	4313      	orrs	r3, r2
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	609a      	str	r2, [r3, #8]
}
 800728c:	bf00      	nop
 800728e:	371c      	adds	r7, #28
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d101      	bne.n	80072b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072ac:	2302      	movs	r3, #2
 80072ae:	e050      	b.n	8007352 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2202      	movs	r2, #2
 80072bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	4313      	orrs	r3, r2
 80072e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a1c      	ldr	r2, [pc, #112]	; (8007360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d018      	beq.n	8007326 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072fc:	d013      	beq.n	8007326 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a18      	ldr	r2, [pc, #96]	; (8007364 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d00e      	beq.n	8007326 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a16      	ldr	r2, [pc, #88]	; (8007368 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d009      	beq.n	8007326 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a15      	ldr	r2, [pc, #84]	; (800736c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d004      	beq.n	8007326 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a13      	ldr	r2, [pc, #76]	; (8007370 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d10c      	bne.n	8007340 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800732c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	4313      	orrs	r3, r2
 8007336:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	40010000 	.word	0x40010000
 8007364:	40000400 	.word	0x40000400
 8007368:	40000800 	.word	0x40000800
 800736c:	40000c00 	.word	0x40000c00
 8007370:	40014000 	.word	0x40014000

08007374 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e03f      	b.n	800742e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d106      	bne.n	80073c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7fb f86c 	bl	80024a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2224      	movs	r2, #36	; 0x24
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f929 	bl	8007638 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	691a      	ldr	r2, [r3, #16]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	695a      	ldr	r2, [r3, #20]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007404:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68da      	ldr	r2, [r3, #12]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007414:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2220      	movs	r2, #32
 8007420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2220      	movs	r2, #32
 8007428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3708      	adds	r7, #8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b08a      	sub	sp, #40	; 0x28
 800743a:	af02      	add	r7, sp, #8
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	603b      	str	r3, [r7, #0]
 8007442:	4613      	mov	r3, r2
 8007444:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b20      	cmp	r3, #32
 8007454:	d17c      	bne.n	8007550 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <HAL_UART_Transmit+0x2c>
 800745c:	88fb      	ldrh	r3, [r7, #6]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e075      	b.n	8007552 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <HAL_UART_Transmit+0x3e>
 8007470:	2302      	movs	r3, #2
 8007472:	e06e      	b.n	8007552 <HAL_UART_Transmit+0x11c>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2221      	movs	r2, #33	; 0x21
 8007486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800748a:	f7fb f9e3 	bl	8002854 <HAL_GetTick>
 800748e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	88fa      	ldrh	r2, [r7, #6]
 8007494:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	88fa      	ldrh	r2, [r7, #6]
 800749a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a4:	d108      	bne.n	80074b8 <HAL_UART_Transmit+0x82>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d104      	bne.n	80074b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80074ae:	2300      	movs	r3, #0
 80074b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	61bb      	str	r3, [r7, #24]
 80074b6:	e003      	b.n	80074c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074bc:	2300      	movs	r3, #0
 80074be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80074c8:	e02a      	b.n	8007520 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2200      	movs	r2, #0
 80074d2:	2180      	movs	r1, #128	; 0x80
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 f840 	bl	800755a <UART_WaitOnFlagUntilTimeout>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d001      	beq.n	80074e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e036      	b.n	8007552 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10b      	bne.n	8007502 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	3302      	adds	r3, #2
 80074fe:	61bb      	str	r3, [r7, #24]
 8007500:	e007      	b.n	8007512 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	781a      	ldrb	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	3301      	adds	r3, #1
 8007510:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007516:	b29b      	uxth	r3, r3
 8007518:	3b01      	subs	r3, #1
 800751a:	b29a      	uxth	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007524:	b29b      	uxth	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1cf      	bne.n	80074ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2200      	movs	r2, #0
 8007532:	2140      	movs	r1, #64	; 0x40
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f000 f810 	bl	800755a <UART_WaitOnFlagUntilTimeout>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e006      	b.n	8007552 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2220      	movs	r2, #32
 8007548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800754c:	2300      	movs	r3, #0
 800754e:	e000      	b.n	8007552 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007550:	2302      	movs	r3, #2
  }
}
 8007552:	4618      	mov	r0, r3
 8007554:	3720      	adds	r7, #32
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b090      	sub	sp, #64	; 0x40
 800755e:	af00      	add	r7, sp, #0
 8007560:	60f8      	str	r0, [r7, #12]
 8007562:	60b9      	str	r1, [r7, #8]
 8007564:	603b      	str	r3, [r7, #0]
 8007566:	4613      	mov	r3, r2
 8007568:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800756a:	e050      	b.n	800760e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800756c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800756e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007572:	d04c      	beq.n	800760e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007576:	2b00      	cmp	r3, #0
 8007578:	d007      	beq.n	800758a <UART_WaitOnFlagUntilTimeout+0x30>
 800757a:	f7fb f96b 	bl	8002854 <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007586:	429a      	cmp	r2, r3
 8007588:	d241      	bcs.n	800760e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	330c      	adds	r3, #12
 8007590:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007594:	e853 3f00 	ldrex	r3, [r3]
 8007598:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	330c      	adds	r3, #12
 80075a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80075aa:	637a      	str	r2, [r7, #52]	; 0x34
 80075ac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075b2:	e841 2300 	strex	r3, r2, [r1]
 80075b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80075b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1e5      	bne.n	800758a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3314      	adds	r3, #20
 80075c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	e853 3f00 	ldrex	r3, [r3]
 80075cc:	613b      	str	r3, [r7, #16]
   return(result);
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	f023 0301 	bic.w	r3, r3, #1
 80075d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3314      	adds	r3, #20
 80075dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075de:	623a      	str	r2, [r7, #32]
 80075e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e2:	69f9      	ldr	r1, [r7, #28]
 80075e4:	6a3a      	ldr	r2, [r7, #32]
 80075e6:	e841 2300 	strex	r3, r2, [r1]
 80075ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1e5      	bne.n	80075be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2220      	movs	r2, #32
 80075f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2220      	movs	r2, #32
 80075fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e00f      	b.n	800762e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	4013      	ands	r3, r2
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	429a      	cmp	r2, r3
 800761c:	bf0c      	ite	eq
 800761e:	2301      	moveq	r3, #1
 8007620:	2300      	movne	r3, #0
 8007622:	b2db      	uxtb	r3, r3
 8007624:	461a      	mov	r2, r3
 8007626:	79fb      	ldrb	r3, [r7, #7]
 8007628:	429a      	cmp	r2, r3
 800762a:	d09f      	beq.n	800756c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3740      	adds	r7, #64	; 0x40
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
	...

08007638 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800763c:	b0c0      	sub	sp, #256	; 0x100
 800763e:	af00      	add	r7, sp, #0
 8007640:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007654:	68d9      	ldr	r1, [r3, #12]
 8007656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	ea40 0301 	orr.w	r3, r0, r1
 8007660:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007666:	689a      	ldr	r2, [r3, #8]
 8007668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	431a      	orrs	r2, r3
 8007670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	431a      	orrs	r2, r3
 8007678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	4313      	orrs	r3, r2
 8007680:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007690:	f021 010c 	bic.w	r1, r1, #12
 8007694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800769e:	430b      	orrs	r3, r1
 80076a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80076ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b2:	6999      	ldr	r1, [r3, #24]
 80076b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	ea40 0301 	orr.w	r3, r0, r1
 80076be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80076c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	4b8f      	ldr	r3, [pc, #572]	; (8007904 <UART_SetConfig+0x2cc>)
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d005      	beq.n	80076d8 <UART_SetConfig+0xa0>
 80076cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	4b8d      	ldr	r3, [pc, #564]	; (8007908 <UART_SetConfig+0x2d0>)
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d104      	bne.n	80076e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80076d8:	f7fe fda2 	bl	8006220 <HAL_RCC_GetPCLK2Freq>
 80076dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80076e0:	e003      	b.n	80076ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076e2:	f7fe fd89 	bl	80061f8 <HAL_RCC_GetPCLK1Freq>
 80076e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ee:	69db      	ldr	r3, [r3, #28]
 80076f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076f4:	f040 810c 	bne.w	8007910 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076fc:	2200      	movs	r2, #0
 80076fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007702:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007706:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800770a:	4622      	mov	r2, r4
 800770c:	462b      	mov	r3, r5
 800770e:	1891      	adds	r1, r2, r2
 8007710:	65b9      	str	r1, [r7, #88]	; 0x58
 8007712:	415b      	adcs	r3, r3
 8007714:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007716:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800771a:	4621      	mov	r1, r4
 800771c:	eb12 0801 	adds.w	r8, r2, r1
 8007720:	4629      	mov	r1, r5
 8007722:	eb43 0901 	adc.w	r9, r3, r1
 8007726:	f04f 0200 	mov.w	r2, #0
 800772a:	f04f 0300 	mov.w	r3, #0
 800772e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800773a:	4690      	mov	r8, r2
 800773c:	4699      	mov	r9, r3
 800773e:	4623      	mov	r3, r4
 8007740:	eb18 0303 	adds.w	r3, r8, r3
 8007744:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007748:	462b      	mov	r3, r5
 800774a:	eb49 0303 	adc.w	r3, r9, r3
 800774e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800775e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007762:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007766:	460b      	mov	r3, r1
 8007768:	18db      	adds	r3, r3, r3
 800776a:	653b      	str	r3, [r7, #80]	; 0x50
 800776c:	4613      	mov	r3, r2
 800776e:	eb42 0303 	adc.w	r3, r2, r3
 8007772:	657b      	str	r3, [r7, #84]	; 0x54
 8007774:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007778:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800777c:	f7f9 fa3c 	bl	8000bf8 <__aeabi_uldivmod>
 8007780:	4602      	mov	r2, r0
 8007782:	460b      	mov	r3, r1
 8007784:	4b61      	ldr	r3, [pc, #388]	; (800790c <UART_SetConfig+0x2d4>)
 8007786:	fba3 2302 	umull	r2, r3, r3, r2
 800778a:	095b      	lsrs	r3, r3, #5
 800778c:	011c      	lsls	r4, r3, #4
 800778e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007792:	2200      	movs	r2, #0
 8007794:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007798:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800779c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80077a0:	4642      	mov	r2, r8
 80077a2:	464b      	mov	r3, r9
 80077a4:	1891      	adds	r1, r2, r2
 80077a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80077a8:	415b      	adcs	r3, r3
 80077aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80077b0:	4641      	mov	r1, r8
 80077b2:	eb12 0a01 	adds.w	sl, r2, r1
 80077b6:	4649      	mov	r1, r9
 80077b8:	eb43 0b01 	adc.w	fp, r3, r1
 80077bc:	f04f 0200 	mov.w	r2, #0
 80077c0:	f04f 0300 	mov.w	r3, #0
 80077c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80077c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80077cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077d0:	4692      	mov	sl, r2
 80077d2:	469b      	mov	fp, r3
 80077d4:	4643      	mov	r3, r8
 80077d6:	eb1a 0303 	adds.w	r3, sl, r3
 80077da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077de:	464b      	mov	r3, r9
 80077e0:	eb4b 0303 	adc.w	r3, fp, r3
 80077e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80077e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80077f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80077fc:	460b      	mov	r3, r1
 80077fe:	18db      	adds	r3, r3, r3
 8007800:	643b      	str	r3, [r7, #64]	; 0x40
 8007802:	4613      	mov	r3, r2
 8007804:	eb42 0303 	adc.w	r3, r2, r3
 8007808:	647b      	str	r3, [r7, #68]	; 0x44
 800780a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800780e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007812:	f7f9 f9f1 	bl	8000bf8 <__aeabi_uldivmod>
 8007816:	4602      	mov	r2, r0
 8007818:	460b      	mov	r3, r1
 800781a:	4611      	mov	r1, r2
 800781c:	4b3b      	ldr	r3, [pc, #236]	; (800790c <UART_SetConfig+0x2d4>)
 800781e:	fba3 2301 	umull	r2, r3, r3, r1
 8007822:	095b      	lsrs	r3, r3, #5
 8007824:	2264      	movs	r2, #100	; 0x64
 8007826:	fb02 f303 	mul.w	r3, r2, r3
 800782a:	1acb      	subs	r3, r1, r3
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007832:	4b36      	ldr	r3, [pc, #216]	; (800790c <UART_SetConfig+0x2d4>)
 8007834:	fba3 2302 	umull	r2, r3, r3, r2
 8007838:	095b      	lsrs	r3, r3, #5
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007840:	441c      	add	r4, r3
 8007842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007846:	2200      	movs	r2, #0
 8007848:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800784c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007850:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007854:	4642      	mov	r2, r8
 8007856:	464b      	mov	r3, r9
 8007858:	1891      	adds	r1, r2, r2
 800785a:	63b9      	str	r1, [r7, #56]	; 0x38
 800785c:	415b      	adcs	r3, r3
 800785e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007860:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007864:	4641      	mov	r1, r8
 8007866:	1851      	adds	r1, r2, r1
 8007868:	6339      	str	r1, [r7, #48]	; 0x30
 800786a:	4649      	mov	r1, r9
 800786c:	414b      	adcs	r3, r1
 800786e:	637b      	str	r3, [r7, #52]	; 0x34
 8007870:	f04f 0200 	mov.w	r2, #0
 8007874:	f04f 0300 	mov.w	r3, #0
 8007878:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800787c:	4659      	mov	r1, fp
 800787e:	00cb      	lsls	r3, r1, #3
 8007880:	4651      	mov	r1, sl
 8007882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007886:	4651      	mov	r1, sl
 8007888:	00ca      	lsls	r2, r1, #3
 800788a:	4610      	mov	r0, r2
 800788c:	4619      	mov	r1, r3
 800788e:	4603      	mov	r3, r0
 8007890:	4642      	mov	r2, r8
 8007892:	189b      	adds	r3, r3, r2
 8007894:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007898:	464b      	mov	r3, r9
 800789a:	460a      	mov	r2, r1
 800789c:	eb42 0303 	adc.w	r3, r2, r3
 80078a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80078b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80078b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80078b8:	460b      	mov	r3, r1
 80078ba:	18db      	adds	r3, r3, r3
 80078bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80078be:	4613      	mov	r3, r2
 80078c0:	eb42 0303 	adc.w	r3, r2, r3
 80078c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80078ce:	f7f9 f993 	bl	8000bf8 <__aeabi_uldivmod>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	4b0d      	ldr	r3, [pc, #52]	; (800790c <UART_SetConfig+0x2d4>)
 80078d8:	fba3 1302 	umull	r1, r3, r3, r2
 80078dc:	095b      	lsrs	r3, r3, #5
 80078de:	2164      	movs	r1, #100	; 0x64
 80078e0:	fb01 f303 	mul.w	r3, r1, r3
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	3332      	adds	r3, #50	; 0x32
 80078ea:	4a08      	ldr	r2, [pc, #32]	; (800790c <UART_SetConfig+0x2d4>)
 80078ec:	fba2 2303 	umull	r2, r3, r2, r3
 80078f0:	095b      	lsrs	r3, r3, #5
 80078f2:	f003 0207 	and.w	r2, r3, #7
 80078f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4422      	add	r2, r4
 80078fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007900:	e105      	b.n	8007b0e <UART_SetConfig+0x4d6>
 8007902:	bf00      	nop
 8007904:	40011000 	.word	0x40011000
 8007908:	40011400 	.word	0x40011400
 800790c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007914:	2200      	movs	r2, #0
 8007916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800791a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800791e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007922:	4642      	mov	r2, r8
 8007924:	464b      	mov	r3, r9
 8007926:	1891      	adds	r1, r2, r2
 8007928:	6239      	str	r1, [r7, #32]
 800792a:	415b      	adcs	r3, r3
 800792c:	627b      	str	r3, [r7, #36]	; 0x24
 800792e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007932:	4641      	mov	r1, r8
 8007934:	1854      	adds	r4, r2, r1
 8007936:	4649      	mov	r1, r9
 8007938:	eb43 0501 	adc.w	r5, r3, r1
 800793c:	f04f 0200 	mov.w	r2, #0
 8007940:	f04f 0300 	mov.w	r3, #0
 8007944:	00eb      	lsls	r3, r5, #3
 8007946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800794a:	00e2      	lsls	r2, r4, #3
 800794c:	4614      	mov	r4, r2
 800794e:	461d      	mov	r5, r3
 8007950:	4643      	mov	r3, r8
 8007952:	18e3      	adds	r3, r4, r3
 8007954:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007958:	464b      	mov	r3, r9
 800795a:	eb45 0303 	adc.w	r3, r5, r3
 800795e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800796e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007972:	f04f 0200 	mov.w	r2, #0
 8007976:	f04f 0300 	mov.w	r3, #0
 800797a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800797e:	4629      	mov	r1, r5
 8007980:	008b      	lsls	r3, r1, #2
 8007982:	4621      	mov	r1, r4
 8007984:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007988:	4621      	mov	r1, r4
 800798a:	008a      	lsls	r2, r1, #2
 800798c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007990:	f7f9 f932 	bl	8000bf8 <__aeabi_uldivmod>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	4b60      	ldr	r3, [pc, #384]	; (8007b1c <UART_SetConfig+0x4e4>)
 800799a:	fba3 2302 	umull	r2, r3, r3, r2
 800799e:	095b      	lsrs	r3, r3, #5
 80079a0:	011c      	lsls	r4, r3, #4
 80079a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079a6:	2200      	movs	r2, #0
 80079a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80079ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80079b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80079b4:	4642      	mov	r2, r8
 80079b6:	464b      	mov	r3, r9
 80079b8:	1891      	adds	r1, r2, r2
 80079ba:	61b9      	str	r1, [r7, #24]
 80079bc:	415b      	adcs	r3, r3
 80079be:	61fb      	str	r3, [r7, #28]
 80079c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079c4:	4641      	mov	r1, r8
 80079c6:	1851      	adds	r1, r2, r1
 80079c8:	6139      	str	r1, [r7, #16]
 80079ca:	4649      	mov	r1, r9
 80079cc:	414b      	adcs	r3, r1
 80079ce:	617b      	str	r3, [r7, #20]
 80079d0:	f04f 0200 	mov.w	r2, #0
 80079d4:	f04f 0300 	mov.w	r3, #0
 80079d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079dc:	4659      	mov	r1, fp
 80079de:	00cb      	lsls	r3, r1, #3
 80079e0:	4651      	mov	r1, sl
 80079e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079e6:	4651      	mov	r1, sl
 80079e8:	00ca      	lsls	r2, r1, #3
 80079ea:	4610      	mov	r0, r2
 80079ec:	4619      	mov	r1, r3
 80079ee:	4603      	mov	r3, r0
 80079f0:	4642      	mov	r2, r8
 80079f2:	189b      	adds	r3, r3, r2
 80079f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079f8:	464b      	mov	r3, r9
 80079fa:	460a      	mov	r2, r1
 80079fc:	eb42 0303 	adc.w	r3, r2, r3
 8007a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007a10:	f04f 0200 	mov.w	r2, #0
 8007a14:	f04f 0300 	mov.w	r3, #0
 8007a18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007a1c:	4649      	mov	r1, r9
 8007a1e:	008b      	lsls	r3, r1, #2
 8007a20:	4641      	mov	r1, r8
 8007a22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a26:	4641      	mov	r1, r8
 8007a28:	008a      	lsls	r2, r1, #2
 8007a2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007a2e:	f7f9 f8e3 	bl	8000bf8 <__aeabi_uldivmod>
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	4b39      	ldr	r3, [pc, #228]	; (8007b1c <UART_SetConfig+0x4e4>)
 8007a38:	fba3 1302 	umull	r1, r3, r3, r2
 8007a3c:	095b      	lsrs	r3, r3, #5
 8007a3e:	2164      	movs	r1, #100	; 0x64
 8007a40:	fb01 f303 	mul.w	r3, r1, r3
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	011b      	lsls	r3, r3, #4
 8007a48:	3332      	adds	r3, #50	; 0x32
 8007a4a:	4a34      	ldr	r2, [pc, #208]	; (8007b1c <UART_SetConfig+0x4e4>)
 8007a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a50:	095b      	lsrs	r3, r3, #5
 8007a52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a56:	441c      	add	r4, r3
 8007a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	673b      	str	r3, [r7, #112]	; 0x70
 8007a60:	677a      	str	r2, [r7, #116]	; 0x74
 8007a62:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007a66:	4642      	mov	r2, r8
 8007a68:	464b      	mov	r3, r9
 8007a6a:	1891      	adds	r1, r2, r2
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	415b      	adcs	r3, r3
 8007a70:	60fb      	str	r3, [r7, #12]
 8007a72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a76:	4641      	mov	r1, r8
 8007a78:	1851      	adds	r1, r2, r1
 8007a7a:	6039      	str	r1, [r7, #0]
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	414b      	adcs	r3, r1
 8007a80:	607b      	str	r3, [r7, #4]
 8007a82:	f04f 0200 	mov.w	r2, #0
 8007a86:	f04f 0300 	mov.w	r3, #0
 8007a8a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a8e:	4659      	mov	r1, fp
 8007a90:	00cb      	lsls	r3, r1, #3
 8007a92:	4651      	mov	r1, sl
 8007a94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a98:	4651      	mov	r1, sl
 8007a9a:	00ca      	lsls	r2, r1, #3
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	4642      	mov	r2, r8
 8007aa4:	189b      	adds	r3, r3, r2
 8007aa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007aa8:	464b      	mov	r3, r9
 8007aaa:	460a      	mov	r2, r1
 8007aac:	eb42 0303 	adc.w	r3, r2, r3
 8007ab0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	663b      	str	r3, [r7, #96]	; 0x60
 8007abc:	667a      	str	r2, [r7, #100]	; 0x64
 8007abe:	f04f 0200 	mov.w	r2, #0
 8007ac2:	f04f 0300 	mov.w	r3, #0
 8007ac6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007aca:	4649      	mov	r1, r9
 8007acc:	008b      	lsls	r3, r1, #2
 8007ace:	4641      	mov	r1, r8
 8007ad0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ad4:	4641      	mov	r1, r8
 8007ad6:	008a      	lsls	r2, r1, #2
 8007ad8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007adc:	f7f9 f88c 	bl	8000bf8 <__aeabi_uldivmod>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	4b0d      	ldr	r3, [pc, #52]	; (8007b1c <UART_SetConfig+0x4e4>)
 8007ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8007aea:	095b      	lsrs	r3, r3, #5
 8007aec:	2164      	movs	r1, #100	; 0x64
 8007aee:	fb01 f303 	mul.w	r3, r1, r3
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	011b      	lsls	r3, r3, #4
 8007af6:	3332      	adds	r3, #50	; 0x32
 8007af8:	4a08      	ldr	r2, [pc, #32]	; (8007b1c <UART_SetConfig+0x4e4>)
 8007afa:	fba2 2303 	umull	r2, r3, r2, r3
 8007afe:	095b      	lsrs	r3, r3, #5
 8007b00:	f003 020f 	and.w	r2, r3, #15
 8007b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4422      	add	r2, r4
 8007b0c:	609a      	str	r2, [r3, #8]
}
 8007b0e:	bf00      	nop
 8007b10:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007b14:	46bd      	mov	sp, r7
 8007b16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b1a:	bf00      	nop
 8007b1c:	51eb851f 	.word	0x51eb851f

08007b20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b20:	b084      	sub	sp, #16
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	f107 001c 	add.w	r0, r7, #28
 8007b2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d122      	bne.n	8007b7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d105      	bne.n	8007b72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f001 fbee 	bl	8009354 <USB_CoreReset>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	73fb      	strb	r3, [r7, #15]
 8007b7c:	e01a      	b.n	8007bb4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f001 fbe2 	bl	8009354 <USB_CoreReset>
 8007b90:	4603      	mov	r3, r0
 8007b92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d106      	bne.n	8007ba8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	639a      	str	r2, [r3, #56]	; 0x38
 8007ba6:	e005      	b.n	8007bb4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d10b      	bne.n	8007bd2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f043 0206 	orr.w	r2, r3, #6
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f043 0220 	orr.w	r2, r3, #32
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bde:	b004      	add	sp, #16
 8007be0:	4770      	bx	lr
	...

08007be4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007bf2:	79fb      	ldrb	r3, [r7, #7]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d165      	bne.n	8007cc4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	4a41      	ldr	r2, [pc, #260]	; (8007d00 <USB_SetTurnaroundTime+0x11c>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d906      	bls.n	8007c0e <USB_SetTurnaroundTime+0x2a>
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	4a40      	ldr	r2, [pc, #256]	; (8007d04 <USB_SetTurnaroundTime+0x120>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d202      	bcs.n	8007c0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007c08:	230f      	movs	r3, #15
 8007c0a:	617b      	str	r3, [r7, #20]
 8007c0c:	e062      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	4a3c      	ldr	r2, [pc, #240]	; (8007d04 <USB_SetTurnaroundTime+0x120>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d306      	bcc.n	8007c24 <USB_SetTurnaroundTime+0x40>
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	4a3b      	ldr	r2, [pc, #236]	; (8007d08 <USB_SetTurnaroundTime+0x124>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d202      	bcs.n	8007c24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007c1e:	230e      	movs	r3, #14
 8007c20:	617b      	str	r3, [r7, #20]
 8007c22:	e057      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	4a38      	ldr	r2, [pc, #224]	; (8007d08 <USB_SetTurnaroundTime+0x124>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d306      	bcc.n	8007c3a <USB_SetTurnaroundTime+0x56>
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	4a37      	ldr	r2, [pc, #220]	; (8007d0c <USB_SetTurnaroundTime+0x128>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d202      	bcs.n	8007c3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007c34:	230d      	movs	r3, #13
 8007c36:	617b      	str	r3, [r7, #20]
 8007c38:	e04c      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	4a33      	ldr	r2, [pc, #204]	; (8007d0c <USB_SetTurnaroundTime+0x128>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d306      	bcc.n	8007c50 <USB_SetTurnaroundTime+0x6c>
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	4a32      	ldr	r2, [pc, #200]	; (8007d10 <USB_SetTurnaroundTime+0x12c>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d802      	bhi.n	8007c50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007c4a:	230c      	movs	r3, #12
 8007c4c:	617b      	str	r3, [r7, #20]
 8007c4e:	e041      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	4a2f      	ldr	r2, [pc, #188]	; (8007d10 <USB_SetTurnaroundTime+0x12c>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d906      	bls.n	8007c66 <USB_SetTurnaroundTime+0x82>
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	4a2e      	ldr	r2, [pc, #184]	; (8007d14 <USB_SetTurnaroundTime+0x130>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d802      	bhi.n	8007c66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007c60:	230b      	movs	r3, #11
 8007c62:	617b      	str	r3, [r7, #20]
 8007c64:	e036      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	4a2a      	ldr	r2, [pc, #168]	; (8007d14 <USB_SetTurnaroundTime+0x130>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d906      	bls.n	8007c7c <USB_SetTurnaroundTime+0x98>
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	4a29      	ldr	r2, [pc, #164]	; (8007d18 <USB_SetTurnaroundTime+0x134>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d802      	bhi.n	8007c7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007c76:	230a      	movs	r3, #10
 8007c78:	617b      	str	r3, [r7, #20]
 8007c7a:	e02b      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	4a26      	ldr	r2, [pc, #152]	; (8007d18 <USB_SetTurnaroundTime+0x134>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d906      	bls.n	8007c92 <USB_SetTurnaroundTime+0xae>
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	4a25      	ldr	r2, [pc, #148]	; (8007d1c <USB_SetTurnaroundTime+0x138>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d202      	bcs.n	8007c92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007c8c:	2309      	movs	r3, #9
 8007c8e:	617b      	str	r3, [r7, #20]
 8007c90:	e020      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	4a21      	ldr	r2, [pc, #132]	; (8007d1c <USB_SetTurnaroundTime+0x138>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d306      	bcc.n	8007ca8 <USB_SetTurnaroundTime+0xc4>
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	4a20      	ldr	r2, [pc, #128]	; (8007d20 <USB_SetTurnaroundTime+0x13c>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d802      	bhi.n	8007ca8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007ca2:	2308      	movs	r3, #8
 8007ca4:	617b      	str	r3, [r7, #20]
 8007ca6:	e015      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	4a1d      	ldr	r2, [pc, #116]	; (8007d20 <USB_SetTurnaroundTime+0x13c>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d906      	bls.n	8007cbe <USB_SetTurnaroundTime+0xda>
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	4a1c      	ldr	r2, [pc, #112]	; (8007d24 <USB_SetTurnaroundTime+0x140>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d202      	bcs.n	8007cbe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007cb8:	2307      	movs	r3, #7
 8007cba:	617b      	str	r3, [r7, #20]
 8007cbc:	e00a      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007cbe:	2306      	movs	r3, #6
 8007cc0:	617b      	str	r3, [r7, #20]
 8007cc2:	e007      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007cc4:	79fb      	ldrb	r3, [r7, #7]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d102      	bne.n	8007cd0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007cca:	2309      	movs	r3, #9
 8007ccc:	617b      	str	r3, [r7, #20]
 8007cce:	e001      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007cd0:	2309      	movs	r3, #9
 8007cd2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	68da      	ldr	r2, [r3, #12]
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	029b      	lsls	r3, r3, #10
 8007ce8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007cec:	431a      	orrs	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	371c      	adds	r7, #28
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	00d8acbf 	.word	0x00d8acbf
 8007d04:	00e4e1c0 	.word	0x00e4e1c0
 8007d08:	00f42400 	.word	0x00f42400
 8007d0c:	01067380 	.word	0x01067380
 8007d10:	011a499f 	.word	0x011a499f
 8007d14:	01312cff 	.word	0x01312cff
 8007d18:	014ca43f 	.word	0x014ca43f
 8007d1c:	016e3600 	.word	0x016e3600
 8007d20:	01a6ab1f 	.word	0x01a6ab1f
 8007d24:	01e84800 	.word	0x01e84800

08007d28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f043 0201 	orr.w	r2, r3, #1
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f023 0201 	bic.w	r2, r3, #1
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	460b      	mov	r3, r1
 8007d76:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d88:	78fb      	ldrb	r3, [r7, #3]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d115      	bne.n	8007dba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d9a:	2001      	movs	r0, #1
 8007d9c:	f7fa fd66 	bl	800286c <HAL_Delay>
      ms++;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	3301      	adds	r3, #1
 8007da4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f001 fa45 	bl	8009236 <USB_GetMode>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d01e      	beq.n	8007df0 <USB_SetCurrentMode+0x84>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2b31      	cmp	r3, #49	; 0x31
 8007db6:	d9f0      	bls.n	8007d9a <USB_SetCurrentMode+0x2e>
 8007db8:	e01a      	b.n	8007df0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007dba:	78fb      	ldrb	r3, [r7, #3]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d115      	bne.n	8007dec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007dcc:	2001      	movs	r0, #1
 8007dce:	f7fa fd4d 	bl	800286c <HAL_Delay>
      ms++;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f001 fa2c 	bl	8009236 <USB_GetMode>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d005      	beq.n	8007df0 <USB_SetCurrentMode+0x84>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b31      	cmp	r3, #49	; 0x31
 8007de8:	d9f0      	bls.n	8007dcc <USB_SetCurrentMode+0x60>
 8007dea:	e001      	b.n	8007df0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e005      	b.n	8007dfc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2b32      	cmp	r3, #50	; 0x32
 8007df4:	d101      	bne.n	8007dfa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e000      	b.n	8007dfc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e04:	b084      	sub	sp, #16
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b086      	sub	sp, #24
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e1e:	2300      	movs	r3, #0
 8007e20:	613b      	str	r3, [r7, #16]
 8007e22:	e009      	b.n	8007e38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	3340      	adds	r3, #64	; 0x40
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	2200      	movs	r2, #0
 8007e30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	3301      	adds	r3, #1
 8007e36:	613b      	str	r3, [r7, #16]
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	2b0e      	cmp	r3, #14
 8007e3c:	d9f2      	bls.n	8007e24 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d11c      	bne.n	8007e7e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e52:	f043 0302 	orr.w	r3, r3, #2
 8007e56:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e68:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e74:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	639a      	str	r2, [r3, #56]	; 0x38
 8007e7c:	e00b      	b.n	8007e96 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e82:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	680b      	ldr	r3, [r1, #0]
 8007eb4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d10c      	bne.n	8007ed6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d104      	bne.n	8007ecc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f965 	bl	8008194 <USB_SetDevSpeed>
 8007eca:	e008      	b.n	8007ede <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007ecc:	2101      	movs	r1, #1
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f960 	bl	8008194 <USB_SetDevSpeed>
 8007ed4:	e003      	b.n	8007ede <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007ed6:	2103      	movs	r1, #3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f95b 	bl	8008194 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ede:	2110      	movs	r1, #16
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f8f3 	bl	80080cc <USB_FlushTxFifo>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f91f 	bl	8008134 <USB_FlushRxFifo>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d001      	beq.n	8007f00 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f06:	461a      	mov	r2, r3
 8007f08:	2300      	movs	r3, #0
 8007f0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f12:	461a      	mov	r2, r3
 8007f14:	2300      	movs	r3, #0
 8007f16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f1e:	461a      	mov	r2, r3
 8007f20:	2300      	movs	r3, #0
 8007f22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f24:	2300      	movs	r3, #0
 8007f26:	613b      	str	r3, [r7, #16]
 8007f28:	e043      	b.n	8007fb2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	015a      	lsls	r2, r3, #5
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f40:	d118      	bne.n	8007f74 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10a      	bne.n	8007f5e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f54:	461a      	mov	r2, r3
 8007f56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f5a:	6013      	str	r3, [r2, #0]
 8007f5c:	e013      	b.n	8007f86 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f70:	6013      	str	r3, [r2, #0]
 8007f72:	e008      	b.n	8007f86 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	015a      	lsls	r2, r3, #5
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f80:	461a      	mov	r2, r3
 8007f82:	2300      	movs	r3, #0
 8007f84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	015a      	lsls	r2, r3, #5
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f92:	461a      	mov	r2, r3
 8007f94:	2300      	movs	r3, #0
 8007f96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007faa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	613b      	str	r3, [r7, #16]
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d3b7      	bcc.n	8007f2a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fba:	2300      	movs	r3, #0
 8007fbc:	613b      	str	r3, [r7, #16]
 8007fbe:	e043      	b.n	8008048 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	015a      	lsls	r2, r3, #5
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fd6:	d118      	bne.n	800800a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10a      	bne.n	8007ff4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	015a      	lsls	r2, r3, #5
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fea:	461a      	mov	r2, r3
 8007fec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ff0:	6013      	str	r3, [r2, #0]
 8007ff2:	e013      	b.n	800801c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	015a      	lsls	r2, r3, #5
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008000:	461a      	mov	r2, r3
 8008002:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008006:	6013      	str	r3, [r2, #0]
 8008008:	e008      	b.n	800801c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	015a      	lsls	r2, r3, #5
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4413      	add	r3, r2
 8008012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008016:	461a      	mov	r2, r3
 8008018:	2300      	movs	r3, #0
 800801a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	015a      	lsls	r2, r3, #5
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4413      	add	r3, r2
 8008024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008028:	461a      	mov	r2, r3
 800802a:	2300      	movs	r3, #0
 800802c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	4413      	add	r3, r2
 8008036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800803a:	461a      	mov	r2, r3
 800803c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008040:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	3301      	adds	r3, #1
 8008046:	613b      	str	r3, [r7, #16]
 8008048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804a:	693a      	ldr	r2, [r7, #16]
 800804c:	429a      	cmp	r2, r3
 800804e:	d3b7      	bcc.n	8007fc0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800805e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008062:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008070:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	2b00      	cmp	r3, #0
 8008076:	d105      	bne.n	8008084 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	f043 0210 	orr.w	r2, r3, #16
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	699a      	ldr	r2, [r3, #24]
 8008088:	4b0f      	ldr	r3, [pc, #60]	; (80080c8 <USB_DevInit+0x2c4>)
 800808a:	4313      	orrs	r3, r2
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008092:	2b00      	cmp	r3, #0
 8008094:	d005      	beq.n	80080a2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	f043 0208 	orr.w	r2, r3, #8
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80080a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d107      	bne.n	80080b8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080b0:	f043 0304 	orr.w	r3, r3, #4
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80080b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080c4:	b004      	add	sp, #16
 80080c6:	4770      	bx	lr
 80080c8:	803c3800 	.word	0x803c3800

080080cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3301      	adds	r3, #1
 80080de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4a13      	ldr	r2, [pc, #76]	; (8008130 <USB_FlushTxFifo+0x64>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d901      	bls.n	80080ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e01b      	b.n	8008124 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	daf2      	bge.n	80080da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80080f4:	2300      	movs	r3, #0
 80080f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	019b      	lsls	r3, r3, #6
 80080fc:	f043 0220 	orr.w	r2, r3, #32
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	3301      	adds	r3, #1
 8008108:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	4a08      	ldr	r2, [pc, #32]	; (8008130 <USB_FlushTxFifo+0x64>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d901      	bls.n	8008116 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e006      	b.n	8008124 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	f003 0320 	and.w	r3, r3, #32
 800811e:	2b20      	cmp	r3, #32
 8008120:	d0f0      	beq.n	8008104 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	00030d40 	.word	0x00030d40

08008134 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800813c:	2300      	movs	r3, #0
 800813e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	3301      	adds	r3, #1
 8008144:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	4a11      	ldr	r2, [pc, #68]	; (8008190 <USB_FlushRxFifo+0x5c>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d901      	bls.n	8008152 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e018      	b.n	8008184 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	2b00      	cmp	r3, #0
 8008158:	daf2      	bge.n	8008140 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800815a:	2300      	movs	r3, #0
 800815c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2210      	movs	r2, #16
 8008162:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	3301      	adds	r3, #1
 8008168:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	4a08      	ldr	r2, [pc, #32]	; (8008190 <USB_FlushRxFifo+0x5c>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d901      	bls.n	8008176 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e006      	b.n	8008184 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	f003 0310 	and.w	r3, r3, #16
 800817e:	2b10      	cmp	r3, #16
 8008180:	d0f0      	beq.n	8008164 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	00030d40 	.word	0x00030d40

08008194 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	460b      	mov	r3, r1
 800819e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	78fb      	ldrb	r3, [r7, #3]
 80081ae:	68f9      	ldr	r1, [r7, #12]
 80081b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081b4:	4313      	orrs	r3, r2
 80081b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b087      	sub	sp, #28
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	f003 0306 	and.w	r3, r3, #6
 80081de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d102      	bne.n	80081ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80081e6:	2300      	movs	r3, #0
 80081e8:	75fb      	strb	r3, [r7, #23]
 80081ea:	e00a      	b.n	8008202 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d002      	beq.n	80081f8 <USB_GetDevSpeed+0x32>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2b06      	cmp	r3, #6
 80081f6:	d102      	bne.n	80081fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80081f8:	2302      	movs	r3, #2
 80081fa:	75fb      	strb	r3, [r7, #23]
 80081fc:	e001      	b.n	8008202 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80081fe:	230f      	movs	r3, #15
 8008200:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008202:	7dfb      	ldrb	r3, [r7, #23]
}
 8008204:	4618      	mov	r0, r3
 8008206:	371c      	adds	r7, #28
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	785b      	ldrb	r3, [r3, #1]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d13a      	bne.n	80082a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008232:	69da      	ldr	r2, [r3, #28]
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	f003 030f 	and.w	r3, r3, #15
 800823c:	2101      	movs	r1, #1
 800823e:	fa01 f303 	lsl.w	r3, r1, r3
 8008242:	b29b      	uxth	r3, r3
 8008244:	68f9      	ldr	r1, [r7, #12]
 8008246:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800824a:	4313      	orrs	r3, r2
 800824c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	015a      	lsls	r2, r3, #5
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	4413      	add	r3, r2
 8008256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d155      	bne.n	8008310 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	4413      	add	r3, r2
 800826c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	791b      	ldrb	r3, [r3, #4]
 800827e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008280:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	059b      	lsls	r3, r3, #22
 8008286:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008288:	4313      	orrs	r3, r2
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	0151      	lsls	r1, r2, #5
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	440a      	add	r2, r1
 8008292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800829a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800829e:	6013      	str	r3, [r2, #0]
 80082a0:	e036      	b.n	8008310 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082a8:	69da      	ldr	r2, [r3, #28]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	f003 030f 	and.w	r3, r3, #15
 80082b2:	2101      	movs	r1, #1
 80082b4:	fa01 f303 	lsl.w	r3, r1, r3
 80082b8:	041b      	lsls	r3, r3, #16
 80082ba:	68f9      	ldr	r1, [r7, #12]
 80082bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082c0:	4313      	orrs	r3, r2
 80082c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d11a      	bne.n	8008310 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	015a      	lsls	r2, r3, #5
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	4413      	add	r3, r2
 80082e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	791b      	ldrb	r3, [r3, #4]
 80082f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80082f6:	430b      	orrs	r3, r1
 80082f8:	4313      	orrs	r3, r2
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	0151      	lsls	r1, r2, #5
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	440a      	add	r2, r1
 8008302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800830a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800830e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
	...

08008320 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	785b      	ldrb	r3, [r3, #1]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d161      	bne.n	8008400 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	4413      	add	r3, r2
 8008344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800834e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008352:	d11f      	bne.n	8008394 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	015a      	lsls	r2, r3, #5
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	4413      	add	r3, r2
 800835c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	0151      	lsls	r1, r2, #5
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	440a      	add	r2, r1
 800836a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800836e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008372:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	015a      	lsls	r2, r3, #5
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	4413      	add	r3, r2
 800837c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	0151      	lsls	r1, r2, #5
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	440a      	add	r2, r1
 800838a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800838e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008392:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800839a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	f003 030f 	and.w	r3, r3, #15
 80083a4:	2101      	movs	r1, #1
 80083a6:	fa01 f303 	lsl.w	r3, r1, r3
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	43db      	mvns	r3, r3
 80083ae:	68f9      	ldr	r1, [r7, #12]
 80083b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083b4:	4013      	ands	r3, r2
 80083b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083be:	69da      	ldr	r2, [r3, #28]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	f003 030f 	and.w	r3, r3, #15
 80083c8:	2101      	movs	r1, #1
 80083ca:	fa01 f303 	lsl.w	r3, r1, r3
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	43db      	mvns	r3, r3
 80083d2:	68f9      	ldr	r1, [r7, #12]
 80083d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083d8:	4013      	ands	r3, r2
 80083da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	015a      	lsls	r2, r3, #5
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	4413      	add	r3, r2
 80083e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	0159      	lsls	r1, r3, #5
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	440b      	add	r3, r1
 80083f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f6:	4619      	mov	r1, r3
 80083f8:	4b35      	ldr	r3, [pc, #212]	; (80084d0 <USB_DeactivateEndpoint+0x1b0>)
 80083fa:	4013      	ands	r3, r2
 80083fc:	600b      	str	r3, [r1, #0]
 80083fe:	e060      	b.n	80084c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	015a      	lsls	r2, r3, #5
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	4413      	add	r3, r2
 8008408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008416:	d11f      	bne.n	8008458 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	4413      	add	r3, r2
 8008420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	0151      	lsls	r1, r2, #5
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	440a      	add	r2, r1
 800842e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008432:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008436:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	015a      	lsls	r2, r3, #5
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	4413      	add	r3, r2
 8008440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	0151      	lsls	r1, r2, #5
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	440a      	add	r2, r1
 800844e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008452:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008456:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	f003 030f 	and.w	r3, r3, #15
 8008468:	2101      	movs	r1, #1
 800846a:	fa01 f303 	lsl.w	r3, r1, r3
 800846e:	041b      	lsls	r3, r3, #16
 8008470:	43db      	mvns	r3, r3
 8008472:	68f9      	ldr	r1, [r7, #12]
 8008474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008478:	4013      	ands	r3, r2
 800847a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008482:	69da      	ldr	r2, [r3, #28]
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	f003 030f 	and.w	r3, r3, #15
 800848c:	2101      	movs	r1, #1
 800848e:	fa01 f303 	lsl.w	r3, r1, r3
 8008492:	041b      	lsls	r3, r3, #16
 8008494:	43db      	mvns	r3, r3
 8008496:	68f9      	ldr	r1, [r7, #12]
 8008498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800849c:	4013      	ands	r3, r2
 800849e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	015a      	lsls	r2, r3, #5
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	4413      	add	r3, r2
 80084a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	0159      	lsls	r1, r3, #5
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	440b      	add	r3, r1
 80084b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ba:	4619      	mov	r1, r3
 80084bc:	4b05      	ldr	r3, [pc, #20]	; (80084d4 <USB_DeactivateEndpoint+0x1b4>)
 80084be:	4013      	ands	r3, r2
 80084c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr
 80084d0:	ec337800 	.word	0xec337800
 80084d4:	eff37800 	.word	0xeff37800

080084d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b08a      	sub	sp, #40	; 0x28
 80084dc:	af02      	add	r7, sp, #8
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	4613      	mov	r3, r2
 80084e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	785b      	ldrb	r3, [r3, #1]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	f040 815c 	bne.w	80087b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d132      	bne.n	8008568 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	4413      	add	r3, r2
 800850a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	0151      	lsls	r1, r2, #5
 8008514:	69fa      	ldr	r2, [r7, #28]
 8008516:	440a      	add	r2, r1
 8008518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800851c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008520:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008524:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	015a      	lsls	r2, r3, #5
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	4413      	add	r3, r2
 800852e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	69ba      	ldr	r2, [r7, #24]
 8008536:	0151      	lsls	r1, r2, #5
 8008538:	69fa      	ldr	r2, [r7, #28]
 800853a:	440a      	add	r2, r1
 800853c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008540:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008544:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	015a      	lsls	r2, r3, #5
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	4413      	add	r3, r2
 800854e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	69ba      	ldr	r2, [r7, #24]
 8008556:	0151      	lsls	r1, r2, #5
 8008558:	69fa      	ldr	r2, [r7, #28]
 800855a:	440a      	add	r2, r1
 800855c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008560:	0cdb      	lsrs	r3, r3, #19
 8008562:	04db      	lsls	r3, r3, #19
 8008564:	6113      	str	r3, [r2, #16]
 8008566:	e074      	b.n	8008652 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	015a      	lsls	r2, r3, #5
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	4413      	add	r3, r2
 8008570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	69ba      	ldr	r2, [r7, #24]
 8008578:	0151      	lsls	r1, r2, #5
 800857a:	69fa      	ldr	r2, [r7, #28]
 800857c:	440a      	add	r2, r1
 800857e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008582:	0cdb      	lsrs	r3, r3, #19
 8008584:	04db      	lsls	r3, r3, #19
 8008586:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	4413      	add	r3, r2
 8008590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	69ba      	ldr	r2, [r7, #24]
 8008598:	0151      	lsls	r1, r2, #5
 800859a:	69fa      	ldr	r2, [r7, #28]
 800859c:	440a      	add	r2, r1
 800859e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80085a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80085aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	015a      	lsls	r2, r3, #5
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	4413      	add	r3, r2
 80085b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	6999      	ldr	r1, [r3, #24]
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	440b      	add	r3, r1
 80085c4:	1e59      	subs	r1, r3, #1
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80085ce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80085d0:	4b9d      	ldr	r3, [pc, #628]	; (8008848 <USB_EPStartXfer+0x370>)
 80085d2:	400b      	ands	r3, r1
 80085d4:	69b9      	ldr	r1, [r7, #24]
 80085d6:	0148      	lsls	r0, r1, #5
 80085d8:	69f9      	ldr	r1, [r7, #28]
 80085da:	4401      	add	r1, r0
 80085dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085e0:	4313      	orrs	r3, r2
 80085e2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	015a      	lsls	r2, r3, #5
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	4413      	add	r3, r2
 80085ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f0:	691a      	ldr	r2, [r3, #16]
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085fa:	69b9      	ldr	r1, [r7, #24]
 80085fc:	0148      	lsls	r0, r1, #5
 80085fe:	69f9      	ldr	r1, [r7, #28]
 8008600:	4401      	add	r1, r0
 8008602:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008606:	4313      	orrs	r3, r2
 8008608:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	791b      	ldrb	r3, [r3, #4]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d11f      	bne.n	8008652 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	015a      	lsls	r2, r3, #5
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	4413      	add	r3, r2
 800861a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	69ba      	ldr	r2, [r7, #24]
 8008622:	0151      	lsls	r1, r2, #5
 8008624:	69fa      	ldr	r2, [r7, #28]
 8008626:	440a      	add	r2, r1
 8008628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800862c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008630:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	015a      	lsls	r2, r3, #5
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	4413      	add	r3, r2
 800863a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	69ba      	ldr	r2, [r7, #24]
 8008642:	0151      	lsls	r1, r2, #5
 8008644:	69fa      	ldr	r2, [r7, #28]
 8008646:	440a      	add	r2, r1
 8008648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800864c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008650:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008652:	79fb      	ldrb	r3, [r7, #7]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d14b      	bne.n	80086f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	695b      	ldr	r3, [r3, #20]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d009      	beq.n	8008674 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	4413      	add	r3, r2
 8008668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800866c:	461a      	mov	r2, r3
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	791b      	ldrb	r3, [r3, #4]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d128      	bne.n	80086ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008688:	2b00      	cmp	r3, #0
 800868a:	d110      	bne.n	80086ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	015a      	lsls	r2, r3, #5
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	4413      	add	r3, r2
 8008694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	69ba      	ldr	r2, [r7, #24]
 800869c:	0151      	lsls	r1, r2, #5
 800869e:	69fa      	ldr	r2, [r7, #28]
 80086a0:	440a      	add	r2, r1
 80086a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086aa:	6013      	str	r3, [r2, #0]
 80086ac:	e00f      	b.n	80086ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	69ba      	ldr	r2, [r7, #24]
 80086be:	0151      	lsls	r1, r2, #5
 80086c0:	69fa      	ldr	r2, [r7, #28]
 80086c2:	440a      	add	r2, r1
 80086c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	69ba      	ldr	r2, [r7, #24]
 80086de:	0151      	lsls	r1, r2, #5
 80086e0:	69fa      	ldr	r2, [r7, #28]
 80086e2:	440a      	add	r2, r1
 80086e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086ec:	6013      	str	r3, [r2, #0]
 80086ee:	e133      	b.n	8008958 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	015a      	lsls	r2, r3, #5
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	69ba      	ldr	r2, [r7, #24]
 8008700:	0151      	lsls	r1, r2, #5
 8008702:	69fa      	ldr	r2, [r7, #28]
 8008704:	440a      	add	r2, r1
 8008706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800870a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800870e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	791b      	ldrb	r3, [r3, #4]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d015      	beq.n	8008744 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 811b 	beq.w	8008958 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	f003 030f 	and.w	r3, r3, #15
 8008732:	2101      	movs	r1, #1
 8008734:	fa01 f303 	lsl.w	r3, r1, r3
 8008738:	69f9      	ldr	r1, [r7, #28]
 800873a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800873e:	4313      	orrs	r3, r2
 8008740:	634b      	str	r3, [r1, #52]	; 0x34
 8008742:	e109      	b.n	8008958 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008750:	2b00      	cmp	r3, #0
 8008752:	d110      	bne.n	8008776 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	015a      	lsls	r2, r3, #5
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	4413      	add	r3, r2
 800875c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	0151      	lsls	r1, r2, #5
 8008766:	69fa      	ldr	r2, [r7, #28]
 8008768:	440a      	add	r2, r1
 800876a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800876e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008772:	6013      	str	r3, [r2, #0]
 8008774:	e00f      	b.n	8008796 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	015a      	lsls	r2, r3, #5
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	4413      	add	r3, r2
 800877e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	69ba      	ldr	r2, [r7, #24]
 8008786:	0151      	lsls	r1, r2, #5
 8008788:	69fa      	ldr	r2, [r7, #28]
 800878a:	440a      	add	r2, r1
 800878c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008794:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	6919      	ldr	r1, [r3, #16]
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	781a      	ldrb	r2, [r3, #0]
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	b298      	uxth	r0, r3
 80087a4:	79fb      	ldrb	r3, [r7, #7]
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	4603      	mov	r3, r0
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f000 fade 	bl	8008d6c <USB_WritePacket>
 80087b0:	e0d2      	b.n	8008958 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	015a      	lsls	r2, r3, #5
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	4413      	add	r3, r2
 80087ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	69ba      	ldr	r2, [r7, #24]
 80087c2:	0151      	lsls	r1, r2, #5
 80087c4:	69fa      	ldr	r2, [r7, #28]
 80087c6:	440a      	add	r2, r1
 80087c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087cc:	0cdb      	lsrs	r3, r3, #19
 80087ce:	04db      	lsls	r3, r3, #19
 80087d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	015a      	lsls	r2, r3, #5
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	4413      	add	r3, r2
 80087da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	69ba      	ldr	r2, [r7, #24]
 80087e2:	0151      	lsls	r1, r2, #5
 80087e4:	69fa      	ldr	r2, [r7, #28]
 80087e6:	440a      	add	r2, r1
 80087e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80087f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80087f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d126      	bne.n	800884c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	015a      	lsls	r2, r3, #5
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	4413      	add	r3, r2
 8008806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800880a:	691a      	ldr	r2, [r3, #16]
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008814:	69b9      	ldr	r1, [r7, #24]
 8008816:	0148      	lsls	r0, r1, #5
 8008818:	69f9      	ldr	r1, [r7, #28]
 800881a:	4401      	add	r1, r0
 800881c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008820:	4313      	orrs	r3, r2
 8008822:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	015a      	lsls	r2, r3, #5
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	4413      	add	r3, r2
 800882c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	69ba      	ldr	r2, [r7, #24]
 8008834:	0151      	lsls	r1, r2, #5
 8008836:	69fa      	ldr	r2, [r7, #28]
 8008838:	440a      	add	r2, r1
 800883a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800883e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008842:	6113      	str	r3, [r2, #16]
 8008844:	e03a      	b.n	80088bc <USB_EPStartXfer+0x3e4>
 8008846:	bf00      	nop
 8008848:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	699a      	ldr	r2, [r3, #24]
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	4413      	add	r3, r2
 8008856:	1e5a      	subs	r2, r3, #1
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008860:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	8afa      	ldrh	r2, [r7, #22]
 8008868:	fb03 f202 	mul.w	r2, r3, r2
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	4413      	add	r3, r2
 8008878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800887c:	691a      	ldr	r2, [r3, #16]
 800887e:	8afb      	ldrh	r3, [r7, #22]
 8008880:	04d9      	lsls	r1, r3, #19
 8008882:	4b38      	ldr	r3, [pc, #224]	; (8008964 <USB_EPStartXfer+0x48c>)
 8008884:	400b      	ands	r3, r1
 8008886:	69b9      	ldr	r1, [r7, #24]
 8008888:	0148      	lsls	r0, r1, #5
 800888a:	69f9      	ldr	r1, [r7, #28]
 800888c:	4401      	add	r1, r0
 800888e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008892:	4313      	orrs	r3, r2
 8008894:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	015a      	lsls	r2, r3, #5
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	4413      	add	r3, r2
 800889e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a2:	691a      	ldr	r2, [r3, #16]
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	69db      	ldr	r3, [r3, #28]
 80088a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088ac:	69b9      	ldr	r1, [r7, #24]
 80088ae:	0148      	lsls	r0, r1, #5
 80088b0:	69f9      	ldr	r1, [r7, #28]
 80088b2:	4401      	add	r1, r0
 80088b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088b8:	4313      	orrs	r3, r2
 80088ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80088bc:	79fb      	ldrb	r3, [r7, #7]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d10d      	bne.n	80088de <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d009      	beq.n	80088de <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	6919      	ldr	r1, [r3, #16]
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	015a      	lsls	r2, r3, #5
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	4413      	add	r3, r2
 80088d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088da:	460a      	mov	r2, r1
 80088dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	791b      	ldrb	r3, [r3, #4]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d128      	bne.n	8008938 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d110      	bne.n	8008918 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	015a      	lsls	r2, r3, #5
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	4413      	add	r3, r2
 80088fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	69ba      	ldr	r2, [r7, #24]
 8008906:	0151      	lsls	r1, r2, #5
 8008908:	69fa      	ldr	r2, [r7, #28]
 800890a:	440a      	add	r2, r1
 800890c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008910:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008914:	6013      	str	r3, [r2, #0]
 8008916:	e00f      	b.n	8008938 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	015a      	lsls	r2, r3, #5
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	4413      	add	r3, r2
 8008920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	69ba      	ldr	r2, [r7, #24]
 8008928:	0151      	lsls	r1, r2, #5
 800892a:	69fa      	ldr	r2, [r7, #28]
 800892c:	440a      	add	r2, r1
 800892e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008936:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	015a      	lsls	r2, r3, #5
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	4413      	add	r3, r2
 8008940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	69ba      	ldr	r2, [r7, #24]
 8008948:	0151      	lsls	r1, r2, #5
 800894a:	69fa      	ldr	r2, [r7, #28]
 800894c:	440a      	add	r2, r1
 800894e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008952:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008956:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3720      	adds	r7, #32
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	1ff80000 	.word	0x1ff80000

08008968 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008968:	b480      	push	{r7}
 800896a:	b087      	sub	sp, #28
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	4613      	mov	r3, r2
 8008974:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	785b      	ldrb	r3, [r3, #1]
 8008984:	2b01      	cmp	r3, #1
 8008986:	f040 80ce 	bne.w	8008b26 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d132      	bne.n	80089f8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	4413      	add	r3, r2
 800899a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	693a      	ldr	r2, [r7, #16]
 80089a2:	0151      	lsls	r1, r2, #5
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	440a      	add	r2, r1
 80089a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80089b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80089b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	015a      	lsls	r2, r3, #5
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	4413      	add	r3, r2
 80089be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	693a      	ldr	r2, [r7, #16]
 80089c6:	0151      	lsls	r1, r2, #5
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	440a      	add	r2, r1
 80089cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	015a      	lsls	r2, r3, #5
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	4413      	add	r3, r2
 80089de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	0151      	lsls	r1, r2, #5
 80089e8:	697a      	ldr	r2, [r7, #20]
 80089ea:	440a      	add	r2, r1
 80089ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089f0:	0cdb      	lsrs	r3, r3, #19
 80089f2:	04db      	lsls	r3, r3, #19
 80089f4:	6113      	str	r3, [r2, #16]
 80089f6:	e04e      	b.n	8008a96 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	0151      	lsls	r1, r2, #5
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	440a      	add	r2, r1
 8008a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a12:	0cdb      	lsrs	r3, r3, #19
 8008a14:	04db      	lsls	r3, r3, #19
 8008a16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	015a      	lsls	r2, r3, #5
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	0151      	lsls	r1, r2, #5
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	440a      	add	r2, r1
 8008a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a3a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	699a      	ldr	r2, [r3, #24]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d903      	bls.n	8008a50 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	68da      	ldr	r2, [r3, #12]
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	015a      	lsls	r2, r3, #5
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	4413      	add	r3, r2
 8008a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	0151      	lsls	r1, r2, #5
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	440a      	add	r2, r1
 8008a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	015a      	lsls	r2, r3, #5
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	4413      	add	r3, r2
 8008a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a7c:	691a      	ldr	r2, [r3, #16]
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	699b      	ldr	r3, [r3, #24]
 8008a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a86:	6939      	ldr	r1, [r7, #16]
 8008a88:	0148      	lsls	r0, r1, #5
 8008a8a:	6979      	ldr	r1, [r7, #20]
 8008a8c:	4401      	add	r1, r0
 8008a8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a92:	4313      	orrs	r3, r2
 8008a94:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008a96:	79fb      	ldrb	r3, [r7, #7]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d11e      	bne.n	8008ada <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d009      	beq.n	8008ab8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	015a      	lsls	r2, r3, #5
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	4413      	add	r3, r2
 8008aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	015a      	lsls	r2, r3, #5
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	4413      	add	r3, r2
 8008ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	0151      	lsls	r1, r2, #5
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	440a      	add	r2, r1
 8008ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ad6:	6013      	str	r3, [r2, #0]
 8008ad8:	e097      	b.n	8008c0a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	015a      	lsls	r2, r3, #5
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	0151      	lsls	r1, r2, #5
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	440a      	add	r2, r1
 8008af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008af4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008af8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	699b      	ldr	r3, [r3, #24]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f000 8083 	beq.w	8008c0a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	f003 030f 	and.w	r3, r3, #15
 8008b14:	2101      	movs	r1, #1
 8008b16:	fa01 f303 	lsl.w	r3, r1, r3
 8008b1a:	6979      	ldr	r1, [r7, #20]
 8008b1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b20:	4313      	orrs	r3, r2
 8008b22:	634b      	str	r3, [r1, #52]	; 0x34
 8008b24:	e071      	b.n	8008c0a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	015a      	lsls	r2, r3, #5
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	0151      	lsls	r1, r2, #5
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	440a      	add	r2, r1
 8008b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b40:	0cdb      	lsrs	r3, r3, #19
 8008b42:	04db      	lsls	r3, r3, #19
 8008b44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	0151      	lsls	r1, r2, #5
 8008b58:	697a      	ldr	r2, [r7, #20]
 8008b5a:	440a      	add	r2, r1
 8008b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b68:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	699b      	ldr	r3, [r3, #24]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d003      	beq.n	8008b7a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	68da      	ldr	r2, [r3, #12]
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	68da      	ldr	r2, [r3, #12]
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	015a      	lsls	r2, r3, #5
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	4413      	add	r3, r2
 8008b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	0151      	lsls	r1, r2, #5
 8008b94:	697a      	ldr	r2, [r7, #20]
 8008b96:	440a      	add	r2, r1
 8008b98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ba0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bae:	691a      	ldr	r2, [r3, #16]
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bb8:	6939      	ldr	r1, [r7, #16]
 8008bba:	0148      	lsls	r0, r1, #5
 8008bbc:	6979      	ldr	r1, [r7, #20]
 8008bbe:	4401      	add	r1, r0
 8008bc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008bc8:	79fb      	ldrb	r3, [r7, #7]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d10d      	bne.n	8008bea <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d009      	beq.n	8008bea <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	6919      	ldr	r1, [r3, #16]
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be6:	460a      	mov	r2, r1
 8008be8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	015a      	lsls	r2, r3, #5
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	0151      	lsls	r1, r2, #5
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	440a      	add	r2, r1
 8008c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c04:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	371c      	adds	r7, #28
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b087      	sub	sp, #28
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c22:	2300      	movs	r3, #0
 8008c24:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	785b      	ldrb	r3, [r3, #1]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d14a      	bne.n	8008ccc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	015a      	lsls	r2, r3, #5
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	4413      	add	r3, r2
 8008c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c4e:	f040 8086 	bne.w	8008d5e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	015a      	lsls	r2, r3, #5
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	7812      	ldrb	r2, [r2, #0]
 8008c66:	0151      	lsls	r1, r2, #5
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	440a      	add	r2, r1
 8008c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c74:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	7812      	ldrb	r2, [r2, #0]
 8008c8a:	0151      	lsls	r1, r2, #5
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	440a      	add	r2, r1
 8008c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f242 7210 	movw	r2, #10000	; 0x2710
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d902      	bls.n	8008cb0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	75fb      	strb	r3, [r7, #23]
          break;
 8008cae:	e056      	b.n	8008d5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cc8:	d0e7      	beq.n	8008c9a <USB_EPStopXfer+0x82>
 8008cca:	e048      	b.n	8008d5e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	015a      	lsls	r2, r3, #5
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ce4:	d13b      	bne.n	8008d5e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	7812      	ldrb	r2, [r2, #0]
 8008cfa:	0151      	lsls	r1, r2, #5
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	440a      	add	r2, r1
 8008d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d08:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	015a      	lsls	r2, r3, #5
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	4413      	add	r3, r2
 8008d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	683a      	ldr	r2, [r7, #0]
 8008d1c:	7812      	ldrb	r2, [r2, #0]
 8008d1e:	0151      	lsls	r1, r2, #5
 8008d20:	693a      	ldr	r2, [r7, #16]
 8008d22:	440a      	add	r2, r1
 8008d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d2c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	3301      	adds	r3, #1
 8008d32:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f242 7210 	movw	r2, #10000	; 0x2710
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d902      	bls.n	8008d44 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	75fb      	strb	r3, [r7, #23]
          break;
 8008d42:	e00c      	b.n	8008d5e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	015a      	lsls	r2, r3, #5
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d5c:	d0e7      	beq.n	8008d2e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	371c      	adds	r7, #28
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b089      	sub	sp, #36	; 0x24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	4611      	mov	r1, r2
 8008d78:	461a      	mov	r2, r3
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	71fb      	strb	r3, [r7, #7]
 8008d7e:	4613      	mov	r3, r2
 8008d80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008d8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d123      	bne.n	8008dda <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008d92:	88bb      	ldrh	r3, [r7, #4]
 8008d94:	3303      	adds	r3, #3
 8008d96:	089b      	lsrs	r3, r3, #2
 8008d98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	61bb      	str	r3, [r7, #24]
 8008d9e:	e018      	b.n	8008dd2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008da0:	79fb      	ldrb	r3, [r7, #7]
 8008da2:	031a      	lsls	r2, r3, #12
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	4413      	add	r3, r2
 8008da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dac:	461a      	mov	r2, r3
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	3301      	adds	r3, #1
 8008db8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	61bb      	str	r3, [r7, #24]
 8008dd2:	69ba      	ldr	r2, [r7, #24]
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d3e2      	bcc.n	8008da0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3724      	adds	r7, #36	; 0x24
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b08b      	sub	sp, #44	; 0x2c
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	4613      	mov	r3, r2
 8008df4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008dfe:	88fb      	ldrh	r3, [r7, #6]
 8008e00:	089b      	lsrs	r3, r3, #2
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008e06:	88fb      	ldrh	r3, [r7, #6]
 8008e08:	f003 0303 	and.w	r3, r3, #3
 8008e0c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008e0e:	2300      	movs	r3, #0
 8008e10:	623b      	str	r3, [r7, #32]
 8008e12:	e014      	b.n	8008e3e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	3301      	adds	r3, #1
 8008e24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e28:	3301      	adds	r3, #1
 8008e2a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	3301      	adds	r3, #1
 8008e30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e34:	3301      	adds	r3, #1
 8008e36:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008e38:	6a3b      	ldr	r3, [r7, #32]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	623b      	str	r3, [r7, #32]
 8008e3e:	6a3a      	ldr	r2, [r7, #32]
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d3e6      	bcc.n	8008e14 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008e46:	8bfb      	ldrh	r3, [r7, #30]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d01e      	beq.n	8008e8a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e56:	461a      	mov	r2, r3
 8008e58:	f107 0310 	add.w	r3, r7, #16
 8008e5c:	6812      	ldr	r2, [r2, #0]
 8008e5e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	6a3b      	ldr	r3, [r7, #32]
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	00db      	lsls	r3, r3, #3
 8008e68:	fa22 f303 	lsr.w	r3, r2, r3
 8008e6c:	b2da      	uxtb	r2, r3
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e70:	701a      	strb	r2, [r3, #0]
      i++;
 8008e72:	6a3b      	ldr	r3, [r7, #32]
 8008e74:	3301      	adds	r3, #1
 8008e76:	623b      	str	r3, [r7, #32]
      pDest++;
 8008e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008e7e:	8bfb      	ldrh	r3, [r7, #30]
 8008e80:	3b01      	subs	r3, #1
 8008e82:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008e84:	8bfb      	ldrh	r3, [r7, #30]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1ea      	bne.n	8008e60 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	372c      	adds	r7, #44	; 0x2c
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	785b      	ldrb	r3, [r3, #1]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d12c      	bne.n	8008f0e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	db12      	blt.n	8008eec <USB_EPSetStall+0x54>
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00f      	beq.n	8008eec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	015a      	lsls	r2, r3, #5
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	0151      	lsls	r1, r2, #5
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	440a      	add	r2, r1
 8008ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ee6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008eea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	015a      	lsls	r2, r3, #5
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	0151      	lsls	r1, r2, #5
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	440a      	add	r2, r1
 8008f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f0a:	6013      	str	r3, [r2, #0]
 8008f0c:	e02b      	b.n	8008f66 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	015a      	lsls	r2, r3, #5
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	4413      	add	r3, r2
 8008f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	db12      	blt.n	8008f46 <USB_EPSetStall+0xae>
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00f      	beq.n	8008f46 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	015a      	lsls	r2, r3, #5
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68ba      	ldr	r2, [r7, #8]
 8008f36:	0151      	lsls	r1, r2, #5
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	440a      	add	r2, r1
 8008f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f44:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	015a      	lsls	r2, r3, #5
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	0151      	lsls	r1, r2, #5
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	440a      	add	r2, r1
 8008f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3714      	adds	r7, #20
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	785b      	ldrb	r3, [r3, #1]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d128      	bne.n	8008fe2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	015a      	lsls	r2, r3, #5
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	4413      	add	r3, r2
 8008f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	0151      	lsls	r1, r2, #5
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	440a      	add	r2, r1
 8008fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008faa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008fae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	791b      	ldrb	r3, [r3, #4]
 8008fb4:	2b03      	cmp	r3, #3
 8008fb6:	d003      	beq.n	8008fc0 <USB_EPClearStall+0x4c>
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	791b      	ldrb	r3, [r3, #4]
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d138      	bne.n	8009032 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	015a      	lsls	r2, r3, #5
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68ba      	ldr	r2, [r7, #8]
 8008fd0:	0151      	lsls	r1, r2, #5
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	440a      	add	r2, r1
 8008fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fde:	6013      	str	r3, [r2, #0]
 8008fe0:	e027      	b.n	8009032 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68ba      	ldr	r2, [r7, #8]
 8008ff2:	0151      	lsls	r1, r2, #5
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	440a      	add	r2, r1
 8008ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ffc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009000:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	791b      	ldrb	r3, [r3, #4]
 8009006:	2b03      	cmp	r3, #3
 8009008:	d003      	beq.n	8009012 <USB_EPClearStall+0x9e>
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	791b      	ldrb	r3, [r3, #4]
 800900e:	2b02      	cmp	r3, #2
 8009010:	d10f      	bne.n	8009032 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	015a      	lsls	r2, r3, #5
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	4413      	add	r3, r2
 800901a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68ba      	ldr	r2, [r7, #8]
 8009022:	0151      	lsls	r1, r2, #5
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	440a      	add	r2, r1
 8009028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800902c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009030:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	460b      	mov	r3, r1
 800904a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800905e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009062:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	78fb      	ldrb	r3, [r7, #3]
 800906e:	011b      	lsls	r3, r3, #4
 8009070:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009074:	68f9      	ldr	r1, [r7, #12]
 8009076:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800907a:	4313      	orrs	r3, r2
 800907c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3714      	adds	r7, #20
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090a6:	f023 0303 	bic.w	r3, r3, #3
 80090aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090ba:	f023 0302 	bic.w	r3, r3, #2
 80090be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3714      	adds	r7, #20
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr

080090ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80090ce:	b480      	push	{r7}
 80090d0:	b085      	sub	sp, #20
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090e8:	f023 0303 	bic.w	r3, r3, #3
 80090ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090fc:	f043 0302 	orr.w	r3, r3, #2
 8009100:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	695b      	ldr	r3, [r3, #20]
 800911c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	699b      	ldr	r3, [r3, #24]
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	4013      	ands	r3, r2
 8009126:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009128:	68fb      	ldr	r3, [r7, #12]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3714      	adds	r7, #20
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr

08009136 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009136:	b480      	push	{r7}
 8009138:	b085      	sub	sp, #20
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009152:	69db      	ldr	r3, [r3, #28]
 8009154:	68ba      	ldr	r2, [r7, #8]
 8009156:	4013      	ands	r3, r2
 8009158:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	0c1b      	lsrs	r3, r3, #16
}
 800915e:	4618      	mov	r0, r3
 8009160:	3714      	adds	r7, #20
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800916a:	b480      	push	{r7}
 800916c:	b085      	sub	sp, #20
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800917c:	699b      	ldr	r3, [r3, #24]
 800917e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009186:	69db      	ldr	r3, [r3, #28]
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	4013      	ands	r3, r2
 800918c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	b29b      	uxth	r3, r3
}
 8009192:	4618      	mov	r0, r3
 8009194:	3714      	adds	r7, #20
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800919e:	b480      	push	{r7}
 80091a0:	b085      	sub	sp, #20
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
 80091a6:	460b      	mov	r3, r1
 80091a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80091ae:	78fb      	ldrb	r3, [r7, #3]
 80091b0:	015a      	lsls	r2, r3, #5
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	4413      	add	r3, r2
 80091b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	4013      	ands	r3, r2
 80091ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80091cc:	68bb      	ldr	r3, [r7, #8]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091da:	b480      	push	{r7}
 80091dc:	b087      	sub	sp, #28
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
 80091e2:	460b      	mov	r3, r1
 80091e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091fc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80091fe:	78fb      	ldrb	r3, [r7, #3]
 8009200:	f003 030f 	and.w	r3, r3, #15
 8009204:	68fa      	ldr	r2, [r7, #12]
 8009206:	fa22 f303 	lsr.w	r3, r2, r3
 800920a:	01db      	lsls	r3, r3, #7
 800920c:	b2db      	uxtb	r3, r3
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	4313      	orrs	r3, r2
 8009212:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009214:	78fb      	ldrb	r3, [r7, #3]
 8009216:	015a      	lsls	r2, r3, #5
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	4413      	add	r3, r2
 800921c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	4013      	ands	r3, r2
 8009226:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009228:	68bb      	ldr	r3, [r7, #8]
}
 800922a:	4618      	mov	r0, r3
 800922c:	371c      	adds	r7, #28
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr

08009236 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009236:	b480      	push	{r7}
 8009238:	b083      	sub	sp, #12
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	f003 0301 	and.w	r3, r3, #1
}
 8009246:	4618      	mov	r0, r3
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009252:	b480      	push	{r7}
 8009254:	b085      	sub	sp, #20
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800926c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009270:	f023 0307 	bic.w	r3, r3, #7
 8009274:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009288:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009298:	b480      	push	{r7}
 800929a:	b087      	sub	sp, #28
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	460b      	mov	r3, r1
 80092a2:	607a      	str	r2, [r7, #4]
 80092a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	333c      	adds	r3, #60	; 0x3c
 80092ae:	3304      	adds	r3, #4
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	4a26      	ldr	r2, [pc, #152]	; (8009350 <USB_EP0_OutStart+0xb8>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d90a      	bls.n	80092d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092cc:	d101      	bne.n	80092d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80092ce:	2300      	movs	r3, #0
 80092d0:	e037      	b.n	8009342 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d8:	461a      	mov	r2, r3
 80092da:	2300      	movs	r3, #0
 80092dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	697a      	ldr	r2, [r7, #20]
 80092e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	697a      	ldr	r2, [r7, #20]
 80092fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009300:	f043 0318 	orr.w	r3, r3, #24
 8009304:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	697a      	ldr	r2, [r7, #20]
 8009310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009314:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009318:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800931a:	7afb      	ldrb	r3, [r7, #11]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d10f      	bne.n	8009340 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009326:	461a      	mov	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	697a      	ldr	r2, [r7, #20]
 8009336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800933a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800933e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009340:	2300      	movs	r3, #0
}
 8009342:	4618      	mov	r0, r3
 8009344:	371c      	adds	r7, #28
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	4f54300a 	.word	0x4f54300a

08009354 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800935c:	2300      	movs	r3, #0
 800935e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	3301      	adds	r3, #1
 8009364:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	4a13      	ldr	r2, [pc, #76]	; (80093b8 <USB_CoreReset+0x64>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d901      	bls.n	8009372 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800936e:	2303      	movs	r3, #3
 8009370:	e01b      	b.n	80093aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	2b00      	cmp	r3, #0
 8009378:	daf2      	bge.n	8009360 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800937a:	2300      	movs	r3, #0
 800937c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	f043 0201 	orr.w	r2, r3, #1
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	3301      	adds	r3, #1
 800938e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	4a09      	ldr	r2, [pc, #36]	; (80093b8 <USB_CoreReset+0x64>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d901      	bls.n	800939c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009398:	2303      	movs	r3, #3
 800939a:	e006      	b.n	80093aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	f003 0301 	and.w	r3, r3, #1
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d0f0      	beq.n	800938a <USB_CoreReset+0x36>

  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3714      	adds	r7, #20
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	00030d40 	.word	0x00030d40

080093bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80093c0:	4904      	ldr	r1, [pc, #16]	; (80093d4 <MX_FATFS_Init+0x18>)
 80093c2:	4805      	ldr	r0, [pc, #20]	; (80093d8 <MX_FATFS_Init+0x1c>)
 80093c4:	f004 fb72 	bl	800daac <FATFS_LinkDriver>
 80093c8:	4603      	mov	r3, r0
 80093ca:	461a      	mov	r2, r3
 80093cc:	4b03      	ldr	r3, [pc, #12]	; (80093dc <MX_FATFS_Init+0x20>)
 80093ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80093d0:	bf00      	nop
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	20002470 	.word	0x20002470
 80093d8:	20000010 	.word	0x20000010
 80093dc:	2000246c 	.word	0x2000246c

080093e0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80093e0:	b480      	push	{r7}
 80093e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80093e4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	4603      	mov	r3, r0
 80093f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 80093fa:	79fb      	ldrb	r3, [r7, #7]
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7f7 ff37 	bl	8001270 <SD_disk_initialize>
 8009402:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009404:	4618      	mov	r0, r3
 8009406:	3708      	adds	r7, #8
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	4603      	mov	r3, r0
 8009414:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8009416:	79fb      	ldrb	r3, [r7, #7]
 8009418:	4618      	mov	r0, r3
 800941a:	f7f8 f815 	bl	8001448 <SD_disk_status>
 800941e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009420:	4618      	mov	r0, r3
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	60b9      	str	r1, [r7, #8]
 8009430:	607a      	str	r2, [r7, #4]
 8009432:	603b      	str	r3, [r7, #0]
 8009434:	4603      	mov	r3, r0
 8009436:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8009438:	7bf8      	ldrb	r0, [r7, #15]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	68b9      	ldr	r1, [r7, #8]
 8009440:	f7f8 f818 	bl	8001474 <SD_disk_read>
 8009444:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b084      	sub	sp, #16
 8009452:	af00      	add	r7, sp, #0
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]
 8009458:	603b      	str	r3, [r7, #0]
 800945a:	4603      	mov	r3, r0
 800945c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800945e:	7bf8      	ldrb	r0, [r7, #15]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	68b9      	ldr	r1, [r7, #8]
 8009466:	f7f8 f86f 	bl	8001548 <SD_disk_write>
 800946a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800946c:	4618      	mov	r0, r3
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	4603      	mov	r3, r0
 800947c:	603a      	str	r2, [r7, #0]
 800947e:	71fb      	strb	r3, [r7, #7]
 8009480:	460b      	mov	r3, r1
 8009482:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 8009484:	79b9      	ldrb	r1, [r7, #6]
 8009486:	79fb      	ldrb	r3, [r7, #7]
 8009488:	683a      	ldr	r2, [r7, #0]
 800948a:	4618      	mov	r0, r3
 800948c:	f7f8 f8e0 	bl	8001650 <SD_disk_ioctl>
 8009490:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009492:	4618      	mov	r0, r3
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
	...

0800949c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	460b      	mov	r3, r1
 80094a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80094a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80094ac:	f008 fb42 	bl	8011b34 <USBD_static_malloc>
 80094b0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d109      	bne.n	80094cc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	32b0      	adds	r2, #176	; 0xb0
 80094c2:	2100      	movs	r1, #0
 80094c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80094c8:	2302      	movs	r3, #2
 80094ca:	e0d4      	b.n	8009676 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80094cc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80094d0:	2100      	movs	r1, #0
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f008 fec4 	bl	8012260 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	32b0      	adds	r2, #176	; 0xb0
 80094e2:	68f9      	ldr	r1, [r7, #12]
 80094e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	32b0      	adds	r2, #176	; 0xb0
 80094f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	7c1b      	ldrb	r3, [r3, #16]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d138      	bne.n	8009576 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009504:	4b5e      	ldr	r3, [pc, #376]	; (8009680 <USBD_CDC_Init+0x1e4>)
 8009506:	7819      	ldrb	r1, [r3, #0]
 8009508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800950c:	2202      	movs	r2, #2
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f008 f9ed 	bl	80118ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009514:	4b5a      	ldr	r3, [pc, #360]	; (8009680 <USBD_CDC_Init+0x1e4>)
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	f003 020f 	and.w	r2, r3, #15
 800951c:	6879      	ldr	r1, [r7, #4]
 800951e:	4613      	mov	r3, r2
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	4413      	add	r3, r2
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	440b      	add	r3, r1
 8009528:	3324      	adds	r3, #36	; 0x24
 800952a:	2201      	movs	r2, #1
 800952c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800952e:	4b55      	ldr	r3, [pc, #340]	; (8009684 <USBD_CDC_Init+0x1e8>)
 8009530:	7819      	ldrb	r1, [r3, #0]
 8009532:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009536:	2202      	movs	r2, #2
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f008 f9d8 	bl	80118ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800953e:	4b51      	ldr	r3, [pc, #324]	; (8009684 <USBD_CDC_Init+0x1e8>)
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	f003 020f 	and.w	r2, r3, #15
 8009546:	6879      	ldr	r1, [r7, #4]
 8009548:	4613      	mov	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	440b      	add	r3, r1
 8009552:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009556:	2201      	movs	r2, #1
 8009558:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800955a:	4b4b      	ldr	r3, [pc, #300]	; (8009688 <USBD_CDC_Init+0x1ec>)
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	f003 020f 	and.w	r2, r3, #15
 8009562:	6879      	ldr	r1, [r7, #4]
 8009564:	4613      	mov	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	4413      	add	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	440b      	add	r3, r1
 800956e:	3326      	adds	r3, #38	; 0x26
 8009570:	2210      	movs	r2, #16
 8009572:	801a      	strh	r2, [r3, #0]
 8009574:	e035      	b.n	80095e2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009576:	4b42      	ldr	r3, [pc, #264]	; (8009680 <USBD_CDC_Init+0x1e4>)
 8009578:	7819      	ldrb	r1, [r3, #0]
 800957a:	2340      	movs	r3, #64	; 0x40
 800957c:	2202      	movs	r2, #2
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f008 f9b5 	bl	80118ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009584:	4b3e      	ldr	r3, [pc, #248]	; (8009680 <USBD_CDC_Init+0x1e4>)
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	f003 020f 	and.w	r2, r3, #15
 800958c:	6879      	ldr	r1, [r7, #4]
 800958e:	4613      	mov	r3, r2
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	4413      	add	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	440b      	add	r3, r1
 8009598:	3324      	adds	r3, #36	; 0x24
 800959a:	2201      	movs	r2, #1
 800959c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800959e:	4b39      	ldr	r3, [pc, #228]	; (8009684 <USBD_CDC_Init+0x1e8>)
 80095a0:	7819      	ldrb	r1, [r3, #0]
 80095a2:	2340      	movs	r3, #64	; 0x40
 80095a4:	2202      	movs	r2, #2
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f008 f9a1 	bl	80118ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80095ac:	4b35      	ldr	r3, [pc, #212]	; (8009684 <USBD_CDC_Init+0x1e8>)
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	f003 020f 	and.w	r2, r3, #15
 80095b4:	6879      	ldr	r1, [r7, #4]
 80095b6:	4613      	mov	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	440b      	add	r3, r1
 80095c0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80095c4:	2201      	movs	r2, #1
 80095c6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80095c8:	4b2f      	ldr	r3, [pc, #188]	; (8009688 <USBD_CDC_Init+0x1ec>)
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	f003 020f 	and.w	r2, r3, #15
 80095d0:	6879      	ldr	r1, [r7, #4]
 80095d2:	4613      	mov	r3, r2
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	4413      	add	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	440b      	add	r3, r1
 80095dc:	3326      	adds	r3, #38	; 0x26
 80095de:	2210      	movs	r2, #16
 80095e0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80095e2:	4b29      	ldr	r3, [pc, #164]	; (8009688 <USBD_CDC_Init+0x1ec>)
 80095e4:	7819      	ldrb	r1, [r3, #0]
 80095e6:	2308      	movs	r3, #8
 80095e8:	2203      	movs	r2, #3
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f008 f97f 	bl	80118ee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80095f0:	4b25      	ldr	r3, [pc, #148]	; (8009688 <USBD_CDC_Init+0x1ec>)
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	f003 020f 	and.w	r2, r3, #15
 80095f8:	6879      	ldr	r1, [r7, #4]
 80095fa:	4613      	mov	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	440b      	add	r3, r1
 8009604:	3324      	adds	r3, #36	; 0x24
 8009606:	2201      	movs	r2, #1
 8009608:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	33b0      	adds	r3, #176	; 0xb0
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	4413      	add	r3, r2
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800963c:	2b00      	cmp	r3, #0
 800963e:	d101      	bne.n	8009644 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009640:	2302      	movs	r3, #2
 8009642:	e018      	b.n	8009676 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	7c1b      	ldrb	r3, [r3, #16]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10a      	bne.n	8009662 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800964c:	4b0d      	ldr	r3, [pc, #52]	; (8009684 <USBD_CDC_Init+0x1e8>)
 800964e:	7819      	ldrb	r1, [r3, #0]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009656:	f44f 7300 	mov.w	r3, #512	; 0x200
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f008 fa36 	bl	8011acc <USBD_LL_PrepareReceive>
 8009660:	e008      	b.n	8009674 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009662:	4b08      	ldr	r3, [pc, #32]	; (8009684 <USBD_CDC_Init+0x1e8>)
 8009664:	7819      	ldrb	r1, [r3, #0]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800966c:	2340      	movs	r3, #64	; 0x40
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f008 fa2c 	bl	8011acc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	200000ab 	.word	0x200000ab
 8009684:	200000ac 	.word	0x200000ac
 8009688:	200000ad 	.word	0x200000ad

0800968c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	460b      	mov	r3, r1
 8009696:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009698:	4b3a      	ldr	r3, [pc, #232]	; (8009784 <USBD_CDC_DeInit+0xf8>)
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	4619      	mov	r1, r3
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f008 f94b 	bl	801193a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80096a4:	4b37      	ldr	r3, [pc, #220]	; (8009784 <USBD_CDC_DeInit+0xf8>)
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	f003 020f 	and.w	r2, r3, #15
 80096ac:	6879      	ldr	r1, [r7, #4]
 80096ae:	4613      	mov	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4413      	add	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	440b      	add	r3, r1
 80096b8:	3324      	adds	r3, #36	; 0x24
 80096ba:	2200      	movs	r2, #0
 80096bc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80096be:	4b32      	ldr	r3, [pc, #200]	; (8009788 <USBD_CDC_DeInit+0xfc>)
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	4619      	mov	r1, r3
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f008 f938 	bl	801193a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80096ca:	4b2f      	ldr	r3, [pc, #188]	; (8009788 <USBD_CDC_DeInit+0xfc>)
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	f003 020f 	and.w	r2, r3, #15
 80096d2:	6879      	ldr	r1, [r7, #4]
 80096d4:	4613      	mov	r3, r2
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	4413      	add	r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	440b      	add	r3, r1
 80096de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80096e2:	2200      	movs	r2, #0
 80096e4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80096e6:	4b29      	ldr	r3, [pc, #164]	; (800978c <USBD_CDC_DeInit+0x100>)
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	4619      	mov	r1, r3
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f008 f924 	bl	801193a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80096f2:	4b26      	ldr	r3, [pc, #152]	; (800978c <USBD_CDC_DeInit+0x100>)
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	f003 020f 	and.w	r2, r3, #15
 80096fa:	6879      	ldr	r1, [r7, #4]
 80096fc:	4613      	mov	r3, r2
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	4413      	add	r3, r2
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	440b      	add	r3, r1
 8009706:	3324      	adds	r3, #36	; 0x24
 8009708:	2200      	movs	r2, #0
 800970a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800970c:	4b1f      	ldr	r3, [pc, #124]	; (800978c <USBD_CDC_DeInit+0x100>)
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	f003 020f 	and.w	r2, r3, #15
 8009714:	6879      	ldr	r1, [r7, #4]
 8009716:	4613      	mov	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	440b      	add	r3, r1
 8009720:	3326      	adds	r3, #38	; 0x26
 8009722:	2200      	movs	r2, #0
 8009724:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	32b0      	adds	r2, #176	; 0xb0
 8009730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d01f      	beq.n	8009778 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	33b0      	adds	r3, #176	; 0xb0
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	4413      	add	r3, r2
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	32b0      	adds	r2, #176	; 0xb0
 8009756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800975a:	4618      	mov	r0, r3
 800975c:	f008 f9f8 	bl	8011b50 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	32b0      	adds	r2, #176	; 0xb0
 800976a:	2100      	movs	r1, #0
 800976c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	200000ab 	.word	0x200000ab
 8009788:	200000ac 	.word	0x200000ac
 800978c:	200000ad 	.word	0x200000ad

08009790 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	32b0      	adds	r2, #176	; 0xb0
 80097a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80097aa:	2300      	movs	r3, #0
 80097ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80097ae:	2300      	movs	r3, #0
 80097b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d101      	bne.n	80097c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80097bc:	2303      	movs	r3, #3
 80097be:	e0bf      	b.n	8009940 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d050      	beq.n	800986e <USBD_CDC_Setup+0xde>
 80097cc:	2b20      	cmp	r3, #32
 80097ce:	f040 80af 	bne.w	8009930 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	88db      	ldrh	r3, [r3, #6]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d03a      	beq.n	8009850 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	b25b      	sxtb	r3, r3
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	da1b      	bge.n	800981c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	33b0      	adds	r3, #176	; 0xb0
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	4413      	add	r3, r2
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	683a      	ldr	r2, [r7, #0]
 80097f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80097fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80097fc:	683a      	ldr	r2, [r7, #0]
 80097fe:	88d2      	ldrh	r2, [r2, #6]
 8009800:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	88db      	ldrh	r3, [r3, #6]
 8009806:	2b07      	cmp	r3, #7
 8009808:	bf28      	it	cs
 800980a:	2307      	movcs	r3, #7
 800980c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	89fa      	ldrh	r2, [r7, #14]
 8009812:	4619      	mov	r1, r3
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f001 fd89 	bl	800b32c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800981a:	e090      	b.n	800993e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	785a      	ldrb	r2, [r3, #1]
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	88db      	ldrh	r3, [r3, #6]
 800982a:	2b3f      	cmp	r3, #63	; 0x3f
 800982c:	d803      	bhi.n	8009836 <USBD_CDC_Setup+0xa6>
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	88db      	ldrh	r3, [r3, #6]
 8009832:	b2da      	uxtb	r2, r3
 8009834:	e000      	b.n	8009838 <USBD_CDC_Setup+0xa8>
 8009836:	2240      	movs	r2, #64	; 0x40
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800983e:	6939      	ldr	r1, [r7, #16]
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009846:	461a      	mov	r2, r3
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f001 fd9b 	bl	800b384 <USBD_CtlPrepareRx>
      break;
 800984e:	e076      	b.n	800993e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	33b0      	adds	r3, #176	; 0xb0
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	4413      	add	r3, r2
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	7850      	ldrb	r0, [r2, #1]
 8009866:	2200      	movs	r2, #0
 8009868:	6839      	ldr	r1, [r7, #0]
 800986a:	4798      	blx	r3
      break;
 800986c:	e067      	b.n	800993e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	785b      	ldrb	r3, [r3, #1]
 8009872:	2b0b      	cmp	r3, #11
 8009874:	d851      	bhi.n	800991a <USBD_CDC_Setup+0x18a>
 8009876:	a201      	add	r2, pc, #4	; (adr r2, 800987c <USBD_CDC_Setup+0xec>)
 8009878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987c:	080098ad 	.word	0x080098ad
 8009880:	08009929 	.word	0x08009929
 8009884:	0800991b 	.word	0x0800991b
 8009888:	0800991b 	.word	0x0800991b
 800988c:	0800991b 	.word	0x0800991b
 8009890:	0800991b 	.word	0x0800991b
 8009894:	0800991b 	.word	0x0800991b
 8009898:	0800991b 	.word	0x0800991b
 800989c:	0800991b 	.word	0x0800991b
 80098a0:	0800991b 	.word	0x0800991b
 80098a4:	080098d7 	.word	0x080098d7
 80098a8:	08009901 	.word	0x08009901
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	2b03      	cmp	r3, #3
 80098b6:	d107      	bne.n	80098c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80098b8:	f107 030a 	add.w	r3, r7, #10
 80098bc:	2202      	movs	r2, #2
 80098be:	4619      	mov	r1, r3
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f001 fd33 	bl	800b32c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80098c6:	e032      	b.n	800992e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80098c8:	6839      	ldr	r1, [r7, #0]
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f001 fcbd 	bl	800b24a <USBD_CtlError>
            ret = USBD_FAIL;
 80098d0:	2303      	movs	r3, #3
 80098d2:	75fb      	strb	r3, [r7, #23]
          break;
 80098d4:	e02b      	b.n	800992e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	2b03      	cmp	r3, #3
 80098e0:	d107      	bne.n	80098f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80098e2:	f107 030d 	add.w	r3, r7, #13
 80098e6:	2201      	movs	r2, #1
 80098e8:	4619      	mov	r1, r3
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f001 fd1e 	bl	800b32c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80098f0:	e01d      	b.n	800992e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80098f2:	6839      	ldr	r1, [r7, #0]
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f001 fca8 	bl	800b24a <USBD_CtlError>
            ret = USBD_FAIL;
 80098fa:	2303      	movs	r3, #3
 80098fc:	75fb      	strb	r3, [r7, #23]
          break;
 80098fe:	e016      	b.n	800992e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009906:	b2db      	uxtb	r3, r3
 8009908:	2b03      	cmp	r3, #3
 800990a:	d00f      	beq.n	800992c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800990c:	6839      	ldr	r1, [r7, #0]
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f001 fc9b 	bl	800b24a <USBD_CtlError>
            ret = USBD_FAIL;
 8009914:	2303      	movs	r3, #3
 8009916:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009918:	e008      	b.n	800992c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800991a:	6839      	ldr	r1, [r7, #0]
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f001 fc94 	bl	800b24a <USBD_CtlError>
          ret = USBD_FAIL;
 8009922:	2303      	movs	r3, #3
 8009924:	75fb      	strb	r3, [r7, #23]
          break;
 8009926:	e002      	b.n	800992e <USBD_CDC_Setup+0x19e>
          break;
 8009928:	bf00      	nop
 800992a:	e008      	b.n	800993e <USBD_CDC_Setup+0x1ae>
          break;
 800992c:	bf00      	nop
      }
      break;
 800992e:	e006      	b.n	800993e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009930:	6839      	ldr	r1, [r7, #0]
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f001 fc89 	bl	800b24a <USBD_CtlError>
      ret = USBD_FAIL;
 8009938:	2303      	movs	r3, #3
 800993a:	75fb      	strb	r3, [r7, #23]
      break;
 800993c:	bf00      	nop
  }

  return (uint8_t)ret;
 800993e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009940:	4618      	mov	r0, r3
 8009942:	3718      	adds	r7, #24
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	460b      	mov	r3, r1
 8009952:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800995a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	32b0      	adds	r2, #176	; 0xb0
 8009966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d101      	bne.n	8009972 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800996e:	2303      	movs	r3, #3
 8009970:	e065      	b.n	8009a3e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	32b0      	adds	r2, #176	; 0xb0
 800997c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009980:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009982:	78fb      	ldrb	r3, [r7, #3]
 8009984:	f003 020f 	and.w	r2, r3, #15
 8009988:	6879      	ldr	r1, [r7, #4]
 800998a:	4613      	mov	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4413      	add	r3, r2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	440b      	add	r3, r1
 8009994:	3318      	adds	r3, #24
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d02f      	beq.n	80099fc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800999c:	78fb      	ldrb	r3, [r7, #3]
 800999e:	f003 020f 	and.w	r2, r3, #15
 80099a2:	6879      	ldr	r1, [r7, #4]
 80099a4:	4613      	mov	r3, r2
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	4413      	add	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	440b      	add	r3, r1
 80099ae:	3318      	adds	r3, #24
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	78fb      	ldrb	r3, [r7, #3]
 80099b4:	f003 010f 	and.w	r1, r3, #15
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	460b      	mov	r3, r1
 80099bc:	00db      	lsls	r3, r3, #3
 80099be:	440b      	add	r3, r1
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4403      	add	r3, r0
 80099c4:	3348      	adds	r3, #72	; 0x48
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80099cc:	fb01 f303 	mul.w	r3, r1, r3
 80099d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d112      	bne.n	80099fc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80099d6:	78fb      	ldrb	r3, [r7, #3]
 80099d8:	f003 020f 	and.w	r2, r3, #15
 80099dc:	6879      	ldr	r1, [r7, #4]
 80099de:	4613      	mov	r3, r2
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	4413      	add	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	440b      	add	r3, r1
 80099e8:	3318      	adds	r3, #24
 80099ea:	2200      	movs	r2, #0
 80099ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80099ee:	78f9      	ldrb	r1, [r7, #3]
 80099f0:	2300      	movs	r3, #0
 80099f2:	2200      	movs	r2, #0
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f008 f848 	bl	8011a8a <USBD_LL_Transmit>
 80099fa:	e01f      	b.n	8009a3c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	33b0      	adds	r3, #176	; 0xb0
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4413      	add	r3, r2
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d010      	beq.n	8009a3c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	33b0      	adds	r3, #176	; 0xb0
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	4413      	add	r3, r2
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009a32:	68ba      	ldr	r2, [r7, #8]
 8009a34:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009a38:	78fa      	ldrb	r2, [r7, #3]
 8009a3a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b084      	sub	sp, #16
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	460b      	mov	r3, r1
 8009a50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	32b0      	adds	r2, #176	; 0xb0
 8009a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a60:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	32b0      	adds	r2, #176	; 0xb0
 8009a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d101      	bne.n	8009a78 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009a74:	2303      	movs	r3, #3
 8009a76:	e01a      	b.n	8009aae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009a78:	78fb      	ldrb	r3, [r7, #3]
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f008 f846 	bl	8011b0e <USBD_LL_GetRxDataSize>
 8009a82:	4602      	mov	r2, r0
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	33b0      	adds	r3, #176	; 0xb0
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4413      	add	r3, r2
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009aa2:	68fa      	ldr	r2, [r7, #12]
 8009aa4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009aa8:	4611      	mov	r1, r2
 8009aaa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009aac:	2300      	movs	r3, #0
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3710      	adds	r7, #16
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009ab6:	b580      	push	{r7, lr}
 8009ab8:	b084      	sub	sp, #16
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	32b0      	adds	r2, #176	; 0xb0
 8009ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009acc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d101      	bne.n	8009ad8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009ad4:	2303      	movs	r3, #3
 8009ad6:	e025      	b.n	8009b24 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	33b0      	adds	r3, #176	; 0xb0
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4413      	add	r3, r2
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d01a      	beq.n	8009b22 <USBD_CDC_EP0_RxReady+0x6c>
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009af2:	2bff      	cmp	r3, #255	; 0xff
 8009af4:	d015      	beq.n	8009b22 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	33b0      	adds	r3, #176	; 0xb0
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	4413      	add	r3, r2
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009b0e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009b16:	b292      	uxth	r2, r2
 8009b18:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	22ff      	movs	r2, #255	; 0xff
 8009b1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b086      	sub	sp, #24
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b34:	2182      	movs	r1, #130	; 0x82
 8009b36:	4818      	ldr	r0, [pc, #96]	; (8009b98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009b38:	f000 fd4f 	bl	800a5da <USBD_GetEpDesc>
 8009b3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b3e:	2101      	movs	r1, #1
 8009b40:	4815      	ldr	r0, [pc, #84]	; (8009b98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009b42:	f000 fd4a 	bl	800a5da <USBD_GetEpDesc>
 8009b46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b48:	2181      	movs	r1, #129	; 0x81
 8009b4a:	4813      	ldr	r0, [pc, #76]	; (8009b98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009b4c:	f000 fd45 	bl	800a5da <USBD_GetEpDesc>
 8009b50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d002      	beq.n	8009b5e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	2210      	movs	r2, #16
 8009b5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d006      	beq.n	8009b72 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b6c:	711a      	strb	r2, [r3, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d006      	beq.n	8009b86 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b80:	711a      	strb	r2, [r3, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2243      	movs	r2, #67	; 0x43
 8009b8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b8c:	4b02      	ldr	r3, [pc, #8]	; (8009b98 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3718      	adds	r7, #24
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	20000068 	.word	0x20000068

08009b9c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b086      	sub	sp, #24
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ba4:	2182      	movs	r1, #130	; 0x82
 8009ba6:	4818      	ldr	r0, [pc, #96]	; (8009c08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ba8:	f000 fd17 	bl	800a5da <USBD_GetEpDesc>
 8009bac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009bae:	2101      	movs	r1, #1
 8009bb0:	4815      	ldr	r0, [pc, #84]	; (8009c08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009bb2:	f000 fd12 	bl	800a5da <USBD_GetEpDesc>
 8009bb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009bb8:	2181      	movs	r1, #129	; 0x81
 8009bba:	4813      	ldr	r0, [pc, #76]	; (8009c08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009bbc:	f000 fd0d 	bl	800a5da <USBD_GetEpDesc>
 8009bc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	2210      	movs	r2, #16
 8009bcc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d006      	beq.n	8009be2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	711a      	strb	r2, [r3, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f042 0202 	orr.w	r2, r2, #2
 8009be0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d006      	beq.n	8009bf6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	711a      	strb	r2, [r3, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f042 0202 	orr.w	r2, r2, #2
 8009bf4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2243      	movs	r2, #67	; 0x43
 8009bfa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009bfc:	4b02      	ldr	r3, [pc, #8]	; (8009c08 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3718      	adds	r7, #24
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	20000068 	.word	0x20000068

08009c0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b086      	sub	sp, #24
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009c14:	2182      	movs	r1, #130	; 0x82
 8009c16:	4818      	ldr	r0, [pc, #96]	; (8009c78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009c18:	f000 fcdf 	bl	800a5da <USBD_GetEpDesc>
 8009c1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009c1e:	2101      	movs	r1, #1
 8009c20:	4815      	ldr	r0, [pc, #84]	; (8009c78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009c22:	f000 fcda 	bl	800a5da <USBD_GetEpDesc>
 8009c26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009c28:	2181      	movs	r1, #129	; 0x81
 8009c2a:	4813      	ldr	r0, [pc, #76]	; (8009c78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009c2c:	f000 fcd5 	bl	800a5da <USBD_GetEpDesc>
 8009c30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d002      	beq.n	8009c3e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	2210      	movs	r2, #16
 8009c3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d006      	beq.n	8009c52 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c4c:	711a      	strb	r2, [r3, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d006      	beq.n	8009c66 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c60:	711a      	strb	r2, [r3, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2243      	movs	r2, #67	; 0x43
 8009c6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009c6c:	4b02      	ldr	r3, [pc, #8]	; (8009c78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3718      	adds	r7, #24
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	20000068 	.word	0x20000068

08009c7c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	220a      	movs	r2, #10
 8009c88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009c8a:	4b03      	ldr	r3, [pc, #12]	; (8009c98 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr
 8009c98:	20000024 	.word	0x20000024

08009c9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d101      	bne.n	8009cb0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009cac:	2303      	movs	r3, #3
 8009cae:	e009      	b.n	8009cc4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	33b0      	adds	r3, #176	; 0xb0
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4413      	add	r3, r2
 8009cbe:	683a      	ldr	r2, [r7, #0]
 8009cc0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b087      	sub	sp, #28
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	32b0      	adds	r2, #176	; 0xb0
 8009ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cea:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d101      	bne.n	8009cf6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	e008      	b.n	8009d08 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	68ba      	ldr	r2, [r7, #8]
 8009cfa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	371c      	adds	r7, #28
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	32b0      	adds	r2, #176	; 0xb0
 8009d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d2c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d101      	bne.n	8009d38 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009d34:	2303      	movs	r3, #3
 8009d36:	e004      	b.n	8009d42 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3714      	adds	r7, #20
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
	...

08009d50 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	32b0      	adds	r2, #176	; 0xb0
 8009d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d66:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	32b0      	adds	r2, #176	; 0xb0
 8009d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d101      	bne.n	8009d82 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009d7e:	2303      	movs	r3, #3
 8009d80:	e025      	b.n	8009dce <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d11f      	bne.n	8009dcc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009d94:	4b10      	ldr	r3, [pc, #64]	; (8009dd8 <USBD_CDC_TransmitPacket+0x88>)
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	f003 020f 	and.w	r2, r3, #15
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	4613      	mov	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4403      	add	r3, r0
 8009dae:	3318      	adds	r3, #24
 8009db0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009db2:	4b09      	ldr	r3, [pc, #36]	; (8009dd8 <USBD_CDC_TransmitPacket+0x88>)
 8009db4:	7819      	ldrb	r1, [r3, #0]
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f007 fe61 	bl	8011a8a <USBD_LL_Transmit>

    ret = USBD_OK;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	200000ab 	.word	0x200000ab

08009ddc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	32b0      	adds	r2, #176	; 0xb0
 8009dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	32b0      	adds	r2, #176	; 0xb0
 8009dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d101      	bne.n	8009e0a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009e06:	2303      	movs	r3, #3
 8009e08:	e018      	b.n	8009e3c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	7c1b      	ldrb	r3, [r3, #16]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d10a      	bne.n	8009e28 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009e12:	4b0c      	ldr	r3, [pc, #48]	; (8009e44 <USBD_CDC_ReceivePacket+0x68>)
 8009e14:	7819      	ldrb	r1, [r3, #0]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f007 fe53 	bl	8011acc <USBD_LL_PrepareReceive>
 8009e26:	e008      	b.n	8009e3a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009e28:	4b06      	ldr	r3, [pc, #24]	; (8009e44 <USBD_CDC_ReceivePacket+0x68>)
 8009e2a:	7819      	ldrb	r1, [r3, #0]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e32:	2340      	movs	r3, #64	; 0x40
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f007 fe49 	bl	8011acc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3710      	adds	r7, #16
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	200000ac 	.word	0x200000ac

08009e48 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b086      	sub	sp, #24
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	4613      	mov	r3, r2
 8009e54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d101      	bne.n	8009e60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	e01f      	b.n	8009ea0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d003      	beq.n	8009e86 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	79fa      	ldrb	r2, [r7, #7]
 8009e92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f007 fcc3 	bl	8011820 <USBD_LL_Init>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d101      	bne.n	8009ec0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	e025      	b.n	8009f0c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	683a      	ldr	r2, [r7, #0]
 8009ec4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	32ae      	adds	r2, #174	; 0xae
 8009ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00f      	beq.n	8009efc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	32ae      	adds	r2, #174	; 0xae
 8009ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eec:	f107 020e 	add.w	r2, r7, #14
 8009ef0:	4610      	mov	r0, r2
 8009ef2:	4798      	blx	r3
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009f02:	1c5a      	adds	r2, r3, #1
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f007 fccb 	bl	80118b8 <USBD_LL_Start>
 8009f22:	4603      	mov	r3, r0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3708      	adds	r7, #8
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f34:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	370c      	adds	r7, #12
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr

08009f42 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b084      	sub	sp, #16
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d009      	beq.n	8009f70 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	78fa      	ldrb	r2, [r7, #3]
 8009f66:	4611      	mov	r1, r2
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	4798      	blx	r3
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b084      	sub	sp, #16
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	460b      	mov	r3, r1
 8009f84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	78fa      	ldrb	r2, [r7, #3]
 8009f94:	4611      	mov	r1, r2
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	4798      	blx	r3
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d001      	beq.n	8009fa4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009fa0:	2303      	movs	r3, #3
 8009fa2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b084      	sub	sp, #16
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
 8009fb6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009fbe:	6839      	ldr	r1, [r7, #0]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f001 f908 	bl	800b1d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009fe2:	f003 031f 	and.w	r3, r3, #31
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d01a      	beq.n	800a020 <USBD_LL_SetupStage+0x72>
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	d822      	bhi.n	800a034 <USBD_LL_SetupStage+0x86>
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d002      	beq.n	8009ff8 <USBD_LL_SetupStage+0x4a>
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d00a      	beq.n	800a00c <USBD_LL_SetupStage+0x5e>
 8009ff6:	e01d      	b.n	800a034 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ffe:	4619      	mov	r1, r3
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 fb5f 	bl	800a6c4 <USBD_StdDevReq>
 800a006:	4603      	mov	r3, r0
 800a008:	73fb      	strb	r3, [r7, #15]
      break;
 800a00a:	e020      	b.n	800a04e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a012:	4619      	mov	r1, r3
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 fbc7 	bl	800a7a8 <USBD_StdItfReq>
 800a01a:	4603      	mov	r3, r0
 800a01c:	73fb      	strb	r3, [r7, #15]
      break;
 800a01e:	e016      	b.n	800a04e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a026:	4619      	mov	r1, r3
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 fc29 	bl	800a880 <USBD_StdEPReq>
 800a02e:	4603      	mov	r3, r0
 800a030:	73fb      	strb	r3, [r7, #15]
      break;
 800a032:	e00c      	b.n	800a04e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a03a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	4619      	mov	r1, r3
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f007 fc98 	bl	8011978 <USBD_LL_StallEP>
 800a048:	4603      	mov	r3, r0
 800a04a:	73fb      	strb	r3, [r7, #15]
      break;
 800a04c:	bf00      	nop
  }

  return ret;
 800a04e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b086      	sub	sp, #24
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	460b      	mov	r3, r1
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a066:	2300      	movs	r3, #0
 800a068:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a06a:	7afb      	ldrb	r3, [r7, #11]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d16e      	bne.n	800a14e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a076:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a07e:	2b03      	cmp	r3, #3
 800a080:	f040 8098 	bne.w	800a1b4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	689a      	ldr	r2, [r3, #8]
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d913      	bls.n	800a0b8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	689a      	ldr	r2, [r3, #8]
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	1ad2      	subs	r2, r2, r3
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	68da      	ldr	r2, [r3, #12]
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	bf28      	it	cs
 800a0aa:	4613      	movcs	r3, r2
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	6879      	ldr	r1, [r7, #4]
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f001 f984 	bl	800b3be <USBD_CtlContinueRx>
 800a0b6:	e07d      	b.n	800a1b4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a0be:	f003 031f 	and.w	r3, r3, #31
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	d014      	beq.n	800a0f0 <USBD_LL_DataOutStage+0x98>
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	d81d      	bhi.n	800a106 <USBD_LL_DataOutStage+0xae>
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d002      	beq.n	800a0d4 <USBD_LL_DataOutStage+0x7c>
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d003      	beq.n	800a0da <USBD_LL_DataOutStage+0x82>
 800a0d2:	e018      	b.n	800a106 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	75bb      	strb	r3, [r7, #22]
            break;
 800a0d8:	e018      	b.n	800a10c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	68f8      	ldr	r0, [r7, #12]
 800a0e6:	f000 fa5e 	bl	800a5a6 <USBD_CoreFindIF>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	75bb      	strb	r3, [r7, #22]
            break;
 800a0ee:	e00d      	b.n	800a10c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	68f8      	ldr	r0, [r7, #12]
 800a0fc:	f000 fa60 	bl	800a5c0 <USBD_CoreFindEP>
 800a100:	4603      	mov	r3, r0
 800a102:	75bb      	strb	r3, [r7, #22]
            break;
 800a104:	e002      	b.n	800a10c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a106:	2300      	movs	r3, #0
 800a108:	75bb      	strb	r3, [r7, #22]
            break;
 800a10a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a10c:	7dbb      	ldrb	r3, [r7, #22]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d119      	bne.n	800a146 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	2b03      	cmp	r3, #3
 800a11c:	d113      	bne.n	800a146 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a11e:	7dba      	ldrb	r2, [r7, #22]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	32ae      	adds	r2, #174	; 0xae
 800a124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00b      	beq.n	800a146 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a12e:	7dba      	ldrb	r2, [r7, #22]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a136:	7dba      	ldrb	r2, [r7, #22]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	32ae      	adds	r2, #174	; 0xae
 800a13c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f001 f94a 	bl	800b3e0 <USBD_CtlSendStatus>
 800a14c:	e032      	b.n	800a1b4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a14e:	7afb      	ldrb	r3, [r7, #11]
 800a150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a154:	b2db      	uxtb	r3, r3
 800a156:	4619      	mov	r1, r3
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f000 fa31 	bl	800a5c0 <USBD_CoreFindEP>
 800a15e:	4603      	mov	r3, r0
 800a160:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a162:	7dbb      	ldrb	r3, [r7, #22]
 800a164:	2bff      	cmp	r3, #255	; 0xff
 800a166:	d025      	beq.n	800a1b4 <USBD_LL_DataOutStage+0x15c>
 800a168:	7dbb      	ldrb	r3, [r7, #22]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d122      	bne.n	800a1b4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b03      	cmp	r3, #3
 800a178:	d117      	bne.n	800a1aa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a17a:	7dba      	ldrb	r2, [r7, #22]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	32ae      	adds	r2, #174	; 0xae
 800a180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00f      	beq.n	800a1aa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a18a:	7dba      	ldrb	r2, [r7, #22]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a192:	7dba      	ldrb	r2, [r7, #22]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	32ae      	adds	r2, #174	; 0xae
 800a198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a19c:	699b      	ldr	r3, [r3, #24]
 800a19e:	7afa      	ldrb	r2, [r7, #11]
 800a1a0:	4611      	mov	r1, r2
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	4798      	blx	r3
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a1aa:	7dfb      	ldrb	r3, [r7, #23]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d001      	beq.n	800a1b4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a1b0:	7dfb      	ldrb	r3, [r7, #23]
 800a1b2:	e000      	b.n	800a1b6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3718      	adds	r7, #24
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b086      	sub	sp, #24
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	60f8      	str	r0, [r7, #12]
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	607a      	str	r2, [r7, #4]
 800a1ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a1cc:	7afb      	ldrb	r3, [r7, #11]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d16f      	bne.n	800a2b2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	3314      	adds	r3, #20
 800a1d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	d15a      	bne.n	800a298 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	689a      	ldr	r2, [r3, #8]
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d914      	bls.n	800a218 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	689a      	ldr	r2, [r3, #8]
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	68db      	ldr	r3, [r3, #12]
 800a1f6:	1ad2      	subs	r2, r2, r3
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	461a      	mov	r2, r3
 800a202:	6879      	ldr	r1, [r7, #4]
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f001 f8ac 	bl	800b362 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a20a:	2300      	movs	r3, #0
 800a20c:	2200      	movs	r2, #0
 800a20e:	2100      	movs	r1, #0
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f007 fc5b 	bl	8011acc <USBD_LL_PrepareReceive>
 800a216:	e03f      	b.n	800a298 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	68da      	ldr	r2, [r3, #12]
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	429a      	cmp	r2, r3
 800a222:	d11c      	bne.n	800a25e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	685a      	ldr	r2, [r3, #4]
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d316      	bcc.n	800a25e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	685a      	ldr	r2, [r3, #4]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d20f      	bcs.n	800a25e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a23e:	2200      	movs	r2, #0
 800a240:	2100      	movs	r1, #0
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f001 f88d 	bl	800b362 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a250:	2300      	movs	r3, #0
 800a252:	2200      	movs	r2, #0
 800a254:	2100      	movs	r1, #0
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f007 fc38 	bl	8011acc <USBD_LL_PrepareReceive>
 800a25c:	e01c      	b.n	800a298 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a264:	b2db      	uxtb	r3, r3
 800a266:	2b03      	cmp	r3, #3
 800a268:	d10f      	bne.n	800a28a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d009      	beq.n	800a28a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2200      	movs	r2, #0
 800a27a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a28a:	2180      	movs	r1, #128	; 0x80
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f007 fb73 	bl	8011978 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f001 f8b7 	bl	800b406 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d03a      	beq.n	800a318 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f7ff fe42 	bl	8009f2c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a2b0:	e032      	b.n	800a318 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a2b2:	7afb      	ldrb	r3, [r7, #11]
 800a2b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f000 f97f 	bl	800a5c0 <USBD_CoreFindEP>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a2c6:	7dfb      	ldrb	r3, [r7, #23]
 800a2c8:	2bff      	cmp	r3, #255	; 0xff
 800a2ca:	d025      	beq.n	800a318 <USBD_LL_DataInStage+0x15a>
 800a2cc:	7dfb      	ldrb	r3, [r7, #23]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d122      	bne.n	800a318 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2d8:	b2db      	uxtb	r3, r3
 800a2da:	2b03      	cmp	r3, #3
 800a2dc:	d11c      	bne.n	800a318 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a2de:	7dfa      	ldrb	r2, [r7, #23]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	32ae      	adds	r2, #174	; 0xae
 800a2e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2e8:	695b      	ldr	r3, [r3, #20]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d014      	beq.n	800a318 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a2ee:	7dfa      	ldrb	r2, [r7, #23]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a2f6:	7dfa      	ldrb	r2, [r7, #23]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	32ae      	adds	r2, #174	; 0xae
 800a2fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	7afa      	ldrb	r2, [r7, #11]
 800a304:	4611      	mov	r1, r2
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	4798      	blx	r3
 800a30a:	4603      	mov	r3, r0
 800a30c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a30e:	7dbb      	ldrb	r3, [r7, #22]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d001      	beq.n	800a318 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a314:	7dbb      	ldrb	r3, [r7, #22]
 800a316:	e000      	b.n	800a31a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3718      	adds	r7, #24
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b084      	sub	sp, #16
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a32a:	2300      	movs	r3, #0
 800a32c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2201      	movs	r2, #1
 800a332:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d014      	beq.n	800a388 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00e      	beq.n	800a388 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	6852      	ldr	r2, [r2, #4]
 800a376:	b2d2      	uxtb	r2, r2
 800a378:	4611      	mov	r1, r2
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	4798      	blx	r3
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d001      	beq.n	800a388 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a384:	2303      	movs	r3, #3
 800a386:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a388:	2340      	movs	r3, #64	; 0x40
 800a38a:	2200      	movs	r2, #0
 800a38c:	2100      	movs	r1, #0
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f007 faad 	bl	80118ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2240      	movs	r2, #64	; 0x40
 800a3a0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3a4:	2340      	movs	r3, #64	; 0x40
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	2180      	movs	r1, #128	; 0x80
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f007 fa9f 	bl	80118ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2240      	movs	r2, #64	; 0x40
 800a3ba:	621a      	str	r2, [r3, #32]

  return ret;
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b083      	sub	sp, #12
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	78fa      	ldrb	r2, [r7, #3]
 800a3d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	370c      	adds	r7, #12
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr

0800a3e6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a3e6:	b480      	push	{r7}
 800a3e8:	b083      	sub	sp, #12
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2204      	movs	r2, #4
 800a400:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	370c      	adds	r7, #12
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr

0800a412 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a412:	b480      	push	{r7}
 800a414:	b083      	sub	sp, #12
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a420:	b2db      	uxtb	r3, r3
 800a422:	2b04      	cmp	r3, #4
 800a424:	d106      	bne.n	800a434 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a42c:	b2da      	uxtb	r2, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a434:	2300      	movs	r3, #0
}
 800a436:	4618      	mov	r0, r3
 800a438:	370c      	adds	r7, #12
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr

0800a442 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a442:	b580      	push	{r7, lr}
 800a444:	b082      	sub	sp, #8
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a450:	b2db      	uxtb	r3, r3
 800a452:	2b03      	cmp	r3, #3
 800a454:	d110      	bne.n	800a478 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00b      	beq.n	800a478 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a466:	69db      	ldr	r3, [r3, #28]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d005      	beq.n	800a478 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a472:	69db      	ldr	r3, [r3, #28]
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3708      	adds	r7, #8
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b082      	sub	sp, #8
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
 800a48a:	460b      	mov	r3, r1
 800a48c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	32ae      	adds	r2, #174	; 0xae
 800a498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d101      	bne.n	800a4a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a4a0:	2303      	movs	r3, #3
 800a4a2:	e01c      	b.n	800a4de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	2b03      	cmp	r3, #3
 800a4ae:	d115      	bne.n	800a4dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	32ae      	adds	r2, #174	; 0xae
 800a4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4be:	6a1b      	ldr	r3, [r3, #32]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00b      	beq.n	800a4dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	32ae      	adds	r2, #174	; 0xae
 800a4ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4d2:	6a1b      	ldr	r3, [r3, #32]
 800a4d4:	78fa      	ldrb	r2, [r7, #3]
 800a4d6:	4611      	mov	r1, r2
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3708      	adds	r7, #8
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b082      	sub	sp, #8
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	32ae      	adds	r2, #174	; 0xae
 800a4fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d101      	bne.n	800a508 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a504:	2303      	movs	r3, #3
 800a506:	e01c      	b.n	800a542 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	2b03      	cmp	r3, #3
 800a512:	d115      	bne.n	800a540 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	32ae      	adds	r2, #174	; 0xae
 800a51e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a524:	2b00      	cmp	r3, #0
 800a526:	d00b      	beq.n	800a540 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	32ae      	adds	r2, #174	; 0xae
 800a532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a538:	78fa      	ldrb	r2, [r7, #3]
 800a53a:	4611      	mov	r1, r2
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3708      	adds	r7, #8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a54a:	b480      	push	{r7}
 800a54c:	b083      	sub	sp, #12
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a552:	2300      	movs	r3, #0
}
 800a554:	4618      	mov	r0, r3
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a568:	2300      	movs	r3, #0
 800a56a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00e      	beq.n	800a59c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	6852      	ldr	r2, [r2, #4]
 800a58a:	b2d2      	uxtb	r2, r2
 800a58c:	4611      	mov	r1, r2
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	4798      	blx	r3
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d001      	beq.n	800a59c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a598:	2303      	movs	r3, #3
 800a59a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	b083      	sub	sp, #12
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a5b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	370c      	adds	r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a5cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	370c      	adds	r7, #12
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr

0800a5da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b086      	sub	sp, #24
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	885b      	ldrh	r3, [r3, #2]
 800a5f6:	b29a      	uxth	r2, r3
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d920      	bls.n	800a644 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	b29b      	uxth	r3, r3
 800a608:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a60a:	e013      	b.n	800a634 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a60c:	f107 030a 	add.w	r3, r7, #10
 800a610:	4619      	mov	r1, r3
 800a612:	6978      	ldr	r0, [r7, #20]
 800a614:	f000 f81b 	bl	800a64e <USBD_GetNextDesc>
 800a618:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	785b      	ldrb	r3, [r3, #1]
 800a61e:	2b05      	cmp	r3, #5
 800a620:	d108      	bne.n	800a634 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	789b      	ldrb	r3, [r3, #2]
 800a62a:	78fa      	ldrb	r2, [r7, #3]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d008      	beq.n	800a642 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a630:	2300      	movs	r3, #0
 800a632:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	885b      	ldrh	r3, [r3, #2]
 800a638:	b29a      	uxth	r2, r3
 800a63a:	897b      	ldrh	r3, [r7, #10]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d8e5      	bhi.n	800a60c <USBD_GetEpDesc+0x32>
 800a640:	e000      	b.n	800a644 <USBD_GetEpDesc+0x6a>
          break;
 800a642:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a644:	693b      	ldr	r3, [r7, #16]
}
 800a646:	4618      	mov	r0, r3
 800a648:	3718      	adds	r7, #24
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a64e:	b480      	push	{r7}
 800a650:	b085      	sub	sp, #20
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
 800a656:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	881a      	ldrh	r2, [r3, #0]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	b29b      	uxth	r3, r3
 800a666:	4413      	add	r3, r2
 800a668:	b29a      	uxth	r2, r3
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	461a      	mov	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	4413      	add	r3, r2
 800a678:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a67a:	68fb      	ldr	r3, [r7, #12]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3714      	adds	r7, #20
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a688:	b480      	push	{r7}
 800a68a:	b087      	sub	sp, #28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	3301      	adds	r3, #1
 800a69e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a6a6:	8a3b      	ldrh	r3, [r7, #16]
 800a6a8:	021b      	lsls	r3, r3, #8
 800a6aa:	b21a      	sxth	r2, r3
 800a6ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	b21b      	sxth	r3, r3
 800a6b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a6b6:	89fb      	ldrh	r3, [r7, #14]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	371c      	adds	r7, #28
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6da:	2b40      	cmp	r3, #64	; 0x40
 800a6dc:	d005      	beq.n	800a6ea <USBD_StdDevReq+0x26>
 800a6de:	2b40      	cmp	r3, #64	; 0x40
 800a6e0:	d857      	bhi.n	800a792 <USBD_StdDevReq+0xce>
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00f      	beq.n	800a706 <USBD_StdDevReq+0x42>
 800a6e6:	2b20      	cmp	r3, #32
 800a6e8:	d153      	bne.n	800a792 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	32ae      	adds	r2, #174	; 0xae
 800a6f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	6839      	ldr	r1, [r7, #0]
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	4798      	blx	r3
 800a700:	4603      	mov	r3, r0
 800a702:	73fb      	strb	r3, [r7, #15]
      break;
 800a704:	e04a      	b.n	800a79c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	785b      	ldrb	r3, [r3, #1]
 800a70a:	2b09      	cmp	r3, #9
 800a70c:	d83b      	bhi.n	800a786 <USBD_StdDevReq+0xc2>
 800a70e:	a201      	add	r2, pc, #4	; (adr r2, 800a714 <USBD_StdDevReq+0x50>)
 800a710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a714:	0800a769 	.word	0x0800a769
 800a718:	0800a77d 	.word	0x0800a77d
 800a71c:	0800a787 	.word	0x0800a787
 800a720:	0800a773 	.word	0x0800a773
 800a724:	0800a787 	.word	0x0800a787
 800a728:	0800a747 	.word	0x0800a747
 800a72c:	0800a73d 	.word	0x0800a73d
 800a730:	0800a787 	.word	0x0800a787
 800a734:	0800a75f 	.word	0x0800a75f
 800a738:	0800a751 	.word	0x0800a751
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a73c:	6839      	ldr	r1, [r7, #0]
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 fa3c 	bl	800abbc <USBD_GetDescriptor>
          break;
 800a744:	e024      	b.n	800a790 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a746:	6839      	ldr	r1, [r7, #0]
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 fba1 	bl	800ae90 <USBD_SetAddress>
          break;
 800a74e:	e01f      	b.n	800a790 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a750:	6839      	ldr	r1, [r7, #0]
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 fbe0 	bl	800af18 <USBD_SetConfig>
 800a758:	4603      	mov	r3, r0
 800a75a:	73fb      	strb	r3, [r7, #15]
          break;
 800a75c:	e018      	b.n	800a790 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a75e:	6839      	ldr	r1, [r7, #0]
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 fc83 	bl	800b06c <USBD_GetConfig>
          break;
 800a766:	e013      	b.n	800a790 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a768:	6839      	ldr	r1, [r7, #0]
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 fcb4 	bl	800b0d8 <USBD_GetStatus>
          break;
 800a770:	e00e      	b.n	800a790 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a772:	6839      	ldr	r1, [r7, #0]
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 fce3 	bl	800b140 <USBD_SetFeature>
          break;
 800a77a:	e009      	b.n	800a790 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a77c:	6839      	ldr	r1, [r7, #0]
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 fd07 	bl	800b192 <USBD_ClrFeature>
          break;
 800a784:	e004      	b.n	800a790 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a786:	6839      	ldr	r1, [r7, #0]
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 fd5e 	bl	800b24a <USBD_CtlError>
          break;
 800a78e:	bf00      	nop
      }
      break;
 800a790:	e004      	b.n	800a79c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a792:	6839      	ldr	r1, [r7, #0]
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 fd58 	bl	800b24a <USBD_CtlError>
      break;
 800a79a:	bf00      	nop
  }

  return ret;
 800a79c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop

0800a7a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7be:	2b40      	cmp	r3, #64	; 0x40
 800a7c0:	d005      	beq.n	800a7ce <USBD_StdItfReq+0x26>
 800a7c2:	2b40      	cmp	r3, #64	; 0x40
 800a7c4:	d852      	bhi.n	800a86c <USBD_StdItfReq+0xc4>
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d001      	beq.n	800a7ce <USBD_StdItfReq+0x26>
 800a7ca:	2b20      	cmp	r3, #32
 800a7cc:	d14e      	bne.n	800a86c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	2b02      	cmp	r3, #2
 800a7da:	d840      	bhi.n	800a85e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	889b      	ldrh	r3, [r3, #4]
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d836      	bhi.n	800a854 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	889b      	ldrh	r3, [r3, #4]
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f7ff fed9 	bl	800a5a6 <USBD_CoreFindIF>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7f8:	7bbb      	ldrb	r3, [r7, #14]
 800a7fa:	2bff      	cmp	r3, #255	; 0xff
 800a7fc:	d01d      	beq.n	800a83a <USBD_StdItfReq+0x92>
 800a7fe:	7bbb      	ldrb	r3, [r7, #14]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d11a      	bne.n	800a83a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a804:	7bba      	ldrb	r2, [r7, #14]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	32ae      	adds	r2, #174	; 0xae
 800a80a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00f      	beq.n	800a834 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a814:	7bba      	ldrb	r2, [r7, #14]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a81c:	7bba      	ldrb	r2, [r7, #14]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	32ae      	adds	r2, #174	; 0xae
 800a822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	6839      	ldr	r1, [r7, #0]
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	4798      	blx	r3
 800a82e:	4603      	mov	r3, r0
 800a830:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a832:	e004      	b.n	800a83e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a834:	2303      	movs	r3, #3
 800a836:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a838:	e001      	b.n	800a83e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a83a:	2303      	movs	r3, #3
 800a83c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	88db      	ldrh	r3, [r3, #6]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d110      	bne.n	800a868 <USBD_StdItfReq+0xc0>
 800a846:	7bfb      	ldrb	r3, [r7, #15]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d10d      	bne.n	800a868 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 fdc7 	bl	800b3e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a852:	e009      	b.n	800a868 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a854:	6839      	ldr	r1, [r7, #0]
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 fcf7 	bl	800b24a <USBD_CtlError>
          break;
 800a85c:	e004      	b.n	800a868 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a85e:	6839      	ldr	r1, [r7, #0]
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 fcf2 	bl	800b24a <USBD_CtlError>
          break;
 800a866:	e000      	b.n	800a86a <USBD_StdItfReq+0xc2>
          break;
 800a868:	bf00      	nop
      }
      break;
 800a86a:	e004      	b.n	800a876 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a86c:	6839      	ldr	r1, [r7, #0]
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 fceb 	bl	800b24a <USBD_CtlError>
      break;
 800a874:	bf00      	nop
  }

  return ret;
 800a876:	7bfb      	ldrb	r3, [r7, #15]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3710      	adds	r7, #16
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a88a:	2300      	movs	r3, #0
 800a88c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	889b      	ldrh	r3, [r3, #4]
 800a892:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a89c:	2b40      	cmp	r3, #64	; 0x40
 800a89e:	d007      	beq.n	800a8b0 <USBD_StdEPReq+0x30>
 800a8a0:	2b40      	cmp	r3, #64	; 0x40
 800a8a2:	f200 817f 	bhi.w	800aba4 <USBD_StdEPReq+0x324>
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d02a      	beq.n	800a900 <USBD_StdEPReq+0x80>
 800a8aa:	2b20      	cmp	r3, #32
 800a8ac:	f040 817a 	bne.w	800aba4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a8b0:	7bbb      	ldrb	r3, [r7, #14]
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f7ff fe83 	bl	800a5c0 <USBD_CoreFindEP>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8be:	7b7b      	ldrb	r3, [r7, #13]
 800a8c0:	2bff      	cmp	r3, #255	; 0xff
 800a8c2:	f000 8174 	beq.w	800abae <USBD_StdEPReq+0x32e>
 800a8c6:	7b7b      	ldrb	r3, [r7, #13]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	f040 8170 	bne.w	800abae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a8ce:	7b7a      	ldrb	r2, [r7, #13]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a8d6:	7b7a      	ldrb	r2, [r7, #13]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	32ae      	adds	r2, #174	; 0xae
 800a8dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f000 8163 	beq.w	800abae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a8e8:	7b7a      	ldrb	r2, [r7, #13]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	32ae      	adds	r2, #174	; 0xae
 800a8ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	6839      	ldr	r1, [r7, #0]
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	4798      	blx	r3
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a8fe:	e156      	b.n	800abae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	785b      	ldrb	r3, [r3, #1]
 800a904:	2b03      	cmp	r3, #3
 800a906:	d008      	beq.n	800a91a <USBD_StdEPReq+0x9a>
 800a908:	2b03      	cmp	r3, #3
 800a90a:	f300 8145 	bgt.w	800ab98 <USBD_StdEPReq+0x318>
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f000 809b 	beq.w	800aa4a <USBD_StdEPReq+0x1ca>
 800a914:	2b01      	cmp	r3, #1
 800a916:	d03c      	beq.n	800a992 <USBD_StdEPReq+0x112>
 800a918:	e13e      	b.n	800ab98 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a920:	b2db      	uxtb	r3, r3
 800a922:	2b02      	cmp	r3, #2
 800a924:	d002      	beq.n	800a92c <USBD_StdEPReq+0xac>
 800a926:	2b03      	cmp	r3, #3
 800a928:	d016      	beq.n	800a958 <USBD_StdEPReq+0xd8>
 800a92a:	e02c      	b.n	800a986 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a92c:	7bbb      	ldrb	r3, [r7, #14]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d00d      	beq.n	800a94e <USBD_StdEPReq+0xce>
 800a932:	7bbb      	ldrb	r3, [r7, #14]
 800a934:	2b80      	cmp	r3, #128	; 0x80
 800a936:	d00a      	beq.n	800a94e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a938:	7bbb      	ldrb	r3, [r7, #14]
 800a93a:	4619      	mov	r1, r3
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f007 f81b 	bl	8011978 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a942:	2180      	movs	r1, #128	; 0x80
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f007 f817 	bl	8011978 <USBD_LL_StallEP>
 800a94a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a94c:	e020      	b.n	800a990 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a94e:	6839      	ldr	r1, [r7, #0]
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fc7a 	bl	800b24a <USBD_CtlError>
              break;
 800a956:	e01b      	b.n	800a990 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	885b      	ldrh	r3, [r3, #2]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d10e      	bne.n	800a97e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a960:	7bbb      	ldrb	r3, [r7, #14]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d00b      	beq.n	800a97e <USBD_StdEPReq+0xfe>
 800a966:	7bbb      	ldrb	r3, [r7, #14]
 800a968:	2b80      	cmp	r3, #128	; 0x80
 800a96a:	d008      	beq.n	800a97e <USBD_StdEPReq+0xfe>
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	88db      	ldrh	r3, [r3, #6]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d104      	bne.n	800a97e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a974:	7bbb      	ldrb	r3, [r7, #14]
 800a976:	4619      	mov	r1, r3
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f006 fffd 	bl	8011978 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 fd2e 	bl	800b3e0 <USBD_CtlSendStatus>

              break;
 800a984:	e004      	b.n	800a990 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a986:	6839      	ldr	r1, [r7, #0]
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fc5e 	bl	800b24a <USBD_CtlError>
              break;
 800a98e:	bf00      	nop
          }
          break;
 800a990:	e107      	b.n	800aba2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d002      	beq.n	800a9a4 <USBD_StdEPReq+0x124>
 800a99e:	2b03      	cmp	r3, #3
 800a9a0:	d016      	beq.n	800a9d0 <USBD_StdEPReq+0x150>
 800a9a2:	e04b      	b.n	800aa3c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9a4:	7bbb      	ldrb	r3, [r7, #14]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00d      	beq.n	800a9c6 <USBD_StdEPReq+0x146>
 800a9aa:	7bbb      	ldrb	r3, [r7, #14]
 800a9ac:	2b80      	cmp	r3, #128	; 0x80
 800a9ae:	d00a      	beq.n	800a9c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9b0:	7bbb      	ldrb	r3, [r7, #14]
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f006 ffdf 	bl	8011978 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9ba:	2180      	movs	r1, #128	; 0x80
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f006 ffdb 	bl	8011978 <USBD_LL_StallEP>
 800a9c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9c4:	e040      	b.n	800aa48 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a9c6:	6839      	ldr	r1, [r7, #0]
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 fc3e 	bl	800b24a <USBD_CtlError>
              break;
 800a9ce:	e03b      	b.n	800aa48 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	885b      	ldrh	r3, [r3, #2]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d136      	bne.n	800aa46 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a9d8:	7bbb      	ldrb	r3, [r7, #14]
 800a9da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d004      	beq.n	800a9ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a9e2:	7bbb      	ldrb	r3, [r7, #14]
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f006 ffe5 	bl	80119b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 fcf7 	bl	800b3e0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a9f2:	7bbb      	ldrb	r3, [r7, #14]
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7ff fde2 	bl	800a5c0 <USBD_CoreFindEP>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa00:	7b7b      	ldrb	r3, [r7, #13]
 800aa02:	2bff      	cmp	r3, #255	; 0xff
 800aa04:	d01f      	beq.n	800aa46 <USBD_StdEPReq+0x1c6>
 800aa06:	7b7b      	ldrb	r3, [r7, #13]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d11c      	bne.n	800aa46 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aa0c:	7b7a      	ldrb	r2, [r7, #13]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800aa14:	7b7a      	ldrb	r2, [r7, #13]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	32ae      	adds	r2, #174	; 0xae
 800aa1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d010      	beq.n	800aa46 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aa24:	7b7a      	ldrb	r2, [r7, #13]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	32ae      	adds	r2, #174	; 0xae
 800aa2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	6839      	ldr	r1, [r7, #0]
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	4798      	blx	r3
 800aa36:	4603      	mov	r3, r0
 800aa38:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800aa3a:	e004      	b.n	800aa46 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800aa3c:	6839      	ldr	r1, [r7, #0]
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fc03 	bl	800b24a <USBD_CtlError>
              break;
 800aa44:	e000      	b.n	800aa48 <USBD_StdEPReq+0x1c8>
              break;
 800aa46:	bf00      	nop
          }
          break;
 800aa48:	e0ab      	b.n	800aba2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d002      	beq.n	800aa5c <USBD_StdEPReq+0x1dc>
 800aa56:	2b03      	cmp	r3, #3
 800aa58:	d032      	beq.n	800aac0 <USBD_StdEPReq+0x240>
 800aa5a:	e097      	b.n	800ab8c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa5c:	7bbb      	ldrb	r3, [r7, #14]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d007      	beq.n	800aa72 <USBD_StdEPReq+0x1f2>
 800aa62:	7bbb      	ldrb	r3, [r7, #14]
 800aa64:	2b80      	cmp	r3, #128	; 0x80
 800aa66:	d004      	beq.n	800aa72 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800aa68:	6839      	ldr	r1, [r7, #0]
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 fbed 	bl	800b24a <USBD_CtlError>
                break;
 800aa70:	e091      	b.n	800ab96 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	da0b      	bge.n	800aa92 <USBD_StdEPReq+0x212>
 800aa7a:	7bbb      	ldrb	r3, [r7, #14]
 800aa7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa80:	4613      	mov	r3, r2
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	4413      	add	r3, r2
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	3310      	adds	r3, #16
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	3304      	adds	r3, #4
 800aa90:	e00b      	b.n	800aaaa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa92:	7bbb      	ldrb	r3, [r7, #14]
 800aa94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa98:	4613      	mov	r3, r2
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	4413      	add	r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	3304      	adds	r3, #4
 800aaaa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	2200      	movs	r2, #0
 800aab0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	2202      	movs	r2, #2
 800aab6:	4619      	mov	r1, r3
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fc37 	bl	800b32c <USBD_CtlSendData>
              break;
 800aabe:	e06a      	b.n	800ab96 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aac0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	da11      	bge.n	800aaec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aac8:	7bbb      	ldrb	r3, [r7, #14]
 800aaca:	f003 020f 	and.w	r2, r3, #15
 800aace:	6879      	ldr	r1, [r7, #4]
 800aad0:	4613      	mov	r3, r2
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	4413      	add	r3, r2
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	440b      	add	r3, r1
 800aada:	3324      	adds	r3, #36	; 0x24
 800aadc:	881b      	ldrh	r3, [r3, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d117      	bne.n	800ab12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aae2:	6839      	ldr	r1, [r7, #0]
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 fbb0 	bl	800b24a <USBD_CtlError>
                  break;
 800aaea:	e054      	b.n	800ab96 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aaec:	7bbb      	ldrb	r3, [r7, #14]
 800aaee:	f003 020f 	and.w	r2, r3, #15
 800aaf2:	6879      	ldr	r1, [r7, #4]
 800aaf4:	4613      	mov	r3, r2
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	4413      	add	r3, r2
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	440b      	add	r3, r1
 800aafe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ab02:	881b      	ldrh	r3, [r3, #0]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d104      	bne.n	800ab12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ab08:	6839      	ldr	r1, [r7, #0]
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 fb9d 	bl	800b24a <USBD_CtlError>
                  break;
 800ab10:	e041      	b.n	800ab96 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	da0b      	bge.n	800ab32 <USBD_StdEPReq+0x2b2>
 800ab1a:	7bbb      	ldrb	r3, [r7, #14]
 800ab1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab20:	4613      	mov	r3, r2
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	4413      	add	r3, r2
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	3310      	adds	r3, #16
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	3304      	adds	r3, #4
 800ab30:	e00b      	b.n	800ab4a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab32:	7bbb      	ldrb	r3, [r7, #14]
 800ab34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab38:	4613      	mov	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4413      	add	r3, r2
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	4413      	add	r3, r2
 800ab48:	3304      	adds	r3, #4
 800ab4a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab4c:	7bbb      	ldrb	r3, [r7, #14]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d002      	beq.n	800ab58 <USBD_StdEPReq+0x2d8>
 800ab52:	7bbb      	ldrb	r3, [r7, #14]
 800ab54:	2b80      	cmp	r3, #128	; 0x80
 800ab56:	d103      	bne.n	800ab60 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	601a      	str	r2, [r3, #0]
 800ab5e:	e00e      	b.n	800ab7e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ab60:	7bbb      	ldrb	r3, [r7, #14]
 800ab62:	4619      	mov	r1, r3
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f006 ff45 	bl	80119f4 <USBD_LL_IsStallEP>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d003      	beq.n	800ab78 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	2201      	movs	r2, #1
 800ab74:	601a      	str	r2, [r3, #0]
 800ab76:	e002      	b.n	800ab7e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	2202      	movs	r2, #2
 800ab82:	4619      	mov	r1, r3
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 fbd1 	bl	800b32c <USBD_CtlSendData>
              break;
 800ab8a:	e004      	b.n	800ab96 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ab8c:	6839      	ldr	r1, [r7, #0]
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 fb5b 	bl	800b24a <USBD_CtlError>
              break;
 800ab94:	bf00      	nop
          }
          break;
 800ab96:	e004      	b.n	800aba2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ab98:	6839      	ldr	r1, [r7, #0]
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 fb55 	bl	800b24a <USBD_CtlError>
          break;
 800aba0:	bf00      	nop
      }
      break;
 800aba2:	e005      	b.n	800abb0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800aba4:	6839      	ldr	r1, [r7, #0]
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 fb4f 	bl	800b24a <USBD_CtlError>
      break;
 800abac:	e000      	b.n	800abb0 <USBD_StdEPReq+0x330>
      break;
 800abae:	bf00      	nop
  }

  return ret;
 800abb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
	...

0800abbc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800abc6:	2300      	movs	r3, #0
 800abc8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800abca:	2300      	movs	r3, #0
 800abcc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800abce:	2300      	movs	r3, #0
 800abd0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	885b      	ldrh	r3, [r3, #2]
 800abd6:	0a1b      	lsrs	r3, r3, #8
 800abd8:	b29b      	uxth	r3, r3
 800abda:	3b01      	subs	r3, #1
 800abdc:	2b06      	cmp	r3, #6
 800abde:	f200 8128 	bhi.w	800ae32 <USBD_GetDescriptor+0x276>
 800abe2:	a201      	add	r2, pc, #4	; (adr r2, 800abe8 <USBD_GetDescriptor+0x2c>)
 800abe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe8:	0800ac05 	.word	0x0800ac05
 800abec:	0800ac1d 	.word	0x0800ac1d
 800abf0:	0800ac5d 	.word	0x0800ac5d
 800abf4:	0800ae33 	.word	0x0800ae33
 800abf8:	0800ae33 	.word	0x0800ae33
 800abfc:	0800add3 	.word	0x0800add3
 800ac00:	0800adff 	.word	0x0800adff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	7c12      	ldrb	r2, [r2, #16]
 800ac10:	f107 0108 	add.w	r1, r7, #8
 800ac14:	4610      	mov	r0, r2
 800ac16:	4798      	blx	r3
 800ac18:	60f8      	str	r0, [r7, #12]
      break;
 800ac1a:	e112      	b.n	800ae42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	7c1b      	ldrb	r3, [r3, #16]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d10d      	bne.n	800ac40 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac2c:	f107 0208 	add.w	r2, r7, #8
 800ac30:	4610      	mov	r0, r2
 800ac32:	4798      	blx	r3
 800ac34:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	2202      	movs	r2, #2
 800ac3c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac3e:	e100      	b.n	800ae42 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac48:	f107 0208 	add.w	r2, r7, #8
 800ac4c:	4610      	mov	r0, r2
 800ac4e:	4798      	blx	r3
 800ac50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	3301      	adds	r3, #1
 800ac56:	2202      	movs	r2, #2
 800ac58:	701a      	strb	r2, [r3, #0]
      break;
 800ac5a:	e0f2      	b.n	800ae42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	885b      	ldrh	r3, [r3, #2]
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	2b05      	cmp	r3, #5
 800ac64:	f200 80ac 	bhi.w	800adc0 <USBD_GetDescriptor+0x204>
 800ac68:	a201      	add	r2, pc, #4	; (adr r2, 800ac70 <USBD_GetDescriptor+0xb4>)
 800ac6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac6e:	bf00      	nop
 800ac70:	0800ac89 	.word	0x0800ac89
 800ac74:	0800acbd 	.word	0x0800acbd
 800ac78:	0800acf1 	.word	0x0800acf1
 800ac7c:	0800ad25 	.word	0x0800ad25
 800ac80:	0800ad59 	.word	0x0800ad59
 800ac84:	0800ad8d 	.word	0x0800ad8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d00b      	beq.n	800acac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	7c12      	ldrb	r2, [r2, #16]
 800aca0:	f107 0108 	add.w	r1, r7, #8
 800aca4:	4610      	mov	r0, r2
 800aca6:	4798      	blx	r3
 800aca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acaa:	e091      	b.n	800add0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acac:	6839      	ldr	r1, [r7, #0]
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 facb 	bl	800b24a <USBD_CtlError>
            err++;
 800acb4:	7afb      	ldrb	r3, [r7, #11]
 800acb6:	3301      	adds	r3, #1
 800acb8:	72fb      	strb	r3, [r7, #11]
          break;
 800acba:	e089      	b.n	800add0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acc2:	689b      	ldr	r3, [r3, #8]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00b      	beq.n	800ace0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	7c12      	ldrb	r2, [r2, #16]
 800acd4:	f107 0108 	add.w	r1, r7, #8
 800acd8:	4610      	mov	r0, r2
 800acda:	4798      	blx	r3
 800acdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acde:	e077      	b.n	800add0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ace0:	6839      	ldr	r1, [r7, #0]
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 fab1 	bl	800b24a <USBD_CtlError>
            err++;
 800ace8:	7afb      	ldrb	r3, [r7, #11]
 800acea:	3301      	adds	r3, #1
 800acec:	72fb      	strb	r3, [r7, #11]
          break;
 800acee:	e06f      	b.n	800add0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00b      	beq.n	800ad14 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	7c12      	ldrb	r2, [r2, #16]
 800ad08:	f107 0108 	add.w	r1, r7, #8
 800ad0c:	4610      	mov	r0, r2
 800ad0e:	4798      	blx	r3
 800ad10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad12:	e05d      	b.n	800add0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad14:	6839      	ldr	r1, [r7, #0]
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 fa97 	bl	800b24a <USBD_CtlError>
            err++;
 800ad1c:	7afb      	ldrb	r3, [r7, #11]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	72fb      	strb	r3, [r7, #11]
          break;
 800ad22:	e055      	b.n	800add0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad2a:	691b      	ldr	r3, [r3, #16]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00b      	beq.n	800ad48 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad36:	691b      	ldr	r3, [r3, #16]
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	7c12      	ldrb	r2, [r2, #16]
 800ad3c:	f107 0108 	add.w	r1, r7, #8
 800ad40:	4610      	mov	r0, r2
 800ad42:	4798      	blx	r3
 800ad44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad46:	e043      	b.n	800add0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad48:	6839      	ldr	r1, [r7, #0]
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 fa7d 	bl	800b24a <USBD_CtlError>
            err++;
 800ad50:	7afb      	ldrb	r3, [r7, #11]
 800ad52:	3301      	adds	r3, #1
 800ad54:	72fb      	strb	r3, [r7, #11]
          break;
 800ad56:	e03b      	b.n	800add0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad5e:	695b      	ldr	r3, [r3, #20]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d00b      	beq.n	800ad7c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad6a:	695b      	ldr	r3, [r3, #20]
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	7c12      	ldrb	r2, [r2, #16]
 800ad70:	f107 0108 	add.w	r1, r7, #8
 800ad74:	4610      	mov	r0, r2
 800ad76:	4798      	blx	r3
 800ad78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad7a:	e029      	b.n	800add0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad7c:	6839      	ldr	r1, [r7, #0]
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 fa63 	bl	800b24a <USBD_CtlError>
            err++;
 800ad84:	7afb      	ldrb	r3, [r7, #11]
 800ad86:	3301      	adds	r3, #1
 800ad88:	72fb      	strb	r3, [r7, #11]
          break;
 800ad8a:	e021      	b.n	800add0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad92:	699b      	ldr	r3, [r3, #24]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00b      	beq.n	800adb0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad9e:	699b      	ldr	r3, [r3, #24]
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	7c12      	ldrb	r2, [r2, #16]
 800ada4:	f107 0108 	add.w	r1, r7, #8
 800ada8:	4610      	mov	r0, r2
 800adaa:	4798      	blx	r3
 800adac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adae:	e00f      	b.n	800add0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800adb0:	6839      	ldr	r1, [r7, #0]
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 fa49 	bl	800b24a <USBD_CtlError>
            err++;
 800adb8:	7afb      	ldrb	r3, [r7, #11]
 800adba:	3301      	adds	r3, #1
 800adbc:	72fb      	strb	r3, [r7, #11]
          break;
 800adbe:	e007      	b.n	800add0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800adc0:	6839      	ldr	r1, [r7, #0]
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 fa41 	bl	800b24a <USBD_CtlError>
          err++;
 800adc8:	7afb      	ldrb	r3, [r7, #11]
 800adca:	3301      	adds	r3, #1
 800adcc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800adce:	bf00      	nop
      }
      break;
 800add0:	e037      	b.n	800ae42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	7c1b      	ldrb	r3, [r3, #16]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d109      	bne.n	800adee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ade0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ade2:	f107 0208 	add.w	r2, r7, #8
 800ade6:	4610      	mov	r0, r2
 800ade8:	4798      	blx	r3
 800adea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800adec:	e029      	b.n	800ae42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800adee:	6839      	ldr	r1, [r7, #0]
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 fa2a 	bl	800b24a <USBD_CtlError>
        err++;
 800adf6:	7afb      	ldrb	r3, [r7, #11]
 800adf8:	3301      	adds	r3, #1
 800adfa:	72fb      	strb	r3, [r7, #11]
      break;
 800adfc:	e021      	b.n	800ae42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	7c1b      	ldrb	r3, [r3, #16]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d10d      	bne.n	800ae22 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae0e:	f107 0208 	add.w	r2, r7, #8
 800ae12:	4610      	mov	r0, r2
 800ae14:	4798      	blx	r3
 800ae16:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	2207      	movs	r2, #7
 800ae1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae20:	e00f      	b.n	800ae42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae22:	6839      	ldr	r1, [r7, #0]
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 fa10 	bl	800b24a <USBD_CtlError>
        err++;
 800ae2a:	7afb      	ldrb	r3, [r7, #11]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae30:	e007      	b.n	800ae42 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ae32:	6839      	ldr	r1, [r7, #0]
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 fa08 	bl	800b24a <USBD_CtlError>
      err++;
 800ae3a:	7afb      	ldrb	r3, [r7, #11]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae40:	bf00      	nop
  }

  if (err != 0U)
 800ae42:	7afb      	ldrb	r3, [r7, #11]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d11e      	bne.n	800ae86 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	88db      	ldrh	r3, [r3, #6]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d016      	beq.n	800ae7e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ae50:	893b      	ldrh	r3, [r7, #8]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00e      	beq.n	800ae74 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	88da      	ldrh	r2, [r3, #6]
 800ae5a:	893b      	ldrh	r3, [r7, #8]
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	bf28      	it	cs
 800ae60:	4613      	movcs	r3, r2
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae66:	893b      	ldrh	r3, [r7, #8]
 800ae68:	461a      	mov	r2, r3
 800ae6a:	68f9      	ldr	r1, [r7, #12]
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 fa5d 	bl	800b32c <USBD_CtlSendData>
 800ae72:	e009      	b.n	800ae88 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ae74:	6839      	ldr	r1, [r7, #0]
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 f9e7 	bl	800b24a <USBD_CtlError>
 800ae7c:	e004      	b.n	800ae88 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 faae 	bl	800b3e0 <USBD_CtlSendStatus>
 800ae84:	e000      	b.n	800ae88 <USBD_GetDescriptor+0x2cc>
    return;
 800ae86:	bf00      	nop
  }
}
 800ae88:	3710      	adds	r7, #16
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop

0800ae90 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	889b      	ldrh	r3, [r3, #4]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d131      	bne.n	800af06 <USBD_SetAddress+0x76>
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	88db      	ldrh	r3, [r3, #6]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d12d      	bne.n	800af06 <USBD_SetAddress+0x76>
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	885b      	ldrh	r3, [r3, #2]
 800aeae:	2b7f      	cmp	r3, #127	; 0x7f
 800aeb0:	d829      	bhi.n	800af06 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	885b      	ldrh	r3, [r3, #2]
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aebc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	2b03      	cmp	r3, #3
 800aec8:	d104      	bne.n	800aed4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aeca:	6839      	ldr	r1, [r7, #0]
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 f9bc 	bl	800b24a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aed2:	e01d      	b.n	800af10 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	7bfa      	ldrb	r2, [r7, #15]
 800aed8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aedc:	7bfb      	ldrb	r3, [r7, #15]
 800aede:	4619      	mov	r1, r3
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f006 fdb3 	bl	8011a4c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 fa7a 	bl	800b3e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d004      	beq.n	800aefc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2202      	movs	r2, #2
 800aef6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aefa:	e009      	b.n	800af10 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af04:	e004      	b.n	800af10 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af06:	6839      	ldr	r1, [r7, #0]
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 f99e 	bl	800b24a <USBD_CtlError>
  }
}
 800af0e:	bf00      	nop
 800af10:	bf00      	nop
 800af12:	3710      	adds	r7, #16
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af22:	2300      	movs	r3, #0
 800af24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	885b      	ldrh	r3, [r3, #2]
 800af2a:	b2da      	uxtb	r2, r3
 800af2c:	4b4e      	ldr	r3, [pc, #312]	; (800b068 <USBD_SetConfig+0x150>)
 800af2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af30:	4b4d      	ldr	r3, [pc, #308]	; (800b068 <USBD_SetConfig+0x150>)
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	2b01      	cmp	r3, #1
 800af36:	d905      	bls.n	800af44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800af38:	6839      	ldr	r1, [r7, #0]
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 f985 	bl	800b24a <USBD_CtlError>
    return USBD_FAIL;
 800af40:	2303      	movs	r3, #3
 800af42:	e08c      	b.n	800b05e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d002      	beq.n	800af56 <USBD_SetConfig+0x3e>
 800af50:	2b03      	cmp	r3, #3
 800af52:	d029      	beq.n	800afa8 <USBD_SetConfig+0x90>
 800af54:	e075      	b.n	800b042 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800af56:	4b44      	ldr	r3, [pc, #272]	; (800b068 <USBD_SetConfig+0x150>)
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d020      	beq.n	800afa0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800af5e:	4b42      	ldr	r3, [pc, #264]	; (800b068 <USBD_SetConfig+0x150>)
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	461a      	mov	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af68:	4b3f      	ldr	r3, [pc, #252]	; (800b068 <USBD_SetConfig+0x150>)
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	4619      	mov	r1, r3
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f7fe ffe7 	bl	8009f42 <USBD_SetClassConfig>
 800af74:	4603      	mov	r3, r0
 800af76:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800af78:	7bfb      	ldrb	r3, [r7, #15]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d008      	beq.n	800af90 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800af7e:	6839      	ldr	r1, [r7, #0]
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 f962 	bl	800b24a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2202      	movs	r2, #2
 800af8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af8e:	e065      	b.n	800b05c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 fa25 	bl	800b3e0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2203      	movs	r2, #3
 800af9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800af9e:	e05d      	b.n	800b05c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 fa1d 	bl	800b3e0 <USBD_CtlSendStatus>
      break;
 800afa6:	e059      	b.n	800b05c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800afa8:	4b2f      	ldr	r3, [pc, #188]	; (800b068 <USBD_SetConfig+0x150>)
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d112      	bne.n	800afd6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2202      	movs	r2, #2
 800afb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800afb8:	4b2b      	ldr	r3, [pc, #172]	; (800b068 <USBD_SetConfig+0x150>)
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	461a      	mov	r2, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800afc2:	4b29      	ldr	r3, [pc, #164]	; (800b068 <USBD_SetConfig+0x150>)
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	4619      	mov	r1, r3
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f7fe ffd6 	bl	8009f7a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 fa06 	bl	800b3e0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800afd4:	e042      	b.n	800b05c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800afd6:	4b24      	ldr	r3, [pc, #144]	; (800b068 <USBD_SetConfig+0x150>)
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	461a      	mov	r2, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d02a      	beq.n	800b03a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	4619      	mov	r1, r3
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f7fe ffc4 	bl	8009f7a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aff2:	4b1d      	ldr	r3, [pc, #116]	; (800b068 <USBD_SetConfig+0x150>)
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	461a      	mov	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800affc:	4b1a      	ldr	r3, [pc, #104]	; (800b068 <USBD_SetConfig+0x150>)
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	4619      	mov	r1, r3
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7fe ff9d 	bl	8009f42 <USBD_SetClassConfig>
 800b008:	4603      	mov	r3, r0
 800b00a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b00c:	7bfb      	ldrb	r3, [r7, #15]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d00f      	beq.n	800b032 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b012:	6839      	ldr	r1, [r7, #0]
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 f918 	bl	800b24a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	4619      	mov	r1, r3
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f7fe ffa9 	bl	8009f7a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2202      	movs	r2, #2
 800b02c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b030:	e014      	b.n	800b05c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f9d4 	bl	800b3e0 <USBD_CtlSendStatus>
      break;
 800b038:	e010      	b.n	800b05c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 f9d0 	bl	800b3e0 <USBD_CtlSendStatus>
      break;
 800b040:	e00c      	b.n	800b05c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b042:	6839      	ldr	r1, [r7, #0]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 f900 	bl	800b24a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b04a:	4b07      	ldr	r3, [pc, #28]	; (800b068 <USBD_SetConfig+0x150>)
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	4619      	mov	r1, r3
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f7fe ff92 	bl	8009f7a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b056:	2303      	movs	r3, #3
 800b058:	73fb      	strb	r3, [r7, #15]
      break;
 800b05a:	bf00      	nop
  }

  return ret;
 800b05c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	20002474 	.word	0x20002474

0800b06c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	88db      	ldrh	r3, [r3, #6]
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d004      	beq.n	800b088 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b07e:	6839      	ldr	r1, [r7, #0]
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 f8e2 	bl	800b24a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b086:	e023      	b.n	800b0d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	2b02      	cmp	r3, #2
 800b092:	dc02      	bgt.n	800b09a <USBD_GetConfig+0x2e>
 800b094:	2b00      	cmp	r3, #0
 800b096:	dc03      	bgt.n	800b0a0 <USBD_GetConfig+0x34>
 800b098:	e015      	b.n	800b0c6 <USBD_GetConfig+0x5a>
 800b09a:	2b03      	cmp	r3, #3
 800b09c:	d00b      	beq.n	800b0b6 <USBD_GetConfig+0x4a>
 800b09e:	e012      	b.n	800b0c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	3308      	adds	r3, #8
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 f93c 	bl	800b32c <USBD_CtlSendData>
        break;
 800b0b4:	e00c      	b.n	800b0d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	3304      	adds	r3, #4
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	4619      	mov	r1, r3
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 f934 	bl	800b32c <USBD_CtlSendData>
        break;
 800b0c4:	e004      	b.n	800b0d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b0c6:	6839      	ldr	r1, [r7, #0]
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f000 f8be 	bl	800b24a <USBD_CtlError>
        break;
 800b0ce:	bf00      	nop
}
 800b0d0:	bf00      	nop
 800b0d2:	3708      	adds	r7, #8
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b082      	sub	sp, #8
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	2b02      	cmp	r3, #2
 800b0ee:	d81e      	bhi.n	800b12e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	88db      	ldrh	r3, [r3, #6]
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	d004      	beq.n	800b102 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b0f8:	6839      	ldr	r1, [r7, #0]
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 f8a5 	bl	800b24a <USBD_CtlError>
        break;
 800b100:	e01a      	b.n	800b138 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2201      	movs	r2, #1
 800b106:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d005      	beq.n	800b11e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	68db      	ldr	r3, [r3, #12]
 800b116:	f043 0202 	orr.w	r2, r3, #2
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	330c      	adds	r3, #12
 800b122:	2202      	movs	r2, #2
 800b124:	4619      	mov	r1, r3
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 f900 	bl	800b32c <USBD_CtlSendData>
      break;
 800b12c:	e004      	b.n	800b138 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b12e:	6839      	ldr	r1, [r7, #0]
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 f88a 	bl	800b24a <USBD_CtlError>
      break;
 800b136:	bf00      	nop
  }
}
 800b138:	bf00      	nop
 800b13a:	3708      	adds	r7, #8
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	885b      	ldrh	r3, [r3, #2]
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d107      	bne.n	800b162 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2201      	movs	r2, #1
 800b156:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 f940 	bl	800b3e0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b160:	e013      	b.n	800b18a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	885b      	ldrh	r3, [r3, #2]
 800b166:	2b02      	cmp	r3, #2
 800b168:	d10b      	bne.n	800b182 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	889b      	ldrh	r3, [r3, #4]
 800b16e:	0a1b      	lsrs	r3, r3, #8
 800b170:	b29b      	uxth	r3, r3
 800b172:	b2da      	uxtb	r2, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 f930 	bl	800b3e0 <USBD_CtlSendStatus>
}
 800b180:	e003      	b.n	800b18a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b182:	6839      	ldr	r1, [r7, #0]
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 f860 	bl	800b24a <USBD_CtlError>
}
 800b18a:	bf00      	nop
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b082      	sub	sp, #8
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
 800b19a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	3b01      	subs	r3, #1
 800b1a6:	2b02      	cmp	r3, #2
 800b1a8:	d80b      	bhi.n	800b1c2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	885b      	ldrh	r3, [r3, #2]
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	d10c      	bne.n	800b1cc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 f910 	bl	800b3e0 <USBD_CtlSendStatus>
      }
      break;
 800b1c0:	e004      	b.n	800b1cc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b1c2:	6839      	ldr	r1, [r7, #0]
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 f840 	bl	800b24a <USBD_CtlError>
      break;
 800b1ca:	e000      	b.n	800b1ce <USBD_ClrFeature+0x3c>
      break;
 800b1cc:	bf00      	nop
  }
}
 800b1ce:	bf00      	nop
 800b1d0:	3708      	adds	r7, #8
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}

0800b1d6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b1d6:	b580      	push	{r7, lr}
 800b1d8:	b084      	sub	sp, #16
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
 800b1de:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	781a      	ldrb	r2, [r3, #0]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	781a      	ldrb	r2, [r3, #0]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f7ff fa41 	bl	800a688 <SWAPBYTE>
 800b206:	4603      	mov	r3, r0
 800b208:	461a      	mov	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	3301      	adds	r3, #1
 800b212:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	3301      	adds	r3, #1
 800b218:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	f7ff fa34 	bl	800a688 <SWAPBYTE>
 800b220:	4603      	mov	r3, r0
 800b222:	461a      	mov	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	3301      	adds	r3, #1
 800b22c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	3301      	adds	r3, #1
 800b232:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f7ff fa27 	bl	800a688 <SWAPBYTE>
 800b23a:	4603      	mov	r3, r0
 800b23c:	461a      	mov	r2, r3
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	80da      	strh	r2, [r3, #6]
}
 800b242:	bf00      	nop
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b082      	sub	sp, #8
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
 800b252:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b254:	2180      	movs	r1, #128	; 0x80
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f006 fb8e 	bl	8011978 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b25c:	2100      	movs	r1, #0
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f006 fb8a 	bl	8011978 <USBD_LL_StallEP>
}
 800b264:	bf00      	nop
 800b266:	3708      	adds	r7, #8
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b086      	sub	sp, #24
 800b270:	af00      	add	r7, sp, #0
 800b272:	60f8      	str	r0, [r7, #12]
 800b274:	60b9      	str	r1, [r7, #8]
 800b276:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b278:	2300      	movs	r3, #0
 800b27a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d036      	beq.n	800b2f0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b286:	6938      	ldr	r0, [r7, #16]
 800b288:	f000 f836 	bl	800b2f8 <USBD_GetLen>
 800b28c:	4603      	mov	r3, r0
 800b28e:	3301      	adds	r3, #1
 800b290:	b29b      	uxth	r3, r3
 800b292:	005b      	lsls	r3, r3, #1
 800b294:	b29a      	uxth	r2, r3
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b29a:	7dfb      	ldrb	r3, [r7, #23]
 800b29c:	68ba      	ldr	r2, [r7, #8]
 800b29e:	4413      	add	r3, r2
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	7812      	ldrb	r2, [r2, #0]
 800b2a4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b2a6:	7dfb      	ldrb	r3, [r7, #23]
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b2ac:	7dfb      	ldrb	r3, [r7, #23]
 800b2ae:	68ba      	ldr	r2, [r7, #8]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	2203      	movs	r2, #3
 800b2b4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b2b6:	7dfb      	ldrb	r3, [r7, #23]
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b2bc:	e013      	b.n	800b2e6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b2be:	7dfb      	ldrb	r3, [r7, #23]
 800b2c0:	68ba      	ldr	r2, [r7, #8]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	693a      	ldr	r2, [r7, #16]
 800b2c6:	7812      	ldrb	r2, [r2, #0]
 800b2c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	613b      	str	r3, [r7, #16]
    idx++;
 800b2d0:	7dfb      	ldrb	r3, [r7, #23]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b2d6:	7dfb      	ldrb	r3, [r7, #23]
 800b2d8:	68ba      	ldr	r2, [r7, #8]
 800b2da:	4413      	add	r3, r2
 800b2dc:	2200      	movs	r2, #0
 800b2de:	701a      	strb	r2, [r3, #0]
    idx++;
 800b2e0:	7dfb      	ldrb	r3, [r7, #23]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d1e7      	bne.n	800b2be <USBD_GetString+0x52>
 800b2ee:	e000      	b.n	800b2f2 <USBD_GetString+0x86>
    return;
 800b2f0:	bf00      	nop
  }
}
 800b2f2:	3718      	adds	r7, #24
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b300:	2300      	movs	r3, #0
 800b302:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b308:	e005      	b.n	800b316 <USBD_GetLen+0x1e>
  {
    len++;
 800b30a:	7bfb      	ldrb	r3, [r7, #15]
 800b30c:	3301      	adds	r3, #1
 800b30e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	3301      	adds	r3, #1
 800b314:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1f5      	bne.n	800b30a <USBD_GetLen+0x12>
  }

  return len;
 800b31e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b320:	4618      	mov	r0, r3
 800b322:	3714      	adds	r7, #20
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	60b9      	str	r1, [r7, #8]
 800b336:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2202      	movs	r2, #2
 800b33c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	68ba      	ldr	r2, [r7, #8]
 800b350:	2100      	movs	r1, #0
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	f006 fb99 	bl	8011a8a <USBD_LL_Transmit>

  return USBD_OK;
 800b358:	2300      	movs	r3, #0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3710      	adds	r7, #16
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}

0800b362 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b362:	b580      	push	{r7, lr}
 800b364:	b084      	sub	sp, #16
 800b366:	af00      	add	r7, sp, #0
 800b368:	60f8      	str	r0, [r7, #12]
 800b36a:	60b9      	str	r1, [r7, #8]
 800b36c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	68ba      	ldr	r2, [r7, #8]
 800b372:	2100      	movs	r1, #0
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f006 fb88 	bl	8011a8a <USBD_LL_Transmit>

  return USBD_OK;
 800b37a:	2300      	movs	r3, #0
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3710      	adds	r7, #16
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2203      	movs	r2, #3
 800b394:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	68ba      	ldr	r2, [r7, #8]
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	f006 fb8c 	bl	8011acc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3b4:	2300      	movs	r3, #0
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3710      	adds	r7, #16
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}

0800b3be <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b3be:	b580      	push	{r7, lr}
 800b3c0:	b084      	sub	sp, #16
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	60f8      	str	r0, [r7, #12]
 800b3c6:	60b9      	str	r1, [r7, #8]
 800b3c8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	68ba      	ldr	r2, [r7, #8]
 800b3ce:	2100      	movs	r1, #0
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f006 fb7b 	bl	8011acc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2204      	movs	r2, #4
 800b3ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f006 fb47 	bl	8011a8a <USBD_LL_Transmit>

  return USBD_OK;
 800b3fc:	2300      	movs	r3, #0
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3708      	adds	r7, #8
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}

0800b406 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b406:	b580      	push	{r7, lr}
 800b408:	b082      	sub	sp, #8
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2205      	movs	r2, #5
 800b412:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b416:	2300      	movs	r3, #0
 800b418:	2200      	movs	r2, #0
 800b41a:	2100      	movs	r1, #0
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f006 fb55 	bl	8011acc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b422:	2300      	movs	r3, #0
}
 800b424:	4618      	mov	r0, r3
 800b426:	3708      	adds	r7, #8
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	4603      	mov	r3, r0
 800b434:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b436:	79fb      	ldrb	r3, [r7, #7]
 800b438:	4a08      	ldr	r2, [pc, #32]	; (800b45c <disk_status+0x30>)
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	4413      	add	r3, r2
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	79fa      	ldrb	r2, [r7, #7]
 800b444:	4905      	ldr	r1, [pc, #20]	; (800b45c <disk_status+0x30>)
 800b446:	440a      	add	r2, r1
 800b448:	7a12      	ldrb	r2, [r2, #8]
 800b44a:	4610      	mov	r0, r2
 800b44c:	4798      	blx	r3
 800b44e:	4603      	mov	r3, r0
 800b450:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b452:	7bfb      	ldrb	r3, [r7, #15]
}
 800b454:	4618      	mov	r0, r3
 800b456:	3710      	adds	r7, #16
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	200024a0 	.word	0x200024a0

0800b460 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	4603      	mov	r3, r0
 800b468:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b46a:	2300      	movs	r3, #0
 800b46c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b46e:	79fb      	ldrb	r3, [r7, #7]
 800b470:	4a0d      	ldr	r2, [pc, #52]	; (800b4a8 <disk_initialize+0x48>)
 800b472:	5cd3      	ldrb	r3, [r2, r3]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d111      	bne.n	800b49c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b478:	79fb      	ldrb	r3, [r7, #7]
 800b47a:	4a0b      	ldr	r2, [pc, #44]	; (800b4a8 <disk_initialize+0x48>)
 800b47c:	2101      	movs	r1, #1
 800b47e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b480:	79fb      	ldrb	r3, [r7, #7]
 800b482:	4a09      	ldr	r2, [pc, #36]	; (800b4a8 <disk_initialize+0x48>)
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	4413      	add	r3, r2
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	79fa      	ldrb	r2, [r7, #7]
 800b48e:	4906      	ldr	r1, [pc, #24]	; (800b4a8 <disk_initialize+0x48>)
 800b490:	440a      	add	r2, r1
 800b492:	7a12      	ldrb	r2, [r2, #8]
 800b494:	4610      	mov	r0, r2
 800b496:	4798      	blx	r3
 800b498:	4603      	mov	r3, r0
 800b49a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	200024a0 	.word	0x200024a0

0800b4ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b4ac:	b590      	push	{r4, r7, lr}
 800b4ae:	b087      	sub	sp, #28
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60b9      	str	r1, [r7, #8]
 800b4b4:	607a      	str	r2, [r7, #4]
 800b4b6:	603b      	str	r3, [r7, #0]
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b4bc:	7bfb      	ldrb	r3, [r7, #15]
 800b4be:	4a0a      	ldr	r2, [pc, #40]	; (800b4e8 <disk_read+0x3c>)
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	4413      	add	r3, r2
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	689c      	ldr	r4, [r3, #8]
 800b4c8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ca:	4a07      	ldr	r2, [pc, #28]	; (800b4e8 <disk_read+0x3c>)
 800b4cc:	4413      	add	r3, r2
 800b4ce:	7a18      	ldrb	r0, [r3, #8]
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	68b9      	ldr	r1, [r7, #8]
 800b4d6:	47a0      	blx	r4
 800b4d8:	4603      	mov	r3, r0
 800b4da:	75fb      	strb	r3, [r7, #23]
  return res;
 800b4dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	371c      	adds	r7, #28
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd90      	pop	{r4, r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	200024a0 	.word	0x200024a0

0800b4ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b4ec:	b590      	push	{r4, r7, lr}
 800b4ee:	b087      	sub	sp, #28
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60b9      	str	r1, [r7, #8]
 800b4f4:	607a      	str	r2, [r7, #4]
 800b4f6:	603b      	str	r3, [r7, #0]
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b4fc:	7bfb      	ldrb	r3, [r7, #15]
 800b4fe:	4a0a      	ldr	r2, [pc, #40]	; (800b528 <disk_write+0x3c>)
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	4413      	add	r3, r2
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	68dc      	ldr	r4, [r3, #12]
 800b508:	7bfb      	ldrb	r3, [r7, #15]
 800b50a:	4a07      	ldr	r2, [pc, #28]	; (800b528 <disk_write+0x3c>)
 800b50c:	4413      	add	r3, r2
 800b50e:	7a18      	ldrb	r0, [r3, #8]
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	68b9      	ldr	r1, [r7, #8]
 800b516:	47a0      	blx	r4
 800b518:	4603      	mov	r3, r0
 800b51a:	75fb      	strb	r3, [r7, #23]
  return res;
 800b51c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	371c      	adds	r7, #28
 800b522:	46bd      	mov	sp, r7
 800b524:	bd90      	pop	{r4, r7, pc}
 800b526:	bf00      	nop
 800b528:	200024a0 	.word	0x200024a0

0800b52c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	4603      	mov	r3, r0
 800b534:	603a      	str	r2, [r7, #0]
 800b536:	71fb      	strb	r3, [r7, #7]
 800b538:	460b      	mov	r3, r1
 800b53a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b53c:	79fb      	ldrb	r3, [r7, #7]
 800b53e:	4a09      	ldr	r2, [pc, #36]	; (800b564 <disk_ioctl+0x38>)
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	691b      	ldr	r3, [r3, #16]
 800b548:	79fa      	ldrb	r2, [r7, #7]
 800b54a:	4906      	ldr	r1, [pc, #24]	; (800b564 <disk_ioctl+0x38>)
 800b54c:	440a      	add	r2, r1
 800b54e:	7a10      	ldrb	r0, [r2, #8]
 800b550:	79b9      	ldrb	r1, [r7, #6]
 800b552:	683a      	ldr	r2, [r7, #0]
 800b554:	4798      	blx	r3
 800b556:	4603      	mov	r3, r0
 800b558:	73fb      	strb	r3, [r7, #15]
  return res;
 800b55a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	200024a0 	.word	0x200024a0

0800b568 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	3301      	adds	r3, #1
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b578:	89fb      	ldrh	r3, [r7, #14]
 800b57a:	021b      	lsls	r3, r3, #8
 800b57c:	b21a      	sxth	r2, r3
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	b21b      	sxth	r3, r3
 800b584:	4313      	orrs	r3, r2
 800b586:	b21b      	sxth	r3, r3
 800b588:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b58a:	89fb      	ldrh	r3, [r7, #14]
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3714      	adds	r7, #20
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b598:	b480      	push	{r7}
 800b59a:	b085      	sub	sp, #20
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	3303      	adds	r3, #3
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	021b      	lsls	r3, r3, #8
 800b5ac:	687a      	ldr	r2, [r7, #4]
 800b5ae:	3202      	adds	r2, #2
 800b5b0:	7812      	ldrb	r2, [r2, #0]
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	021b      	lsls	r3, r3, #8
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	3201      	adds	r2, #1
 800b5be:	7812      	ldrb	r2, [r2, #0]
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	021b      	lsls	r3, r3, #8
 800b5c8:	687a      	ldr	r2, [r7, #4]
 800b5ca:	7812      	ldrb	r2, [r2, #0]
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	60fb      	str	r3, [r7, #12]
	return rv;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3714      	adds	r7, #20
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr

0800b5de <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b5de:	b480      	push	{r7}
 800b5e0:	b083      	sub	sp, #12
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	1c5a      	adds	r2, r3, #1
 800b5ee:	607a      	str	r2, [r7, #4]
 800b5f0:	887a      	ldrh	r2, [r7, #2]
 800b5f2:	b2d2      	uxtb	r2, r2
 800b5f4:	701a      	strb	r2, [r3, #0]
 800b5f6:	887b      	ldrh	r3, [r7, #2]
 800b5f8:	0a1b      	lsrs	r3, r3, #8
 800b5fa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	1c5a      	adds	r2, r3, #1
 800b600:	607a      	str	r2, [r7, #4]
 800b602:	887a      	ldrh	r2, [r7, #2]
 800b604:	b2d2      	uxtb	r2, r2
 800b606:	701a      	strb	r2, [r3, #0]
}
 800b608:	bf00      	nop
 800b60a:	370c      	adds	r7, #12
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	1c5a      	adds	r2, r3, #1
 800b622:	607a      	str	r2, [r7, #4]
 800b624:	683a      	ldr	r2, [r7, #0]
 800b626:	b2d2      	uxtb	r2, r2
 800b628:	701a      	strb	r2, [r3, #0]
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	0a1b      	lsrs	r3, r3, #8
 800b62e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	1c5a      	adds	r2, r3, #1
 800b634:	607a      	str	r2, [r7, #4]
 800b636:	683a      	ldr	r2, [r7, #0]
 800b638:	b2d2      	uxtb	r2, r2
 800b63a:	701a      	strb	r2, [r3, #0]
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	0a1b      	lsrs	r3, r3, #8
 800b640:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	1c5a      	adds	r2, r3, #1
 800b646:	607a      	str	r2, [r7, #4]
 800b648:	683a      	ldr	r2, [r7, #0]
 800b64a:	b2d2      	uxtb	r2, r2
 800b64c:	701a      	strb	r2, [r3, #0]
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	0a1b      	lsrs	r3, r3, #8
 800b652:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	1c5a      	adds	r2, r3, #1
 800b658:	607a      	str	r2, [r7, #4]
 800b65a:	683a      	ldr	r2, [r7, #0]
 800b65c:	b2d2      	uxtb	r2, r2
 800b65e:	701a      	strb	r2, [r3, #0]
}
 800b660:	bf00      	nop
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b66c:	b480      	push	{r7}
 800b66e:	b087      	sub	sp, #28
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d00d      	beq.n	800b6a2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b686:	693a      	ldr	r2, [r7, #16]
 800b688:	1c53      	adds	r3, r2, #1
 800b68a:	613b      	str	r3, [r7, #16]
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	1c59      	adds	r1, r3, #1
 800b690:	6179      	str	r1, [r7, #20]
 800b692:	7812      	ldrb	r2, [r2, #0]
 800b694:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	3b01      	subs	r3, #1
 800b69a:	607b      	str	r3, [r7, #4]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d1f1      	bne.n	800b686 <mem_cpy+0x1a>
	}
}
 800b6a2:	bf00      	nop
 800b6a4:	371c      	adds	r7, #28
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr

0800b6ae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b6ae:	b480      	push	{r7}
 800b6b0:	b087      	sub	sp, #28
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	60f8      	str	r0, [r7, #12]
 800b6b6:	60b9      	str	r1, [r7, #8]
 800b6b8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	1c5a      	adds	r2, r3, #1
 800b6c2:	617a      	str	r2, [r7, #20]
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	b2d2      	uxtb	r2, r2
 800b6c8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	3b01      	subs	r3, #1
 800b6ce:	607b      	str	r3, [r7, #4]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d1f3      	bne.n	800b6be <mem_set+0x10>
}
 800b6d6:	bf00      	nop
 800b6d8:	bf00      	nop
 800b6da:	371c      	adds	r7, #28
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b6e4:	b480      	push	{r7}
 800b6e6:	b089      	sub	sp, #36	; 0x24
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	60f8      	str	r0, [r7, #12]
 800b6ec:	60b9      	str	r1, [r7, #8]
 800b6ee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	61fb      	str	r3, [r7, #28]
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	1c5a      	adds	r2, r3, #1
 800b700:	61fa      	str	r2, [r7, #28]
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	4619      	mov	r1, r3
 800b706:	69bb      	ldr	r3, [r7, #24]
 800b708:	1c5a      	adds	r2, r3, #1
 800b70a:	61ba      	str	r2, [r7, #24]
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	1acb      	subs	r3, r1, r3
 800b710:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	3b01      	subs	r3, #1
 800b716:	607b      	str	r3, [r7, #4]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d002      	beq.n	800b724 <mem_cmp+0x40>
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d0eb      	beq.n	800b6fc <mem_cmp+0x18>

	return r;
 800b724:	697b      	ldr	r3, [r7, #20]
}
 800b726:	4618      	mov	r0, r3
 800b728:	3724      	adds	r7, #36	; 0x24
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr

0800b732 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b732:	b480      	push	{r7}
 800b734:	b083      	sub	sp, #12
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
 800b73a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b73c:	e002      	b.n	800b744 <chk_chr+0x12>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	3301      	adds	r3, #1
 800b742:	607b      	str	r3, [r7, #4]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d005      	beq.n	800b758 <chk_chr+0x26>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	461a      	mov	r2, r3
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	4293      	cmp	r3, r2
 800b756:	d1f2      	bne.n	800b73e <chk_chr+0xc>
	return *str;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	781b      	ldrb	r3, [r3, #0]
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	370c      	adds	r7, #12
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d009      	beq.n	800b78a <lock_fs+0x22>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	691b      	ldr	r3, [r3, #16]
 800b77a:	4618      	mov	r0, r3
 800b77c:	f002 f9cc 	bl	800db18 <ff_req_grant>
 800b780:	4603      	mov	r3, r0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d001      	beq.n	800b78a <lock_fs+0x22>
 800b786:	2301      	movs	r3, #1
 800b788:	e000      	b.n	800b78c <lock_fs+0x24>
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	460b      	mov	r3, r1
 800b79e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00d      	beq.n	800b7c2 <unlock_fs+0x2e>
 800b7a6:	78fb      	ldrb	r3, [r7, #3]
 800b7a8:	2b0c      	cmp	r3, #12
 800b7aa:	d00a      	beq.n	800b7c2 <unlock_fs+0x2e>
 800b7ac:	78fb      	ldrb	r3, [r7, #3]
 800b7ae:	2b0b      	cmp	r3, #11
 800b7b0:	d007      	beq.n	800b7c2 <unlock_fs+0x2e>
 800b7b2:	78fb      	ldrb	r3, [r7, #3]
 800b7b4:	2b0f      	cmp	r3, #15
 800b7b6:	d004      	beq.n	800b7c2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	691b      	ldr	r3, [r3, #16]
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f002 f9c0 	bl	800db42 <ff_rel_grant>
	}
}
 800b7c2:	bf00      	nop
 800b7c4:	3708      	adds	r7, #8
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
	...

0800b7cc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	60bb      	str	r3, [r7, #8]
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	60fb      	str	r3, [r7, #12]
 800b7de:	e029      	b.n	800b834 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b7e0:	4a27      	ldr	r2, [pc, #156]	; (800b880 <chk_lock+0xb4>)
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	011b      	lsls	r3, r3, #4
 800b7e6:	4413      	add	r3, r2
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d01d      	beq.n	800b82a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b7ee:	4a24      	ldr	r2, [pc, #144]	; (800b880 <chk_lock+0xb4>)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	011b      	lsls	r3, r3, #4
 800b7f4:	4413      	add	r3, r2
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d116      	bne.n	800b82e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b800:	4a1f      	ldr	r2, [pc, #124]	; (800b880 <chk_lock+0xb4>)
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	011b      	lsls	r3, r3, #4
 800b806:	4413      	add	r3, r2
 800b808:	3304      	adds	r3, #4
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b810:	429a      	cmp	r2, r3
 800b812:	d10c      	bne.n	800b82e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b814:	4a1a      	ldr	r2, [pc, #104]	; (800b880 <chk_lock+0xb4>)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	011b      	lsls	r3, r3, #4
 800b81a:	4413      	add	r3, r2
 800b81c:	3308      	adds	r3, #8
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b824:	429a      	cmp	r2, r3
 800b826:	d102      	bne.n	800b82e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b828:	e007      	b.n	800b83a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b82a:	2301      	movs	r3, #1
 800b82c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	3301      	adds	r3, #1
 800b832:	60fb      	str	r3, [r7, #12]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2b01      	cmp	r3, #1
 800b838:	d9d2      	bls.n	800b7e0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2b02      	cmp	r3, #2
 800b83e:	d109      	bne.n	800b854 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d102      	bne.n	800b84c <chk_lock+0x80>
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	2b02      	cmp	r3, #2
 800b84a:	d101      	bne.n	800b850 <chk_lock+0x84>
 800b84c:	2300      	movs	r3, #0
 800b84e:	e010      	b.n	800b872 <chk_lock+0xa6>
 800b850:	2312      	movs	r3, #18
 800b852:	e00e      	b.n	800b872 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d108      	bne.n	800b86c <chk_lock+0xa0>
 800b85a:	4a09      	ldr	r2, [pc, #36]	; (800b880 <chk_lock+0xb4>)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	011b      	lsls	r3, r3, #4
 800b860:	4413      	add	r3, r2
 800b862:	330c      	adds	r3, #12
 800b864:	881b      	ldrh	r3, [r3, #0]
 800b866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b86a:	d101      	bne.n	800b870 <chk_lock+0xa4>
 800b86c:	2310      	movs	r3, #16
 800b86e:	e000      	b.n	800b872 <chk_lock+0xa6>
 800b870:	2300      	movs	r3, #0
}
 800b872:	4618      	mov	r0, r3
 800b874:	3714      	adds	r7, #20
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	20002480 	.word	0x20002480

0800b884 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b88a:	2300      	movs	r3, #0
 800b88c:	607b      	str	r3, [r7, #4]
 800b88e:	e002      	b.n	800b896 <enq_lock+0x12>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	3301      	adds	r3, #1
 800b894:	607b      	str	r3, [r7, #4]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d806      	bhi.n	800b8aa <enq_lock+0x26>
 800b89c:	4a09      	ldr	r2, [pc, #36]	; (800b8c4 <enq_lock+0x40>)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	011b      	lsls	r3, r3, #4
 800b8a2:	4413      	add	r3, r2
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1f2      	bne.n	800b890 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2b02      	cmp	r3, #2
 800b8ae:	bf14      	ite	ne
 800b8b0:	2301      	movne	r3, #1
 800b8b2:	2300      	moveq	r3, #0
 800b8b4:	b2db      	uxtb	r3, r3
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	370c      	adds	r7, #12
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	20002480 	.word	0x20002480

0800b8c8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	60fb      	str	r3, [r7, #12]
 800b8d6:	e01f      	b.n	800b918 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b8d8:	4a41      	ldr	r2, [pc, #260]	; (800b9e0 <inc_lock+0x118>)
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	011b      	lsls	r3, r3, #4
 800b8de:	4413      	add	r3, r2
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d113      	bne.n	800b912 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b8ea:	4a3d      	ldr	r2, [pc, #244]	; (800b9e0 <inc_lock+0x118>)
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	011b      	lsls	r3, r3, #4
 800b8f0:	4413      	add	r3, r2
 800b8f2:	3304      	adds	r3, #4
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d109      	bne.n	800b912 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b8fe:	4a38      	ldr	r2, [pc, #224]	; (800b9e0 <inc_lock+0x118>)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	011b      	lsls	r3, r3, #4
 800b904:	4413      	add	r3, r2
 800b906:	3308      	adds	r3, #8
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b90e:	429a      	cmp	r2, r3
 800b910:	d006      	beq.n	800b920 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	3301      	adds	r3, #1
 800b916:	60fb      	str	r3, [r7, #12]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d9dc      	bls.n	800b8d8 <inc_lock+0x10>
 800b91e:	e000      	b.n	800b922 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b920:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2b02      	cmp	r3, #2
 800b926:	d132      	bne.n	800b98e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b928:	2300      	movs	r3, #0
 800b92a:	60fb      	str	r3, [r7, #12]
 800b92c:	e002      	b.n	800b934 <inc_lock+0x6c>
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	3301      	adds	r3, #1
 800b932:	60fb      	str	r3, [r7, #12]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2b01      	cmp	r3, #1
 800b938:	d806      	bhi.n	800b948 <inc_lock+0x80>
 800b93a:	4a29      	ldr	r2, [pc, #164]	; (800b9e0 <inc_lock+0x118>)
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	011b      	lsls	r3, r3, #4
 800b940:	4413      	add	r3, r2
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d1f2      	bne.n	800b92e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2b02      	cmp	r3, #2
 800b94c:	d101      	bne.n	800b952 <inc_lock+0x8a>
 800b94e:	2300      	movs	r3, #0
 800b950:	e040      	b.n	800b9d4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681a      	ldr	r2, [r3, #0]
 800b956:	4922      	ldr	r1, [pc, #136]	; (800b9e0 <inc_lock+0x118>)
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	011b      	lsls	r3, r3, #4
 800b95c:	440b      	add	r3, r1
 800b95e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	689a      	ldr	r2, [r3, #8]
 800b964:	491e      	ldr	r1, [pc, #120]	; (800b9e0 <inc_lock+0x118>)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	011b      	lsls	r3, r3, #4
 800b96a:	440b      	add	r3, r1
 800b96c:	3304      	adds	r3, #4
 800b96e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	695a      	ldr	r2, [r3, #20]
 800b974:	491a      	ldr	r1, [pc, #104]	; (800b9e0 <inc_lock+0x118>)
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	011b      	lsls	r3, r3, #4
 800b97a:	440b      	add	r3, r1
 800b97c:	3308      	adds	r3, #8
 800b97e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b980:	4a17      	ldr	r2, [pc, #92]	; (800b9e0 <inc_lock+0x118>)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	011b      	lsls	r3, r3, #4
 800b986:	4413      	add	r3, r2
 800b988:	330c      	adds	r3, #12
 800b98a:	2200      	movs	r2, #0
 800b98c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d009      	beq.n	800b9a8 <inc_lock+0xe0>
 800b994:	4a12      	ldr	r2, [pc, #72]	; (800b9e0 <inc_lock+0x118>)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	011b      	lsls	r3, r3, #4
 800b99a:	4413      	add	r3, r2
 800b99c:	330c      	adds	r3, #12
 800b99e:	881b      	ldrh	r3, [r3, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d001      	beq.n	800b9a8 <inc_lock+0xe0>
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	e015      	b.n	800b9d4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d108      	bne.n	800b9c0 <inc_lock+0xf8>
 800b9ae:	4a0c      	ldr	r2, [pc, #48]	; (800b9e0 <inc_lock+0x118>)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	011b      	lsls	r3, r3, #4
 800b9b4:	4413      	add	r3, r2
 800b9b6:	330c      	adds	r3, #12
 800b9b8:	881b      	ldrh	r3, [r3, #0]
 800b9ba:	3301      	adds	r3, #1
 800b9bc:	b29a      	uxth	r2, r3
 800b9be:	e001      	b.n	800b9c4 <inc_lock+0xfc>
 800b9c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b9c4:	4906      	ldr	r1, [pc, #24]	; (800b9e0 <inc_lock+0x118>)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	011b      	lsls	r3, r3, #4
 800b9ca:	440b      	add	r3, r1
 800b9cc:	330c      	adds	r3, #12
 800b9ce:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	3301      	adds	r3, #1
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3714      	adds	r7, #20
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr
 800b9e0:	20002480 	.word	0x20002480

0800b9e4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b085      	sub	sp, #20
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	607b      	str	r3, [r7, #4]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d825      	bhi.n	800ba44 <dec_lock+0x60>
		n = Files[i].ctr;
 800b9f8:	4a17      	ldr	r2, [pc, #92]	; (800ba58 <dec_lock+0x74>)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	011b      	lsls	r3, r3, #4
 800b9fe:	4413      	add	r3, r2
 800ba00:	330c      	adds	r3, #12
 800ba02:	881b      	ldrh	r3, [r3, #0]
 800ba04:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ba06:	89fb      	ldrh	r3, [r7, #14]
 800ba08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba0c:	d101      	bne.n	800ba12 <dec_lock+0x2e>
 800ba0e:	2300      	movs	r3, #0
 800ba10:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ba12:	89fb      	ldrh	r3, [r7, #14]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <dec_lock+0x3a>
 800ba18:	89fb      	ldrh	r3, [r7, #14]
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ba1e:	4a0e      	ldr	r2, [pc, #56]	; (800ba58 <dec_lock+0x74>)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	011b      	lsls	r3, r3, #4
 800ba24:	4413      	add	r3, r2
 800ba26:	330c      	adds	r3, #12
 800ba28:	89fa      	ldrh	r2, [r7, #14]
 800ba2a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ba2c:	89fb      	ldrh	r3, [r7, #14]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d105      	bne.n	800ba3e <dec_lock+0x5a>
 800ba32:	4a09      	ldr	r2, [pc, #36]	; (800ba58 <dec_lock+0x74>)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	011b      	lsls	r3, r3, #4
 800ba38:	4413      	add	r3, r2
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	737b      	strb	r3, [r7, #13]
 800ba42:	e001      	b.n	800ba48 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ba44:	2302      	movs	r3, #2
 800ba46:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ba48:	7b7b      	ldrb	r3, [r7, #13]
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3714      	adds	r7, #20
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba54:	4770      	bx	lr
 800ba56:	bf00      	nop
 800ba58:	20002480 	.word	0x20002480

0800ba5c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b085      	sub	sp, #20
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ba64:	2300      	movs	r3, #0
 800ba66:	60fb      	str	r3, [r7, #12]
 800ba68:	e010      	b.n	800ba8c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ba6a:	4a0d      	ldr	r2, [pc, #52]	; (800baa0 <clear_lock+0x44>)
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	011b      	lsls	r3, r3, #4
 800ba70:	4413      	add	r3, r2
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d105      	bne.n	800ba86 <clear_lock+0x2a>
 800ba7a:	4a09      	ldr	r2, [pc, #36]	; (800baa0 <clear_lock+0x44>)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	011b      	lsls	r3, r3, #4
 800ba80:	4413      	add	r3, r2
 800ba82:	2200      	movs	r2, #0
 800ba84:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	60fb      	str	r3, [r7, #12]
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2b01      	cmp	r3, #1
 800ba90:	d9eb      	bls.n	800ba6a <clear_lock+0xe>
	}
}
 800ba92:	bf00      	nop
 800ba94:	bf00      	nop
 800ba96:	3714      	adds	r7, #20
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr
 800baa0:	20002480 	.word	0x20002480

0800baa4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b086      	sub	sp, #24
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800baac:	2300      	movs	r3, #0
 800baae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	78db      	ldrb	r3, [r3, #3]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d034      	beq.n	800bb22 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800babc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	7858      	ldrb	r0, [r3, #1]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bac8:	2301      	movs	r3, #1
 800baca:	697a      	ldr	r2, [r7, #20]
 800bacc:	f7ff fd0e 	bl	800b4ec <disk_write>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d002      	beq.n	800badc <sync_window+0x38>
			res = FR_DISK_ERR;
 800bad6:	2301      	movs	r3, #1
 800bad8:	73fb      	strb	r3, [r7, #15]
 800bada:	e022      	b.n	800bb22 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2200      	movs	r2, #0
 800bae0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bae6:	697a      	ldr	r2, [r7, #20]
 800bae8:	1ad2      	subs	r2, r2, r3
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a1b      	ldr	r3, [r3, #32]
 800baee:	429a      	cmp	r2, r3
 800baf0:	d217      	bcs.n	800bb22 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	789b      	ldrb	r3, [r3, #2]
 800baf6:	613b      	str	r3, [r7, #16]
 800baf8:	e010      	b.n	800bb1c <sync_window+0x78>
					wsect += fs->fsize;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6a1b      	ldr	r3, [r3, #32]
 800bafe:	697a      	ldr	r2, [r7, #20]
 800bb00:	4413      	add	r3, r2
 800bb02:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	7858      	ldrb	r0, [r3, #1]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bb0e:	2301      	movs	r3, #1
 800bb10:	697a      	ldr	r2, [r7, #20]
 800bb12:	f7ff fceb 	bl	800b4ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	3b01      	subs	r3, #1
 800bb1a:	613b      	str	r3, [r7, #16]
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	d8eb      	bhi.n	800bafa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bb22:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3718      	adds	r7, #24
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bb36:	2300      	movs	r3, #0
 800bb38:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb3e:	683a      	ldr	r2, [r7, #0]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d01b      	beq.n	800bb7c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f7ff ffad 	bl	800baa4 <sync_window>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bb4e:	7bfb      	ldrb	r3, [r7, #15]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d113      	bne.n	800bb7c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	7858      	ldrb	r0, [r3, #1]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bb5e:	2301      	movs	r3, #1
 800bb60:	683a      	ldr	r2, [r7, #0]
 800bb62:	f7ff fca3 	bl	800b4ac <disk_read>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d004      	beq.n	800bb76 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bb6c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb70:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bb72:	2301      	movs	r3, #1
 800bb74:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	683a      	ldr	r2, [r7, #0]
 800bb7a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800bb7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3710      	adds	r7, #16
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
	...

0800bb88 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f7ff ff87 	bl	800baa4 <sync_window>
 800bb96:	4603      	mov	r3, r0
 800bb98:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bb9a:	7bfb      	ldrb	r3, [r7, #15]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d159      	bne.n	800bc54 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	2b03      	cmp	r3, #3
 800bba6:	d149      	bne.n	800bc3c <sync_fs+0xb4>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	791b      	ldrb	r3, [r3, #4]
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d145      	bne.n	800bc3c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	899b      	ldrh	r3, [r3, #12]
 800bbba:	461a      	mov	r2, r3
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	f7ff fd76 	bl	800b6ae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	3338      	adds	r3, #56	; 0x38
 800bbc6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bbca:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7ff fd05 	bl	800b5de <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	3338      	adds	r3, #56	; 0x38
 800bbd8:	4921      	ldr	r1, [pc, #132]	; (800bc60 <sync_fs+0xd8>)
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7ff fd1a 	bl	800b614 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	3338      	adds	r3, #56	; 0x38
 800bbe4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bbe8:	491e      	ldr	r1, [pc, #120]	; (800bc64 <sync_fs+0xdc>)
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7ff fd12 	bl	800b614 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	3338      	adds	r3, #56	; 0x38
 800bbf4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	699b      	ldr	r3, [r3, #24]
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	4610      	mov	r0, r2
 800bc00:	f7ff fd08 	bl	800b614 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	3338      	adds	r3, #56	; 0x38
 800bc08:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	695b      	ldr	r3, [r3, #20]
 800bc10:	4619      	mov	r1, r3
 800bc12:	4610      	mov	r0, r2
 800bc14:	f7ff fcfe 	bl	800b614 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1c:	1c5a      	adds	r2, r3, #1
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	7858      	ldrb	r0, [r3, #1]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc30:	2301      	movs	r3, #1
 800bc32:	f7ff fc5b 	bl	800b4ec <disk_write>
			fs->fsi_flag = 0;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	785b      	ldrb	r3, [r3, #1]
 800bc40:	2200      	movs	r2, #0
 800bc42:	2100      	movs	r1, #0
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7ff fc71 	bl	800b52c <disk_ioctl>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d001      	beq.n	800bc54 <sync_fs+0xcc>
 800bc50:	2301      	movs	r3, #1
 800bc52:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bc54:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3710      	adds	r7, #16
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	41615252 	.word	0x41615252
 800bc64:	61417272 	.word	0x61417272

0800bc68 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	3b02      	subs	r3, #2
 800bc76:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	69db      	ldr	r3, [r3, #28]
 800bc7c:	3b02      	subs	r3, #2
 800bc7e:	683a      	ldr	r2, [r7, #0]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d301      	bcc.n	800bc88 <clust2sect+0x20>
 800bc84:	2300      	movs	r3, #0
 800bc86:	e008      	b.n	800bc9a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	895b      	ldrh	r3, [r3, #10]
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	fb03 f202 	mul.w	r2, r3, r2
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc98:	4413      	add	r3, r2
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	370c      	adds	r7, #12
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b086      	sub	sp, #24
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d904      	bls.n	800bcc6 <get_fat+0x20>
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	69db      	ldr	r3, [r3, #28]
 800bcc0:	683a      	ldr	r2, [r7, #0]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d302      	bcc.n	800bccc <get_fat+0x26>
		val = 1;	/* Internal error */
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	617b      	str	r3, [r7, #20]
 800bcca:	e0bb      	b.n	800be44 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bccc:	f04f 33ff 	mov.w	r3, #4294967295
 800bcd0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	2b03      	cmp	r3, #3
 800bcd8:	f000 8083 	beq.w	800bde2 <get_fat+0x13c>
 800bcdc:	2b03      	cmp	r3, #3
 800bcde:	f300 80a7 	bgt.w	800be30 <get_fat+0x18a>
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d002      	beq.n	800bcec <get_fat+0x46>
 800bce6:	2b02      	cmp	r3, #2
 800bce8:	d056      	beq.n	800bd98 <get_fat+0xf2>
 800bcea:	e0a1      	b.n	800be30 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	60fb      	str	r3, [r7, #12]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	085b      	lsrs	r3, r3, #1
 800bcf4:	68fa      	ldr	r2, [r7, #12]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	899b      	ldrh	r3, [r3, #12]
 800bd02:	4619      	mov	r1, r3
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd0a:	4413      	add	r3, r2
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	6938      	ldr	r0, [r7, #16]
 800bd10:	f7ff ff0c 	bl	800bb2c <move_window>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	f040 808d 	bne.w	800be36 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	1c5a      	adds	r2, r3, #1
 800bd20:	60fa      	str	r2, [r7, #12]
 800bd22:	693a      	ldr	r2, [r7, #16]
 800bd24:	8992      	ldrh	r2, [r2, #12]
 800bd26:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd2a:	fb01 f202 	mul.w	r2, r1, r2
 800bd2e:	1a9b      	subs	r3, r3, r2
 800bd30:	693a      	ldr	r2, [r7, #16]
 800bd32:	4413      	add	r3, r2
 800bd34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bd38:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	899b      	ldrh	r3, [r3, #12]
 800bd42:	4619      	mov	r1, r3
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd4a:	4413      	add	r3, r2
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	6938      	ldr	r0, [r7, #16]
 800bd50:	f7ff feec 	bl	800bb2c <move_window>
 800bd54:	4603      	mov	r3, r0
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d16f      	bne.n	800be3a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	899b      	ldrh	r3, [r3, #12]
 800bd5e:	461a      	mov	r2, r3
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd66:	fb01 f202 	mul.w	r2, r1, r2
 800bd6a:	1a9b      	subs	r3, r3, r2
 800bd6c:	693a      	ldr	r2, [r7, #16]
 800bd6e:	4413      	add	r3, r2
 800bd70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bd74:	021b      	lsls	r3, r3, #8
 800bd76:	461a      	mov	r2, r3
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	f003 0301 	and.w	r3, r3, #1
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d002      	beq.n	800bd8e <get_fat+0xe8>
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	091b      	lsrs	r3, r3, #4
 800bd8c:	e002      	b.n	800bd94 <get_fat+0xee>
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd94:	617b      	str	r3, [r7, #20]
			break;
 800bd96:	e055      	b.n	800be44 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	899b      	ldrh	r3, [r3, #12]
 800bda0:	085b      	lsrs	r3, r3, #1
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	4619      	mov	r1, r3
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	fbb3 f3f1 	udiv	r3, r3, r1
 800bdac:	4413      	add	r3, r2
 800bdae:	4619      	mov	r1, r3
 800bdb0:	6938      	ldr	r0, [r7, #16]
 800bdb2:	f7ff febb 	bl	800bb2c <move_window>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d140      	bne.n	800be3e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	005b      	lsls	r3, r3, #1
 800bdc6:	693a      	ldr	r2, [r7, #16]
 800bdc8:	8992      	ldrh	r2, [r2, #12]
 800bdca:	fbb3 f0f2 	udiv	r0, r3, r2
 800bdce:	fb00 f202 	mul.w	r2, r0, r2
 800bdd2:	1a9b      	subs	r3, r3, r2
 800bdd4:	440b      	add	r3, r1
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7ff fbc6 	bl	800b568 <ld_word>
 800bddc:	4603      	mov	r3, r0
 800bdde:	617b      	str	r3, [r7, #20]
			break;
 800bde0:	e030      	b.n	800be44 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	899b      	ldrh	r3, [r3, #12]
 800bdea:	089b      	lsrs	r3, r3, #2
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	4619      	mov	r1, r3
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	fbb3 f3f1 	udiv	r3, r3, r1
 800bdf6:	4413      	add	r3, r2
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	6938      	ldr	r0, [r7, #16]
 800bdfc:	f7ff fe96 	bl	800bb2c <move_window>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d11d      	bne.n	800be42 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	693a      	ldr	r2, [r7, #16]
 800be12:	8992      	ldrh	r2, [r2, #12]
 800be14:	fbb3 f0f2 	udiv	r0, r3, r2
 800be18:	fb00 f202 	mul.w	r2, r0, r2
 800be1c:	1a9b      	subs	r3, r3, r2
 800be1e:	440b      	add	r3, r1
 800be20:	4618      	mov	r0, r3
 800be22:	f7ff fbb9 	bl	800b598 <ld_dword>
 800be26:	4603      	mov	r3, r0
 800be28:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800be2c:	617b      	str	r3, [r7, #20]
			break;
 800be2e:	e009      	b.n	800be44 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800be30:	2301      	movs	r3, #1
 800be32:	617b      	str	r3, [r7, #20]
 800be34:	e006      	b.n	800be44 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be36:	bf00      	nop
 800be38:	e004      	b.n	800be44 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be3a:	bf00      	nop
 800be3c:	e002      	b.n	800be44 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800be3e:	bf00      	nop
 800be40:	e000      	b.n	800be44 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800be42:	bf00      	nop
		}
	}

	return val;
 800be44:	697b      	ldr	r3, [r7, #20]
}
 800be46:	4618      	mov	r0, r3
 800be48:	3718      	adds	r7, #24
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800be4e:	b590      	push	{r4, r7, lr}
 800be50:	b089      	sub	sp, #36	; 0x24
 800be52:	af00      	add	r7, sp, #0
 800be54:	60f8      	str	r0, [r7, #12]
 800be56:	60b9      	str	r1, [r7, #8]
 800be58:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800be5a:	2302      	movs	r3, #2
 800be5c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	2b01      	cmp	r3, #1
 800be62:	f240 8102 	bls.w	800c06a <put_fat+0x21c>
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	69db      	ldr	r3, [r3, #28]
 800be6a:	68ba      	ldr	r2, [r7, #8]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	f080 80fc 	bcs.w	800c06a <put_fat+0x21c>
		switch (fs->fs_type) {
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	2b03      	cmp	r3, #3
 800be78:	f000 80b6 	beq.w	800bfe8 <put_fat+0x19a>
 800be7c:	2b03      	cmp	r3, #3
 800be7e:	f300 80fd 	bgt.w	800c07c <put_fat+0x22e>
 800be82:	2b01      	cmp	r3, #1
 800be84:	d003      	beq.n	800be8e <put_fat+0x40>
 800be86:	2b02      	cmp	r3, #2
 800be88:	f000 8083 	beq.w	800bf92 <put_fat+0x144>
 800be8c:	e0f6      	b.n	800c07c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	61bb      	str	r3, [r7, #24]
 800be92:	69bb      	ldr	r3, [r7, #24]
 800be94:	085b      	lsrs	r3, r3, #1
 800be96:	69ba      	ldr	r2, [r7, #24]
 800be98:	4413      	add	r3, r2
 800be9a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	899b      	ldrh	r3, [r3, #12]
 800bea4:	4619      	mov	r1, r3
 800bea6:	69bb      	ldr	r3, [r7, #24]
 800bea8:	fbb3 f3f1 	udiv	r3, r3, r1
 800beac:	4413      	add	r3, r2
 800beae:	4619      	mov	r1, r3
 800beb0:	68f8      	ldr	r0, [r7, #12]
 800beb2:	f7ff fe3b 	bl	800bb2c <move_window>
 800beb6:	4603      	mov	r3, r0
 800beb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800beba:	7ffb      	ldrb	r3, [r7, #31]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	f040 80d6 	bne.w	800c06e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	1c5a      	adds	r2, r3, #1
 800becc:	61ba      	str	r2, [r7, #24]
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	8992      	ldrh	r2, [r2, #12]
 800bed2:	fbb3 f0f2 	udiv	r0, r3, r2
 800bed6:	fb00 f202 	mul.w	r2, r0, r2
 800beda:	1a9b      	subs	r3, r3, r2
 800bedc:	440b      	add	r3, r1
 800bede:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	f003 0301 	and.w	r3, r3, #1
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d00d      	beq.n	800bf06 <put_fat+0xb8>
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	b25b      	sxtb	r3, r3
 800bef0:	f003 030f 	and.w	r3, r3, #15
 800bef4:	b25a      	sxtb	r2, r3
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	011b      	lsls	r3, r3, #4
 800befc:	b25b      	sxtb	r3, r3
 800befe:	4313      	orrs	r3, r2
 800bf00:	b25b      	sxtb	r3, r3
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	e001      	b.n	800bf0a <put_fat+0xbc>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	697a      	ldr	r2, [r7, #20]
 800bf0c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2201      	movs	r2, #1
 800bf12:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	899b      	ldrh	r3, [r3, #12]
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf24:	4413      	add	r3, r2
 800bf26:	4619      	mov	r1, r3
 800bf28:	68f8      	ldr	r0, [r7, #12]
 800bf2a:	f7ff fdff 	bl	800bb2c <move_window>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf32:	7ffb      	ldrb	r3, [r7, #31]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f040 809c 	bne.w	800c072 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	899b      	ldrh	r3, [r3, #12]
 800bf44:	461a      	mov	r2, r3
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	fbb3 f0f2 	udiv	r0, r3, r2
 800bf4c:	fb00 f202 	mul.w	r2, r0, r2
 800bf50:	1a9b      	subs	r3, r3, r2
 800bf52:	440b      	add	r3, r1
 800bf54:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	f003 0301 	and.w	r3, r3, #1
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d003      	beq.n	800bf68 <put_fat+0x11a>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	091b      	lsrs	r3, r3, #4
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	e00e      	b.n	800bf86 <put_fat+0x138>
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	b25b      	sxtb	r3, r3
 800bf6e:	f023 030f 	bic.w	r3, r3, #15
 800bf72:	b25a      	sxtb	r2, r3
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	0a1b      	lsrs	r3, r3, #8
 800bf78:	b25b      	sxtb	r3, r3
 800bf7a:	f003 030f 	and.w	r3, r3, #15
 800bf7e:	b25b      	sxtb	r3, r3
 800bf80:	4313      	orrs	r3, r2
 800bf82:	b25b      	sxtb	r3, r3
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	697a      	ldr	r2, [r7, #20]
 800bf88:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	70da      	strb	r2, [r3, #3]
			break;
 800bf90:	e074      	b.n	800c07c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	899b      	ldrh	r3, [r3, #12]
 800bf9a:	085b      	lsrs	r3, r3, #1
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	fbb3 f3f1 	udiv	r3, r3, r1
 800bfa6:	4413      	add	r3, r2
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	68f8      	ldr	r0, [r7, #12]
 800bfac:	f7ff fdbe 	bl	800bb2c <move_window>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bfb4:	7ffb      	ldrb	r3, [r7, #31]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d15d      	bne.n	800c076 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	005b      	lsls	r3, r3, #1
 800bfc4:	68fa      	ldr	r2, [r7, #12]
 800bfc6:	8992      	ldrh	r2, [r2, #12]
 800bfc8:	fbb3 f0f2 	udiv	r0, r3, r2
 800bfcc:	fb00 f202 	mul.w	r2, r0, r2
 800bfd0:	1a9b      	subs	r3, r3, r2
 800bfd2:	440b      	add	r3, r1
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	b292      	uxth	r2, r2
 800bfd8:	4611      	mov	r1, r2
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7ff faff 	bl	800b5de <st_word>
			fs->wflag = 1;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	70da      	strb	r2, [r3, #3]
			break;
 800bfe6:	e049      	b.n	800c07c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	899b      	ldrh	r3, [r3, #12]
 800bff0:	089b      	lsrs	r3, r3, #2
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	4619      	mov	r1, r3
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	fbb3 f3f1 	udiv	r3, r3, r1
 800bffc:	4413      	add	r3, r2
 800bffe:	4619      	mov	r1, r3
 800c000:	68f8      	ldr	r0, [r7, #12]
 800c002:	f7ff fd93 	bl	800bb2c <move_window>
 800c006:	4603      	mov	r3, r0
 800c008:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c00a:	7ffb      	ldrb	r3, [r7, #31]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d134      	bne.n	800c07a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	68fa      	ldr	r2, [r7, #12]
 800c022:	8992      	ldrh	r2, [r2, #12]
 800c024:	fbb3 f0f2 	udiv	r0, r3, r2
 800c028:	fb00 f202 	mul.w	r2, r0, r2
 800c02c:	1a9b      	subs	r3, r3, r2
 800c02e:	440b      	add	r3, r1
 800c030:	4618      	mov	r0, r3
 800c032:	f7ff fab1 	bl	800b598 <ld_dword>
 800c036:	4603      	mov	r3, r0
 800c038:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c03c:	4323      	orrs	r3, r4
 800c03e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	009b      	lsls	r3, r3, #2
 800c04a:	68fa      	ldr	r2, [r7, #12]
 800c04c:	8992      	ldrh	r2, [r2, #12]
 800c04e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c052:	fb00 f202 	mul.w	r2, r0, r2
 800c056:	1a9b      	subs	r3, r3, r2
 800c058:	440b      	add	r3, r1
 800c05a:	6879      	ldr	r1, [r7, #4]
 800c05c:	4618      	mov	r0, r3
 800c05e:	f7ff fad9 	bl	800b614 <st_dword>
			fs->wflag = 1;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2201      	movs	r2, #1
 800c066:	70da      	strb	r2, [r3, #3]
			break;
 800c068:	e008      	b.n	800c07c <put_fat+0x22e>
		}
	}
 800c06a:	bf00      	nop
 800c06c:	e006      	b.n	800c07c <put_fat+0x22e>
			if (res != FR_OK) break;
 800c06e:	bf00      	nop
 800c070:	e004      	b.n	800c07c <put_fat+0x22e>
			if (res != FR_OK) break;
 800c072:	bf00      	nop
 800c074:	e002      	b.n	800c07c <put_fat+0x22e>
			if (res != FR_OK) break;
 800c076:	bf00      	nop
 800c078:	e000      	b.n	800c07c <put_fat+0x22e>
			if (res != FR_OK) break;
 800c07a:	bf00      	nop
	return res;
 800c07c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3724      	adds	r7, #36	; 0x24
 800c082:	46bd      	mov	sp, r7
 800c084:	bd90      	pop	{r4, r7, pc}

0800c086 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b088      	sub	sp, #32
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	60f8      	str	r0, [r7, #12]
 800c08e:	60b9      	str	r1, [r7, #8]
 800c090:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c092:	2300      	movs	r3, #0
 800c094:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	d904      	bls.n	800c0ac <remove_chain+0x26>
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	69db      	ldr	r3, [r3, #28]
 800c0a6:	68ba      	ldr	r2, [r7, #8]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d301      	bcc.n	800c0b0 <remove_chain+0x2a>
 800c0ac:	2302      	movs	r3, #2
 800c0ae:	e04b      	b.n	800c148 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00c      	beq.n	800c0d0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c0b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ba:	6879      	ldr	r1, [r7, #4]
 800c0bc:	69b8      	ldr	r0, [r7, #24]
 800c0be:	f7ff fec6 	bl	800be4e <put_fat>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c0c6:	7ffb      	ldrb	r3, [r7, #31]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d001      	beq.n	800c0d0 <remove_chain+0x4a>
 800c0cc:	7ffb      	ldrb	r3, [r7, #31]
 800c0ce:	e03b      	b.n	800c148 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c0d0:	68b9      	ldr	r1, [r7, #8]
 800c0d2:	68f8      	ldr	r0, [r7, #12]
 800c0d4:	f7ff fde7 	bl	800bca6 <get_fat>
 800c0d8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d031      	beq.n	800c144 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d101      	bne.n	800c0ea <remove_chain+0x64>
 800c0e6:	2302      	movs	r3, #2
 800c0e8:	e02e      	b.n	800c148 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f0:	d101      	bne.n	800c0f6 <remove_chain+0x70>
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	e028      	b.n	800c148 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	68b9      	ldr	r1, [r7, #8]
 800c0fa:	69b8      	ldr	r0, [r7, #24]
 800c0fc:	f7ff fea7 	bl	800be4e <put_fat>
 800c100:	4603      	mov	r3, r0
 800c102:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c104:	7ffb      	ldrb	r3, [r7, #31]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d001      	beq.n	800c10e <remove_chain+0x88>
 800c10a:	7ffb      	ldrb	r3, [r7, #31]
 800c10c:	e01c      	b.n	800c148 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c10e:	69bb      	ldr	r3, [r7, #24]
 800c110:	699a      	ldr	r2, [r3, #24]
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	69db      	ldr	r3, [r3, #28]
 800c116:	3b02      	subs	r3, #2
 800c118:	429a      	cmp	r2, r3
 800c11a:	d20b      	bcs.n	800c134 <remove_chain+0xae>
			fs->free_clst++;
 800c11c:	69bb      	ldr	r3, [r7, #24]
 800c11e:	699b      	ldr	r3, [r3, #24]
 800c120:	1c5a      	adds	r2, r3, #1
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	791b      	ldrb	r3, [r3, #4]
 800c12a:	f043 0301 	orr.w	r3, r3, #1
 800c12e:	b2da      	uxtb	r2, r3
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c138:	69bb      	ldr	r3, [r7, #24]
 800c13a:	69db      	ldr	r3, [r3, #28]
 800c13c:	68ba      	ldr	r2, [r7, #8]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d3c6      	bcc.n	800c0d0 <remove_chain+0x4a>
 800c142:	e000      	b.n	800c146 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c144:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c146:	2300      	movs	r3, #0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3720      	adds	r7, #32
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b088      	sub	sp, #32
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d10d      	bne.n	800c182 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	695b      	ldr	r3, [r3, #20]
 800c16a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d004      	beq.n	800c17c <create_chain+0x2c>
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	69db      	ldr	r3, [r3, #28]
 800c176:	69ba      	ldr	r2, [r7, #24]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d31b      	bcc.n	800c1b4 <create_chain+0x64>
 800c17c:	2301      	movs	r3, #1
 800c17e:	61bb      	str	r3, [r7, #24]
 800c180:	e018      	b.n	800c1b4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c182:	6839      	ldr	r1, [r7, #0]
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f7ff fd8e 	bl	800bca6 <get_fat>
 800c18a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2b01      	cmp	r3, #1
 800c190:	d801      	bhi.n	800c196 <create_chain+0x46>
 800c192:	2301      	movs	r3, #1
 800c194:	e070      	b.n	800c278 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c19c:	d101      	bne.n	800c1a2 <create_chain+0x52>
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	e06a      	b.n	800c278 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	69db      	ldr	r3, [r3, #28]
 800c1a6:	68fa      	ldr	r2, [r7, #12]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d201      	bcs.n	800c1b0 <create_chain+0x60>
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	e063      	b.n	800c278 <create_chain+0x128>
		scl = clst;
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c1b4:	69bb      	ldr	r3, [r7, #24]
 800c1b6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c1b8:	69fb      	ldr	r3, [r7, #28]
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	69db      	ldr	r3, [r3, #28]
 800c1c2:	69fa      	ldr	r2, [r7, #28]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d307      	bcc.n	800c1d8 <create_chain+0x88>
				ncl = 2;
 800c1c8:	2302      	movs	r3, #2
 800c1ca:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c1cc:	69fa      	ldr	r2, [r7, #28]
 800c1ce:	69bb      	ldr	r3, [r7, #24]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d901      	bls.n	800c1d8 <create_chain+0x88>
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	e04f      	b.n	800c278 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c1d8:	69f9      	ldr	r1, [r7, #28]
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f7ff fd63 	bl	800bca6 <get_fat>
 800c1e0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d00e      	beq.n	800c206 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2b01      	cmp	r3, #1
 800c1ec:	d003      	beq.n	800c1f6 <create_chain+0xa6>
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1f4:	d101      	bne.n	800c1fa <create_chain+0xaa>
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	e03e      	b.n	800c278 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c1fa:	69fa      	ldr	r2, [r7, #28]
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d1da      	bne.n	800c1b8 <create_chain+0x68>
 800c202:	2300      	movs	r3, #0
 800c204:	e038      	b.n	800c278 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c206:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c208:	f04f 32ff 	mov.w	r2, #4294967295
 800c20c:	69f9      	ldr	r1, [r7, #28]
 800c20e:	6938      	ldr	r0, [r7, #16]
 800c210:	f7ff fe1d 	bl	800be4e <put_fat>
 800c214:	4603      	mov	r3, r0
 800c216:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c218:	7dfb      	ldrb	r3, [r7, #23]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d109      	bne.n	800c232 <create_chain+0xe2>
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d006      	beq.n	800c232 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c224:	69fa      	ldr	r2, [r7, #28]
 800c226:	6839      	ldr	r1, [r7, #0]
 800c228:	6938      	ldr	r0, [r7, #16]
 800c22a:	f7ff fe10 	bl	800be4e <put_fat>
 800c22e:	4603      	mov	r3, r0
 800c230:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c232:	7dfb      	ldrb	r3, [r7, #23]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d116      	bne.n	800c266 <create_chain+0x116>
		fs->last_clst = ncl;
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	69fa      	ldr	r2, [r7, #28]
 800c23c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	699a      	ldr	r2, [r3, #24]
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	69db      	ldr	r3, [r3, #28]
 800c246:	3b02      	subs	r3, #2
 800c248:	429a      	cmp	r2, r3
 800c24a:	d804      	bhi.n	800c256 <create_chain+0x106>
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	699b      	ldr	r3, [r3, #24]
 800c250:	1e5a      	subs	r2, r3, #1
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	791b      	ldrb	r3, [r3, #4]
 800c25a:	f043 0301 	orr.w	r3, r3, #1
 800c25e:	b2da      	uxtb	r2, r3
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	711a      	strb	r2, [r3, #4]
 800c264:	e007      	b.n	800c276 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c266:	7dfb      	ldrb	r3, [r7, #23]
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d102      	bne.n	800c272 <create_chain+0x122>
 800c26c:	f04f 33ff 	mov.w	r3, #4294967295
 800c270:	e000      	b.n	800c274 <create_chain+0x124>
 800c272:	2301      	movs	r3, #1
 800c274:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c276:	69fb      	ldr	r3, [r7, #28]
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3720      	adds	r7, #32
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c280:	b480      	push	{r7}
 800c282:	b087      	sub	sp, #28
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c294:	3304      	adds	r3, #4
 800c296:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	899b      	ldrh	r3, [r3, #12]
 800c29c:	461a      	mov	r2, r3
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2a4:	68fa      	ldr	r2, [r7, #12]
 800c2a6:	8952      	ldrh	r2, [r2, #10]
 800c2a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	1d1a      	adds	r2, r3, #4
 800c2b2:	613a      	str	r2, [r7, #16]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d101      	bne.n	800c2c2 <clmt_clust+0x42>
 800c2be:	2300      	movs	r3, #0
 800c2c0:	e010      	b.n	800c2e4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800c2c2:	697a      	ldr	r2, [r7, #20]
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d307      	bcc.n	800c2da <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800c2ca:	697a      	ldr	r2, [r7, #20]
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	1ad3      	subs	r3, r2, r3
 800c2d0:	617b      	str	r3, [r7, #20]
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	3304      	adds	r3, #4
 800c2d6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c2d8:	e7e9      	b.n	800c2ae <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800c2da:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	4413      	add	r3, r2
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	371c      	adds	r7, #28
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b086      	sub	sp, #24
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c306:	d204      	bcs.n	800c312 <dir_sdi+0x22>
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	f003 031f 	and.w	r3, r3, #31
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d001      	beq.n	800c316 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c312:	2302      	movs	r3, #2
 800c314:	e071      	b.n	800c3fa <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	683a      	ldr	r2, [r7, #0]
 800c31a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	689b      	ldr	r3, [r3, #8]
 800c320:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d106      	bne.n	800c336 <dir_sdi+0x46>
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	2b02      	cmp	r3, #2
 800c32e:	d902      	bls.n	800c336 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c334:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d10c      	bne.n	800c356 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	095b      	lsrs	r3, r3, #5
 800c340:	693a      	ldr	r2, [r7, #16]
 800c342:	8912      	ldrh	r2, [r2, #8]
 800c344:	4293      	cmp	r3, r2
 800c346:	d301      	bcc.n	800c34c <dir_sdi+0x5c>
 800c348:	2302      	movs	r3, #2
 800c34a:	e056      	b.n	800c3fa <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	61da      	str	r2, [r3, #28]
 800c354:	e02d      	b.n	800c3b2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	895b      	ldrh	r3, [r3, #10]
 800c35a:	461a      	mov	r2, r3
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	899b      	ldrh	r3, [r3, #12]
 800c360:	fb02 f303 	mul.w	r3, r2, r3
 800c364:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c366:	e019      	b.n	800c39c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6979      	ldr	r1, [r7, #20]
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7ff fc9a 	bl	800bca6 <get_fat>
 800c372:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c37a:	d101      	bne.n	800c380 <dir_sdi+0x90>
 800c37c:	2301      	movs	r3, #1
 800c37e:	e03c      	b.n	800c3fa <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	2b01      	cmp	r3, #1
 800c384:	d904      	bls.n	800c390 <dir_sdi+0xa0>
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	69db      	ldr	r3, [r3, #28]
 800c38a:	697a      	ldr	r2, [r7, #20]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d301      	bcc.n	800c394 <dir_sdi+0xa4>
 800c390:	2302      	movs	r3, #2
 800c392:	e032      	b.n	800c3fa <dir_sdi+0x10a>
			ofs -= csz;
 800c394:	683a      	ldr	r2, [r7, #0]
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	1ad3      	subs	r3, r2, r3
 800c39a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c39c:	683a      	ldr	r2, [r7, #0]
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d2e1      	bcs.n	800c368 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800c3a4:	6979      	ldr	r1, [r7, #20]
 800c3a6:	6938      	ldr	r0, [r7, #16]
 800c3a8:	f7ff fc5e 	bl	800bc68 <clust2sect>
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	697a      	ldr	r2, [r7, #20]
 800c3b6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	69db      	ldr	r3, [r3, #28]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d101      	bne.n	800c3c4 <dir_sdi+0xd4>
 800c3c0:	2302      	movs	r3, #2
 800c3c2:	e01a      	b.n	800c3fa <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	69da      	ldr	r2, [r3, #28]
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	899b      	ldrh	r3, [r3, #12]
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	fbb3 f3f1 	udiv	r3, r3, r1
 800c3d4:	441a      	add	r2, r3
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	899b      	ldrh	r3, [r3, #12]
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	fbb3 f0f2 	udiv	r0, r3, r2
 800c3ec:	fb00 f202 	mul.w	r2, r0, r2
 800c3f0:	1a9b      	subs	r3, r3, r2
 800c3f2:	18ca      	adds	r2, r1, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c3f8:	2300      	movs	r3, #0
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3718      	adds	r7, #24
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}

0800c402 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c402:	b580      	push	{r7, lr}
 800c404:	b086      	sub	sp, #24
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]
 800c40a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	695b      	ldr	r3, [r3, #20]
 800c416:	3320      	adds	r3, #32
 800c418:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	69db      	ldr	r3, [r3, #28]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d003      	beq.n	800c42a <dir_next+0x28>
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c428:	d301      	bcc.n	800c42e <dir_next+0x2c>
 800c42a:	2304      	movs	r3, #4
 800c42c:	e0bb      	b.n	800c5a6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	899b      	ldrh	r3, [r3, #12]
 800c432:	461a      	mov	r2, r3
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	fbb3 f1f2 	udiv	r1, r3, r2
 800c43a:	fb01 f202 	mul.w	r2, r1, r2
 800c43e:	1a9b      	subs	r3, r3, r2
 800c440:	2b00      	cmp	r3, #0
 800c442:	f040 809d 	bne.w	800c580 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	69db      	ldr	r3, [r3, #28]
 800c44a:	1c5a      	adds	r2, r3, #1
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	699b      	ldr	r3, [r3, #24]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d10b      	bne.n	800c470 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	095b      	lsrs	r3, r3, #5
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	8912      	ldrh	r2, [r2, #8]
 800c460:	4293      	cmp	r3, r2
 800c462:	f0c0 808d 	bcc.w	800c580 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2200      	movs	r2, #0
 800c46a:	61da      	str	r2, [r3, #28]
 800c46c:	2304      	movs	r3, #4
 800c46e:	e09a      	b.n	800c5a6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	899b      	ldrh	r3, [r3, #12]
 800c474:	461a      	mov	r2, r3
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	fbb3 f3f2 	udiv	r3, r3, r2
 800c47c:	68fa      	ldr	r2, [r7, #12]
 800c47e:	8952      	ldrh	r2, [r2, #10]
 800c480:	3a01      	subs	r2, #1
 800c482:	4013      	ands	r3, r2
 800c484:	2b00      	cmp	r3, #0
 800c486:	d17b      	bne.n	800c580 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	699b      	ldr	r3, [r3, #24]
 800c48e:	4619      	mov	r1, r3
 800c490:	4610      	mov	r0, r2
 800c492:	f7ff fc08 	bl	800bca6 <get_fat>
 800c496:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d801      	bhi.n	800c4a2 <dir_next+0xa0>
 800c49e:	2302      	movs	r3, #2
 800c4a0:	e081      	b.n	800c5a6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4a8:	d101      	bne.n	800c4ae <dir_next+0xac>
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	e07b      	b.n	800c5a6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	69db      	ldr	r3, [r3, #28]
 800c4b2:	697a      	ldr	r2, [r7, #20]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d359      	bcc.n	800c56c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d104      	bne.n	800c4c8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	61da      	str	r2, [r3, #28]
 800c4c4:	2304      	movs	r3, #4
 800c4c6:	e06e      	b.n	800c5a6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	699b      	ldr	r3, [r3, #24]
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	4610      	mov	r0, r2
 800c4d2:	f7ff fe3d 	bl	800c150 <create_chain>
 800c4d6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d101      	bne.n	800c4e2 <dir_next+0xe0>
 800c4de:	2307      	movs	r3, #7
 800c4e0:	e061      	b.n	800c5a6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d101      	bne.n	800c4ec <dir_next+0xea>
 800c4e8:	2302      	movs	r3, #2
 800c4ea:	e05c      	b.n	800c5a6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4f2:	d101      	bne.n	800c4f8 <dir_next+0xf6>
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	e056      	b.n	800c5a6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c4f8:	68f8      	ldr	r0, [r7, #12]
 800c4fa:	f7ff fad3 	bl	800baa4 <sync_window>
 800c4fe:	4603      	mov	r3, r0
 800c500:	2b00      	cmp	r3, #0
 800c502:	d001      	beq.n	800c508 <dir_next+0x106>
 800c504:	2301      	movs	r3, #1
 800c506:	e04e      	b.n	800c5a6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	899b      	ldrh	r3, [r3, #12]
 800c512:	461a      	mov	r2, r3
 800c514:	2100      	movs	r1, #0
 800c516:	f7ff f8ca 	bl	800b6ae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c51a:	2300      	movs	r3, #0
 800c51c:	613b      	str	r3, [r7, #16]
 800c51e:	6979      	ldr	r1, [r7, #20]
 800c520:	68f8      	ldr	r0, [r7, #12]
 800c522:	f7ff fba1 	bl	800bc68 <clust2sect>
 800c526:	4602      	mov	r2, r0
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	635a      	str	r2, [r3, #52]	; 0x34
 800c52c:	e012      	b.n	800c554 <dir_next+0x152>
						fs->wflag = 1;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2201      	movs	r2, #1
 800c532:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c534:	68f8      	ldr	r0, [r7, #12]
 800c536:	f7ff fab5 	bl	800baa4 <sync_window>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d001      	beq.n	800c544 <dir_next+0x142>
 800c540:	2301      	movs	r3, #1
 800c542:	e030      	b.n	800c5a6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	3301      	adds	r3, #1
 800c548:	613b      	str	r3, [r7, #16]
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c54e:	1c5a      	adds	r2, r3, #1
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	635a      	str	r2, [r3, #52]	; 0x34
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	895b      	ldrh	r3, [r3, #10]
 800c558:	461a      	mov	r2, r3
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d3e6      	bcc.n	800c52e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	1ad2      	subs	r2, r2, r3
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	697a      	ldr	r2, [r7, #20]
 800c570:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c572:	6979      	ldr	r1, [r7, #20]
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	f7ff fb77 	bl	800bc68 <clust2sect>
 800c57a:	4602      	mov	r2, r0
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	68ba      	ldr	r2, [r7, #8]
 800c584:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	899b      	ldrh	r3, [r3, #12]
 800c590:	461a      	mov	r2, r3
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	fbb3 f0f2 	udiv	r0, r3, r2
 800c598:	fb00 f202 	mul.w	r2, r0, r2
 800c59c:	1a9b      	subs	r3, r3, r2
 800c59e:	18ca      	adds	r2, r1, r3
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c5a4:	2300      	movs	r3, #0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3718      	adds	r7, #24
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c5ae:	b580      	push	{r7, lr}
 800c5b0:	b086      	sub	sp, #24
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
 800c5b6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c5be:	2100      	movs	r1, #0
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f7ff fe95 	bl	800c2f0 <dir_sdi>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c5ca:	7dfb      	ldrb	r3, [r7, #23]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d12b      	bne.n	800c628 <dir_alloc+0x7a>
		n = 0;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	69db      	ldr	r3, [r3, #28]
 800c5d8:	4619      	mov	r1, r3
 800c5da:	68f8      	ldr	r0, [r7, #12]
 800c5dc:	f7ff faa6 	bl	800bb2c <move_window>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c5e4:	7dfb      	ldrb	r3, [r7, #23]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d11d      	bne.n	800c626 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6a1b      	ldr	r3, [r3, #32]
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	2be5      	cmp	r3, #229	; 0xe5
 800c5f2:	d004      	beq.n	800c5fe <dir_alloc+0x50>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6a1b      	ldr	r3, [r3, #32]
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d107      	bne.n	800c60e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	3301      	adds	r3, #1
 800c602:	613b      	str	r3, [r7, #16]
 800c604:	693a      	ldr	r2, [r7, #16]
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	429a      	cmp	r2, r3
 800c60a:	d102      	bne.n	800c612 <dir_alloc+0x64>
 800c60c:	e00c      	b.n	800c628 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c60e:	2300      	movs	r3, #0
 800c610:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c612:	2101      	movs	r1, #1
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f7ff fef4 	bl	800c402 <dir_next>
 800c61a:	4603      	mov	r3, r0
 800c61c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c61e:	7dfb      	ldrb	r3, [r7, #23]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d0d7      	beq.n	800c5d4 <dir_alloc+0x26>
 800c624:	e000      	b.n	800c628 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c626:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c628:	7dfb      	ldrb	r3, [r7, #23]
 800c62a:	2b04      	cmp	r3, #4
 800c62c:	d101      	bne.n	800c632 <dir_alloc+0x84>
 800c62e:	2307      	movs	r3, #7
 800c630:	75fb      	strb	r3, [r7, #23]
	return res;
 800c632:	7dfb      	ldrb	r3, [r7, #23]
}
 800c634:	4618      	mov	r0, r3
 800c636:	3718      	adds	r7, #24
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	331a      	adds	r3, #26
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7fe ff8c 	bl	800b568 <ld_word>
 800c650:	4603      	mov	r3, r0
 800c652:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	2b03      	cmp	r3, #3
 800c65a:	d109      	bne.n	800c670 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	3314      	adds	r3, #20
 800c660:	4618      	mov	r0, r3
 800c662:	f7fe ff81 	bl	800b568 <ld_word>
 800c666:	4603      	mov	r3, r0
 800c668:	041b      	lsls	r3, r3, #16
 800c66a:	68fa      	ldr	r2, [r7, #12]
 800c66c:	4313      	orrs	r3, r2
 800c66e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c670:	68fb      	ldr	r3, [r7, #12]
}
 800c672:	4618      	mov	r0, r3
 800c674:	3710      	adds	r7, #16
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}

0800c67a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c67a:	b580      	push	{r7, lr}
 800c67c:	b084      	sub	sp, #16
 800c67e:	af00      	add	r7, sp, #0
 800c680:	60f8      	str	r0, [r7, #12]
 800c682:	60b9      	str	r1, [r7, #8]
 800c684:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	331a      	adds	r3, #26
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	b292      	uxth	r2, r2
 800c68e:	4611      	mov	r1, r2
 800c690:	4618      	mov	r0, r3
 800c692:	f7fe ffa4 	bl	800b5de <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	2b03      	cmp	r3, #3
 800c69c:	d109      	bne.n	800c6b2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	f103 0214 	add.w	r2, r3, #20
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	0c1b      	lsrs	r3, r3, #16
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	4610      	mov	r0, r2
 800c6ae:	f7fe ff96 	bl	800b5de <st_word>
	}
}
 800c6b2:	bf00      	nop
 800c6b4:	3710      	adds	r7, #16
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}

0800c6ba <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c6ba:	b580      	push	{r7, lr}
 800c6bc:	b086      	sub	sp, #24
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f7ff fe10 	bl	800c2f0 <dir_sdi>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c6d4:	7dfb      	ldrb	r3, [r7, #23]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d001      	beq.n	800c6de <dir_find+0x24>
 800c6da:	7dfb      	ldrb	r3, [r7, #23]
 800c6dc:	e03e      	b.n	800c75c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	69db      	ldr	r3, [r3, #28]
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	6938      	ldr	r0, [r7, #16]
 800c6e6:	f7ff fa21 	bl	800bb2c <move_window>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c6ee:	7dfb      	ldrb	r3, [r7, #23]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d12f      	bne.n	800c754 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6a1b      	ldr	r3, [r3, #32]
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c6fc:	7bfb      	ldrb	r3, [r7, #15]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d102      	bne.n	800c708 <dir_find+0x4e>
 800c702:	2304      	movs	r3, #4
 800c704:	75fb      	strb	r3, [r7, #23]
 800c706:	e028      	b.n	800c75a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6a1b      	ldr	r3, [r3, #32]
 800c70c:	330b      	adds	r3, #11
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c714:	b2da      	uxtb	r2, r3
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6a1b      	ldr	r3, [r3, #32]
 800c71e:	330b      	adds	r3, #11
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	f003 0308 	and.w	r3, r3, #8
 800c726:	2b00      	cmp	r3, #0
 800c728:	d10a      	bne.n	800c740 <dir_find+0x86>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6a18      	ldr	r0, [r3, #32]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	3324      	adds	r3, #36	; 0x24
 800c732:	220b      	movs	r2, #11
 800c734:	4619      	mov	r1, r3
 800c736:	f7fe ffd5 	bl	800b6e4 <mem_cmp>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d00b      	beq.n	800c758 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c740:	2100      	movs	r1, #0
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f7ff fe5d 	bl	800c402 <dir_next>
 800c748:	4603      	mov	r3, r0
 800c74a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c74c:	7dfb      	ldrb	r3, [r7, #23]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d0c5      	beq.n	800c6de <dir_find+0x24>
 800c752:	e002      	b.n	800c75a <dir_find+0xa0>
		if (res != FR_OK) break;
 800c754:	bf00      	nop
 800c756:	e000      	b.n	800c75a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c758:	bf00      	nop

	return res;
 800c75a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3718      	adds	r7, #24
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c772:	2101      	movs	r1, #1
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f7ff ff1a 	bl	800c5ae <dir_alloc>
 800c77a:	4603      	mov	r3, r0
 800c77c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c77e:	7bfb      	ldrb	r3, [r7, #15]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d11c      	bne.n	800c7be <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	69db      	ldr	r3, [r3, #28]
 800c788:	4619      	mov	r1, r3
 800c78a:	68b8      	ldr	r0, [r7, #8]
 800c78c:	f7ff f9ce 	bl	800bb2c <move_window>
 800c790:	4603      	mov	r3, r0
 800c792:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c794:	7bfb      	ldrb	r3, [r7, #15]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d111      	bne.n	800c7be <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6a1b      	ldr	r3, [r3, #32]
 800c79e:	2220      	movs	r2, #32
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7fe ff83 	bl	800b6ae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6a18      	ldr	r0, [r3, #32]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	3324      	adds	r3, #36	; 0x24
 800c7b0:	220b      	movs	r2, #11
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	f7fe ff5a 	bl	800b66c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c7be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3710      	adds	r7, #16
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b088      	sub	sp, #32
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	60fb      	str	r3, [r7, #12]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	3324      	adds	r3, #36	; 0x24
 800c7dc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c7de:	220b      	movs	r2, #11
 800c7e0:	2120      	movs	r1, #32
 800c7e2:	68b8      	ldr	r0, [r7, #8]
 800c7e4:	f7fe ff63 	bl	800b6ae <mem_set>
	si = i = 0; ni = 8;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	613b      	str	r3, [r7, #16]
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	61fb      	str	r3, [r7, #28]
 800c7f0:	2308      	movs	r3, #8
 800c7f2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	1c5a      	adds	r2, r3, #1
 800c7f8:	61fa      	str	r2, [r7, #28]
 800c7fa:	68fa      	ldr	r2, [r7, #12]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c802:	7efb      	ldrb	r3, [r7, #27]
 800c804:	2b20      	cmp	r3, #32
 800c806:	d94e      	bls.n	800c8a6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c808:	7efb      	ldrb	r3, [r7, #27]
 800c80a:	2b2f      	cmp	r3, #47	; 0x2f
 800c80c:	d006      	beq.n	800c81c <create_name+0x54>
 800c80e:	7efb      	ldrb	r3, [r7, #27]
 800c810:	2b5c      	cmp	r3, #92	; 0x5c
 800c812:	d110      	bne.n	800c836 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c814:	e002      	b.n	800c81c <create_name+0x54>
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	3301      	adds	r3, #1
 800c81a:	61fb      	str	r3, [r7, #28]
 800c81c:	68fa      	ldr	r2, [r7, #12]
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	4413      	add	r3, r2
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	2b2f      	cmp	r3, #47	; 0x2f
 800c826:	d0f6      	beq.n	800c816 <create_name+0x4e>
 800c828:	68fa      	ldr	r2, [r7, #12]
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	4413      	add	r3, r2
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	2b5c      	cmp	r3, #92	; 0x5c
 800c832:	d0f0      	beq.n	800c816 <create_name+0x4e>
			break;
 800c834:	e038      	b.n	800c8a8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c836:	7efb      	ldrb	r3, [r7, #27]
 800c838:	2b2e      	cmp	r3, #46	; 0x2e
 800c83a:	d003      	beq.n	800c844 <create_name+0x7c>
 800c83c:	693a      	ldr	r2, [r7, #16]
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	429a      	cmp	r2, r3
 800c842:	d30c      	bcc.n	800c85e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	2b0b      	cmp	r3, #11
 800c848:	d002      	beq.n	800c850 <create_name+0x88>
 800c84a:	7efb      	ldrb	r3, [r7, #27]
 800c84c:	2b2e      	cmp	r3, #46	; 0x2e
 800c84e:	d001      	beq.n	800c854 <create_name+0x8c>
 800c850:	2306      	movs	r3, #6
 800c852:	e044      	b.n	800c8de <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c854:	2308      	movs	r3, #8
 800c856:	613b      	str	r3, [r7, #16]
 800c858:	230b      	movs	r3, #11
 800c85a:	617b      	str	r3, [r7, #20]
			continue;
 800c85c:	e022      	b.n	800c8a4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c85e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c862:	2b00      	cmp	r3, #0
 800c864:	da04      	bge.n	800c870 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c866:	7efb      	ldrb	r3, [r7, #27]
 800c868:	3b80      	subs	r3, #128	; 0x80
 800c86a:	4a1f      	ldr	r2, [pc, #124]	; (800c8e8 <create_name+0x120>)
 800c86c:	5cd3      	ldrb	r3, [r2, r3]
 800c86e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c870:	7efb      	ldrb	r3, [r7, #27]
 800c872:	4619      	mov	r1, r3
 800c874:	481d      	ldr	r0, [pc, #116]	; (800c8ec <create_name+0x124>)
 800c876:	f7fe ff5c 	bl	800b732 <chk_chr>
 800c87a:	4603      	mov	r3, r0
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d001      	beq.n	800c884 <create_name+0xbc>
 800c880:	2306      	movs	r3, #6
 800c882:	e02c      	b.n	800c8de <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c884:	7efb      	ldrb	r3, [r7, #27]
 800c886:	2b60      	cmp	r3, #96	; 0x60
 800c888:	d905      	bls.n	800c896 <create_name+0xce>
 800c88a:	7efb      	ldrb	r3, [r7, #27]
 800c88c:	2b7a      	cmp	r3, #122	; 0x7a
 800c88e:	d802      	bhi.n	800c896 <create_name+0xce>
 800c890:	7efb      	ldrb	r3, [r7, #27]
 800c892:	3b20      	subs	r3, #32
 800c894:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	1c5a      	adds	r2, r3, #1
 800c89a:	613a      	str	r2, [r7, #16]
 800c89c:	68ba      	ldr	r2, [r7, #8]
 800c89e:	4413      	add	r3, r2
 800c8a0:	7efa      	ldrb	r2, [r7, #27]
 800c8a2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c8a4:	e7a6      	b.n	800c7f4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c8a6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c8a8:	68fa      	ldr	r2, [r7, #12]
 800c8aa:	69fb      	ldr	r3, [r7, #28]
 800c8ac:	441a      	add	r2, r3
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d101      	bne.n	800c8bc <create_name+0xf4>
 800c8b8:	2306      	movs	r3, #6
 800c8ba:	e010      	b.n	800c8de <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	2be5      	cmp	r3, #229	; 0xe5
 800c8c2:	d102      	bne.n	800c8ca <create_name+0x102>
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	2205      	movs	r2, #5
 800c8c8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c8ca:	7efb      	ldrb	r3, [r7, #27]
 800c8cc:	2b20      	cmp	r3, #32
 800c8ce:	d801      	bhi.n	800c8d4 <create_name+0x10c>
 800c8d0:	2204      	movs	r2, #4
 800c8d2:	e000      	b.n	800c8d6 <create_name+0x10e>
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	330b      	adds	r3, #11
 800c8da:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c8dc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3720      	adds	r7, #32
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	08012ecc 	.word	0x08012ecc
 800c8ec:	08012dec 	.word	0x08012dec

0800c8f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b086      	sub	sp, #24
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c904:	e002      	b.n	800c90c <follow_path+0x1c>
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	3301      	adds	r3, #1
 800c90a:	603b      	str	r3, [r7, #0]
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	2b2f      	cmp	r3, #47	; 0x2f
 800c912:	d0f8      	beq.n	800c906 <follow_path+0x16>
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	2b5c      	cmp	r3, #92	; 0x5c
 800c91a:	d0f4      	beq.n	800c906 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	2200      	movs	r2, #0
 800c920:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	2b1f      	cmp	r3, #31
 800c928:	d80a      	bhi.n	800c940 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2280      	movs	r2, #128	; 0x80
 800c92e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c932:	2100      	movs	r1, #0
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f7ff fcdb 	bl	800c2f0 <dir_sdi>
 800c93a:	4603      	mov	r3, r0
 800c93c:	75fb      	strb	r3, [r7, #23]
 800c93e:	e048      	b.n	800c9d2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c940:	463b      	mov	r3, r7
 800c942:	4619      	mov	r1, r3
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f7ff ff3f 	bl	800c7c8 <create_name>
 800c94a:	4603      	mov	r3, r0
 800c94c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c94e:	7dfb      	ldrb	r3, [r7, #23]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d139      	bne.n	800c9c8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f7ff feb0 	bl	800c6ba <dir_find>
 800c95a:	4603      	mov	r3, r0
 800c95c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c964:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c966:	7dfb      	ldrb	r3, [r7, #23]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d00a      	beq.n	800c982 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c96c:	7dfb      	ldrb	r3, [r7, #23]
 800c96e:	2b04      	cmp	r3, #4
 800c970:	d12c      	bne.n	800c9cc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c972:	7afb      	ldrb	r3, [r7, #11]
 800c974:	f003 0304 	and.w	r3, r3, #4
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d127      	bne.n	800c9cc <follow_path+0xdc>
 800c97c:	2305      	movs	r3, #5
 800c97e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c980:	e024      	b.n	800c9cc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c982:	7afb      	ldrb	r3, [r7, #11]
 800c984:	f003 0304 	and.w	r3, r3, #4
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d121      	bne.n	800c9d0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	799b      	ldrb	r3, [r3, #6]
 800c990:	f003 0310 	and.w	r3, r3, #16
 800c994:	2b00      	cmp	r3, #0
 800c996:	d102      	bne.n	800c99e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c998:	2305      	movs	r3, #5
 800c99a:	75fb      	strb	r3, [r7, #23]
 800c99c:	e019      	b.n	800c9d2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	695b      	ldr	r3, [r3, #20]
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	8992      	ldrh	r2, [r2, #12]
 800c9ac:	fbb3 f0f2 	udiv	r0, r3, r2
 800c9b0:	fb00 f202 	mul.w	r2, r0, r2
 800c9b4:	1a9b      	subs	r3, r3, r2
 800c9b6:	440b      	add	r3, r1
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	68f8      	ldr	r0, [r7, #12]
 800c9bc:	f7ff fe3e 	bl	800c63c <ld_clust>
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c9c6:	e7bb      	b.n	800c940 <follow_path+0x50>
			if (res != FR_OK) break;
 800c9c8:	bf00      	nop
 800c9ca:	e002      	b.n	800c9d2 <follow_path+0xe2>
				break;
 800c9cc:	bf00      	nop
 800c9ce:	e000      	b.n	800c9d2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c9d0:	bf00      	nop
			}
		}
	}

	return res;
 800c9d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3718      	adds	r7, #24
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b087      	sub	sp, #28
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c9e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c9e8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d031      	beq.n	800ca56 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	617b      	str	r3, [r7, #20]
 800c9f8:	e002      	b.n	800ca00 <get_ldnumber+0x24>
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	617b      	str	r3, [r7, #20]
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	2b20      	cmp	r3, #32
 800ca06:	d903      	bls.n	800ca10 <get_ldnumber+0x34>
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	2b3a      	cmp	r3, #58	; 0x3a
 800ca0e:	d1f4      	bne.n	800c9fa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	2b3a      	cmp	r3, #58	; 0x3a
 800ca16:	d11c      	bne.n	800ca52 <get_ldnumber+0x76>
			tp = *path;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	1c5a      	adds	r2, r3, #1
 800ca22:	60fa      	str	r2, [r7, #12]
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	3b30      	subs	r3, #48	; 0x30
 800ca28:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	2b09      	cmp	r3, #9
 800ca2e:	d80e      	bhi.n	800ca4e <get_ldnumber+0x72>
 800ca30:	68fa      	ldr	r2, [r7, #12]
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d10a      	bne.n	800ca4e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d107      	bne.n	800ca4e <get_ldnumber+0x72>
					vol = (int)i;
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	3301      	adds	r3, #1
 800ca46:	617b      	str	r3, [r7, #20]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	697a      	ldr	r2, [r7, #20]
 800ca4c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	e002      	b.n	800ca58 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ca52:	2300      	movs	r3, #0
 800ca54:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ca56:	693b      	ldr	r3, [r7, #16]
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	371c      	adds	r7, #28
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b082      	sub	sp, #8
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2200      	movs	r2, #0
 800ca72:	70da      	strb	r2, [r3, #3]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f04f 32ff 	mov.w	r2, #4294967295
 800ca7a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ca7c:	6839      	ldr	r1, [r7, #0]
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f7ff f854 	bl	800bb2c <move_window>
 800ca84:	4603      	mov	r3, r0
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d001      	beq.n	800ca8e <check_fs+0x2a>
 800ca8a:	2304      	movs	r3, #4
 800ca8c:	e038      	b.n	800cb00 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	3338      	adds	r3, #56	; 0x38
 800ca92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7fe fd66 	bl	800b568 <ld_word>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	461a      	mov	r2, r3
 800caa0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d001      	beq.n	800caac <check_fs+0x48>
 800caa8:	2303      	movs	r3, #3
 800caaa:	e029      	b.n	800cb00 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cab2:	2be9      	cmp	r3, #233	; 0xe9
 800cab4:	d009      	beq.n	800caca <check_fs+0x66>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cabc:	2beb      	cmp	r3, #235	; 0xeb
 800cabe:	d11e      	bne.n	800cafe <check_fs+0x9a>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cac6:	2b90      	cmp	r3, #144	; 0x90
 800cac8:	d119      	bne.n	800cafe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	3338      	adds	r3, #56	; 0x38
 800cace:	3336      	adds	r3, #54	; 0x36
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7fe fd61 	bl	800b598 <ld_dword>
 800cad6:	4603      	mov	r3, r0
 800cad8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cadc:	4a0a      	ldr	r2, [pc, #40]	; (800cb08 <check_fs+0xa4>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d101      	bne.n	800cae6 <check_fs+0x82>
 800cae2:	2300      	movs	r3, #0
 800cae4:	e00c      	b.n	800cb00 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	3338      	adds	r3, #56	; 0x38
 800caea:	3352      	adds	r3, #82	; 0x52
 800caec:	4618      	mov	r0, r3
 800caee:	f7fe fd53 	bl	800b598 <ld_dword>
 800caf2:	4603      	mov	r3, r0
 800caf4:	4a05      	ldr	r2, [pc, #20]	; (800cb0c <check_fs+0xa8>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d101      	bne.n	800cafe <check_fs+0x9a>
 800cafa:	2300      	movs	r3, #0
 800cafc:	e000      	b.n	800cb00 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cafe:	2302      	movs	r3, #2
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3708      	adds	r7, #8
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}
 800cb08:	00544146 	.word	0x00544146
 800cb0c:	33544146 	.word	0x33544146

0800cb10 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b096      	sub	sp, #88	; 0x58
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	4613      	mov	r3, r2
 800cb1c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	2200      	movs	r2, #0
 800cb22:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cb24:	68f8      	ldr	r0, [r7, #12]
 800cb26:	f7ff ff59 	bl	800c9dc <get_ldnumber>
 800cb2a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cb2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	da01      	bge.n	800cb36 <find_volume+0x26>
 800cb32:	230b      	movs	r3, #11
 800cb34:	e26a      	b.n	800d00c <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cb36:	4aa3      	ldr	r2, [pc, #652]	; (800cdc4 <find_volume+0x2b4>)
 800cb38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb3e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d101      	bne.n	800cb4a <find_volume+0x3a>
 800cb46:	230c      	movs	r3, #12
 800cb48:	e260      	b.n	800d00c <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800cb4a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb4c:	f7fe fe0c 	bl	800b768 <lock_fs>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d101      	bne.n	800cb5a <find_volume+0x4a>
 800cb56:	230f      	movs	r3, #15
 800cb58:	e258      	b.n	800d00c <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb5e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cb60:	79fb      	ldrb	r3, [r7, #7]
 800cb62:	f023 0301 	bic.w	r3, r3, #1
 800cb66:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d01a      	beq.n	800cba6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800cb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb72:	785b      	ldrb	r3, [r3, #1]
 800cb74:	4618      	mov	r0, r3
 800cb76:	f7fe fc59 	bl	800b42c <disk_status>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cb80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb84:	f003 0301 	and.w	r3, r3, #1
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d10c      	bne.n	800cba6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cb8c:	79fb      	ldrb	r3, [r7, #7]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d007      	beq.n	800cba2 <find_volume+0x92>
 800cb92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb96:	f003 0304 	and.w	r3, r3, #4
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d001      	beq.n	800cba2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800cb9e:	230a      	movs	r3, #10
 800cba0:	e234      	b.n	800d00c <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800cba2:	2300      	movs	r3, #0
 800cba4:	e232      	b.n	800d00c <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba8:	2200      	movs	r2, #0
 800cbaa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cbac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbae:	b2da      	uxtb	r2, r3
 800cbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb6:	785b      	ldrb	r3, [r3, #1]
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f7fe fc51 	bl	800b460 <disk_initialize>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cbc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cbc8:	f003 0301 	and.w	r3, r3, #1
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d001      	beq.n	800cbd4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cbd0:	2303      	movs	r3, #3
 800cbd2:	e21b      	b.n	800d00c <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cbd4:	79fb      	ldrb	r3, [r7, #7]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d007      	beq.n	800cbea <find_volume+0xda>
 800cbda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cbde:	f003 0304 	and.w	r3, r3, #4
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d001      	beq.n	800cbea <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800cbe6:	230a      	movs	r3, #10
 800cbe8:	e210      	b.n	800d00c <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800cbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbec:	7858      	ldrb	r0, [r3, #1]
 800cbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf0:	330c      	adds	r3, #12
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	2102      	movs	r1, #2
 800cbf6:	f7fe fc99 	bl	800b52c <disk_ioctl>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d001      	beq.n	800cc04 <find_volume+0xf4>
 800cc00:	2301      	movs	r3, #1
 800cc02:	e203      	b.n	800d00c <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800cc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc06:	899b      	ldrh	r3, [r3, #12]
 800cc08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc0c:	d80d      	bhi.n	800cc2a <find_volume+0x11a>
 800cc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc10:	899b      	ldrh	r3, [r3, #12]
 800cc12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc16:	d308      	bcc.n	800cc2a <find_volume+0x11a>
 800cc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1a:	899b      	ldrh	r3, [r3, #12]
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc20:	899b      	ldrh	r3, [r3, #12]
 800cc22:	3b01      	subs	r3, #1
 800cc24:	4013      	ands	r3, r2
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d001      	beq.n	800cc2e <find_volume+0x11e>
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e1ee      	b.n	800d00c <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cc32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cc34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc36:	f7ff ff15 	bl	800ca64 <check_fs>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cc40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc44:	2b02      	cmp	r3, #2
 800cc46:	d149      	bne.n	800ccdc <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cc48:	2300      	movs	r3, #0
 800cc4a:	643b      	str	r3, [r7, #64]	; 0x40
 800cc4c:	e01e      	b.n	800cc8c <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cc4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc50:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cc54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc56:	011b      	lsls	r3, r3, #4
 800cc58:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cc5c:	4413      	add	r3, r2
 800cc5e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc62:	3304      	adds	r3, #4
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d006      	beq.n	800cc78 <find_volume+0x168>
 800cc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc6c:	3308      	adds	r3, #8
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7fe fc92 	bl	800b598 <ld_dword>
 800cc74:	4602      	mov	r2, r0
 800cc76:	e000      	b.n	800cc7a <find_volume+0x16a>
 800cc78:	2200      	movs	r2, #0
 800cc7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc7c:	009b      	lsls	r3, r3, #2
 800cc7e:	3358      	adds	r3, #88	; 0x58
 800cc80:	443b      	add	r3, r7
 800cc82:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cc86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc88:	3301      	adds	r3, #1
 800cc8a:	643b      	str	r3, [r7, #64]	; 0x40
 800cc8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc8e:	2b03      	cmp	r3, #3
 800cc90:	d9dd      	bls.n	800cc4e <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cc92:	2300      	movs	r3, #0
 800cc94:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cc96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d002      	beq.n	800cca2 <find_volume+0x192>
 800cc9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc9e:	3b01      	subs	r3, #1
 800cca0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cca4:	009b      	lsls	r3, r3, #2
 800cca6:	3358      	adds	r3, #88	; 0x58
 800cca8:	443b      	add	r3, r7
 800ccaa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ccae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ccb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d005      	beq.n	800ccc2 <find_volume+0x1b2>
 800ccb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ccb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ccba:	f7ff fed3 	bl	800ca64 <check_fs>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	e000      	b.n	800ccc4 <find_volume+0x1b4>
 800ccc2:	2303      	movs	r3, #3
 800ccc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ccc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	d905      	bls.n	800ccdc <find_volume+0x1cc>
 800ccd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	643b      	str	r3, [r7, #64]	; 0x40
 800ccd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccd8:	2b03      	cmp	r3, #3
 800ccda:	d9e2      	bls.n	800cca2 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ccdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cce0:	2b04      	cmp	r3, #4
 800cce2:	d101      	bne.n	800cce8 <find_volume+0x1d8>
 800cce4:	2301      	movs	r3, #1
 800cce6:	e191      	b.n	800d00c <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cce8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d901      	bls.n	800ccf4 <find_volume+0x1e4>
 800ccf0:	230d      	movs	r3, #13
 800ccf2:	e18b      	b.n	800d00c <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ccf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf6:	3338      	adds	r3, #56	; 0x38
 800ccf8:	330b      	adds	r3, #11
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7fe fc34 	bl	800b568 <ld_word>
 800cd00:	4603      	mov	r3, r0
 800cd02:	461a      	mov	r2, r3
 800cd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd06:	899b      	ldrh	r3, [r3, #12]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d001      	beq.n	800cd10 <find_volume+0x200>
 800cd0c:	230d      	movs	r3, #13
 800cd0e:	e17d      	b.n	800d00c <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd12:	3338      	adds	r3, #56	; 0x38
 800cd14:	3316      	adds	r3, #22
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7fe fc26 	bl	800b568 <ld_word>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cd20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d106      	bne.n	800cd34 <find_volume+0x224>
 800cd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd28:	3338      	adds	r3, #56	; 0x38
 800cd2a:	3324      	adds	r3, #36	; 0x24
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7fe fc33 	bl	800b598 <ld_dword>
 800cd32:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd38:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800cd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd42:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd46:	789b      	ldrb	r3, [r3, #2]
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d005      	beq.n	800cd58 <find_volume+0x248>
 800cd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4e:	789b      	ldrb	r3, [r3, #2]
 800cd50:	2b02      	cmp	r3, #2
 800cd52:	d001      	beq.n	800cd58 <find_volume+0x248>
 800cd54:	230d      	movs	r3, #13
 800cd56:	e159      	b.n	800d00c <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cd58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5a:	789b      	ldrb	r3, [r3, #2]
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd60:	fb02 f303 	mul.w	r3, r2, r3
 800cd64:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd6c:	b29a      	uxth	r2, r3
 800cd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd70:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd74:	895b      	ldrh	r3, [r3, #10]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d008      	beq.n	800cd8c <find_volume+0x27c>
 800cd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7c:	895b      	ldrh	r3, [r3, #10]
 800cd7e:	461a      	mov	r2, r3
 800cd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd82:	895b      	ldrh	r3, [r3, #10]
 800cd84:	3b01      	subs	r3, #1
 800cd86:	4013      	ands	r3, r2
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d001      	beq.n	800cd90 <find_volume+0x280>
 800cd8c:	230d      	movs	r3, #13
 800cd8e:	e13d      	b.n	800d00c <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd92:	3338      	adds	r3, #56	; 0x38
 800cd94:	3311      	adds	r3, #17
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7fe fbe6 	bl	800b568 <ld_word>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	461a      	mov	r2, r3
 800cda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda6:	891b      	ldrh	r3, [r3, #8]
 800cda8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdaa:	8992      	ldrh	r2, [r2, #12]
 800cdac:	0952      	lsrs	r2, r2, #5
 800cdae:	b292      	uxth	r2, r2
 800cdb0:	fbb3 f1f2 	udiv	r1, r3, r2
 800cdb4:	fb01 f202 	mul.w	r2, r1, r2
 800cdb8:	1a9b      	subs	r3, r3, r2
 800cdba:	b29b      	uxth	r3, r3
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d003      	beq.n	800cdc8 <find_volume+0x2b8>
 800cdc0:	230d      	movs	r3, #13
 800cdc2:	e123      	b.n	800d00c <find_volume+0x4fc>
 800cdc4:	20002478 	.word	0x20002478

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cdc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdca:	3338      	adds	r3, #56	; 0x38
 800cdcc:	3313      	adds	r3, #19
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7fe fbca 	bl	800b568 <ld_word>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cdd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d106      	bne.n	800cdec <find_volume+0x2dc>
 800cdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde0:	3338      	adds	r3, #56	; 0x38
 800cde2:	3320      	adds	r3, #32
 800cde4:	4618      	mov	r0, r3
 800cde6:	f7fe fbd7 	bl	800b598 <ld_dword>
 800cdea:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdee:	3338      	adds	r3, #56	; 0x38
 800cdf0:	330e      	adds	r3, #14
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7fe fbb8 	bl	800b568 <ld_word>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cdfc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d101      	bne.n	800ce06 <find_volume+0x2f6>
 800ce02:	230d      	movs	r3, #13
 800ce04:	e102      	b.n	800d00c <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ce06:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ce08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce0a:	4413      	add	r3, r2
 800ce0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce0e:	8911      	ldrh	r1, [r2, #8]
 800ce10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce12:	8992      	ldrh	r2, [r2, #12]
 800ce14:	0952      	lsrs	r2, r2, #5
 800ce16:	b292      	uxth	r2, r2
 800ce18:	fbb1 f2f2 	udiv	r2, r1, r2
 800ce1c:	b292      	uxth	r2, r2
 800ce1e:	4413      	add	r3, r2
 800ce20:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ce22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d201      	bcs.n	800ce2e <find_volume+0x31e>
 800ce2a:	230d      	movs	r3, #13
 800ce2c:	e0ee      	b.n	800d00c <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ce2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce32:	1ad3      	subs	r3, r2, r3
 800ce34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce36:	8952      	ldrh	r2, [r2, #10]
 800ce38:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce3c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ce3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d101      	bne.n	800ce48 <find_volume+0x338>
 800ce44:	230d      	movs	r3, #13
 800ce46:	e0e1      	b.n	800d00c <find_volume+0x4fc>
		fmt = FS_FAT32;
 800ce48:	2303      	movs	r3, #3
 800ce4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ce4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce50:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d802      	bhi.n	800ce5e <find_volume+0x34e>
 800ce58:	2302      	movs	r3, #2
 800ce5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ce5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce60:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d802      	bhi.n	800ce6e <find_volume+0x35e>
 800ce68:	2301      	movs	r3, #1
 800ce6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ce6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce70:	1c9a      	adds	r2, r3, #2
 800ce72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce74:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800ce76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce7a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ce7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ce7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce80:	441a      	add	r2, r3
 800ce82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce84:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800ce86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8a:	441a      	add	r2, r3
 800ce8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce8e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800ce90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ce94:	2b03      	cmp	r3, #3
 800ce96:	d11e      	bne.n	800ced6 <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ce98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9a:	3338      	adds	r3, #56	; 0x38
 800ce9c:	332a      	adds	r3, #42	; 0x2a
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7fe fb62 	bl	800b568 <ld_word>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d001      	beq.n	800ceae <find_volume+0x39e>
 800ceaa:	230d      	movs	r3, #13
 800ceac:	e0ae      	b.n	800d00c <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ceae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb0:	891b      	ldrh	r3, [r3, #8]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d001      	beq.n	800ceba <find_volume+0x3aa>
 800ceb6:	230d      	movs	r3, #13
 800ceb8:	e0a8      	b.n	800d00c <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ceba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cebc:	3338      	adds	r3, #56	; 0x38
 800cebe:	332c      	adds	r3, #44	; 0x2c
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7fe fb69 	bl	800b598 <ld_dword>
 800cec6:	4602      	mov	r2, r0
 800cec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceca:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cece:	69db      	ldr	r3, [r3, #28]
 800ced0:	009b      	lsls	r3, r3, #2
 800ced2:	647b      	str	r3, [r7, #68]	; 0x44
 800ced4:	e01f      	b.n	800cf16 <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ced6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced8:	891b      	ldrh	r3, [r3, #8]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d101      	bne.n	800cee2 <find_volume+0x3d2>
 800cede:	230d      	movs	r3, #13
 800cee0:	e094      	b.n	800d00c <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cee8:	441a      	add	r2, r3
 800ceea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceec:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ceee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cef2:	2b02      	cmp	r3, #2
 800cef4:	d103      	bne.n	800cefe <find_volume+0x3ee>
 800cef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef8:	69db      	ldr	r3, [r3, #28]
 800cefa:	005b      	lsls	r3, r3, #1
 800cefc:	e00a      	b.n	800cf14 <find_volume+0x404>
 800cefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf00:	69da      	ldr	r2, [r3, #28]
 800cf02:	4613      	mov	r3, r2
 800cf04:	005b      	lsls	r3, r3, #1
 800cf06:	4413      	add	r3, r2
 800cf08:	085a      	lsrs	r2, r3, #1
 800cf0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf0c:	69db      	ldr	r3, [r3, #28]
 800cf0e:	f003 0301 	and.w	r3, r3, #1
 800cf12:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cf14:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf18:	6a1a      	ldr	r2, [r3, #32]
 800cf1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1c:	899b      	ldrh	r3, [r3, #12]
 800cf1e:	4619      	mov	r1, r3
 800cf20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf22:	440b      	add	r3, r1
 800cf24:	3b01      	subs	r3, #1
 800cf26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf28:	8989      	ldrh	r1, [r1, #12]
 800cf2a:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d201      	bcs.n	800cf36 <find_volume+0x426>
 800cf32:	230d      	movs	r3, #13
 800cf34:	e06a      	b.n	800d00c <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cf36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf38:	f04f 32ff 	mov.w	r2, #4294967295
 800cf3c:	619a      	str	r2, [r3, #24]
 800cf3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf40:	699a      	ldr	r2, [r3, #24]
 800cf42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf44:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800cf46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf48:	2280      	movs	r2, #128	; 0x80
 800cf4a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cf4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf50:	2b03      	cmp	r3, #3
 800cf52:	d149      	bne.n	800cfe8 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf56:	3338      	adds	r3, #56	; 0x38
 800cf58:	3330      	adds	r3, #48	; 0x30
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7fe fb04 	bl	800b568 <ld_word>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d140      	bne.n	800cfe8 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cf66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf68:	3301      	adds	r3, #1
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf6e:	f7fe fddd 	bl	800bb2c <move_window>
 800cf72:	4603      	mov	r3, r0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d137      	bne.n	800cfe8 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800cf78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cf7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf80:	3338      	adds	r3, #56	; 0x38
 800cf82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7fe faee 	bl	800b568 <ld_word>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	461a      	mov	r2, r3
 800cf90:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d127      	bne.n	800cfe8 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cf98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9a:	3338      	adds	r3, #56	; 0x38
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f7fe fafb 	bl	800b598 <ld_dword>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	4a1b      	ldr	r2, [pc, #108]	; (800d014 <find_volume+0x504>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d11e      	bne.n	800cfe8 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfac:	3338      	adds	r3, #56	; 0x38
 800cfae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fe faf0 	bl	800b598 <ld_dword>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	4a17      	ldr	r2, [pc, #92]	; (800d018 <find_volume+0x508>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d113      	bne.n	800cfe8 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc2:	3338      	adds	r3, #56	; 0x38
 800cfc4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f7fe fae5 	bl	800b598 <ld_dword>
 800cfce:	4602      	mov	r2, r0
 800cfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd6:	3338      	adds	r3, #56	; 0x38
 800cfd8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7fe fadb 	bl	800b598 <ld_dword>
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfea:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cfee:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cff0:	4b0a      	ldr	r3, [pc, #40]	; (800d01c <find_volume+0x50c>)
 800cff2:	881b      	ldrh	r3, [r3, #0]
 800cff4:	3301      	adds	r3, #1
 800cff6:	b29a      	uxth	r2, r3
 800cff8:	4b08      	ldr	r3, [pc, #32]	; (800d01c <find_volume+0x50c>)
 800cffa:	801a      	strh	r2, [r3, #0]
 800cffc:	4b07      	ldr	r3, [pc, #28]	; (800d01c <find_volume+0x50c>)
 800cffe:	881a      	ldrh	r2, [r3, #0]
 800d000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d002:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d004:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d006:	f7fe fd29 	bl	800ba5c <clear_lock>
#endif
	return FR_OK;
 800d00a:	2300      	movs	r3, #0
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3758      	adds	r7, #88	; 0x58
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}
 800d014:	41615252 	.word	0x41615252
 800d018:	61417272 	.word	0x61417272
 800d01c:	2000247c 	.word	0x2000247c

0800d020 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d02a:	2309      	movs	r3, #9
 800d02c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d02e      	beq.n	800d092 <validate+0x72>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d02a      	beq.n	800d092 <validate+0x72>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	781b      	ldrb	r3, [r3, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d025      	beq.n	800d092 <validate+0x72>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	889a      	ldrh	r2, [r3, #4]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	88db      	ldrh	r3, [r3, #6]
 800d050:	429a      	cmp	r2, r3
 800d052:	d11e      	bne.n	800d092 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4618      	mov	r0, r3
 800d05a:	f7fe fb85 	bl	800b768 <lock_fs>
 800d05e:	4603      	mov	r3, r0
 800d060:	2b00      	cmp	r3, #0
 800d062:	d014      	beq.n	800d08e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	785b      	ldrb	r3, [r3, #1]
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fe f9de 	bl	800b42c <disk_status>
 800d070:	4603      	mov	r3, r0
 800d072:	f003 0301 	and.w	r3, r3, #1
 800d076:	2b00      	cmp	r3, #0
 800d078:	d102      	bne.n	800d080 <validate+0x60>
				res = FR_OK;
 800d07a:	2300      	movs	r3, #0
 800d07c:	73fb      	strb	r3, [r7, #15]
 800d07e:	e008      	b.n	800d092 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	2100      	movs	r1, #0
 800d086:	4618      	mov	r0, r3
 800d088:	f7fe fb84 	bl	800b794 <unlock_fs>
 800d08c:	e001      	b.n	800d092 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800d08e:	230f      	movs	r3, #15
 800d090:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d092:	7bfb      	ldrb	r3, [r7, #15]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d102      	bne.n	800d09e <validate+0x7e>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	e000      	b.n	800d0a0 <validate+0x80>
 800d09e:	2300      	movs	r3, #0
 800d0a0:	683a      	ldr	r2, [r7, #0]
 800d0a2:	6013      	str	r3, [r2, #0]
	return res;
 800d0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3710      	adds	r7, #16
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
	...

0800d0b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b088      	sub	sp, #32
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	60f8      	str	r0, [r7, #12]
 800d0b8:	60b9      	str	r1, [r7, #8]
 800d0ba:	4613      	mov	r3, r2
 800d0bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d0c2:	f107 0310 	add.w	r3, r7, #16
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7ff fc88 	bl	800c9dc <get_ldnumber>
 800d0cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d0ce:	69fb      	ldr	r3, [r7, #28]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	da01      	bge.n	800d0d8 <f_mount+0x28>
 800d0d4:	230b      	movs	r3, #11
 800d0d6:	e048      	b.n	800d16a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d0d8:	4a26      	ldr	r2, [pc, #152]	; (800d174 <f_mount+0xc4>)
 800d0da:	69fb      	ldr	r3, [r7, #28]
 800d0dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d00f      	beq.n	800d108 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d0e8:	69b8      	ldr	r0, [r7, #24]
 800d0ea:	f7fe fcb7 	bl	800ba5c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800d0ee:	69bb      	ldr	r3, [r7, #24]
 800d0f0:	691b      	ldr	r3, [r3, #16]
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f000 fd04 	bl	800db00 <ff_del_syncobj>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d101      	bne.n	800d102 <f_mount+0x52>
 800d0fe:	2302      	movs	r3, #2
 800d100:	e033      	b.n	800d16a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d102:	69bb      	ldr	r3, [r7, #24]
 800d104:	2200      	movs	r2, #0
 800d106:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d00f      	beq.n	800d12e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2200      	movs	r2, #0
 800d112:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800d114:	69fb      	ldr	r3, [r7, #28]
 800d116:	b2da      	uxtb	r2, r3
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	3310      	adds	r3, #16
 800d11c:	4619      	mov	r1, r3
 800d11e:	4610      	mov	r0, r2
 800d120:	f000 fcd3 	bl	800daca <ff_cre_syncobj>
 800d124:	4603      	mov	r3, r0
 800d126:	2b00      	cmp	r3, #0
 800d128:	d101      	bne.n	800d12e <f_mount+0x7e>
 800d12a:	2302      	movs	r3, #2
 800d12c:	e01d      	b.n	800d16a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d12e:	68fa      	ldr	r2, [r7, #12]
 800d130:	4910      	ldr	r1, [pc, #64]	; (800d174 <f_mount+0xc4>)
 800d132:	69fb      	ldr	r3, [r7, #28]
 800d134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d002      	beq.n	800d144 <f_mount+0x94>
 800d13e:	79fb      	ldrb	r3, [r7, #7]
 800d140:	2b01      	cmp	r3, #1
 800d142:	d001      	beq.n	800d148 <f_mount+0x98>
 800d144:	2300      	movs	r3, #0
 800d146:	e010      	b.n	800d16a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d148:	f107 010c 	add.w	r1, r7, #12
 800d14c:	f107 0308 	add.w	r3, r7, #8
 800d150:	2200      	movs	r2, #0
 800d152:	4618      	mov	r0, r3
 800d154:	f7ff fcdc 	bl	800cb10 <find_volume>
 800d158:	4603      	mov	r3, r0
 800d15a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	7dfa      	ldrb	r2, [r7, #23]
 800d160:	4611      	mov	r1, r2
 800d162:	4618      	mov	r0, r3
 800d164:	f7fe fb16 	bl	800b794 <unlock_fs>
 800d168:	7dfb      	ldrb	r3, [r7, #23]
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3720      	adds	r7, #32
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	20002478 	.word	0x20002478

0800d178 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b098      	sub	sp, #96	; 0x60
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	60b9      	str	r1, [r7, #8]
 800d182:	4613      	mov	r3, r2
 800d184:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d101      	bne.n	800d190 <f_open+0x18>
 800d18c:	2309      	movs	r3, #9
 800d18e:	e1c2      	b.n	800d516 <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d190:	79fb      	ldrb	r3, [r7, #7]
 800d192:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d196:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d198:	79fa      	ldrb	r2, [r7, #7]
 800d19a:	f107 0110 	add.w	r1, r7, #16
 800d19e:	f107 0308 	add.w	r3, r7, #8
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f7ff fcb4 	bl	800cb10 <find_volume>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d1ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	f040 819f 	bne.w	800d4f6 <f_open+0x37e>
		dj.obj.fs = fs;
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d1bc:	68ba      	ldr	r2, [r7, #8]
 800d1be:	f107 0314 	add.w	r3, r7, #20
 800d1c2:	4611      	mov	r1, r2
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7ff fb93 	bl	800c8f0 <follow_path>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d1d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d11a      	bne.n	800d20e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d1d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d1dc:	b25b      	sxtb	r3, r3
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	da03      	bge.n	800d1ea <f_open+0x72>
				res = FR_INVALID_NAME;
 800d1e2:	2306      	movs	r3, #6
 800d1e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d1e8:	e011      	b.n	800d20e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d1ea:	79fb      	ldrb	r3, [r7, #7]
 800d1ec:	f023 0301 	bic.w	r3, r3, #1
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	bf14      	ite	ne
 800d1f4:	2301      	movne	r3, #1
 800d1f6:	2300      	moveq	r3, #0
 800d1f8:	b2db      	uxtb	r3, r3
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	f107 0314 	add.w	r3, r7, #20
 800d200:	4611      	mov	r1, r2
 800d202:	4618      	mov	r0, r3
 800d204:	f7fe fae2 	bl	800b7cc <chk_lock>
 800d208:	4603      	mov	r3, r0
 800d20a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d20e:	79fb      	ldrb	r3, [r7, #7]
 800d210:	f003 031c 	and.w	r3, r3, #28
 800d214:	2b00      	cmp	r3, #0
 800d216:	d07f      	beq.n	800d318 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d218:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d017      	beq.n	800d250 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d220:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d224:	2b04      	cmp	r3, #4
 800d226:	d10e      	bne.n	800d246 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d228:	f7fe fb2c 	bl	800b884 <enq_lock>
 800d22c:	4603      	mov	r3, r0
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d006      	beq.n	800d240 <f_open+0xc8>
 800d232:	f107 0314 	add.w	r3, r7, #20
 800d236:	4618      	mov	r0, r3
 800d238:	f7ff fa94 	bl	800c764 <dir_register>
 800d23c:	4603      	mov	r3, r0
 800d23e:	e000      	b.n	800d242 <f_open+0xca>
 800d240:	2312      	movs	r3, #18
 800d242:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d246:	79fb      	ldrb	r3, [r7, #7]
 800d248:	f043 0308 	orr.w	r3, r3, #8
 800d24c:	71fb      	strb	r3, [r7, #7]
 800d24e:	e010      	b.n	800d272 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d250:	7ebb      	ldrb	r3, [r7, #26]
 800d252:	f003 0311 	and.w	r3, r3, #17
 800d256:	2b00      	cmp	r3, #0
 800d258:	d003      	beq.n	800d262 <f_open+0xea>
					res = FR_DENIED;
 800d25a:	2307      	movs	r3, #7
 800d25c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d260:	e007      	b.n	800d272 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d262:	79fb      	ldrb	r3, [r7, #7]
 800d264:	f003 0304 	and.w	r3, r3, #4
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d002      	beq.n	800d272 <f_open+0xfa>
 800d26c:	2308      	movs	r3, #8
 800d26e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d272:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d276:	2b00      	cmp	r3, #0
 800d278:	d168      	bne.n	800d34c <f_open+0x1d4>
 800d27a:	79fb      	ldrb	r3, [r7, #7]
 800d27c:	f003 0308 	and.w	r3, r3, #8
 800d280:	2b00      	cmp	r3, #0
 800d282:	d063      	beq.n	800d34c <f_open+0x1d4>
				dw = GET_FATTIME();
 800d284:	f7fc f8ac 	bl	80093e0 <get_fattime>
 800d288:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d28c:	330e      	adds	r3, #14
 800d28e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d290:	4618      	mov	r0, r3
 800d292:	f7fe f9bf 	bl	800b614 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d298:	3316      	adds	r3, #22
 800d29a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d29c:	4618      	mov	r0, r3
 800d29e:	f7fe f9b9 	bl	800b614 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2a4:	330b      	adds	r3, #11
 800d2a6:	2220      	movs	r2, #32
 800d2a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2ae:	4611      	mov	r1, r2
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f7ff f9c3 	bl	800c63c <ld_clust>
 800d2b6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d2bc:	2200      	movs	r2, #0
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7ff f9db 	bl	800c67a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d2c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2c6:	331c      	adds	r3, #28
 800d2c8:	2100      	movs	r1, #0
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f7fe f9a2 	bl	800b614 <st_dword>
					fs->wflag = 1;
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d2d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d037      	beq.n	800d34c <f_open+0x1d4>
						dw = fs->winsect;
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2e0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d2e2:	f107 0314 	add.w	r3, r7, #20
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7fe fecb 	bl	800c086 <remove_chain>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d2f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d126      	bne.n	800d34c <f_open+0x1d4>
							res = move_window(fs, dw);
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d302:	4618      	mov	r0, r3
 800d304:	f7fe fc12 	bl	800bb2c <move_window>
 800d308:	4603      	mov	r3, r0
 800d30a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d312:	3a01      	subs	r2, #1
 800d314:	615a      	str	r2, [r3, #20]
 800d316:	e019      	b.n	800d34c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d318:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d115      	bne.n	800d34c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d320:	7ebb      	ldrb	r3, [r7, #26]
 800d322:	f003 0310 	and.w	r3, r3, #16
 800d326:	2b00      	cmp	r3, #0
 800d328:	d003      	beq.n	800d332 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d32a:	2304      	movs	r3, #4
 800d32c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d330:	e00c      	b.n	800d34c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d332:	79fb      	ldrb	r3, [r7, #7]
 800d334:	f003 0302 	and.w	r3, r3, #2
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d007      	beq.n	800d34c <f_open+0x1d4>
 800d33c:	7ebb      	ldrb	r3, [r7, #26]
 800d33e:	f003 0301 	and.w	r3, r3, #1
 800d342:	2b00      	cmp	r3, #0
 800d344:	d002      	beq.n	800d34c <f_open+0x1d4>
						res = FR_DENIED;
 800d346:	2307      	movs	r3, #7
 800d348:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d34c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d350:	2b00      	cmp	r3, #0
 800d352:	d128      	bne.n	800d3a6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d354:	79fb      	ldrb	r3, [r7, #7]
 800d356:	f003 0308 	and.w	r3, r3, #8
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d003      	beq.n	800d366 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d35e:	79fb      	ldrb	r3, [r7, #7]
 800d360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d364:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d36e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d374:	79fb      	ldrb	r3, [r7, #7]
 800d376:	f023 0301 	bic.w	r3, r3, #1
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	bf14      	ite	ne
 800d37e:	2301      	movne	r3, #1
 800d380:	2300      	moveq	r3, #0
 800d382:	b2db      	uxtb	r3, r3
 800d384:	461a      	mov	r2, r3
 800d386:	f107 0314 	add.w	r3, r7, #20
 800d38a:	4611      	mov	r1, r2
 800d38c:	4618      	mov	r0, r3
 800d38e:	f7fe fa9b 	bl	800b8c8 <inc_lock>
 800d392:	4602      	mov	r2, r0
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	691b      	ldr	r3, [r3, #16]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d102      	bne.n	800d3a6 <f_open+0x22e>
 800d3a0:	2302      	movs	r3, #2
 800d3a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d3a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	f040 80a3 	bne.w	800d4f6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3b4:	4611      	mov	r1, r2
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7ff f940 	bl	800c63c <ld_clust>
 800d3bc:	4602      	mov	r2, r0
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c4:	331c      	adds	r3, #28
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7fe f8e6 	bl	800b598 <ld_dword>
 800d3cc:	4602      	mov	r2, r0
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d3d8:	693a      	ldr	r2, [r7, #16]
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	88da      	ldrh	r2, [r3, #6]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	79fa      	ldrb	r2, [r7, #7]
 800d3ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	3330      	adds	r3, #48	; 0x30
 800d402:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d406:	2100      	movs	r1, #0
 800d408:	4618      	mov	r0, r3
 800d40a:	f7fe f950 	bl	800b6ae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d40e:	79fb      	ldrb	r3, [r7, #7]
 800d410:	f003 0320 	and.w	r3, r3, #32
 800d414:	2b00      	cmp	r3, #0
 800d416:	d06e      	beq.n	800d4f6 <f_open+0x37e>
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	68db      	ldr	r3, [r3, #12]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d06a      	beq.n	800d4f6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	68da      	ldr	r2, [r3, #12]
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	895b      	ldrh	r3, [r3, #10]
 800d42c:	461a      	mov	r2, r3
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	899b      	ldrh	r3, [r3, #12]
 800d432:	fb02 f303 	mul.w	r3, r2, r3
 800d436:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	68db      	ldr	r3, [r3, #12]
 800d442:	657b      	str	r3, [r7, #84]	; 0x54
 800d444:	e016      	b.n	800d474 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7fe fc2b 	bl	800bca6 <get_fat>
 800d450:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d454:	2b01      	cmp	r3, #1
 800d456:	d802      	bhi.n	800d45e <f_open+0x2e6>
 800d458:	2302      	movs	r3, #2
 800d45a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d45e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d460:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d464:	d102      	bne.n	800d46c <f_open+0x2f4>
 800d466:	2301      	movs	r3, #1
 800d468:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d46c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d46e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d470:	1ad3      	subs	r3, r2, r3
 800d472:	657b      	str	r3, [r7, #84]	; 0x54
 800d474:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d103      	bne.n	800d484 <f_open+0x30c>
 800d47c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d47e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d480:	429a      	cmp	r2, r3
 800d482:	d8e0      	bhi.n	800d446 <f_open+0x2ce>
				}
				fp->clust = clst;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d488:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d48a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d131      	bne.n	800d4f6 <f_open+0x37e>
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	899b      	ldrh	r3, [r3, #12]
 800d496:	461a      	mov	r2, r3
 800d498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d49a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d49e:	fb01 f202 	mul.w	r2, r1, r2
 800d4a2:	1a9b      	subs	r3, r3, r2
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d026      	beq.n	800d4f6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f7fe fbdb 	bl	800bc68 <clust2sect>
 800d4b2:	6478      	str	r0, [r7, #68]	; 0x44
 800d4b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d103      	bne.n	800d4c2 <f_open+0x34a>
						res = FR_INT_ERR;
 800d4ba:	2302      	movs	r3, #2
 800d4bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d4c0:	e019      	b.n	800d4f6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	899b      	ldrh	r3, [r3, #12]
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4ca:	fbb3 f2f2 	udiv	r2, r3, r2
 800d4ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4d0:	441a      	add	r2, r3
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	7858      	ldrb	r0, [r3, #1]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	6a1a      	ldr	r2, [r3, #32]
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	f7fd ffe1 	bl	800b4ac <disk_read>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d002      	beq.n	800d4f6 <f_open+0x37e>
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d4f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d002      	beq.n	800d504 <f_open+0x38c>
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2200      	movs	r2, #0
 800d502:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800d50a:	4611      	mov	r1, r2
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7fe f941 	bl	800b794 <unlock_fs>
 800d512:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d516:	4618      	mov	r0, r3
 800d518:	3760      	adds	r7, #96	; 0x60
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}

0800d51e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d51e:	b580      	push	{r7, lr}
 800d520:	b08c      	sub	sp, #48	; 0x30
 800d522:	af00      	add	r7, sp, #0
 800d524:	60f8      	str	r0, [r7, #12]
 800d526:	60b9      	str	r1, [r7, #8]
 800d528:	607a      	str	r2, [r7, #4]
 800d52a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	2200      	movs	r2, #0
 800d534:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	f107 0210 	add.w	r2, r7, #16
 800d53c:	4611      	mov	r1, r2
 800d53e:	4618      	mov	r0, r3
 800d540:	f7ff fd6e 	bl	800d020 <validate>
 800d544:	4603      	mov	r3, r0
 800d546:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d54a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d107      	bne.n	800d562 <f_write+0x44>
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	7d5b      	ldrb	r3, [r3, #21]
 800d556:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d55a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d009      	beq.n	800d576 <f_write+0x58>
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d568:	4611      	mov	r1, r2
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7fe f912 	bl	800b794 <unlock_fs>
 800d570:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d574:	e192      	b.n	800d89c <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	7d1b      	ldrb	r3, [r3, #20]
 800d57a:	f003 0302 	and.w	r3, r3, #2
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d106      	bne.n	800d590 <f_write+0x72>
 800d582:	693b      	ldr	r3, [r7, #16]
 800d584:	2107      	movs	r1, #7
 800d586:	4618      	mov	r0, r3
 800d588:	f7fe f904 	bl	800b794 <unlock_fs>
 800d58c:	2307      	movs	r3, #7
 800d58e:	e185      	b.n	800d89c <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	699a      	ldr	r2, [r3, #24]
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	441a      	add	r2, r3
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	699b      	ldr	r3, [r3, #24]
 800d59c:	429a      	cmp	r2, r3
 800d59e:	f080 816a 	bcs.w	800d876 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	699b      	ldr	r3, [r3, #24]
 800d5a6:	43db      	mvns	r3, r3
 800d5a8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d5aa:	e164      	b.n	800d876 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	699b      	ldr	r3, [r3, #24]
 800d5b0:	693a      	ldr	r2, [r7, #16]
 800d5b2:	8992      	ldrh	r2, [r2, #12]
 800d5b4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d5b8:	fb01 f202 	mul.w	r2, r1, r2
 800d5bc:	1a9b      	subs	r3, r3, r2
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	f040 810f 	bne.w	800d7e2 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	699b      	ldr	r3, [r3, #24]
 800d5c8:	693a      	ldr	r2, [r7, #16]
 800d5ca:	8992      	ldrh	r2, [r2, #12]
 800d5cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5d0:	693a      	ldr	r2, [r7, #16]
 800d5d2:	8952      	ldrh	r2, [r2, #10]
 800d5d4:	3a01      	subs	r2, #1
 800d5d6:	4013      	ands	r3, r2
 800d5d8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d5da:	69bb      	ldr	r3, [r7, #24]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d14d      	bne.n	800d67c <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	699b      	ldr	r3, [r3, #24]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d10c      	bne.n	800d602 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	689b      	ldr	r3, [r3, #8]
 800d5ec:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d11a      	bne.n	800d62a <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2100      	movs	r1, #0
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7fe fda9 	bl	800c150 <create_chain>
 800d5fe:	62b8      	str	r0, [r7, #40]	; 0x28
 800d600:	e013      	b.n	800d62a <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d606:	2b00      	cmp	r3, #0
 800d608:	d007      	beq.n	800d61a <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	699b      	ldr	r3, [r3, #24]
 800d60e:	4619      	mov	r1, r3
 800d610:	68f8      	ldr	r0, [r7, #12]
 800d612:	f7fe fe35 	bl	800c280 <clmt_clust>
 800d616:	62b8      	str	r0, [r7, #40]	; 0x28
 800d618:	e007      	b.n	800d62a <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d61a:	68fa      	ldr	r2, [r7, #12]
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	69db      	ldr	r3, [r3, #28]
 800d620:	4619      	mov	r1, r3
 800d622:	4610      	mov	r0, r2
 800d624:	f7fe fd94 	bl	800c150 <create_chain>
 800d628:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	f000 8127 	beq.w	800d880 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d634:	2b01      	cmp	r3, #1
 800d636:	d109      	bne.n	800d64c <f_write+0x12e>
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2202      	movs	r2, #2
 800d63c:	755a      	strb	r2, [r3, #21]
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	2102      	movs	r1, #2
 800d642:	4618      	mov	r0, r3
 800d644:	f7fe f8a6 	bl	800b794 <unlock_fs>
 800d648:	2302      	movs	r3, #2
 800d64a:	e127      	b.n	800d89c <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d652:	d109      	bne.n	800d668 <f_write+0x14a>
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2201      	movs	r2, #1
 800d658:	755a      	strb	r2, [r3, #21]
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	2101      	movs	r1, #1
 800d65e:	4618      	mov	r0, r3
 800d660:	f7fe f898 	bl	800b794 <unlock_fs>
 800d664:	2301      	movs	r3, #1
 800d666:	e119      	b.n	800d89c <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d66c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	689b      	ldr	r3, [r3, #8]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d102      	bne.n	800d67c <f_write+0x15e>
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d67a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	7d1b      	ldrb	r3, [r3, #20]
 800d680:	b25b      	sxtb	r3, r3
 800d682:	2b00      	cmp	r3, #0
 800d684:	da1d      	bge.n	800d6c2 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	7858      	ldrb	r0, [r3, #1]
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	6a1a      	ldr	r2, [r3, #32]
 800d694:	2301      	movs	r3, #1
 800d696:	f7fd ff29 	bl	800b4ec <disk_write>
 800d69a:	4603      	mov	r3, r0
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d009      	beq.n	800d6b4 <f_write+0x196>
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	755a      	strb	r2, [r3, #21]
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	2101      	movs	r1, #1
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f7fe f872 	bl	800b794 <unlock_fs>
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	e0f3      	b.n	800d89c <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	7d1b      	ldrb	r3, [r3, #20]
 800d6b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6bc:	b2da      	uxtb	r2, r3
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d6c2:	693a      	ldr	r2, [r7, #16]
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	69db      	ldr	r3, [r3, #28]
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	4610      	mov	r0, r2
 800d6cc:	f7fe facc 	bl	800bc68 <clust2sect>
 800d6d0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d109      	bne.n	800d6ec <f_write+0x1ce>
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2202      	movs	r2, #2
 800d6dc:	755a      	strb	r2, [r3, #21]
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	2102      	movs	r1, #2
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7fe f856 	bl	800b794 <unlock_fs>
 800d6e8:	2302      	movs	r3, #2
 800d6ea:	e0d7      	b.n	800d89c <f_write+0x37e>
			sect += csect;
 800d6ec:	697a      	ldr	r2, [r7, #20]
 800d6ee:	69bb      	ldr	r3, [r7, #24]
 800d6f0:	4413      	add	r3, r2
 800d6f2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	899b      	ldrh	r3, [r3, #12]
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d700:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d702:	6a3b      	ldr	r3, [r7, #32]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d048      	beq.n	800d79a <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d708:	69ba      	ldr	r2, [r7, #24]
 800d70a:	6a3b      	ldr	r3, [r7, #32]
 800d70c:	4413      	add	r3, r2
 800d70e:	693a      	ldr	r2, [r7, #16]
 800d710:	8952      	ldrh	r2, [r2, #10]
 800d712:	4293      	cmp	r3, r2
 800d714:	d905      	bls.n	800d722 <f_write+0x204>
					cc = fs->csize - csect;
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	895b      	ldrh	r3, [r3, #10]
 800d71a:	461a      	mov	r2, r3
 800d71c:	69bb      	ldr	r3, [r7, #24]
 800d71e:	1ad3      	subs	r3, r2, r3
 800d720:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	7858      	ldrb	r0, [r3, #1]
 800d726:	6a3b      	ldr	r3, [r7, #32]
 800d728:	697a      	ldr	r2, [r7, #20]
 800d72a:	69f9      	ldr	r1, [r7, #28]
 800d72c:	f7fd fede 	bl	800b4ec <disk_write>
 800d730:	4603      	mov	r3, r0
 800d732:	2b00      	cmp	r3, #0
 800d734:	d009      	beq.n	800d74a <f_write+0x22c>
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	2201      	movs	r2, #1
 800d73a:	755a      	strb	r2, [r3, #21]
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	2101      	movs	r1, #1
 800d740:	4618      	mov	r0, r3
 800d742:	f7fe f827 	bl	800b794 <unlock_fs>
 800d746:	2301      	movs	r3, #1
 800d748:	e0a8      	b.n	800d89c <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	6a1a      	ldr	r2, [r3, #32]
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	1ad3      	subs	r3, r2, r3
 800d752:	6a3a      	ldr	r2, [r7, #32]
 800d754:	429a      	cmp	r2, r3
 800d756:	d918      	bls.n	800d78a <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	6a1a      	ldr	r2, [r3, #32]
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	1ad3      	subs	r3, r2, r3
 800d766:	693a      	ldr	r2, [r7, #16]
 800d768:	8992      	ldrh	r2, [r2, #12]
 800d76a:	fb02 f303 	mul.w	r3, r2, r3
 800d76e:	69fa      	ldr	r2, [r7, #28]
 800d770:	18d1      	adds	r1, r2, r3
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	899b      	ldrh	r3, [r3, #12]
 800d776:	461a      	mov	r2, r3
 800d778:	f7fd ff78 	bl	800b66c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	7d1b      	ldrb	r3, [r3, #20]
 800d780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d784:	b2da      	uxtb	r2, r3
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	899b      	ldrh	r3, [r3, #12]
 800d78e:	461a      	mov	r2, r3
 800d790:	6a3b      	ldr	r3, [r7, #32]
 800d792:	fb02 f303 	mul.w	r3, r2, r3
 800d796:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d798:	e050      	b.n	800d83c <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	6a1b      	ldr	r3, [r3, #32]
 800d79e:	697a      	ldr	r2, [r7, #20]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d01b      	beq.n	800d7dc <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	699a      	ldr	r2, [r3, #24]
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d215      	bcs.n	800d7dc <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d7b0:	693b      	ldr	r3, [r7, #16]
 800d7b2:	7858      	ldrb	r0, [r3, #1]
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	697a      	ldr	r2, [r7, #20]
 800d7be:	f7fd fe75 	bl	800b4ac <disk_read>
 800d7c2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d009      	beq.n	800d7dc <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	755a      	strb	r2, [r3, #21]
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	2101      	movs	r1, #1
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7fd ffde 	bl	800b794 <unlock_fs>
 800d7d8:	2301      	movs	r3, #1
 800d7da:	e05f      	b.n	800d89c <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	697a      	ldr	r2, [r7, #20]
 800d7e0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	899b      	ldrh	r3, [r3, #12]
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	699b      	ldr	r3, [r3, #24]
 800d7ec:	693a      	ldr	r2, [r7, #16]
 800d7ee:	8992      	ldrh	r2, [r2, #12]
 800d7f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d7f4:	fb01 f202 	mul.w	r2, r1, r2
 800d7f8:	1a9b      	subs	r3, r3, r2
 800d7fa:	1ac3      	subs	r3, r0, r3
 800d7fc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d7fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	429a      	cmp	r2, r3
 800d804:	d901      	bls.n	800d80a <f_write+0x2ec>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	699b      	ldr	r3, [r3, #24]
 800d814:	693a      	ldr	r2, [r7, #16]
 800d816:	8992      	ldrh	r2, [r2, #12]
 800d818:	fbb3 f0f2 	udiv	r0, r3, r2
 800d81c:	fb00 f202 	mul.w	r2, r0, r2
 800d820:	1a9b      	subs	r3, r3, r2
 800d822:	440b      	add	r3, r1
 800d824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d826:	69f9      	ldr	r1, [r7, #28]
 800d828:	4618      	mov	r0, r3
 800d82a:	f7fd ff1f 	bl	800b66c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	7d1b      	ldrb	r3, [r3, #20]
 800d832:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d836:	b2da      	uxtb	r2, r3
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d83c:	69fa      	ldr	r2, [r7, #28]
 800d83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d840:	4413      	add	r3, r2
 800d842:	61fb      	str	r3, [r7, #28]
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	699a      	ldr	r2, [r3, #24]
 800d848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84a:	441a      	add	r2, r3
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	619a      	str	r2, [r3, #24]
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	68da      	ldr	r2, [r3, #12]
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	699b      	ldr	r3, [r3, #24]
 800d858:	429a      	cmp	r2, r3
 800d85a:	bf38      	it	cc
 800d85c:	461a      	movcc	r2, r3
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	60da      	str	r2, [r3, #12]
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	681a      	ldr	r2, [r3, #0]
 800d866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d868:	441a      	add	r2, r3
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	601a      	str	r2, [r3, #0]
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d872:	1ad3      	subs	r3, r2, r3
 800d874:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	f47f ae97 	bne.w	800d5ac <f_write+0x8e>
 800d87e:	e000      	b.n	800d882 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d880:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	7d1b      	ldrb	r3, [r3, #20]
 800d886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d88a:	b2da      	uxtb	r2, r3
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	2100      	movs	r1, #0
 800d894:	4618      	mov	r0, r3
 800d896:	f7fd ff7d 	bl	800b794 <unlock_fs>
 800d89a:	2300      	movs	r3, #0
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3730      	adds	r7, #48	; 0x30
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b086      	sub	sp, #24
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f107 0208 	add.w	r2, r7, #8
 800d8b2:	4611      	mov	r1, r2
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7ff fbb3 	bl	800d020 <validate>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d8be:	7dfb      	ldrb	r3, [r7, #23]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d16d      	bne.n	800d9a0 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	7d1b      	ldrb	r3, [r3, #20]
 800d8c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d067      	beq.n	800d9a0 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	7d1b      	ldrb	r3, [r3, #20]
 800d8d4:	b25b      	sxtb	r3, r3
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	da1a      	bge.n	800d910 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	7858      	ldrb	r0, [r3, #1]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6a1a      	ldr	r2, [r3, #32]
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	f7fd fdff 	bl	800b4ec <disk_write>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d006      	beq.n	800d902 <f_sync+0x5e>
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	2101      	movs	r1, #1
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7fd ff4b 	bl	800b794 <unlock_fs>
 800d8fe:	2301      	movs	r3, #1
 800d900:	e055      	b.n	800d9ae <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	7d1b      	ldrb	r3, [r3, #20]
 800d906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d90a:	b2da      	uxtb	r2, r3
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d910:	f7fb fd66 	bl	80093e0 <get_fattime>
 800d914:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d916:	68ba      	ldr	r2, [r7, #8]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d91c:	4619      	mov	r1, r3
 800d91e:	4610      	mov	r0, r2
 800d920:	f7fe f904 	bl	800bb2c <move_window>
 800d924:	4603      	mov	r3, r0
 800d926:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d928:	7dfb      	ldrb	r3, [r7, #23]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d138      	bne.n	800d9a0 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d932:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	330b      	adds	r3, #11
 800d938:	781a      	ldrb	r2, [r3, #0]
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	330b      	adds	r3, #11
 800d93e:	f042 0220 	orr.w	r2, r2, #32
 800d942:	b2d2      	uxtb	r2, r2
 800d944:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6818      	ldr	r0, [r3, #0]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	689b      	ldr	r3, [r3, #8]
 800d94e:	461a      	mov	r2, r3
 800d950:	68f9      	ldr	r1, [r7, #12]
 800d952:	f7fe fe92 	bl	800c67a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	f103 021c 	add.w	r2, r3, #28
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	68db      	ldr	r3, [r3, #12]
 800d960:	4619      	mov	r1, r3
 800d962:	4610      	mov	r0, r2
 800d964:	f7fd fe56 	bl	800b614 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	3316      	adds	r3, #22
 800d96c:	6939      	ldr	r1, [r7, #16]
 800d96e:	4618      	mov	r0, r3
 800d970:	f7fd fe50 	bl	800b614 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	3312      	adds	r3, #18
 800d978:	2100      	movs	r1, #0
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7fd fe2f 	bl	800b5de <st_word>
					fs->wflag = 1;
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	2201      	movs	r2, #1
 800d984:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	4618      	mov	r0, r3
 800d98a:	f7fe f8fd 	bl	800bb88 <sync_fs>
 800d98e:	4603      	mov	r3, r0
 800d990:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	7d1b      	ldrb	r3, [r3, #20]
 800d996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d99a:	b2da      	uxtb	r2, r3
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	7dfa      	ldrb	r2, [r7, #23]
 800d9a4:	4611      	mov	r1, r2
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7fd fef4 	bl	800b794 <unlock_fs>
 800d9ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3718      	adds	r7, #24
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}

0800d9b6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b084      	sub	sp, #16
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f7ff ff70 	bl	800d8a4 <f_sync>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d9c8:	7bfb      	ldrb	r3, [r7, #15]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d11d      	bne.n	800da0a <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f107 0208 	add.w	r2, r7, #8
 800d9d4:	4611      	mov	r1, r2
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7ff fb22 	bl	800d020 <validate>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d9e0:	7bfb      	ldrb	r3, [r7, #15]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d111      	bne.n	800da0a <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	691b      	ldr	r3, [r3, #16]
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7fd fffa 	bl	800b9e4 <dec_lock>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d9f4:	7bfb      	ldrb	r3, [r7, #15]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d102      	bne.n	800da00 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	2100      	movs	r1, #0
 800da04:	4618      	mov	r0, r3
 800da06:	f7fd fec5 	bl	800b794 <unlock_fs>
#endif
		}
	}
	return res;
 800da0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3710      	adds	r7, #16
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800da14:	b480      	push	{r7}
 800da16:	b087      	sub	sp, #28
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	60b9      	str	r1, [r7, #8]
 800da1e:	4613      	mov	r3, r2
 800da20:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800da22:	2301      	movs	r3, #1
 800da24:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800da26:	2300      	movs	r3, #0
 800da28:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800da2a:	4b1f      	ldr	r3, [pc, #124]	; (800daa8 <FATFS_LinkDriverEx+0x94>)
 800da2c:	7a5b      	ldrb	r3, [r3, #9]
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	2b00      	cmp	r3, #0
 800da32:	d131      	bne.n	800da98 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800da34:	4b1c      	ldr	r3, [pc, #112]	; (800daa8 <FATFS_LinkDriverEx+0x94>)
 800da36:	7a5b      	ldrb	r3, [r3, #9]
 800da38:	b2db      	uxtb	r3, r3
 800da3a:	461a      	mov	r2, r3
 800da3c:	4b1a      	ldr	r3, [pc, #104]	; (800daa8 <FATFS_LinkDriverEx+0x94>)
 800da3e:	2100      	movs	r1, #0
 800da40:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800da42:	4b19      	ldr	r3, [pc, #100]	; (800daa8 <FATFS_LinkDriverEx+0x94>)
 800da44:	7a5b      	ldrb	r3, [r3, #9]
 800da46:	b2db      	uxtb	r3, r3
 800da48:	4a17      	ldr	r2, [pc, #92]	; (800daa8 <FATFS_LinkDriverEx+0x94>)
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	4413      	add	r3, r2
 800da4e:	68fa      	ldr	r2, [r7, #12]
 800da50:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800da52:	4b15      	ldr	r3, [pc, #84]	; (800daa8 <FATFS_LinkDriverEx+0x94>)
 800da54:	7a5b      	ldrb	r3, [r3, #9]
 800da56:	b2db      	uxtb	r3, r3
 800da58:	461a      	mov	r2, r3
 800da5a:	4b13      	ldr	r3, [pc, #76]	; (800daa8 <FATFS_LinkDriverEx+0x94>)
 800da5c:	4413      	add	r3, r2
 800da5e:	79fa      	ldrb	r2, [r7, #7]
 800da60:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800da62:	4b11      	ldr	r3, [pc, #68]	; (800daa8 <FATFS_LinkDriverEx+0x94>)
 800da64:	7a5b      	ldrb	r3, [r3, #9]
 800da66:	b2db      	uxtb	r3, r3
 800da68:	1c5a      	adds	r2, r3, #1
 800da6a:	b2d1      	uxtb	r1, r2
 800da6c:	4a0e      	ldr	r2, [pc, #56]	; (800daa8 <FATFS_LinkDriverEx+0x94>)
 800da6e:	7251      	strb	r1, [r2, #9]
 800da70:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800da72:	7dbb      	ldrb	r3, [r7, #22]
 800da74:	3330      	adds	r3, #48	; 0x30
 800da76:	b2da      	uxtb	r2, r3
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	3301      	adds	r3, #1
 800da80:	223a      	movs	r2, #58	; 0x3a
 800da82:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	3302      	adds	r3, #2
 800da88:	222f      	movs	r2, #47	; 0x2f
 800da8a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	3303      	adds	r3, #3
 800da90:	2200      	movs	r2, #0
 800da92:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800da94:	2300      	movs	r3, #0
 800da96:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800da98:	7dfb      	ldrb	r3, [r7, #23]
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	371c      	adds	r7, #28
 800da9e:	46bd      	mov	sp, r7
 800daa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa4:	4770      	bx	lr
 800daa6:	bf00      	nop
 800daa8:	200024a0 	.word	0x200024a0

0800daac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b082      	sub	sp, #8
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dab6:	2200      	movs	r2, #0
 800dab8:	6839      	ldr	r1, [r7, #0]
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f7ff ffaa 	bl	800da14 <FATFS_LinkDriverEx>
 800dac0:	4603      	mov	r3, r0
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3708      	adds	r7, #8
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}

0800daca <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800daca:	b580      	push	{r7, lr}
 800dacc:	b084      	sub	sp, #16
 800dace:	af00      	add	r7, sp, #0
 800dad0:	4603      	mov	r3, r0
 800dad2:	6039      	str	r1, [r7, #0]
 800dad4:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800dad6:	2200      	movs	r2, #0
 800dad8:	2101      	movs	r1, #1
 800dada:	2001      	movs	r0, #1
 800dadc:	f000 f977 	bl	800ddce <osSemaphoreNew>
 800dae0:	4602      	mov	r2, r0
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	bf14      	ite	ne
 800daee:	2301      	movne	r3, #1
 800daf0:	2300      	moveq	r3, #0
 800daf2:	b2db      	uxtb	r3, r3
 800daf4:	60fb      	str	r3, [r7, #12]

    return ret;
 800daf6:	68fb      	ldr	r3, [r7, #12]
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3710      	adds	r7, #16
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}

0800db00 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b082      	sub	sp, #8
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f000 fa7f 	bl	800e00c <osSemaphoreDelete>
#endif
    return 1;
 800db0e:	2301      	movs	r3, #1
}
 800db10:	4618      	mov	r0, r3
 800db12:	3708      	adds	r7, #8
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}

0800db18 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b084      	sub	sp, #16
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800db20:	2300      	movs	r3, #0
 800db22:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800db24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f000 f9d9 	bl	800dee0 <osSemaphoreAcquire>
 800db2e:	4603      	mov	r3, r0
 800db30:	2b00      	cmp	r3, #0
 800db32:	d101      	bne.n	800db38 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800db34:	2301      	movs	r3, #1
 800db36:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800db38:	68fb      	ldr	r3, [r7, #12]
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	3710      	adds	r7, #16
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}

0800db42 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800db42:	b580      	push	{r7, lr}
 800db44:	b082      	sub	sp, #8
 800db46:	af00      	add	r7, sp, #0
 800db48:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f000 fa1a 	bl	800df84 <osSemaphoreRelease>
#endif
}
 800db50:	bf00      	nop
 800db52:	3708      	adds	r7, #8
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <__NVIC_SetPriority>:
{
 800db58:	b480      	push	{r7}
 800db5a:	b083      	sub	sp, #12
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	4603      	mov	r3, r0
 800db60:	6039      	str	r1, [r7, #0]
 800db62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800db64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	db0a      	blt.n	800db82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	b2da      	uxtb	r2, r3
 800db70:	490c      	ldr	r1, [pc, #48]	; (800dba4 <__NVIC_SetPriority+0x4c>)
 800db72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db76:	0112      	lsls	r2, r2, #4
 800db78:	b2d2      	uxtb	r2, r2
 800db7a:	440b      	add	r3, r1
 800db7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800db80:	e00a      	b.n	800db98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	b2da      	uxtb	r2, r3
 800db86:	4908      	ldr	r1, [pc, #32]	; (800dba8 <__NVIC_SetPriority+0x50>)
 800db88:	79fb      	ldrb	r3, [r7, #7]
 800db8a:	f003 030f 	and.w	r3, r3, #15
 800db8e:	3b04      	subs	r3, #4
 800db90:	0112      	lsls	r2, r2, #4
 800db92:	b2d2      	uxtb	r2, r2
 800db94:	440b      	add	r3, r1
 800db96:	761a      	strb	r2, [r3, #24]
}
 800db98:	bf00      	nop
 800db9a:	370c      	adds	r7, #12
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr
 800dba4:	e000e100 	.word	0xe000e100
 800dba8:	e000ed00 	.word	0xe000ed00

0800dbac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800dbac:	b580      	push	{r7, lr}
 800dbae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800dbb0:	4b05      	ldr	r3, [pc, #20]	; (800dbc8 <SysTick_Handler+0x1c>)
 800dbb2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800dbb4:	f002 f98c 	bl	800fed0 <xTaskGetSchedulerState>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d001      	beq.n	800dbc2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800dbbe:	f003 f873 	bl	8010ca8 <xPortSysTickHandler>
  }
}
 800dbc2:	bf00      	nop
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	e000e010 	.word	0xe000e010

0800dbcc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800dbd0:	2100      	movs	r1, #0
 800dbd2:	f06f 0004 	mvn.w	r0, #4
 800dbd6:	f7ff ffbf 	bl	800db58 <__NVIC_SetPriority>
#endif
}
 800dbda:	bf00      	nop
 800dbdc:	bd80      	pop	{r7, pc}
	...

0800dbe0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dbe0:	b480      	push	{r7}
 800dbe2:	b083      	sub	sp, #12
 800dbe4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbe6:	f3ef 8305 	mrs	r3, IPSR
 800dbea:	603b      	str	r3, [r7, #0]
  return(result);
 800dbec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d003      	beq.n	800dbfa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800dbf2:	f06f 0305 	mvn.w	r3, #5
 800dbf6:	607b      	str	r3, [r7, #4]
 800dbf8:	e00c      	b.n	800dc14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dbfa:	4b0a      	ldr	r3, [pc, #40]	; (800dc24 <osKernelInitialize+0x44>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d105      	bne.n	800dc0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dc02:	4b08      	ldr	r3, [pc, #32]	; (800dc24 <osKernelInitialize+0x44>)
 800dc04:	2201      	movs	r2, #1
 800dc06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	607b      	str	r3, [r7, #4]
 800dc0c:	e002      	b.n	800dc14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800dc0e:	f04f 33ff 	mov.w	r3, #4294967295
 800dc12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dc14:	687b      	ldr	r3, [r7, #4]
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	370c      	adds	r7, #12
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc20:	4770      	bx	lr
 800dc22:	bf00      	nop
 800dc24:	200024ac 	.word	0x200024ac

0800dc28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b082      	sub	sp, #8
 800dc2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc2e:	f3ef 8305 	mrs	r3, IPSR
 800dc32:	603b      	str	r3, [r7, #0]
  return(result);
 800dc34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d003      	beq.n	800dc42 <osKernelStart+0x1a>
    stat = osErrorISR;
 800dc3a:	f06f 0305 	mvn.w	r3, #5
 800dc3e:	607b      	str	r3, [r7, #4]
 800dc40:	e010      	b.n	800dc64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dc42:	4b0b      	ldr	r3, [pc, #44]	; (800dc70 <osKernelStart+0x48>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d109      	bne.n	800dc5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dc4a:	f7ff ffbf 	bl	800dbcc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dc4e:	4b08      	ldr	r3, [pc, #32]	; (800dc70 <osKernelStart+0x48>)
 800dc50:	2202      	movs	r2, #2
 800dc52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dc54:	f001 fce0 	bl	800f618 <vTaskStartScheduler>
      stat = osOK;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	607b      	str	r3, [r7, #4]
 800dc5c:	e002      	b.n	800dc64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dc5e:	f04f 33ff 	mov.w	r3, #4294967295
 800dc62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dc64:	687b      	ldr	r3, [r7, #4]
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3708      	adds	r7, #8
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	200024ac 	.word	0x200024ac

0800dc74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b08e      	sub	sp, #56	; 0x38
 800dc78:	af04      	add	r7, sp, #16
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dc80:	2300      	movs	r3, #0
 800dc82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc84:	f3ef 8305 	mrs	r3, IPSR
 800dc88:	617b      	str	r3, [r7, #20]
  return(result);
 800dc8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d17e      	bne.n	800dd8e <osThreadNew+0x11a>
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d07b      	beq.n	800dd8e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800dc96:	2380      	movs	r3, #128	; 0x80
 800dc98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dc9a:	2318      	movs	r3, #24
 800dc9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800dca2:	f04f 33ff 	mov.w	r3, #4294967295
 800dca6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d045      	beq.n	800dd3a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d002      	beq.n	800dcbc <osThreadNew+0x48>
        name = attr->name;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	699b      	ldr	r3, [r3, #24]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d002      	beq.n	800dcca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	699b      	ldr	r3, [r3, #24]
 800dcc8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dcca:	69fb      	ldr	r3, [r7, #28]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d008      	beq.n	800dce2 <osThreadNew+0x6e>
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	2b38      	cmp	r3, #56	; 0x38
 800dcd4:	d805      	bhi.n	800dce2 <osThreadNew+0x6e>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	685b      	ldr	r3, [r3, #4]
 800dcda:	f003 0301 	and.w	r3, r3, #1
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d001      	beq.n	800dce6 <osThreadNew+0x72>
        return (NULL);
 800dce2:	2300      	movs	r3, #0
 800dce4:	e054      	b.n	800dd90 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	695b      	ldr	r3, [r3, #20]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d003      	beq.n	800dcf6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	695b      	ldr	r3, [r3, #20]
 800dcf2:	089b      	lsrs	r3, r3, #2
 800dcf4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	689b      	ldr	r3, [r3, #8]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d00e      	beq.n	800dd1c <osThreadNew+0xa8>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	68db      	ldr	r3, [r3, #12]
 800dd02:	2bbb      	cmp	r3, #187	; 0xbb
 800dd04:	d90a      	bls.n	800dd1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d006      	beq.n	800dd1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	695b      	ldr	r3, [r3, #20]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d002      	beq.n	800dd1c <osThreadNew+0xa8>
        mem = 1;
 800dd16:	2301      	movs	r3, #1
 800dd18:	61bb      	str	r3, [r7, #24]
 800dd1a:	e010      	b.n	800dd3e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	689b      	ldr	r3, [r3, #8]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d10c      	bne.n	800dd3e <osThreadNew+0xca>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	68db      	ldr	r3, [r3, #12]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d108      	bne.n	800dd3e <osThreadNew+0xca>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	691b      	ldr	r3, [r3, #16]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d104      	bne.n	800dd3e <osThreadNew+0xca>
          mem = 0;
 800dd34:	2300      	movs	r3, #0
 800dd36:	61bb      	str	r3, [r7, #24]
 800dd38:	e001      	b.n	800dd3e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dd3e:	69bb      	ldr	r3, [r7, #24]
 800dd40:	2b01      	cmp	r3, #1
 800dd42:	d110      	bne.n	800dd66 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800dd48:	687a      	ldr	r2, [r7, #4]
 800dd4a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd4c:	9202      	str	r2, [sp, #8]
 800dd4e:	9301      	str	r3, [sp, #4]
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	6a3a      	ldr	r2, [r7, #32]
 800dd58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd5a:	68f8      	ldr	r0, [r7, #12]
 800dd5c:	f001 fa70 	bl	800f240 <xTaskCreateStatic>
 800dd60:	4603      	mov	r3, r0
 800dd62:	613b      	str	r3, [r7, #16]
 800dd64:	e013      	b.n	800dd8e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800dd66:	69bb      	ldr	r3, [r7, #24]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d110      	bne.n	800dd8e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dd6c:	6a3b      	ldr	r3, [r7, #32]
 800dd6e:	b29a      	uxth	r2, r3
 800dd70:	f107 0310 	add.w	r3, r7, #16
 800dd74:	9301      	str	r3, [sp, #4]
 800dd76:	69fb      	ldr	r3, [r7, #28]
 800dd78:	9300      	str	r3, [sp, #0]
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd7e:	68f8      	ldr	r0, [r7, #12]
 800dd80:	f001 fabb 	bl	800f2fa <xTaskCreate>
 800dd84:	4603      	mov	r3, r0
 800dd86:	2b01      	cmp	r3, #1
 800dd88:	d001      	beq.n	800dd8e <osThreadNew+0x11a>
            hTask = NULL;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dd8e:	693b      	ldr	r3, [r7, #16]
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3728      	adds	r7, #40	; 0x28
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b084      	sub	sp, #16
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dda0:	f3ef 8305 	mrs	r3, IPSR
 800dda4:	60bb      	str	r3, [r7, #8]
  return(result);
 800dda6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d003      	beq.n	800ddb4 <osDelay+0x1c>
    stat = osErrorISR;
 800ddac:	f06f 0305 	mvn.w	r3, #5
 800ddb0:	60fb      	str	r3, [r7, #12]
 800ddb2:	e007      	b.n	800ddc4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d002      	beq.n	800ddc4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f001 fbf6 	bl	800f5b0 <vTaskDelay>
    }
  }

  return (stat);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3710      	adds	r7, #16
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}

0800ddce <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ddce:	b580      	push	{r7, lr}
 800ddd0:	b08a      	sub	sp, #40	; 0x28
 800ddd2:	af02      	add	r7, sp, #8
 800ddd4:	60f8      	str	r0, [r7, #12]
 800ddd6:	60b9      	str	r1, [r7, #8]
 800ddd8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ddda:	2300      	movs	r3, #0
 800dddc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddde:	f3ef 8305 	mrs	r3, IPSR
 800dde2:	613b      	str	r3, [r7, #16]
  return(result);
 800dde4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d175      	bne.n	800ded6 <osSemaphoreNew+0x108>
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d072      	beq.n	800ded6 <osSemaphoreNew+0x108>
 800ddf0:	68ba      	ldr	r2, [r7, #8]
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d86e      	bhi.n	800ded6 <osSemaphoreNew+0x108>
    mem = -1;
 800ddf8:	f04f 33ff 	mov.w	r3, #4294967295
 800ddfc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d015      	beq.n	800de30 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	689b      	ldr	r3, [r3, #8]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d006      	beq.n	800de1a <osSemaphoreNew+0x4c>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	2b4f      	cmp	r3, #79	; 0x4f
 800de12:	d902      	bls.n	800de1a <osSemaphoreNew+0x4c>
        mem = 1;
 800de14:	2301      	movs	r3, #1
 800de16:	61bb      	str	r3, [r7, #24]
 800de18:	e00c      	b.n	800de34 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	689b      	ldr	r3, [r3, #8]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d108      	bne.n	800de34 <osSemaphoreNew+0x66>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	68db      	ldr	r3, [r3, #12]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d104      	bne.n	800de34 <osSemaphoreNew+0x66>
          mem = 0;
 800de2a:	2300      	movs	r3, #0
 800de2c:	61bb      	str	r3, [r7, #24]
 800de2e:	e001      	b.n	800de34 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800de30:	2300      	movs	r3, #0
 800de32:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800de34:	69bb      	ldr	r3, [r7, #24]
 800de36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de3a:	d04c      	beq.n	800ded6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	2b01      	cmp	r3, #1
 800de40:	d128      	bne.n	800de94 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800de42:	69bb      	ldr	r3, [r7, #24]
 800de44:	2b01      	cmp	r3, #1
 800de46:	d10a      	bne.n	800de5e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	689b      	ldr	r3, [r3, #8]
 800de4c:	2203      	movs	r2, #3
 800de4e:	9200      	str	r2, [sp, #0]
 800de50:	2200      	movs	r2, #0
 800de52:	2100      	movs	r1, #0
 800de54:	2001      	movs	r0, #1
 800de56:	f000 fa4d 	bl	800e2f4 <xQueueGenericCreateStatic>
 800de5a:	61f8      	str	r0, [r7, #28]
 800de5c:	e005      	b.n	800de6a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800de5e:	2203      	movs	r2, #3
 800de60:	2100      	movs	r1, #0
 800de62:	2001      	movs	r0, #1
 800de64:	f000 fabe 	bl	800e3e4 <xQueueGenericCreate>
 800de68:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800de6a:	69fb      	ldr	r3, [r7, #28]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d022      	beq.n	800deb6 <osSemaphoreNew+0xe8>
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d01f      	beq.n	800deb6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800de76:	2300      	movs	r3, #0
 800de78:	2200      	movs	r2, #0
 800de7a:	2100      	movs	r1, #0
 800de7c:	69f8      	ldr	r0, [r7, #28]
 800de7e:	f000 fb79 	bl	800e574 <xQueueGenericSend>
 800de82:	4603      	mov	r3, r0
 800de84:	2b01      	cmp	r3, #1
 800de86:	d016      	beq.n	800deb6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800de88:	69f8      	ldr	r0, [r7, #28]
 800de8a:	f001 f805 	bl	800ee98 <vQueueDelete>
            hSemaphore = NULL;
 800de8e:	2300      	movs	r3, #0
 800de90:	61fb      	str	r3, [r7, #28]
 800de92:	e010      	b.n	800deb6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800de94:	69bb      	ldr	r3, [r7, #24]
 800de96:	2b01      	cmp	r3, #1
 800de98:	d108      	bne.n	800deac <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	689b      	ldr	r3, [r3, #8]
 800de9e:	461a      	mov	r2, r3
 800dea0:	68b9      	ldr	r1, [r7, #8]
 800dea2:	68f8      	ldr	r0, [r7, #12]
 800dea4:	f000 fafb 	bl	800e49e <xQueueCreateCountingSemaphoreStatic>
 800dea8:	61f8      	str	r0, [r7, #28]
 800deaa:	e004      	b.n	800deb6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800deac:	68b9      	ldr	r1, [r7, #8]
 800deae:	68f8      	ldr	r0, [r7, #12]
 800deb0:	f000 fb2c 	bl	800e50c <xQueueCreateCountingSemaphore>
 800deb4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800deb6:	69fb      	ldr	r3, [r7, #28]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d00c      	beq.n	800ded6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d003      	beq.n	800deca <osSemaphoreNew+0xfc>
          name = attr->name;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	617b      	str	r3, [r7, #20]
 800dec8:	e001      	b.n	800dece <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800deca:	2300      	movs	r3, #0
 800decc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800dece:	6979      	ldr	r1, [r7, #20]
 800ded0:	69f8      	ldr	r0, [r7, #28]
 800ded2:	f001 f92d 	bl	800f130 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ded6:	69fb      	ldr	r3, [r7, #28]
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3720      	adds	r7, #32
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b086      	sub	sp, #24
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800deee:	2300      	movs	r3, #0
 800def0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d103      	bne.n	800df00 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800def8:	f06f 0303 	mvn.w	r3, #3
 800defc:	617b      	str	r3, [r7, #20]
 800defe:	e039      	b.n	800df74 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df00:	f3ef 8305 	mrs	r3, IPSR
 800df04:	60fb      	str	r3, [r7, #12]
  return(result);
 800df06:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d022      	beq.n	800df52 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d003      	beq.n	800df1a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800df12:	f06f 0303 	mvn.w	r3, #3
 800df16:	617b      	str	r3, [r7, #20]
 800df18:	e02c      	b.n	800df74 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800df1a:	2300      	movs	r3, #0
 800df1c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800df1e:	f107 0308 	add.w	r3, r7, #8
 800df22:	461a      	mov	r2, r3
 800df24:	2100      	movs	r1, #0
 800df26:	6938      	ldr	r0, [r7, #16]
 800df28:	f000 ff36 	bl	800ed98 <xQueueReceiveFromISR>
 800df2c:	4603      	mov	r3, r0
 800df2e:	2b01      	cmp	r3, #1
 800df30:	d003      	beq.n	800df3a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800df32:	f06f 0302 	mvn.w	r3, #2
 800df36:	617b      	str	r3, [r7, #20]
 800df38:	e01c      	b.n	800df74 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d019      	beq.n	800df74 <osSemaphoreAcquire+0x94>
 800df40:	4b0f      	ldr	r3, [pc, #60]	; (800df80 <osSemaphoreAcquire+0xa0>)
 800df42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df46:	601a      	str	r2, [r3, #0]
 800df48:	f3bf 8f4f 	dsb	sy
 800df4c:	f3bf 8f6f 	isb	sy
 800df50:	e010      	b.n	800df74 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800df52:	6839      	ldr	r1, [r7, #0]
 800df54:	6938      	ldr	r0, [r7, #16]
 800df56:	f000 fe13 	bl	800eb80 <xQueueSemaphoreTake>
 800df5a:	4603      	mov	r3, r0
 800df5c:	2b01      	cmp	r3, #1
 800df5e:	d009      	beq.n	800df74 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d003      	beq.n	800df6e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800df66:	f06f 0301 	mvn.w	r3, #1
 800df6a:	617b      	str	r3, [r7, #20]
 800df6c:	e002      	b.n	800df74 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800df6e:	f06f 0302 	mvn.w	r3, #2
 800df72:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800df74:	697b      	ldr	r3, [r7, #20]
}
 800df76:	4618      	mov	r0, r3
 800df78:	3718      	adds	r7, #24
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
 800df7e:	bf00      	nop
 800df80:	e000ed04 	.word	0xe000ed04

0800df84 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800df84:	b580      	push	{r7, lr}
 800df86:	b086      	sub	sp, #24
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800df90:	2300      	movs	r3, #0
 800df92:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d103      	bne.n	800dfa2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800df9a:	f06f 0303 	mvn.w	r3, #3
 800df9e:	617b      	str	r3, [r7, #20]
 800dfa0:	e02c      	b.n	800dffc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfa2:	f3ef 8305 	mrs	r3, IPSR
 800dfa6:	60fb      	str	r3, [r7, #12]
  return(result);
 800dfa8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d01a      	beq.n	800dfe4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800dfb2:	f107 0308 	add.w	r3, r7, #8
 800dfb6:	4619      	mov	r1, r3
 800dfb8:	6938      	ldr	r0, [r7, #16]
 800dfba:	f000 fc74 	bl	800e8a6 <xQueueGiveFromISR>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	2b01      	cmp	r3, #1
 800dfc2:	d003      	beq.n	800dfcc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800dfc4:	f06f 0302 	mvn.w	r3, #2
 800dfc8:	617b      	str	r3, [r7, #20]
 800dfca:	e017      	b.n	800dffc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d014      	beq.n	800dffc <osSemaphoreRelease+0x78>
 800dfd2:	4b0d      	ldr	r3, [pc, #52]	; (800e008 <osSemaphoreRelease+0x84>)
 800dfd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfd8:	601a      	str	r2, [r3, #0]
 800dfda:	f3bf 8f4f 	dsb	sy
 800dfde:	f3bf 8f6f 	isb	sy
 800dfe2:	e00b      	b.n	800dffc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	2100      	movs	r1, #0
 800dfea:	6938      	ldr	r0, [r7, #16]
 800dfec:	f000 fac2 	bl	800e574 <xQueueGenericSend>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b01      	cmp	r3, #1
 800dff4:	d002      	beq.n	800dffc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800dff6:	f06f 0302 	mvn.w	r3, #2
 800dffa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800dffc:	697b      	ldr	r3, [r7, #20]
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3718      	adds	r7, #24
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	e000ed04 	.word	0xe000ed04

0800e00c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b086      	sub	sp, #24
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e018:	f3ef 8305 	mrs	r3, IPSR
 800e01c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e01e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800e020:	2b00      	cmp	r3, #0
 800e022:	d003      	beq.n	800e02c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800e024:	f06f 0305 	mvn.w	r3, #5
 800e028:	617b      	str	r3, [r7, #20]
 800e02a:	e00e      	b.n	800e04a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d103      	bne.n	800e03a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800e032:	f06f 0303 	mvn.w	r3, #3
 800e036:	617b      	str	r3, [r7, #20]
 800e038:	e007      	b.n	800e04a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800e03a:	6938      	ldr	r0, [r7, #16]
 800e03c:	f001 f8a2 	bl	800f184 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800e040:	2300      	movs	r3, #0
 800e042:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800e044:	6938      	ldr	r0, [r7, #16]
 800e046:	f000 ff27 	bl	800ee98 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800e04a:	697b      	ldr	r3, [r7, #20]
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3718      	adds	r7, #24
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e054:	b480      	push	{r7}
 800e056:	b085      	sub	sp, #20
 800e058:	af00      	add	r7, sp, #0
 800e05a:	60f8      	str	r0, [r7, #12]
 800e05c:	60b9      	str	r1, [r7, #8]
 800e05e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	4a07      	ldr	r2, [pc, #28]	; (800e080 <vApplicationGetIdleTaskMemory+0x2c>)
 800e064:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	4a06      	ldr	r2, [pc, #24]	; (800e084 <vApplicationGetIdleTaskMemory+0x30>)
 800e06a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2280      	movs	r2, #128	; 0x80
 800e070:	601a      	str	r2, [r3, #0]
}
 800e072:	bf00      	nop
 800e074:	3714      	adds	r7, #20
 800e076:	46bd      	mov	sp, r7
 800e078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07c:	4770      	bx	lr
 800e07e:	bf00      	nop
 800e080:	200024b0 	.word	0x200024b0
 800e084:	2000256c 	.word	0x2000256c

0800e088 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e088:	b480      	push	{r7}
 800e08a:	b085      	sub	sp, #20
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	4a07      	ldr	r2, [pc, #28]	; (800e0b4 <vApplicationGetTimerTaskMemory+0x2c>)
 800e098:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	4a06      	ldr	r2, [pc, #24]	; (800e0b8 <vApplicationGetTimerTaskMemory+0x30>)
 800e09e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e0a6:	601a      	str	r2, [r3, #0]
}
 800e0a8:	bf00      	nop
 800e0aa:	3714      	adds	r7, #20
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr
 800e0b4:	2000276c 	.word	0x2000276c
 800e0b8:	20002828 	.word	0x20002828

0800e0bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b083      	sub	sp, #12
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f103 0208 	add.w	r2, r3, #8
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f04f 32ff 	mov.w	r2, #4294967295
 800e0d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f103 0208 	add.w	r2, r3, #8
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f103 0208 	add.w	r2, r3, #8
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e0f0:	bf00      	nop
 800e0f2:	370c      	adds	r7, #12
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr

0800e0fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2200      	movs	r2, #0
 800e108:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e10a:	bf00      	nop
 800e10c:	370c      	adds	r7, #12
 800e10e:	46bd      	mov	sp, r7
 800e110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e114:	4770      	bx	lr

0800e116 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e116:	b480      	push	{r7}
 800e118:	b085      	sub	sp, #20
 800e11a:	af00      	add	r7, sp, #0
 800e11c:	6078      	str	r0, [r7, #4]
 800e11e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	68fa      	ldr	r2, [r7, #12]
 800e12a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	689a      	ldr	r2, [r3, #8]
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	689b      	ldr	r3, [r3, #8]
 800e138:	683a      	ldr	r2, [r7, #0]
 800e13a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	683a      	ldr	r2, [r7, #0]
 800e140:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	1c5a      	adds	r2, r3, #1
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	601a      	str	r2, [r3, #0]
}
 800e152:	bf00      	nop
 800e154:	3714      	adds	r7, #20
 800e156:	46bd      	mov	sp, r7
 800e158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15c:	4770      	bx	lr

0800e15e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e15e:	b480      	push	{r7}
 800e160:	b085      	sub	sp, #20
 800e162:	af00      	add	r7, sp, #0
 800e164:	6078      	str	r0, [r7, #4]
 800e166:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e174:	d103      	bne.n	800e17e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	691b      	ldr	r3, [r3, #16]
 800e17a:	60fb      	str	r3, [r7, #12]
 800e17c:	e00c      	b.n	800e198 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	3308      	adds	r3, #8
 800e182:	60fb      	str	r3, [r7, #12]
 800e184:	e002      	b.n	800e18c <vListInsert+0x2e>
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	685b      	ldr	r3, [r3, #4]
 800e18a:	60fb      	str	r3, [r7, #12]
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	68ba      	ldr	r2, [r7, #8]
 800e194:	429a      	cmp	r2, r3
 800e196:	d2f6      	bcs.n	800e186 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	685a      	ldr	r2, [r3, #4]
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	685b      	ldr	r3, [r3, #4]
 800e1a4:	683a      	ldr	r2, [r7, #0]
 800e1a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	68fa      	ldr	r2, [r7, #12]
 800e1ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	683a      	ldr	r2, [r7, #0]
 800e1b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	687a      	ldr	r2, [r7, #4]
 800e1b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	1c5a      	adds	r2, r3, #1
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	601a      	str	r2, [r3, #0]
}
 800e1c4:	bf00      	nop
 800e1c6:	3714      	adds	r7, #20
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr

0800e1d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b085      	sub	sp, #20
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	691b      	ldr	r3, [r3, #16]
 800e1dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	6892      	ldr	r2, [r2, #8]
 800e1e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	689b      	ldr	r3, [r3, #8]
 800e1ec:	687a      	ldr	r2, [r7, #4]
 800e1ee:	6852      	ldr	r2, [r2, #4]
 800e1f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d103      	bne.n	800e204 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	689a      	ldr	r2, [r3, #8]
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2200      	movs	r2, #0
 800e208:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	1e5a      	subs	r2, r3, #1
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	681b      	ldr	r3, [r3, #0]
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3714      	adds	r7, #20
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr

0800e224 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b084      	sub	sp, #16
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d10a      	bne.n	800e24e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e23c:	f383 8811 	msr	BASEPRI, r3
 800e240:	f3bf 8f6f 	isb	sy
 800e244:	f3bf 8f4f 	dsb	sy
 800e248:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e24a:	bf00      	nop
 800e24c:	e7fe      	b.n	800e24c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e24e:	f002 fc99 	bl	8010b84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	681a      	ldr	r2, [r3, #0]
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e25a:	68f9      	ldr	r1, [r7, #12]
 800e25c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e25e:	fb01 f303 	mul.w	r3, r1, r3
 800e262:	441a      	add	r2, r3
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	2200      	movs	r2, #0
 800e26c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	681a      	ldr	r2, [r3, #0]
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681a      	ldr	r2, [r3, #0]
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e27e:	3b01      	subs	r3, #1
 800e280:	68f9      	ldr	r1, [r7, #12]
 800e282:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e284:	fb01 f303 	mul.w	r3, r1, r3
 800e288:	441a      	add	r2, r3
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	22ff      	movs	r2, #255	; 0xff
 800e292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	22ff      	movs	r2, #255	; 0xff
 800e29a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d114      	bne.n	800e2ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	691b      	ldr	r3, [r3, #16]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d01a      	beq.n	800e2e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	3310      	adds	r3, #16
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f001 fc4b 	bl	800fb4c <xTaskRemoveFromEventList>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d012      	beq.n	800e2e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e2bc:	4b0c      	ldr	r3, [pc, #48]	; (800e2f0 <xQueueGenericReset+0xcc>)
 800e2be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2c2:	601a      	str	r2, [r3, #0]
 800e2c4:	f3bf 8f4f 	dsb	sy
 800e2c8:	f3bf 8f6f 	isb	sy
 800e2cc:	e009      	b.n	800e2e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	3310      	adds	r3, #16
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f7ff fef2 	bl	800e0bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	3324      	adds	r3, #36	; 0x24
 800e2dc:	4618      	mov	r0, r3
 800e2de:	f7ff feed 	bl	800e0bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e2e2:	f002 fc7f 	bl	8010be4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e2e6:	2301      	movs	r3, #1
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3710      	adds	r7, #16
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	e000ed04 	.word	0xe000ed04

0800e2f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b08e      	sub	sp, #56	; 0x38
 800e2f8:	af02      	add	r7, sp, #8
 800e2fa:	60f8      	str	r0, [r7, #12]
 800e2fc:	60b9      	str	r1, [r7, #8]
 800e2fe:	607a      	str	r2, [r7, #4]
 800e300:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d10a      	bne.n	800e31e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e30c:	f383 8811 	msr	BASEPRI, r3
 800e310:	f3bf 8f6f 	isb	sy
 800e314:	f3bf 8f4f 	dsb	sy
 800e318:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e31a:	bf00      	nop
 800e31c:	e7fe      	b.n	800e31c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d10a      	bne.n	800e33a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e328:	f383 8811 	msr	BASEPRI, r3
 800e32c:	f3bf 8f6f 	isb	sy
 800e330:	f3bf 8f4f 	dsb	sy
 800e334:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e336:	bf00      	nop
 800e338:	e7fe      	b.n	800e338 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d002      	beq.n	800e346 <xQueueGenericCreateStatic+0x52>
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d001      	beq.n	800e34a <xQueueGenericCreateStatic+0x56>
 800e346:	2301      	movs	r3, #1
 800e348:	e000      	b.n	800e34c <xQueueGenericCreateStatic+0x58>
 800e34a:	2300      	movs	r3, #0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d10a      	bne.n	800e366 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e354:	f383 8811 	msr	BASEPRI, r3
 800e358:	f3bf 8f6f 	isb	sy
 800e35c:	f3bf 8f4f 	dsb	sy
 800e360:	623b      	str	r3, [r7, #32]
}
 800e362:	bf00      	nop
 800e364:	e7fe      	b.n	800e364 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d102      	bne.n	800e372 <xQueueGenericCreateStatic+0x7e>
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d101      	bne.n	800e376 <xQueueGenericCreateStatic+0x82>
 800e372:	2301      	movs	r3, #1
 800e374:	e000      	b.n	800e378 <xQueueGenericCreateStatic+0x84>
 800e376:	2300      	movs	r3, #0
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d10a      	bne.n	800e392 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e380:	f383 8811 	msr	BASEPRI, r3
 800e384:	f3bf 8f6f 	isb	sy
 800e388:	f3bf 8f4f 	dsb	sy
 800e38c:	61fb      	str	r3, [r7, #28]
}
 800e38e:	bf00      	nop
 800e390:	e7fe      	b.n	800e390 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e392:	2350      	movs	r3, #80	; 0x50
 800e394:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	2b50      	cmp	r3, #80	; 0x50
 800e39a:	d00a      	beq.n	800e3b2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a0:	f383 8811 	msr	BASEPRI, r3
 800e3a4:	f3bf 8f6f 	isb	sy
 800e3a8:	f3bf 8f4f 	dsb	sy
 800e3ac:	61bb      	str	r3, [r7, #24]
}
 800e3ae:	bf00      	nop
 800e3b0:	e7fe      	b.n	800e3b0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e3b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d00d      	beq.n	800e3da <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e3c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3cc:	9300      	str	r3, [sp, #0]
 800e3ce:	4613      	mov	r3, r2
 800e3d0:	687a      	ldr	r2, [r7, #4]
 800e3d2:	68b9      	ldr	r1, [r7, #8]
 800e3d4:	68f8      	ldr	r0, [r7, #12]
 800e3d6:	f000 f83f 	bl	800e458 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e3dc:	4618      	mov	r0, r3
 800e3de:	3730      	adds	r7, #48	; 0x30
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}

0800e3e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b08a      	sub	sp, #40	; 0x28
 800e3e8:	af02      	add	r7, sp, #8
 800e3ea:	60f8      	str	r0, [r7, #12]
 800e3ec:	60b9      	str	r1, [r7, #8]
 800e3ee:	4613      	mov	r3, r2
 800e3f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d10a      	bne.n	800e40e <xQueueGenericCreate+0x2a>
	__asm volatile
 800e3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3fc:	f383 8811 	msr	BASEPRI, r3
 800e400:	f3bf 8f6f 	isb	sy
 800e404:	f3bf 8f4f 	dsb	sy
 800e408:	613b      	str	r3, [r7, #16]
}
 800e40a:	bf00      	nop
 800e40c:	e7fe      	b.n	800e40c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	68ba      	ldr	r2, [r7, #8]
 800e412:	fb02 f303 	mul.w	r3, r2, r3
 800e416:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e418:	69fb      	ldr	r3, [r7, #28]
 800e41a:	3350      	adds	r3, #80	; 0x50
 800e41c:	4618      	mov	r0, r3
 800e41e:	f002 fcd3 	bl	8010dc8 <pvPortMalloc>
 800e422:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e424:	69bb      	ldr	r3, [r7, #24]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d011      	beq.n	800e44e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e42a:	69bb      	ldr	r3, [r7, #24]
 800e42c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	3350      	adds	r3, #80	; 0x50
 800e432:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e434:	69bb      	ldr	r3, [r7, #24]
 800e436:	2200      	movs	r2, #0
 800e438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e43c:	79fa      	ldrb	r2, [r7, #7]
 800e43e:	69bb      	ldr	r3, [r7, #24]
 800e440:	9300      	str	r3, [sp, #0]
 800e442:	4613      	mov	r3, r2
 800e444:	697a      	ldr	r2, [r7, #20]
 800e446:	68b9      	ldr	r1, [r7, #8]
 800e448:	68f8      	ldr	r0, [r7, #12]
 800e44a:	f000 f805 	bl	800e458 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e44e:	69bb      	ldr	r3, [r7, #24]
	}
 800e450:	4618      	mov	r0, r3
 800e452:	3720      	adds	r7, #32
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}

0800e458 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	60f8      	str	r0, [r7, #12]
 800e460:	60b9      	str	r1, [r7, #8]
 800e462:	607a      	str	r2, [r7, #4]
 800e464:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d103      	bne.n	800e474 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e46c:	69bb      	ldr	r3, [r7, #24]
 800e46e:	69ba      	ldr	r2, [r7, #24]
 800e470:	601a      	str	r2, [r3, #0]
 800e472:	e002      	b.n	800e47a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e474:	69bb      	ldr	r3, [r7, #24]
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e47a:	69bb      	ldr	r3, [r7, #24]
 800e47c:	68fa      	ldr	r2, [r7, #12]
 800e47e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e480:	69bb      	ldr	r3, [r7, #24]
 800e482:	68ba      	ldr	r2, [r7, #8]
 800e484:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e486:	2101      	movs	r1, #1
 800e488:	69b8      	ldr	r0, [r7, #24]
 800e48a:	f7ff fecb 	bl	800e224 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e48e:	69bb      	ldr	r3, [r7, #24]
 800e490:	78fa      	ldrb	r2, [r7, #3]
 800e492:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e496:	bf00      	nop
 800e498:	3710      	adds	r7, #16
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}

0800e49e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e49e:	b580      	push	{r7, lr}
 800e4a0:	b08a      	sub	sp, #40	; 0x28
 800e4a2:	af02      	add	r7, sp, #8
 800e4a4:	60f8      	str	r0, [r7, #12]
 800e4a6:	60b9      	str	r1, [r7, #8]
 800e4a8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d10a      	bne.n	800e4c6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800e4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b4:	f383 8811 	msr	BASEPRI, r3
 800e4b8:	f3bf 8f6f 	isb	sy
 800e4bc:	f3bf 8f4f 	dsb	sy
 800e4c0:	61bb      	str	r3, [r7, #24]
}
 800e4c2:	bf00      	nop
 800e4c4:	e7fe      	b.n	800e4c4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e4c6:	68ba      	ldr	r2, [r7, #8]
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	d90a      	bls.n	800e4e4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800e4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d2:	f383 8811 	msr	BASEPRI, r3
 800e4d6:	f3bf 8f6f 	isb	sy
 800e4da:	f3bf 8f4f 	dsb	sy
 800e4de:	617b      	str	r3, [r7, #20]
}
 800e4e0:	bf00      	nop
 800e4e2:	e7fe      	b.n	800e4e2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e4e4:	2302      	movs	r3, #2
 800e4e6:	9300      	str	r3, [sp, #0]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	2100      	movs	r1, #0
 800e4ee:	68f8      	ldr	r0, [r7, #12]
 800e4f0:	f7ff ff00 	bl	800e2f4 <xQueueGenericCreateStatic>
 800e4f4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e4f6:	69fb      	ldr	r3, [r7, #28]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d002      	beq.n	800e502 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e4fc:	69fb      	ldr	r3, [r7, #28]
 800e4fe:	68ba      	ldr	r2, [r7, #8]
 800e500:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e502:	69fb      	ldr	r3, [r7, #28]
	}
 800e504:	4618      	mov	r0, r3
 800e506:	3720      	adds	r7, #32
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b086      	sub	sp, #24
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d10a      	bne.n	800e532 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800e51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e520:	f383 8811 	msr	BASEPRI, r3
 800e524:	f3bf 8f6f 	isb	sy
 800e528:	f3bf 8f4f 	dsb	sy
 800e52c:	613b      	str	r3, [r7, #16]
}
 800e52e:	bf00      	nop
 800e530:	e7fe      	b.n	800e530 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e532:	683a      	ldr	r2, [r7, #0]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	429a      	cmp	r2, r3
 800e538:	d90a      	bls.n	800e550 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800e53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e53e:	f383 8811 	msr	BASEPRI, r3
 800e542:	f3bf 8f6f 	isb	sy
 800e546:	f3bf 8f4f 	dsb	sy
 800e54a:	60fb      	str	r3, [r7, #12]
}
 800e54c:	bf00      	nop
 800e54e:	e7fe      	b.n	800e54e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e550:	2202      	movs	r2, #2
 800e552:	2100      	movs	r1, #0
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f7ff ff45 	bl	800e3e4 <xQueueGenericCreate>
 800e55a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d002      	beq.n	800e568 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	683a      	ldr	r2, [r7, #0]
 800e566:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e568:	697b      	ldr	r3, [r7, #20]
	}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3718      	adds	r7, #24
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
	...

0800e574 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b08e      	sub	sp, #56	; 0x38
 800e578:	af00      	add	r7, sp, #0
 800e57a:	60f8      	str	r0, [r7, #12]
 800e57c:	60b9      	str	r1, [r7, #8]
 800e57e:	607a      	str	r2, [r7, #4]
 800e580:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e582:	2300      	movs	r3, #0
 800e584:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d10a      	bne.n	800e5a6 <xQueueGenericSend+0x32>
	__asm volatile
 800e590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e594:	f383 8811 	msr	BASEPRI, r3
 800e598:	f3bf 8f6f 	isb	sy
 800e59c:	f3bf 8f4f 	dsb	sy
 800e5a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e5a2:	bf00      	nop
 800e5a4:	e7fe      	b.n	800e5a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d103      	bne.n	800e5b4 <xQueueGenericSend+0x40>
 800e5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d101      	bne.n	800e5b8 <xQueueGenericSend+0x44>
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	e000      	b.n	800e5ba <xQueueGenericSend+0x46>
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d10a      	bne.n	800e5d4 <xQueueGenericSend+0x60>
	__asm volatile
 800e5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c2:	f383 8811 	msr	BASEPRI, r3
 800e5c6:	f3bf 8f6f 	isb	sy
 800e5ca:	f3bf 8f4f 	dsb	sy
 800e5ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e5d0:	bf00      	nop
 800e5d2:	e7fe      	b.n	800e5d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	2b02      	cmp	r3, #2
 800e5d8:	d103      	bne.n	800e5e2 <xQueueGenericSend+0x6e>
 800e5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5de:	2b01      	cmp	r3, #1
 800e5e0:	d101      	bne.n	800e5e6 <xQueueGenericSend+0x72>
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	e000      	b.n	800e5e8 <xQueueGenericSend+0x74>
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d10a      	bne.n	800e602 <xQueueGenericSend+0x8e>
	__asm volatile
 800e5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f0:	f383 8811 	msr	BASEPRI, r3
 800e5f4:	f3bf 8f6f 	isb	sy
 800e5f8:	f3bf 8f4f 	dsb	sy
 800e5fc:	623b      	str	r3, [r7, #32]
}
 800e5fe:	bf00      	nop
 800e600:	e7fe      	b.n	800e600 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e602:	f001 fc65 	bl	800fed0 <xTaskGetSchedulerState>
 800e606:	4603      	mov	r3, r0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d102      	bne.n	800e612 <xQueueGenericSend+0x9e>
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d101      	bne.n	800e616 <xQueueGenericSend+0xa2>
 800e612:	2301      	movs	r3, #1
 800e614:	e000      	b.n	800e618 <xQueueGenericSend+0xa4>
 800e616:	2300      	movs	r3, #0
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d10a      	bne.n	800e632 <xQueueGenericSend+0xbe>
	__asm volatile
 800e61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e620:	f383 8811 	msr	BASEPRI, r3
 800e624:	f3bf 8f6f 	isb	sy
 800e628:	f3bf 8f4f 	dsb	sy
 800e62c:	61fb      	str	r3, [r7, #28]
}
 800e62e:	bf00      	nop
 800e630:	e7fe      	b.n	800e630 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e632:	f002 faa7 	bl	8010b84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e63c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e63e:	429a      	cmp	r2, r3
 800e640:	d302      	bcc.n	800e648 <xQueueGenericSend+0xd4>
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	2b02      	cmp	r3, #2
 800e646:	d129      	bne.n	800e69c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e648:	683a      	ldr	r2, [r7, #0]
 800e64a:	68b9      	ldr	r1, [r7, #8]
 800e64c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e64e:	f000 fc5e 	bl	800ef0e <prvCopyDataToQueue>
 800e652:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d010      	beq.n	800e67e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e65e:	3324      	adds	r3, #36	; 0x24
 800e660:	4618      	mov	r0, r3
 800e662:	f001 fa73 	bl	800fb4c <xTaskRemoveFromEventList>
 800e666:	4603      	mov	r3, r0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d013      	beq.n	800e694 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e66c:	4b3f      	ldr	r3, [pc, #252]	; (800e76c <xQueueGenericSend+0x1f8>)
 800e66e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e672:	601a      	str	r2, [r3, #0]
 800e674:	f3bf 8f4f 	dsb	sy
 800e678:	f3bf 8f6f 	isb	sy
 800e67c:	e00a      	b.n	800e694 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e680:	2b00      	cmp	r3, #0
 800e682:	d007      	beq.n	800e694 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e684:	4b39      	ldr	r3, [pc, #228]	; (800e76c <xQueueGenericSend+0x1f8>)
 800e686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e68a:	601a      	str	r2, [r3, #0]
 800e68c:	f3bf 8f4f 	dsb	sy
 800e690:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e694:	f002 faa6 	bl	8010be4 <vPortExitCritical>
				return pdPASS;
 800e698:	2301      	movs	r3, #1
 800e69a:	e063      	b.n	800e764 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d103      	bne.n	800e6aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e6a2:	f002 fa9f 	bl	8010be4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	e05c      	b.n	800e764 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e6aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d106      	bne.n	800e6be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e6b0:	f107 0314 	add.w	r3, r7, #20
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f001 faad 	bl	800fc14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e6be:	f002 fa91 	bl	8010be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e6c2:	f001 f819 	bl	800f6f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e6c6:	f002 fa5d 	bl	8010b84 <vPortEnterCritical>
 800e6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e6d0:	b25b      	sxtb	r3, r3
 800e6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6d6:	d103      	bne.n	800e6e0 <xQueueGenericSend+0x16c>
 800e6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6da:	2200      	movs	r2, #0
 800e6dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e6e6:	b25b      	sxtb	r3, r3
 800e6e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6ec:	d103      	bne.n	800e6f6 <xQueueGenericSend+0x182>
 800e6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e6f6:	f002 fa75 	bl	8010be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e6fa:	1d3a      	adds	r2, r7, #4
 800e6fc:	f107 0314 	add.w	r3, r7, #20
 800e700:	4611      	mov	r1, r2
 800e702:	4618      	mov	r0, r3
 800e704:	f001 fa9c 	bl	800fc40 <xTaskCheckForTimeOut>
 800e708:	4603      	mov	r3, r0
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d124      	bne.n	800e758 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e70e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e710:	f000 fcf5 	bl	800f0fe <prvIsQueueFull>
 800e714:	4603      	mov	r3, r0
 800e716:	2b00      	cmp	r3, #0
 800e718:	d018      	beq.n	800e74c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e71c:	3310      	adds	r3, #16
 800e71e:	687a      	ldr	r2, [r7, #4]
 800e720:	4611      	mov	r1, r2
 800e722:	4618      	mov	r0, r3
 800e724:	f001 f9c2 	bl	800faac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e72a:	f000 fc80 	bl	800f02e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e72e:	f000 fff1 	bl	800f714 <xTaskResumeAll>
 800e732:	4603      	mov	r3, r0
 800e734:	2b00      	cmp	r3, #0
 800e736:	f47f af7c 	bne.w	800e632 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e73a:	4b0c      	ldr	r3, [pc, #48]	; (800e76c <xQueueGenericSend+0x1f8>)
 800e73c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e740:	601a      	str	r2, [r3, #0]
 800e742:	f3bf 8f4f 	dsb	sy
 800e746:	f3bf 8f6f 	isb	sy
 800e74a:	e772      	b.n	800e632 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e74c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e74e:	f000 fc6e 	bl	800f02e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e752:	f000 ffdf 	bl	800f714 <xTaskResumeAll>
 800e756:	e76c      	b.n	800e632 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e75a:	f000 fc68 	bl	800f02e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e75e:	f000 ffd9 	bl	800f714 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e762:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e764:	4618      	mov	r0, r3
 800e766:	3738      	adds	r7, #56	; 0x38
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	e000ed04 	.word	0xe000ed04

0800e770 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b090      	sub	sp, #64	; 0x40
 800e774:	af00      	add	r7, sp, #0
 800e776:	60f8      	str	r0, [r7, #12]
 800e778:	60b9      	str	r1, [r7, #8]
 800e77a:	607a      	str	r2, [r7, #4]
 800e77c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e784:	2b00      	cmp	r3, #0
 800e786:	d10a      	bne.n	800e79e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e78c:	f383 8811 	msr	BASEPRI, r3
 800e790:	f3bf 8f6f 	isb	sy
 800e794:	f3bf 8f4f 	dsb	sy
 800e798:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e79a:	bf00      	nop
 800e79c:	e7fe      	b.n	800e79c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d103      	bne.n	800e7ac <xQueueGenericSendFromISR+0x3c>
 800e7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d101      	bne.n	800e7b0 <xQueueGenericSendFromISR+0x40>
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	e000      	b.n	800e7b2 <xQueueGenericSendFromISR+0x42>
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d10a      	bne.n	800e7cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ba:	f383 8811 	msr	BASEPRI, r3
 800e7be:	f3bf 8f6f 	isb	sy
 800e7c2:	f3bf 8f4f 	dsb	sy
 800e7c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e7c8:	bf00      	nop
 800e7ca:	e7fe      	b.n	800e7ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	2b02      	cmp	r3, #2
 800e7d0:	d103      	bne.n	800e7da <xQueueGenericSendFromISR+0x6a>
 800e7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7d6:	2b01      	cmp	r3, #1
 800e7d8:	d101      	bne.n	800e7de <xQueueGenericSendFromISR+0x6e>
 800e7da:	2301      	movs	r3, #1
 800e7dc:	e000      	b.n	800e7e0 <xQueueGenericSendFromISR+0x70>
 800e7de:	2300      	movs	r3, #0
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d10a      	bne.n	800e7fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e8:	f383 8811 	msr	BASEPRI, r3
 800e7ec:	f3bf 8f6f 	isb	sy
 800e7f0:	f3bf 8f4f 	dsb	sy
 800e7f4:	623b      	str	r3, [r7, #32]
}
 800e7f6:	bf00      	nop
 800e7f8:	e7fe      	b.n	800e7f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7fa:	f002 faa5 	bl	8010d48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e7fe:	f3ef 8211 	mrs	r2, BASEPRI
 800e802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e806:	f383 8811 	msr	BASEPRI, r3
 800e80a:	f3bf 8f6f 	isb	sy
 800e80e:	f3bf 8f4f 	dsb	sy
 800e812:	61fa      	str	r2, [r7, #28]
 800e814:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e816:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e818:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e81c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e822:	429a      	cmp	r2, r3
 800e824:	d302      	bcc.n	800e82c <xQueueGenericSendFromISR+0xbc>
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	2b02      	cmp	r3, #2
 800e82a:	d12f      	bne.n	800e88c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e83a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e83c:	683a      	ldr	r2, [r7, #0]
 800e83e:	68b9      	ldr	r1, [r7, #8]
 800e840:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e842:	f000 fb64 	bl	800ef0e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e846:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e84e:	d112      	bne.n	800e876 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e854:	2b00      	cmp	r3, #0
 800e856:	d016      	beq.n	800e886 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e85a:	3324      	adds	r3, #36	; 0x24
 800e85c:	4618      	mov	r0, r3
 800e85e:	f001 f975 	bl	800fb4c <xTaskRemoveFromEventList>
 800e862:	4603      	mov	r3, r0
 800e864:	2b00      	cmp	r3, #0
 800e866:	d00e      	beq.n	800e886 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d00b      	beq.n	800e886 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2201      	movs	r2, #1
 800e872:	601a      	str	r2, [r3, #0]
 800e874:	e007      	b.n	800e886 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e876:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e87a:	3301      	adds	r3, #1
 800e87c:	b2db      	uxtb	r3, r3
 800e87e:	b25a      	sxtb	r2, r3
 800e880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e886:	2301      	movs	r3, #1
 800e888:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e88a:	e001      	b.n	800e890 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e88c:	2300      	movs	r3, #0
 800e88e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e892:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e89a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e89c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3740      	adds	r7, #64	; 0x40
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}

0800e8a6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e8a6:	b580      	push	{r7, lr}
 800e8a8:	b08e      	sub	sp, #56	; 0x38
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	6078      	str	r0, [r7, #4]
 800e8ae:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d10a      	bne.n	800e8d0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800e8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8be:	f383 8811 	msr	BASEPRI, r3
 800e8c2:	f3bf 8f6f 	isb	sy
 800e8c6:	f3bf 8f4f 	dsb	sy
 800e8ca:	623b      	str	r3, [r7, #32]
}
 800e8cc:	bf00      	nop
 800e8ce:	e7fe      	b.n	800e8ce <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d00a      	beq.n	800e8ee <xQueueGiveFromISR+0x48>
	__asm volatile
 800e8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8dc:	f383 8811 	msr	BASEPRI, r3
 800e8e0:	f3bf 8f6f 	isb	sy
 800e8e4:	f3bf 8f4f 	dsb	sy
 800e8e8:	61fb      	str	r3, [r7, #28]
}
 800e8ea:	bf00      	nop
 800e8ec:	e7fe      	b.n	800e8ec <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d103      	bne.n	800e8fe <xQueueGiveFromISR+0x58>
 800e8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f8:	689b      	ldr	r3, [r3, #8]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d101      	bne.n	800e902 <xQueueGiveFromISR+0x5c>
 800e8fe:	2301      	movs	r3, #1
 800e900:	e000      	b.n	800e904 <xQueueGiveFromISR+0x5e>
 800e902:	2300      	movs	r3, #0
 800e904:	2b00      	cmp	r3, #0
 800e906:	d10a      	bne.n	800e91e <xQueueGiveFromISR+0x78>
	__asm volatile
 800e908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e90c:	f383 8811 	msr	BASEPRI, r3
 800e910:	f3bf 8f6f 	isb	sy
 800e914:	f3bf 8f4f 	dsb	sy
 800e918:	61bb      	str	r3, [r7, #24]
}
 800e91a:	bf00      	nop
 800e91c:	e7fe      	b.n	800e91c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e91e:	f002 fa13 	bl	8010d48 <vPortValidateInterruptPriority>
	__asm volatile
 800e922:	f3ef 8211 	mrs	r2, BASEPRI
 800e926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e92a:	f383 8811 	msr	BASEPRI, r3
 800e92e:	f3bf 8f6f 	isb	sy
 800e932:	f3bf 8f4f 	dsb	sy
 800e936:	617a      	str	r2, [r7, #20]
 800e938:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e93a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e93c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e942:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d22b      	bcs.n	800e9a6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e950:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e95a:	1c5a      	adds	r2, r3, #1
 800e95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e95e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e960:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e964:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e968:	d112      	bne.n	800e990 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d016      	beq.n	800e9a0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e974:	3324      	adds	r3, #36	; 0x24
 800e976:	4618      	mov	r0, r3
 800e978:	f001 f8e8 	bl	800fb4c <xTaskRemoveFromEventList>
 800e97c:	4603      	mov	r3, r0
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d00e      	beq.n	800e9a0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d00b      	beq.n	800e9a0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	2201      	movs	r2, #1
 800e98c:	601a      	str	r2, [r3, #0]
 800e98e:	e007      	b.n	800e9a0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e994:	3301      	adds	r3, #1
 800e996:	b2db      	uxtb	r3, r3
 800e998:	b25a      	sxtb	r2, r3
 800e99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e99c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	637b      	str	r3, [r7, #52]	; 0x34
 800e9a4:	e001      	b.n	800e9aa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	637b      	str	r3, [r7, #52]	; 0x34
 800e9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ac:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f383 8811 	msr	BASEPRI, r3
}
 800e9b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3738      	adds	r7, #56	; 0x38
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}

0800e9c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b08c      	sub	sp, #48	; 0x30
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	60f8      	str	r0, [r7, #12]
 800e9c8:	60b9      	str	r1, [r7, #8]
 800e9ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d10a      	bne.n	800e9f0 <xQueueReceive+0x30>
	__asm volatile
 800e9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9de:	f383 8811 	msr	BASEPRI, r3
 800e9e2:	f3bf 8f6f 	isb	sy
 800e9e6:	f3bf 8f4f 	dsb	sy
 800e9ea:	623b      	str	r3, [r7, #32]
}
 800e9ec:	bf00      	nop
 800e9ee:	e7fe      	b.n	800e9ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d103      	bne.n	800e9fe <xQueueReceive+0x3e>
 800e9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d101      	bne.n	800ea02 <xQueueReceive+0x42>
 800e9fe:	2301      	movs	r3, #1
 800ea00:	e000      	b.n	800ea04 <xQueueReceive+0x44>
 800ea02:	2300      	movs	r3, #0
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d10a      	bne.n	800ea1e <xQueueReceive+0x5e>
	__asm volatile
 800ea08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea0c:	f383 8811 	msr	BASEPRI, r3
 800ea10:	f3bf 8f6f 	isb	sy
 800ea14:	f3bf 8f4f 	dsb	sy
 800ea18:	61fb      	str	r3, [r7, #28]
}
 800ea1a:	bf00      	nop
 800ea1c:	e7fe      	b.n	800ea1c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ea1e:	f001 fa57 	bl	800fed0 <xTaskGetSchedulerState>
 800ea22:	4603      	mov	r3, r0
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d102      	bne.n	800ea2e <xQueueReceive+0x6e>
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d101      	bne.n	800ea32 <xQueueReceive+0x72>
 800ea2e:	2301      	movs	r3, #1
 800ea30:	e000      	b.n	800ea34 <xQueueReceive+0x74>
 800ea32:	2300      	movs	r3, #0
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d10a      	bne.n	800ea4e <xQueueReceive+0x8e>
	__asm volatile
 800ea38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea3c:	f383 8811 	msr	BASEPRI, r3
 800ea40:	f3bf 8f6f 	isb	sy
 800ea44:	f3bf 8f4f 	dsb	sy
 800ea48:	61bb      	str	r3, [r7, #24]
}
 800ea4a:	bf00      	nop
 800ea4c:	e7fe      	b.n	800ea4c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ea4e:	f002 f899 	bl	8010b84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea56:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ea58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d01f      	beq.n	800ea9e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ea5e:	68b9      	ldr	r1, [r7, #8]
 800ea60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea62:	f000 fabe 	bl	800efe2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ea66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea68:	1e5a      	subs	r2, r3, #1
 800ea6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea6c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea70:	691b      	ldr	r3, [r3, #16]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d00f      	beq.n	800ea96 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea78:	3310      	adds	r3, #16
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f001 f866 	bl	800fb4c <xTaskRemoveFromEventList>
 800ea80:	4603      	mov	r3, r0
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d007      	beq.n	800ea96 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ea86:	4b3d      	ldr	r3, [pc, #244]	; (800eb7c <xQueueReceive+0x1bc>)
 800ea88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea8c:	601a      	str	r2, [r3, #0]
 800ea8e:	f3bf 8f4f 	dsb	sy
 800ea92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ea96:	f002 f8a5 	bl	8010be4 <vPortExitCritical>
				return pdPASS;
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	e069      	b.n	800eb72 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d103      	bne.n	800eaac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eaa4:	f002 f89e 	bl	8010be4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	e062      	b.n	800eb72 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eaac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d106      	bne.n	800eac0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eab2:	f107 0310 	add.w	r3, r7, #16
 800eab6:	4618      	mov	r0, r3
 800eab8:	f001 f8ac 	bl	800fc14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eabc:	2301      	movs	r3, #1
 800eabe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eac0:	f002 f890 	bl	8010be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eac4:	f000 fe18 	bl	800f6f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eac8:	f002 f85c 	bl	8010b84 <vPortEnterCritical>
 800eacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eace:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ead2:	b25b      	sxtb	r3, r3
 800ead4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ead8:	d103      	bne.n	800eae2 <xQueueReceive+0x122>
 800eada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eadc:	2200      	movs	r2, #0
 800eade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eae8:	b25b      	sxtb	r3, r3
 800eaea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaee:	d103      	bne.n	800eaf8 <xQueueReceive+0x138>
 800eaf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eaf8:	f002 f874 	bl	8010be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eafc:	1d3a      	adds	r2, r7, #4
 800eafe:	f107 0310 	add.w	r3, r7, #16
 800eb02:	4611      	mov	r1, r2
 800eb04:	4618      	mov	r0, r3
 800eb06:	f001 f89b 	bl	800fc40 <xTaskCheckForTimeOut>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d123      	bne.n	800eb58 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eb10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb12:	f000 fade 	bl	800f0d2 <prvIsQueueEmpty>
 800eb16:	4603      	mov	r3, r0
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d017      	beq.n	800eb4c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb1e:	3324      	adds	r3, #36	; 0x24
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	4611      	mov	r1, r2
 800eb24:	4618      	mov	r0, r3
 800eb26:	f000 ffc1 	bl	800faac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eb2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb2c:	f000 fa7f 	bl	800f02e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eb30:	f000 fdf0 	bl	800f714 <xTaskResumeAll>
 800eb34:	4603      	mov	r3, r0
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d189      	bne.n	800ea4e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800eb3a:	4b10      	ldr	r3, [pc, #64]	; (800eb7c <xQueueReceive+0x1bc>)
 800eb3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb40:	601a      	str	r2, [r3, #0]
 800eb42:	f3bf 8f4f 	dsb	sy
 800eb46:	f3bf 8f6f 	isb	sy
 800eb4a:	e780      	b.n	800ea4e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800eb4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb4e:	f000 fa6e 	bl	800f02e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eb52:	f000 fddf 	bl	800f714 <xTaskResumeAll>
 800eb56:	e77a      	b.n	800ea4e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800eb58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb5a:	f000 fa68 	bl	800f02e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eb5e:	f000 fdd9 	bl	800f714 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eb62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb64:	f000 fab5 	bl	800f0d2 <prvIsQueueEmpty>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	f43f af6f 	beq.w	800ea4e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eb70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800eb72:	4618      	mov	r0, r3
 800eb74:	3730      	adds	r7, #48	; 0x30
 800eb76:	46bd      	mov	sp, r7
 800eb78:	bd80      	pop	{r7, pc}
 800eb7a:	bf00      	nop
 800eb7c:	e000ed04 	.word	0xe000ed04

0800eb80 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b08e      	sub	sp, #56	; 0x38
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
 800eb88:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800eb92:	2300      	movs	r3, #0
 800eb94:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800eb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d10a      	bne.n	800ebb2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800eb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba0:	f383 8811 	msr	BASEPRI, r3
 800eba4:	f3bf 8f6f 	isb	sy
 800eba8:	f3bf 8f4f 	dsb	sy
 800ebac:	623b      	str	r3, [r7, #32]
}
 800ebae:	bf00      	nop
 800ebb0:	e7fe      	b.n	800ebb0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ebb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d00a      	beq.n	800ebd0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ebba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebbe:	f383 8811 	msr	BASEPRI, r3
 800ebc2:	f3bf 8f6f 	isb	sy
 800ebc6:	f3bf 8f4f 	dsb	sy
 800ebca:	61fb      	str	r3, [r7, #28]
}
 800ebcc:	bf00      	nop
 800ebce:	e7fe      	b.n	800ebce <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ebd0:	f001 f97e 	bl	800fed0 <xTaskGetSchedulerState>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d102      	bne.n	800ebe0 <xQueueSemaphoreTake+0x60>
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d101      	bne.n	800ebe4 <xQueueSemaphoreTake+0x64>
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	e000      	b.n	800ebe6 <xQueueSemaphoreTake+0x66>
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d10a      	bne.n	800ec00 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ebea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebee:	f383 8811 	msr	BASEPRI, r3
 800ebf2:	f3bf 8f6f 	isb	sy
 800ebf6:	f3bf 8f4f 	dsb	sy
 800ebfa:	61bb      	str	r3, [r7, #24]
}
 800ebfc:	bf00      	nop
 800ebfe:	e7fe      	b.n	800ebfe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ec00:	f001 ffc0 	bl	8010b84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ec04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec08:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ec0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d024      	beq.n	800ec5a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ec10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec12:	1e5a      	subs	r2, r3, #1
 800ec14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec16:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ec18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d104      	bne.n	800ec2a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ec20:	f001 facc 	bl	80101bc <pvTaskIncrementMutexHeldCount>
 800ec24:	4602      	mov	r2, r0
 800ec26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec28:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec2c:	691b      	ldr	r3, [r3, #16]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d00f      	beq.n	800ec52 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec34:	3310      	adds	r3, #16
 800ec36:	4618      	mov	r0, r3
 800ec38:	f000 ff88 	bl	800fb4c <xTaskRemoveFromEventList>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d007      	beq.n	800ec52 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ec42:	4b54      	ldr	r3, [pc, #336]	; (800ed94 <xQueueSemaphoreTake+0x214>)
 800ec44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec48:	601a      	str	r2, [r3, #0]
 800ec4a:	f3bf 8f4f 	dsb	sy
 800ec4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ec52:	f001 ffc7 	bl	8010be4 <vPortExitCritical>
				return pdPASS;
 800ec56:	2301      	movs	r3, #1
 800ec58:	e097      	b.n	800ed8a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d111      	bne.n	800ec84 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ec60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d00a      	beq.n	800ec7c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ec66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec6a:	f383 8811 	msr	BASEPRI, r3
 800ec6e:	f3bf 8f6f 	isb	sy
 800ec72:	f3bf 8f4f 	dsb	sy
 800ec76:	617b      	str	r3, [r7, #20]
}
 800ec78:	bf00      	nop
 800ec7a:	e7fe      	b.n	800ec7a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ec7c:	f001 ffb2 	bl	8010be4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ec80:	2300      	movs	r3, #0
 800ec82:	e082      	b.n	800ed8a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ec84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d106      	bne.n	800ec98 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ec8a:	f107 030c 	add.w	r3, r7, #12
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f000 ffc0 	bl	800fc14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ec94:	2301      	movs	r3, #1
 800ec96:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ec98:	f001 ffa4 	bl	8010be4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ec9c:	f000 fd2c 	bl	800f6f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eca0:	f001 ff70 	bl	8010b84 <vPortEnterCritical>
 800eca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ecaa:	b25b      	sxtb	r3, r3
 800ecac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecb0:	d103      	bne.n	800ecba <xQueueSemaphoreTake+0x13a>
 800ecb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ecba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ecc0:	b25b      	sxtb	r3, r3
 800ecc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecc6:	d103      	bne.n	800ecd0 <xQueueSemaphoreTake+0x150>
 800ecc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecca:	2200      	movs	r2, #0
 800eccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ecd0:	f001 ff88 	bl	8010be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ecd4:	463a      	mov	r2, r7
 800ecd6:	f107 030c 	add.w	r3, r7, #12
 800ecda:	4611      	mov	r1, r2
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f000 ffaf 	bl	800fc40 <xTaskCheckForTimeOut>
 800ece2:	4603      	mov	r3, r0
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d132      	bne.n	800ed4e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ece8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ecea:	f000 f9f2 	bl	800f0d2 <prvIsQueueEmpty>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d026      	beq.n	800ed42 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ecf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d109      	bne.n	800ed10 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ecfc:	f001 ff42 	bl	8010b84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ed00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed02:	689b      	ldr	r3, [r3, #8]
 800ed04:	4618      	mov	r0, r3
 800ed06:	f001 f901 	bl	800ff0c <xTaskPriorityInherit>
 800ed0a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ed0c:	f001 ff6a 	bl	8010be4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ed10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed12:	3324      	adds	r3, #36	; 0x24
 800ed14:	683a      	ldr	r2, [r7, #0]
 800ed16:	4611      	mov	r1, r2
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f000 fec7 	bl	800faac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ed1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed20:	f000 f985 	bl	800f02e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ed24:	f000 fcf6 	bl	800f714 <xTaskResumeAll>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	f47f af68 	bne.w	800ec00 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ed30:	4b18      	ldr	r3, [pc, #96]	; (800ed94 <xQueueSemaphoreTake+0x214>)
 800ed32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed36:	601a      	str	r2, [r3, #0]
 800ed38:	f3bf 8f4f 	dsb	sy
 800ed3c:	f3bf 8f6f 	isb	sy
 800ed40:	e75e      	b.n	800ec00 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ed42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed44:	f000 f973 	bl	800f02e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ed48:	f000 fce4 	bl	800f714 <xTaskResumeAll>
 800ed4c:	e758      	b.n	800ec00 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ed4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed50:	f000 f96d 	bl	800f02e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ed54:	f000 fcde 	bl	800f714 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ed58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed5a:	f000 f9ba 	bl	800f0d2 <prvIsQueueEmpty>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	f43f af4d 	beq.w	800ec00 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ed66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d00d      	beq.n	800ed88 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ed6c:	f001 ff0a 	bl	8010b84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ed70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed72:	f000 f8b4 	bl	800eede <prvGetDisinheritPriorityAfterTimeout>
 800ed76:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ed78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed7a:	689b      	ldr	r3, [r3, #8]
 800ed7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f001 f99a 	bl	80100b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ed84:	f001 ff2e 	bl	8010be4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ed88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3738      	adds	r7, #56	; 0x38
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
 800ed92:	bf00      	nop
 800ed94:	e000ed04 	.word	0xe000ed04

0800ed98 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b08e      	sub	sp, #56	; 0x38
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	60f8      	str	r0, [r7, #12]
 800eda0:	60b9      	str	r1, [r7, #8]
 800eda2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d10a      	bne.n	800edc4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800edae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb2:	f383 8811 	msr	BASEPRI, r3
 800edb6:	f3bf 8f6f 	isb	sy
 800edba:	f3bf 8f4f 	dsb	sy
 800edbe:	623b      	str	r3, [r7, #32]
}
 800edc0:	bf00      	nop
 800edc2:	e7fe      	b.n	800edc2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d103      	bne.n	800edd2 <xQueueReceiveFromISR+0x3a>
 800edca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d101      	bne.n	800edd6 <xQueueReceiveFromISR+0x3e>
 800edd2:	2301      	movs	r3, #1
 800edd4:	e000      	b.n	800edd8 <xQueueReceiveFromISR+0x40>
 800edd6:	2300      	movs	r3, #0
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d10a      	bne.n	800edf2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800eddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ede0:	f383 8811 	msr	BASEPRI, r3
 800ede4:	f3bf 8f6f 	isb	sy
 800ede8:	f3bf 8f4f 	dsb	sy
 800edec:	61fb      	str	r3, [r7, #28]
}
 800edee:	bf00      	nop
 800edf0:	e7fe      	b.n	800edf0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800edf2:	f001 ffa9 	bl	8010d48 <vPortValidateInterruptPriority>
	__asm volatile
 800edf6:	f3ef 8211 	mrs	r2, BASEPRI
 800edfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfe:	f383 8811 	msr	BASEPRI, r3
 800ee02:	f3bf 8f6f 	isb	sy
 800ee06:	f3bf 8f4f 	dsb	sy
 800ee0a:	61ba      	str	r2, [r7, #24]
 800ee0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ee0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ee10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ee18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d02f      	beq.n	800ee7e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ee1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ee28:	68b9      	ldr	r1, [r7, #8]
 800ee2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee2c:	f000 f8d9 	bl	800efe2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ee30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee32:	1e5a      	subs	r2, r3, #1
 800ee34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee36:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ee38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ee3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee40:	d112      	bne.n	800ee68 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee44:	691b      	ldr	r3, [r3, #16]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d016      	beq.n	800ee78 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee4c:	3310      	adds	r3, #16
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f000 fe7c 	bl	800fb4c <xTaskRemoveFromEventList>
 800ee54:	4603      	mov	r3, r0
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d00e      	beq.n	800ee78 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d00b      	beq.n	800ee78 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2201      	movs	r2, #1
 800ee64:	601a      	str	r2, [r3, #0]
 800ee66:	e007      	b.n	800ee78 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ee68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee6c:	3301      	adds	r3, #1
 800ee6e:	b2db      	uxtb	r3, r3
 800ee70:	b25a      	sxtb	r2, r3
 800ee72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ee78:	2301      	movs	r3, #1
 800ee7a:	637b      	str	r3, [r7, #52]	; 0x34
 800ee7c:	e001      	b.n	800ee82 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	637b      	str	r3, [r7, #52]	; 0x34
 800ee82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee84:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ee86:	693b      	ldr	r3, [r7, #16]
 800ee88:	f383 8811 	msr	BASEPRI, r3
}
 800ee8c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ee8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3738      	adds	r7, #56	; 0x38
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}

0800ee98 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b084      	sub	sp, #16
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d10a      	bne.n	800eec0 <vQueueDelete+0x28>
	__asm volatile
 800eeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeae:	f383 8811 	msr	BASEPRI, r3
 800eeb2:	f3bf 8f6f 	isb	sy
 800eeb6:	f3bf 8f4f 	dsb	sy
 800eeba:	60bb      	str	r3, [r7, #8]
}
 800eebc:	bf00      	nop
 800eebe:	e7fe      	b.n	800eebe <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800eec0:	68f8      	ldr	r0, [r7, #12]
 800eec2:	f000 f95f 	bl	800f184 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d102      	bne.n	800eed6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800eed0:	68f8      	ldr	r0, [r7, #12]
 800eed2:	f002 f845 	bl	8010f60 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800eed6:	bf00      	nop
 800eed8:	3710      	adds	r7, #16
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}

0800eede <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800eede:	b480      	push	{r7}
 800eee0:	b085      	sub	sp, #20
 800eee2:	af00      	add	r7, sp, #0
 800eee4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d006      	beq.n	800eefc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800eef8:	60fb      	str	r3, [r7, #12]
 800eefa:	e001      	b.n	800ef00 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800eefc:	2300      	movs	r3, #0
 800eefe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ef00:	68fb      	ldr	r3, [r7, #12]
	}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3714      	adds	r7, #20
 800ef06:	46bd      	mov	sp, r7
 800ef08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0c:	4770      	bx	lr

0800ef0e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ef0e:	b580      	push	{r7, lr}
 800ef10:	b086      	sub	sp, #24
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	60f8      	str	r0, [r7, #12]
 800ef16:	60b9      	str	r1, [r7, #8]
 800ef18:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef22:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d10d      	bne.n	800ef48 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d14d      	bne.n	800efd0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	689b      	ldr	r3, [r3, #8]
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f001 f84f 	bl	800ffdc <xTaskPriorityDisinherit>
 800ef3e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2200      	movs	r2, #0
 800ef44:	609a      	str	r2, [r3, #8]
 800ef46:	e043      	b.n	800efd0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d119      	bne.n	800ef82 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	6858      	ldr	r0, [r3, #4]
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef56:	461a      	mov	r2, r3
 800ef58:	68b9      	ldr	r1, [r7, #8]
 800ef5a:	f003 f973 	bl	8012244 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	685a      	ldr	r2, [r3, #4]
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef66:	441a      	add	r2, r3
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	685a      	ldr	r2, [r3, #4]
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	689b      	ldr	r3, [r3, #8]
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d32b      	bcc.n	800efd0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	681a      	ldr	r2, [r3, #0]
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	605a      	str	r2, [r3, #4]
 800ef80:	e026      	b.n	800efd0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	68d8      	ldr	r0, [r3, #12]
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	68b9      	ldr	r1, [r7, #8]
 800ef8e:	f003 f959 	bl	8012244 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	68da      	ldr	r2, [r3, #12]
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef9a:	425b      	negs	r3, r3
 800ef9c:	441a      	add	r2, r3
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	68da      	ldr	r2, [r3, #12]
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	429a      	cmp	r2, r3
 800efac:	d207      	bcs.n	800efbe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	689a      	ldr	r2, [r3, #8]
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efb6:	425b      	negs	r3, r3
 800efb8:	441a      	add	r2, r3
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2b02      	cmp	r3, #2
 800efc2:	d105      	bne.n	800efd0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d002      	beq.n	800efd0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	3b01      	subs	r3, #1
 800efce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	1c5a      	adds	r2, r3, #1
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800efd8:	697b      	ldr	r3, [r7, #20]
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3718      	adds	r7, #24
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}

0800efe2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800efe2:	b580      	push	{r7, lr}
 800efe4:	b082      	sub	sp, #8
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	6078      	str	r0, [r7, #4]
 800efea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d018      	beq.n	800f026 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	68da      	ldr	r2, [r3, #12]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800effc:	441a      	add	r2, r3
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	68da      	ldr	r2, [r3, #12]
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	689b      	ldr	r3, [r3, #8]
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d303      	bcc.n	800f016 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681a      	ldr	r2, [r3, #0]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	68d9      	ldr	r1, [r3, #12]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f01e:	461a      	mov	r2, r3
 800f020:	6838      	ldr	r0, [r7, #0]
 800f022:	f003 f90f 	bl	8012244 <memcpy>
	}
}
 800f026:	bf00      	nop
 800f028:	3708      	adds	r7, #8
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}

0800f02e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f02e:	b580      	push	{r7, lr}
 800f030:	b084      	sub	sp, #16
 800f032:	af00      	add	r7, sp, #0
 800f034:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f036:	f001 fda5 	bl	8010b84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f040:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f042:	e011      	b.n	800f068 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d012      	beq.n	800f072 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	3324      	adds	r3, #36	; 0x24
 800f050:	4618      	mov	r0, r3
 800f052:	f000 fd7b 	bl	800fb4c <xTaskRemoveFromEventList>
 800f056:	4603      	mov	r3, r0
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d001      	beq.n	800f060 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f05c:	f000 fe52 	bl	800fd04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f060:	7bfb      	ldrb	r3, [r7, #15]
 800f062:	3b01      	subs	r3, #1
 800f064:	b2db      	uxtb	r3, r3
 800f066:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	dce9      	bgt.n	800f044 <prvUnlockQueue+0x16>
 800f070:	e000      	b.n	800f074 <prvUnlockQueue+0x46>
					break;
 800f072:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	22ff      	movs	r2, #255	; 0xff
 800f078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f07c:	f001 fdb2 	bl	8010be4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f080:	f001 fd80 	bl	8010b84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f08a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f08c:	e011      	b.n	800f0b2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	691b      	ldr	r3, [r3, #16]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d012      	beq.n	800f0bc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	3310      	adds	r3, #16
 800f09a:	4618      	mov	r0, r3
 800f09c:	f000 fd56 	bl	800fb4c <xTaskRemoveFromEventList>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d001      	beq.n	800f0aa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f0a6:	f000 fe2d 	bl	800fd04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f0aa:	7bbb      	ldrb	r3, [r7, #14]
 800f0ac:	3b01      	subs	r3, #1
 800f0ae:	b2db      	uxtb	r3, r3
 800f0b0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f0b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	dce9      	bgt.n	800f08e <prvUnlockQueue+0x60>
 800f0ba:	e000      	b.n	800f0be <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f0bc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	22ff      	movs	r2, #255	; 0xff
 800f0c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f0c6:	f001 fd8d 	bl	8010be4 <vPortExitCritical>
}
 800f0ca:	bf00      	nop
 800f0cc:	3710      	adds	r7, #16
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}

0800f0d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f0d2:	b580      	push	{r7, lr}
 800f0d4:	b084      	sub	sp, #16
 800f0d6:	af00      	add	r7, sp, #0
 800f0d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f0da:	f001 fd53 	bl	8010b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d102      	bne.n	800f0ec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f0e6:	2301      	movs	r3, #1
 800f0e8:	60fb      	str	r3, [r7, #12]
 800f0ea:	e001      	b.n	800f0f0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f0f0:	f001 fd78 	bl	8010be4 <vPortExitCritical>

	return xReturn;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3710      	adds	r7, #16
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}

0800f0fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f0fe:	b580      	push	{r7, lr}
 800f100:	b084      	sub	sp, #16
 800f102:	af00      	add	r7, sp, #0
 800f104:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f106:	f001 fd3d 	bl	8010b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f112:	429a      	cmp	r2, r3
 800f114:	d102      	bne.n	800f11c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f116:	2301      	movs	r3, #1
 800f118:	60fb      	str	r3, [r7, #12]
 800f11a:	e001      	b.n	800f120 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f11c:	2300      	movs	r3, #0
 800f11e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f120:	f001 fd60 	bl	8010be4 <vPortExitCritical>

	return xReturn;
 800f124:	68fb      	ldr	r3, [r7, #12]
}
 800f126:	4618      	mov	r0, r3
 800f128:	3710      	adds	r7, #16
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}
	...

0800f130 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f130:	b480      	push	{r7}
 800f132:	b085      	sub	sp, #20
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f13a:	2300      	movs	r3, #0
 800f13c:	60fb      	str	r3, [r7, #12]
 800f13e:	e014      	b.n	800f16a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f140:	4a0f      	ldr	r2, [pc, #60]	; (800f180 <vQueueAddToRegistry+0x50>)
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d10b      	bne.n	800f164 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f14c:	490c      	ldr	r1, [pc, #48]	; (800f180 <vQueueAddToRegistry+0x50>)
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	683a      	ldr	r2, [r7, #0]
 800f152:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f156:	4a0a      	ldr	r2, [pc, #40]	; (800f180 <vQueueAddToRegistry+0x50>)
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	00db      	lsls	r3, r3, #3
 800f15c:	4413      	add	r3, r2
 800f15e:	687a      	ldr	r2, [r7, #4]
 800f160:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f162:	e006      	b.n	800f172 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	3301      	adds	r3, #1
 800f168:	60fb      	str	r3, [r7, #12]
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	2b07      	cmp	r3, #7
 800f16e:	d9e7      	bls.n	800f140 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f170:	bf00      	nop
 800f172:	bf00      	nop
 800f174:	3714      	adds	r7, #20
 800f176:	46bd      	mov	sp, r7
 800f178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17c:	4770      	bx	lr
 800f17e:	bf00      	nop
 800f180:	20002c28 	.word	0x20002c28

0800f184 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f184:	b480      	push	{r7}
 800f186:	b085      	sub	sp, #20
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f18c:	2300      	movs	r3, #0
 800f18e:	60fb      	str	r3, [r7, #12]
 800f190:	e016      	b.n	800f1c0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f192:	4a10      	ldr	r2, [pc, #64]	; (800f1d4 <vQueueUnregisterQueue+0x50>)
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	00db      	lsls	r3, r3, #3
 800f198:	4413      	add	r3, r2
 800f19a:	685b      	ldr	r3, [r3, #4]
 800f19c:	687a      	ldr	r2, [r7, #4]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d10b      	bne.n	800f1ba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f1a2:	4a0c      	ldr	r2, [pc, #48]	; (800f1d4 <vQueueUnregisterQueue+0x50>)
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	2100      	movs	r1, #0
 800f1a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f1ac:	4a09      	ldr	r2, [pc, #36]	; (800f1d4 <vQueueUnregisterQueue+0x50>)
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	00db      	lsls	r3, r3, #3
 800f1b2:	4413      	add	r3, r2
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	605a      	str	r2, [r3, #4]
				break;
 800f1b8:	e006      	b.n	800f1c8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	3301      	adds	r3, #1
 800f1be:	60fb      	str	r3, [r7, #12]
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	2b07      	cmp	r3, #7
 800f1c4:	d9e5      	bls.n	800f192 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f1c6:	bf00      	nop
 800f1c8:	bf00      	nop
 800f1ca:	3714      	adds	r7, #20
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d2:	4770      	bx	lr
 800f1d4:	20002c28 	.word	0x20002c28

0800f1d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b086      	sub	sp, #24
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	60f8      	str	r0, [r7, #12]
 800f1e0:	60b9      	str	r1, [r7, #8]
 800f1e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f1e8:	f001 fccc 	bl	8010b84 <vPortEnterCritical>
 800f1ec:	697b      	ldr	r3, [r7, #20]
 800f1ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f1f2:	b25b      	sxtb	r3, r3
 800f1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1f8:	d103      	bne.n	800f202 <vQueueWaitForMessageRestricted+0x2a>
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f208:	b25b      	sxtb	r3, r3
 800f20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f20e:	d103      	bne.n	800f218 <vQueueWaitForMessageRestricted+0x40>
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	2200      	movs	r2, #0
 800f214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f218:	f001 fce4 	bl	8010be4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f220:	2b00      	cmp	r3, #0
 800f222:	d106      	bne.n	800f232 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f224:	697b      	ldr	r3, [r7, #20]
 800f226:	3324      	adds	r3, #36	; 0x24
 800f228:	687a      	ldr	r2, [r7, #4]
 800f22a:	68b9      	ldr	r1, [r7, #8]
 800f22c:	4618      	mov	r0, r3
 800f22e:	f000 fc61 	bl	800faf4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f232:	6978      	ldr	r0, [r7, #20]
 800f234:	f7ff fefb 	bl	800f02e <prvUnlockQueue>
	}
 800f238:	bf00      	nop
 800f23a:	3718      	adds	r7, #24
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}

0800f240 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f240:	b580      	push	{r7, lr}
 800f242:	b08e      	sub	sp, #56	; 0x38
 800f244:	af04      	add	r7, sp, #16
 800f246:	60f8      	str	r0, [r7, #12]
 800f248:	60b9      	str	r1, [r7, #8]
 800f24a:	607a      	str	r2, [r7, #4]
 800f24c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f250:	2b00      	cmp	r3, #0
 800f252:	d10a      	bne.n	800f26a <xTaskCreateStatic+0x2a>
	__asm volatile
 800f254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f258:	f383 8811 	msr	BASEPRI, r3
 800f25c:	f3bf 8f6f 	isb	sy
 800f260:	f3bf 8f4f 	dsb	sy
 800f264:	623b      	str	r3, [r7, #32]
}
 800f266:	bf00      	nop
 800f268:	e7fe      	b.n	800f268 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d10a      	bne.n	800f286 <xTaskCreateStatic+0x46>
	__asm volatile
 800f270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f274:	f383 8811 	msr	BASEPRI, r3
 800f278:	f3bf 8f6f 	isb	sy
 800f27c:	f3bf 8f4f 	dsb	sy
 800f280:	61fb      	str	r3, [r7, #28]
}
 800f282:	bf00      	nop
 800f284:	e7fe      	b.n	800f284 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f286:	23bc      	movs	r3, #188	; 0xbc
 800f288:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	2bbc      	cmp	r3, #188	; 0xbc
 800f28e:	d00a      	beq.n	800f2a6 <xTaskCreateStatic+0x66>
	__asm volatile
 800f290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f294:	f383 8811 	msr	BASEPRI, r3
 800f298:	f3bf 8f6f 	isb	sy
 800f29c:	f3bf 8f4f 	dsb	sy
 800f2a0:	61bb      	str	r3, [r7, #24]
}
 800f2a2:	bf00      	nop
 800f2a4:	e7fe      	b.n	800f2a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f2a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d01e      	beq.n	800f2ec <xTaskCreateStatic+0xac>
 800f2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d01b      	beq.n	800f2ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f2bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c0:	2202      	movs	r2, #2
 800f2c2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	9303      	str	r3, [sp, #12]
 800f2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2cc:	9302      	str	r3, [sp, #8]
 800f2ce:	f107 0314 	add.w	r3, r7, #20
 800f2d2:	9301      	str	r3, [sp, #4]
 800f2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d6:	9300      	str	r3, [sp, #0]
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	687a      	ldr	r2, [r7, #4]
 800f2dc:	68b9      	ldr	r1, [r7, #8]
 800f2de:	68f8      	ldr	r0, [r7, #12]
 800f2e0:	f000 f850 	bl	800f384 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f2e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2e6:	f000 f8f3 	bl	800f4d0 <prvAddNewTaskToReadyList>
 800f2ea:	e001      	b.n	800f2f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f2f0:	697b      	ldr	r3, [r7, #20]
	}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3728      	adds	r7, #40	; 0x28
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}

0800f2fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f2fa:	b580      	push	{r7, lr}
 800f2fc:	b08c      	sub	sp, #48	; 0x30
 800f2fe:	af04      	add	r7, sp, #16
 800f300:	60f8      	str	r0, [r7, #12]
 800f302:	60b9      	str	r1, [r7, #8]
 800f304:	603b      	str	r3, [r7, #0]
 800f306:	4613      	mov	r3, r2
 800f308:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f30a:	88fb      	ldrh	r3, [r7, #6]
 800f30c:	009b      	lsls	r3, r3, #2
 800f30e:	4618      	mov	r0, r3
 800f310:	f001 fd5a 	bl	8010dc8 <pvPortMalloc>
 800f314:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d00e      	beq.n	800f33a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f31c:	20bc      	movs	r0, #188	; 0xbc
 800f31e:	f001 fd53 	bl	8010dc8 <pvPortMalloc>
 800f322:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f324:	69fb      	ldr	r3, [r7, #28]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d003      	beq.n	800f332 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f32a:	69fb      	ldr	r3, [r7, #28]
 800f32c:	697a      	ldr	r2, [r7, #20]
 800f32e:	631a      	str	r2, [r3, #48]	; 0x30
 800f330:	e005      	b.n	800f33e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f332:	6978      	ldr	r0, [r7, #20]
 800f334:	f001 fe14 	bl	8010f60 <vPortFree>
 800f338:	e001      	b.n	800f33e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f33a:	2300      	movs	r3, #0
 800f33c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f33e:	69fb      	ldr	r3, [r7, #28]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d017      	beq.n	800f374 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f344:	69fb      	ldr	r3, [r7, #28]
 800f346:	2200      	movs	r2, #0
 800f348:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f34c:	88fa      	ldrh	r2, [r7, #6]
 800f34e:	2300      	movs	r3, #0
 800f350:	9303      	str	r3, [sp, #12]
 800f352:	69fb      	ldr	r3, [r7, #28]
 800f354:	9302      	str	r3, [sp, #8]
 800f356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f358:	9301      	str	r3, [sp, #4]
 800f35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35c:	9300      	str	r3, [sp, #0]
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	68b9      	ldr	r1, [r7, #8]
 800f362:	68f8      	ldr	r0, [r7, #12]
 800f364:	f000 f80e 	bl	800f384 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f368:	69f8      	ldr	r0, [r7, #28]
 800f36a:	f000 f8b1 	bl	800f4d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f36e:	2301      	movs	r3, #1
 800f370:	61bb      	str	r3, [r7, #24]
 800f372:	e002      	b.n	800f37a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f374:	f04f 33ff 	mov.w	r3, #4294967295
 800f378:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f37a:	69bb      	ldr	r3, [r7, #24]
	}
 800f37c:	4618      	mov	r0, r3
 800f37e:	3720      	adds	r7, #32
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}

0800f384 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b088      	sub	sp, #32
 800f388:	af00      	add	r7, sp, #0
 800f38a:	60f8      	str	r0, [r7, #12]
 800f38c:	60b9      	str	r1, [r7, #8]
 800f38e:	607a      	str	r2, [r7, #4]
 800f390:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f394:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	009b      	lsls	r3, r3, #2
 800f39a:	461a      	mov	r2, r3
 800f39c:	21a5      	movs	r1, #165	; 0xa5
 800f39e:	f002 ff5f 	bl	8012260 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f3ac:	3b01      	subs	r3, #1
 800f3ae:	009b      	lsls	r3, r3, #2
 800f3b0:	4413      	add	r3, r2
 800f3b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f3b4:	69bb      	ldr	r3, [r7, #24]
 800f3b6:	f023 0307 	bic.w	r3, r3, #7
 800f3ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f3bc:	69bb      	ldr	r3, [r7, #24]
 800f3be:	f003 0307 	and.w	r3, r3, #7
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d00a      	beq.n	800f3dc <prvInitialiseNewTask+0x58>
	__asm volatile
 800f3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ca:	f383 8811 	msr	BASEPRI, r3
 800f3ce:	f3bf 8f6f 	isb	sy
 800f3d2:	f3bf 8f4f 	dsb	sy
 800f3d6:	617b      	str	r3, [r7, #20]
}
 800f3d8:	bf00      	nop
 800f3da:	e7fe      	b.n	800f3da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d01f      	beq.n	800f422 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	61fb      	str	r3, [r7, #28]
 800f3e6:	e012      	b.n	800f40e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f3e8:	68ba      	ldr	r2, [r7, #8]
 800f3ea:	69fb      	ldr	r3, [r7, #28]
 800f3ec:	4413      	add	r3, r2
 800f3ee:	7819      	ldrb	r1, [r3, #0]
 800f3f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3f2:	69fb      	ldr	r3, [r7, #28]
 800f3f4:	4413      	add	r3, r2
 800f3f6:	3334      	adds	r3, #52	; 0x34
 800f3f8:	460a      	mov	r2, r1
 800f3fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f3fc:	68ba      	ldr	r2, [r7, #8]
 800f3fe:	69fb      	ldr	r3, [r7, #28]
 800f400:	4413      	add	r3, r2
 800f402:	781b      	ldrb	r3, [r3, #0]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d006      	beq.n	800f416 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f408:	69fb      	ldr	r3, [r7, #28]
 800f40a:	3301      	adds	r3, #1
 800f40c:	61fb      	str	r3, [r7, #28]
 800f40e:	69fb      	ldr	r3, [r7, #28]
 800f410:	2b0f      	cmp	r3, #15
 800f412:	d9e9      	bls.n	800f3e8 <prvInitialiseNewTask+0x64>
 800f414:	e000      	b.n	800f418 <prvInitialiseNewTask+0x94>
			{
				break;
 800f416:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f41a:	2200      	movs	r2, #0
 800f41c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f420:	e003      	b.n	800f42a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f424:	2200      	movs	r2, #0
 800f426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f42c:	2b37      	cmp	r3, #55	; 0x37
 800f42e:	d901      	bls.n	800f434 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f430:	2337      	movs	r3, #55	; 0x37
 800f432:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f438:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f43c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f43e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f442:	2200      	movs	r2, #0
 800f444:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f448:	3304      	adds	r3, #4
 800f44a:	4618      	mov	r0, r3
 800f44c:	f7fe fe56 	bl	800e0fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f452:	3318      	adds	r3, #24
 800f454:	4618      	mov	r0, r3
 800f456:	f7fe fe51 	bl	800e0fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f45c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f45e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f462:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f468:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f46c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f46e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f472:	2200      	movs	r2, #0
 800f474:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f47a:	2200      	movs	r2, #0
 800f47c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f482:	3354      	adds	r3, #84	; 0x54
 800f484:	2260      	movs	r2, #96	; 0x60
 800f486:	2100      	movs	r1, #0
 800f488:	4618      	mov	r0, r3
 800f48a:	f002 fee9 	bl	8012260 <memset>
 800f48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f490:	4a0c      	ldr	r2, [pc, #48]	; (800f4c4 <prvInitialiseNewTask+0x140>)
 800f492:	659a      	str	r2, [r3, #88]	; 0x58
 800f494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f496:	4a0c      	ldr	r2, [pc, #48]	; (800f4c8 <prvInitialiseNewTask+0x144>)
 800f498:	65da      	str	r2, [r3, #92]	; 0x5c
 800f49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f49c:	4a0b      	ldr	r2, [pc, #44]	; (800f4cc <prvInitialiseNewTask+0x148>)
 800f49e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f4a0:	683a      	ldr	r2, [r7, #0]
 800f4a2:	68f9      	ldr	r1, [r7, #12]
 800f4a4:	69b8      	ldr	r0, [r7, #24]
 800f4a6:	f001 fa3f 	bl	8010928 <pxPortInitialiseStack>
 800f4aa:	4602      	mov	r2, r0
 800f4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d002      	beq.n	800f4bc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f4bc:	bf00      	nop
 800f4be:	3720      	adds	r7, #32
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	08012f6c 	.word	0x08012f6c
 800f4c8:	08012f8c 	.word	0x08012f8c
 800f4cc:	08012f4c 	.word	0x08012f4c

0800f4d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b082      	sub	sp, #8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f4d8:	f001 fb54 	bl	8010b84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f4dc:	4b2d      	ldr	r3, [pc, #180]	; (800f594 <prvAddNewTaskToReadyList+0xc4>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	4a2c      	ldr	r2, [pc, #176]	; (800f594 <prvAddNewTaskToReadyList+0xc4>)
 800f4e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f4e6:	4b2c      	ldr	r3, [pc, #176]	; (800f598 <prvAddNewTaskToReadyList+0xc8>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d109      	bne.n	800f502 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f4ee:	4a2a      	ldr	r2, [pc, #168]	; (800f598 <prvAddNewTaskToReadyList+0xc8>)
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f4f4:	4b27      	ldr	r3, [pc, #156]	; (800f594 <prvAddNewTaskToReadyList+0xc4>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	2b01      	cmp	r3, #1
 800f4fa:	d110      	bne.n	800f51e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f4fc:	f000 fc26 	bl	800fd4c <prvInitialiseTaskLists>
 800f500:	e00d      	b.n	800f51e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f502:	4b26      	ldr	r3, [pc, #152]	; (800f59c <prvAddNewTaskToReadyList+0xcc>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d109      	bne.n	800f51e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f50a:	4b23      	ldr	r3, [pc, #140]	; (800f598 <prvAddNewTaskToReadyList+0xc8>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f514:	429a      	cmp	r2, r3
 800f516:	d802      	bhi.n	800f51e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f518:	4a1f      	ldr	r2, [pc, #124]	; (800f598 <prvAddNewTaskToReadyList+0xc8>)
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f51e:	4b20      	ldr	r3, [pc, #128]	; (800f5a0 <prvAddNewTaskToReadyList+0xd0>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	3301      	adds	r3, #1
 800f524:	4a1e      	ldr	r2, [pc, #120]	; (800f5a0 <prvAddNewTaskToReadyList+0xd0>)
 800f526:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f528:	4b1d      	ldr	r3, [pc, #116]	; (800f5a0 <prvAddNewTaskToReadyList+0xd0>)
 800f52a:	681a      	ldr	r2, [r3, #0]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f534:	4b1b      	ldr	r3, [pc, #108]	; (800f5a4 <prvAddNewTaskToReadyList+0xd4>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	429a      	cmp	r2, r3
 800f53a:	d903      	bls.n	800f544 <prvAddNewTaskToReadyList+0x74>
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f540:	4a18      	ldr	r2, [pc, #96]	; (800f5a4 <prvAddNewTaskToReadyList+0xd4>)
 800f542:	6013      	str	r3, [r2, #0]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f548:	4613      	mov	r3, r2
 800f54a:	009b      	lsls	r3, r3, #2
 800f54c:	4413      	add	r3, r2
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	4a15      	ldr	r2, [pc, #84]	; (800f5a8 <prvAddNewTaskToReadyList+0xd8>)
 800f552:	441a      	add	r2, r3
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	3304      	adds	r3, #4
 800f558:	4619      	mov	r1, r3
 800f55a:	4610      	mov	r0, r2
 800f55c:	f7fe fddb 	bl	800e116 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f560:	f001 fb40 	bl	8010be4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f564:	4b0d      	ldr	r3, [pc, #52]	; (800f59c <prvAddNewTaskToReadyList+0xcc>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d00e      	beq.n	800f58a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f56c:	4b0a      	ldr	r3, [pc, #40]	; (800f598 <prvAddNewTaskToReadyList+0xc8>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f576:	429a      	cmp	r2, r3
 800f578:	d207      	bcs.n	800f58a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f57a:	4b0c      	ldr	r3, [pc, #48]	; (800f5ac <prvAddNewTaskToReadyList+0xdc>)
 800f57c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f580:	601a      	str	r2, [r3, #0]
 800f582:	f3bf 8f4f 	dsb	sy
 800f586:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f58a:	bf00      	nop
 800f58c:	3708      	adds	r7, #8
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
 800f592:	bf00      	nop
 800f594:	2000313c 	.word	0x2000313c
 800f598:	20002c68 	.word	0x20002c68
 800f59c:	20003148 	.word	0x20003148
 800f5a0:	20003158 	.word	0x20003158
 800f5a4:	20003144 	.word	0x20003144
 800f5a8:	20002c6c 	.word	0x20002c6c
 800f5ac:	e000ed04 	.word	0xe000ed04

0800f5b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b084      	sub	sp, #16
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d017      	beq.n	800f5f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f5c2:	4b13      	ldr	r3, [pc, #76]	; (800f610 <vTaskDelay+0x60>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d00a      	beq.n	800f5e0 <vTaskDelay+0x30>
	__asm volatile
 800f5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ce:	f383 8811 	msr	BASEPRI, r3
 800f5d2:	f3bf 8f6f 	isb	sy
 800f5d6:	f3bf 8f4f 	dsb	sy
 800f5da:	60bb      	str	r3, [r7, #8]
}
 800f5dc:	bf00      	nop
 800f5de:	e7fe      	b.n	800f5de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f5e0:	f000 f88a 	bl	800f6f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f5e4:	2100      	movs	r1, #0
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f000 fdfc 	bl	80101e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f5ec:	f000 f892 	bl	800f714 <xTaskResumeAll>
 800f5f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d107      	bne.n	800f608 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f5f8:	4b06      	ldr	r3, [pc, #24]	; (800f614 <vTaskDelay+0x64>)
 800f5fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5fe:	601a      	str	r2, [r3, #0]
 800f600:	f3bf 8f4f 	dsb	sy
 800f604:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f608:	bf00      	nop
 800f60a:	3710      	adds	r7, #16
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}
 800f610:	20003164 	.word	0x20003164
 800f614:	e000ed04 	.word	0xe000ed04

0800f618 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b08a      	sub	sp, #40	; 0x28
 800f61c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f61e:	2300      	movs	r3, #0
 800f620:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f622:	2300      	movs	r3, #0
 800f624:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f626:	463a      	mov	r2, r7
 800f628:	1d39      	adds	r1, r7, #4
 800f62a:	f107 0308 	add.w	r3, r7, #8
 800f62e:	4618      	mov	r0, r3
 800f630:	f7fe fd10 	bl	800e054 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f634:	6839      	ldr	r1, [r7, #0]
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	68ba      	ldr	r2, [r7, #8]
 800f63a:	9202      	str	r2, [sp, #8]
 800f63c:	9301      	str	r3, [sp, #4]
 800f63e:	2300      	movs	r3, #0
 800f640:	9300      	str	r3, [sp, #0]
 800f642:	2300      	movs	r3, #0
 800f644:	460a      	mov	r2, r1
 800f646:	4924      	ldr	r1, [pc, #144]	; (800f6d8 <vTaskStartScheduler+0xc0>)
 800f648:	4824      	ldr	r0, [pc, #144]	; (800f6dc <vTaskStartScheduler+0xc4>)
 800f64a:	f7ff fdf9 	bl	800f240 <xTaskCreateStatic>
 800f64e:	4603      	mov	r3, r0
 800f650:	4a23      	ldr	r2, [pc, #140]	; (800f6e0 <vTaskStartScheduler+0xc8>)
 800f652:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f654:	4b22      	ldr	r3, [pc, #136]	; (800f6e0 <vTaskStartScheduler+0xc8>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d002      	beq.n	800f662 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f65c:	2301      	movs	r3, #1
 800f65e:	617b      	str	r3, [r7, #20]
 800f660:	e001      	b.n	800f666 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f662:	2300      	movs	r3, #0
 800f664:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	2b01      	cmp	r3, #1
 800f66a:	d102      	bne.n	800f672 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f66c:	f000 fe0e 	bl	801028c <xTimerCreateTimerTask>
 800f670:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	2b01      	cmp	r3, #1
 800f676:	d11b      	bne.n	800f6b0 <vTaskStartScheduler+0x98>
	__asm volatile
 800f678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f67c:	f383 8811 	msr	BASEPRI, r3
 800f680:	f3bf 8f6f 	isb	sy
 800f684:	f3bf 8f4f 	dsb	sy
 800f688:	613b      	str	r3, [r7, #16]
}
 800f68a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f68c:	4b15      	ldr	r3, [pc, #84]	; (800f6e4 <vTaskStartScheduler+0xcc>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	3354      	adds	r3, #84	; 0x54
 800f692:	4a15      	ldr	r2, [pc, #84]	; (800f6e8 <vTaskStartScheduler+0xd0>)
 800f694:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f696:	4b15      	ldr	r3, [pc, #84]	; (800f6ec <vTaskStartScheduler+0xd4>)
 800f698:	f04f 32ff 	mov.w	r2, #4294967295
 800f69c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f69e:	4b14      	ldr	r3, [pc, #80]	; (800f6f0 <vTaskStartScheduler+0xd8>)
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f6a4:	4b13      	ldr	r3, [pc, #76]	; (800f6f4 <vTaskStartScheduler+0xdc>)
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f6aa:	f001 f9c9 	bl	8010a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f6ae:	e00e      	b.n	800f6ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6b6:	d10a      	bne.n	800f6ce <vTaskStartScheduler+0xb6>
	__asm volatile
 800f6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6bc:	f383 8811 	msr	BASEPRI, r3
 800f6c0:	f3bf 8f6f 	isb	sy
 800f6c4:	f3bf 8f4f 	dsb	sy
 800f6c8:	60fb      	str	r3, [r7, #12]
}
 800f6ca:	bf00      	nop
 800f6cc:	e7fe      	b.n	800f6cc <vTaskStartScheduler+0xb4>
}
 800f6ce:	bf00      	nop
 800f6d0:	3718      	adds	r7, #24
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}
 800f6d6:	bf00      	nop
 800f6d8:	08012e30 	.word	0x08012e30
 800f6dc:	0800fd1d 	.word	0x0800fd1d
 800f6e0:	20003160 	.word	0x20003160
 800f6e4:	20002c68 	.word	0x20002c68
 800f6e8:	20000118 	.word	0x20000118
 800f6ec:	2000315c 	.word	0x2000315c
 800f6f0:	20003148 	.word	0x20003148
 800f6f4:	20003140 	.word	0x20003140

0800f6f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f6fc:	4b04      	ldr	r3, [pc, #16]	; (800f710 <vTaskSuspendAll+0x18>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	3301      	adds	r3, #1
 800f702:	4a03      	ldr	r2, [pc, #12]	; (800f710 <vTaskSuspendAll+0x18>)
 800f704:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f706:	bf00      	nop
 800f708:	46bd      	mov	sp, r7
 800f70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70e:	4770      	bx	lr
 800f710:	20003164 	.word	0x20003164

0800f714 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b084      	sub	sp, #16
 800f718:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f71a:	2300      	movs	r3, #0
 800f71c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f71e:	2300      	movs	r3, #0
 800f720:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f722:	4b42      	ldr	r3, [pc, #264]	; (800f82c <xTaskResumeAll+0x118>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d10a      	bne.n	800f740 <xTaskResumeAll+0x2c>
	__asm volatile
 800f72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f72e:	f383 8811 	msr	BASEPRI, r3
 800f732:	f3bf 8f6f 	isb	sy
 800f736:	f3bf 8f4f 	dsb	sy
 800f73a:	603b      	str	r3, [r7, #0]
}
 800f73c:	bf00      	nop
 800f73e:	e7fe      	b.n	800f73e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f740:	f001 fa20 	bl	8010b84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f744:	4b39      	ldr	r3, [pc, #228]	; (800f82c <xTaskResumeAll+0x118>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	3b01      	subs	r3, #1
 800f74a:	4a38      	ldr	r2, [pc, #224]	; (800f82c <xTaskResumeAll+0x118>)
 800f74c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f74e:	4b37      	ldr	r3, [pc, #220]	; (800f82c <xTaskResumeAll+0x118>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d162      	bne.n	800f81c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f756:	4b36      	ldr	r3, [pc, #216]	; (800f830 <xTaskResumeAll+0x11c>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d05e      	beq.n	800f81c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f75e:	e02f      	b.n	800f7c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f760:	4b34      	ldr	r3, [pc, #208]	; (800f834 <xTaskResumeAll+0x120>)
 800f762:	68db      	ldr	r3, [r3, #12]
 800f764:	68db      	ldr	r3, [r3, #12]
 800f766:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	3318      	adds	r3, #24
 800f76c:	4618      	mov	r0, r3
 800f76e:	f7fe fd2f 	bl	800e1d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	3304      	adds	r3, #4
 800f776:	4618      	mov	r0, r3
 800f778:	f7fe fd2a 	bl	800e1d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f780:	4b2d      	ldr	r3, [pc, #180]	; (800f838 <xTaskResumeAll+0x124>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	429a      	cmp	r2, r3
 800f786:	d903      	bls.n	800f790 <xTaskResumeAll+0x7c>
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f78c:	4a2a      	ldr	r2, [pc, #168]	; (800f838 <xTaskResumeAll+0x124>)
 800f78e:	6013      	str	r3, [r2, #0]
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f794:	4613      	mov	r3, r2
 800f796:	009b      	lsls	r3, r3, #2
 800f798:	4413      	add	r3, r2
 800f79a:	009b      	lsls	r3, r3, #2
 800f79c:	4a27      	ldr	r2, [pc, #156]	; (800f83c <xTaskResumeAll+0x128>)
 800f79e:	441a      	add	r2, r3
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	3304      	adds	r3, #4
 800f7a4:	4619      	mov	r1, r3
 800f7a6:	4610      	mov	r0, r2
 800f7a8:	f7fe fcb5 	bl	800e116 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7b0:	4b23      	ldr	r3, [pc, #140]	; (800f840 <xTaskResumeAll+0x12c>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d302      	bcc.n	800f7c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f7ba:	4b22      	ldr	r3, [pc, #136]	; (800f844 <xTaskResumeAll+0x130>)
 800f7bc:	2201      	movs	r2, #1
 800f7be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f7c0:	4b1c      	ldr	r3, [pc, #112]	; (800f834 <xTaskResumeAll+0x120>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d1cb      	bne.n	800f760 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d001      	beq.n	800f7d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f7ce:	f000 fb5f 	bl	800fe90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f7d2:	4b1d      	ldr	r3, [pc, #116]	; (800f848 <xTaskResumeAll+0x134>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d010      	beq.n	800f800 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f7de:	f000 f847 	bl	800f870 <xTaskIncrementTick>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d002      	beq.n	800f7ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f7e8:	4b16      	ldr	r3, [pc, #88]	; (800f844 <xTaskResumeAll+0x130>)
 800f7ea:	2201      	movs	r2, #1
 800f7ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	3b01      	subs	r3, #1
 800f7f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d1f1      	bne.n	800f7de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f7fa:	4b13      	ldr	r3, [pc, #76]	; (800f848 <xTaskResumeAll+0x134>)
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f800:	4b10      	ldr	r3, [pc, #64]	; (800f844 <xTaskResumeAll+0x130>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d009      	beq.n	800f81c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f808:	2301      	movs	r3, #1
 800f80a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f80c:	4b0f      	ldr	r3, [pc, #60]	; (800f84c <xTaskResumeAll+0x138>)
 800f80e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f812:	601a      	str	r2, [r3, #0]
 800f814:	f3bf 8f4f 	dsb	sy
 800f818:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f81c:	f001 f9e2 	bl	8010be4 <vPortExitCritical>

	return xAlreadyYielded;
 800f820:	68bb      	ldr	r3, [r7, #8]
}
 800f822:	4618      	mov	r0, r3
 800f824:	3710      	adds	r7, #16
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
 800f82a:	bf00      	nop
 800f82c:	20003164 	.word	0x20003164
 800f830:	2000313c 	.word	0x2000313c
 800f834:	200030fc 	.word	0x200030fc
 800f838:	20003144 	.word	0x20003144
 800f83c:	20002c6c 	.word	0x20002c6c
 800f840:	20002c68 	.word	0x20002c68
 800f844:	20003150 	.word	0x20003150
 800f848:	2000314c 	.word	0x2000314c
 800f84c:	e000ed04 	.word	0xe000ed04

0800f850 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f850:	b480      	push	{r7}
 800f852:	b083      	sub	sp, #12
 800f854:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f856:	4b05      	ldr	r3, [pc, #20]	; (800f86c <xTaskGetTickCount+0x1c>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f85c:	687b      	ldr	r3, [r7, #4]
}
 800f85e:	4618      	mov	r0, r3
 800f860:	370c      	adds	r7, #12
 800f862:	46bd      	mov	sp, r7
 800f864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f868:	4770      	bx	lr
 800f86a:	bf00      	nop
 800f86c:	20003140 	.word	0x20003140

0800f870 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b086      	sub	sp, #24
 800f874:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f876:	2300      	movs	r3, #0
 800f878:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f87a:	4b4f      	ldr	r3, [pc, #316]	; (800f9b8 <xTaskIncrementTick+0x148>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	f040 808f 	bne.w	800f9a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f884:	4b4d      	ldr	r3, [pc, #308]	; (800f9bc <xTaskIncrementTick+0x14c>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	3301      	adds	r3, #1
 800f88a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f88c:	4a4b      	ldr	r2, [pc, #300]	; (800f9bc <xTaskIncrementTick+0x14c>)
 800f88e:	693b      	ldr	r3, [r7, #16]
 800f890:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d120      	bne.n	800f8da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f898:	4b49      	ldr	r3, [pc, #292]	; (800f9c0 <xTaskIncrementTick+0x150>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d00a      	beq.n	800f8b8 <xTaskIncrementTick+0x48>
	__asm volatile
 800f8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a6:	f383 8811 	msr	BASEPRI, r3
 800f8aa:	f3bf 8f6f 	isb	sy
 800f8ae:	f3bf 8f4f 	dsb	sy
 800f8b2:	603b      	str	r3, [r7, #0]
}
 800f8b4:	bf00      	nop
 800f8b6:	e7fe      	b.n	800f8b6 <xTaskIncrementTick+0x46>
 800f8b8:	4b41      	ldr	r3, [pc, #260]	; (800f9c0 <xTaskIncrementTick+0x150>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	60fb      	str	r3, [r7, #12]
 800f8be:	4b41      	ldr	r3, [pc, #260]	; (800f9c4 <xTaskIncrementTick+0x154>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	4a3f      	ldr	r2, [pc, #252]	; (800f9c0 <xTaskIncrementTick+0x150>)
 800f8c4:	6013      	str	r3, [r2, #0]
 800f8c6:	4a3f      	ldr	r2, [pc, #252]	; (800f9c4 <xTaskIncrementTick+0x154>)
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	6013      	str	r3, [r2, #0]
 800f8cc:	4b3e      	ldr	r3, [pc, #248]	; (800f9c8 <xTaskIncrementTick+0x158>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	4a3d      	ldr	r2, [pc, #244]	; (800f9c8 <xTaskIncrementTick+0x158>)
 800f8d4:	6013      	str	r3, [r2, #0]
 800f8d6:	f000 fadb 	bl	800fe90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f8da:	4b3c      	ldr	r3, [pc, #240]	; (800f9cc <xTaskIncrementTick+0x15c>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	693a      	ldr	r2, [r7, #16]
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d349      	bcc.n	800f978 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f8e4:	4b36      	ldr	r3, [pc, #216]	; (800f9c0 <xTaskIncrementTick+0x150>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d104      	bne.n	800f8f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8ee:	4b37      	ldr	r3, [pc, #220]	; (800f9cc <xTaskIncrementTick+0x15c>)
 800f8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800f8f4:	601a      	str	r2, [r3, #0]
					break;
 800f8f6:	e03f      	b.n	800f978 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8f8:	4b31      	ldr	r3, [pc, #196]	; (800f9c0 <xTaskIncrementTick+0x150>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	68db      	ldr	r3, [r3, #12]
 800f8fe:	68db      	ldr	r3, [r3, #12]
 800f900:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	685b      	ldr	r3, [r3, #4]
 800f906:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f908:	693a      	ldr	r2, [r7, #16]
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	429a      	cmp	r2, r3
 800f90e:	d203      	bcs.n	800f918 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f910:	4a2e      	ldr	r2, [pc, #184]	; (800f9cc <xTaskIncrementTick+0x15c>)
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f916:	e02f      	b.n	800f978 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	3304      	adds	r3, #4
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7fe fc57 	bl	800e1d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f926:	2b00      	cmp	r3, #0
 800f928:	d004      	beq.n	800f934 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	3318      	adds	r3, #24
 800f92e:	4618      	mov	r0, r3
 800f930:	f7fe fc4e 	bl	800e1d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f938:	4b25      	ldr	r3, [pc, #148]	; (800f9d0 <xTaskIncrementTick+0x160>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	429a      	cmp	r2, r3
 800f93e:	d903      	bls.n	800f948 <xTaskIncrementTick+0xd8>
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f944:	4a22      	ldr	r2, [pc, #136]	; (800f9d0 <xTaskIncrementTick+0x160>)
 800f946:	6013      	str	r3, [r2, #0]
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f94c:	4613      	mov	r3, r2
 800f94e:	009b      	lsls	r3, r3, #2
 800f950:	4413      	add	r3, r2
 800f952:	009b      	lsls	r3, r3, #2
 800f954:	4a1f      	ldr	r2, [pc, #124]	; (800f9d4 <xTaskIncrementTick+0x164>)
 800f956:	441a      	add	r2, r3
 800f958:	68bb      	ldr	r3, [r7, #8]
 800f95a:	3304      	adds	r3, #4
 800f95c:	4619      	mov	r1, r3
 800f95e:	4610      	mov	r0, r2
 800f960:	f7fe fbd9 	bl	800e116 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f968:	4b1b      	ldr	r3, [pc, #108]	; (800f9d8 <xTaskIncrementTick+0x168>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f96e:	429a      	cmp	r2, r3
 800f970:	d3b8      	bcc.n	800f8e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f972:	2301      	movs	r3, #1
 800f974:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f976:	e7b5      	b.n	800f8e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f978:	4b17      	ldr	r3, [pc, #92]	; (800f9d8 <xTaskIncrementTick+0x168>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f97e:	4915      	ldr	r1, [pc, #84]	; (800f9d4 <xTaskIncrementTick+0x164>)
 800f980:	4613      	mov	r3, r2
 800f982:	009b      	lsls	r3, r3, #2
 800f984:	4413      	add	r3, r2
 800f986:	009b      	lsls	r3, r3, #2
 800f988:	440b      	add	r3, r1
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	2b01      	cmp	r3, #1
 800f98e:	d901      	bls.n	800f994 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f990:	2301      	movs	r3, #1
 800f992:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f994:	4b11      	ldr	r3, [pc, #68]	; (800f9dc <xTaskIncrementTick+0x16c>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d007      	beq.n	800f9ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f99c:	2301      	movs	r3, #1
 800f99e:	617b      	str	r3, [r7, #20]
 800f9a0:	e004      	b.n	800f9ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f9a2:	4b0f      	ldr	r3, [pc, #60]	; (800f9e0 <xTaskIncrementTick+0x170>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	3301      	adds	r3, #1
 800f9a8:	4a0d      	ldr	r2, [pc, #52]	; (800f9e0 <xTaskIncrementTick+0x170>)
 800f9aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f9ac:	697b      	ldr	r3, [r7, #20]
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	3718      	adds	r7, #24
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}
 800f9b6:	bf00      	nop
 800f9b8:	20003164 	.word	0x20003164
 800f9bc:	20003140 	.word	0x20003140
 800f9c0:	200030f4 	.word	0x200030f4
 800f9c4:	200030f8 	.word	0x200030f8
 800f9c8:	20003154 	.word	0x20003154
 800f9cc:	2000315c 	.word	0x2000315c
 800f9d0:	20003144 	.word	0x20003144
 800f9d4:	20002c6c 	.word	0x20002c6c
 800f9d8:	20002c68 	.word	0x20002c68
 800f9dc:	20003150 	.word	0x20003150
 800f9e0:	2000314c 	.word	0x2000314c

0800f9e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b085      	sub	sp, #20
 800f9e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f9ea:	4b2a      	ldr	r3, [pc, #168]	; (800fa94 <vTaskSwitchContext+0xb0>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d003      	beq.n	800f9fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f9f2:	4b29      	ldr	r3, [pc, #164]	; (800fa98 <vTaskSwitchContext+0xb4>)
 800f9f4:	2201      	movs	r2, #1
 800f9f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f9f8:	e046      	b.n	800fa88 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f9fa:	4b27      	ldr	r3, [pc, #156]	; (800fa98 <vTaskSwitchContext+0xb4>)
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa00:	4b26      	ldr	r3, [pc, #152]	; (800fa9c <vTaskSwitchContext+0xb8>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	60fb      	str	r3, [r7, #12]
 800fa06:	e010      	b.n	800fa2a <vTaskSwitchContext+0x46>
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d10a      	bne.n	800fa24 <vTaskSwitchContext+0x40>
	__asm volatile
 800fa0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa12:	f383 8811 	msr	BASEPRI, r3
 800fa16:	f3bf 8f6f 	isb	sy
 800fa1a:	f3bf 8f4f 	dsb	sy
 800fa1e:	607b      	str	r3, [r7, #4]
}
 800fa20:	bf00      	nop
 800fa22:	e7fe      	b.n	800fa22 <vTaskSwitchContext+0x3e>
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	3b01      	subs	r3, #1
 800fa28:	60fb      	str	r3, [r7, #12]
 800fa2a:	491d      	ldr	r1, [pc, #116]	; (800faa0 <vTaskSwitchContext+0xbc>)
 800fa2c:	68fa      	ldr	r2, [r7, #12]
 800fa2e:	4613      	mov	r3, r2
 800fa30:	009b      	lsls	r3, r3, #2
 800fa32:	4413      	add	r3, r2
 800fa34:	009b      	lsls	r3, r3, #2
 800fa36:	440b      	add	r3, r1
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d0e4      	beq.n	800fa08 <vTaskSwitchContext+0x24>
 800fa3e:	68fa      	ldr	r2, [r7, #12]
 800fa40:	4613      	mov	r3, r2
 800fa42:	009b      	lsls	r3, r3, #2
 800fa44:	4413      	add	r3, r2
 800fa46:	009b      	lsls	r3, r3, #2
 800fa48:	4a15      	ldr	r2, [pc, #84]	; (800faa0 <vTaskSwitchContext+0xbc>)
 800fa4a:	4413      	add	r3, r2
 800fa4c:	60bb      	str	r3, [r7, #8]
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	685b      	ldr	r3, [r3, #4]
 800fa52:	685a      	ldr	r2, [r3, #4]
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	605a      	str	r2, [r3, #4]
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	685a      	ldr	r2, [r3, #4]
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	3308      	adds	r3, #8
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d104      	bne.n	800fa6e <vTaskSwitchContext+0x8a>
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	685b      	ldr	r3, [r3, #4]
 800fa68:	685a      	ldr	r2, [r3, #4]
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	605a      	str	r2, [r3, #4]
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	685b      	ldr	r3, [r3, #4]
 800fa72:	68db      	ldr	r3, [r3, #12]
 800fa74:	4a0b      	ldr	r2, [pc, #44]	; (800faa4 <vTaskSwitchContext+0xc0>)
 800fa76:	6013      	str	r3, [r2, #0]
 800fa78:	4a08      	ldr	r2, [pc, #32]	; (800fa9c <vTaskSwitchContext+0xb8>)
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fa7e:	4b09      	ldr	r3, [pc, #36]	; (800faa4 <vTaskSwitchContext+0xc0>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	3354      	adds	r3, #84	; 0x54
 800fa84:	4a08      	ldr	r2, [pc, #32]	; (800faa8 <vTaskSwitchContext+0xc4>)
 800fa86:	6013      	str	r3, [r2, #0]
}
 800fa88:	bf00      	nop
 800fa8a:	3714      	adds	r7, #20
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa92:	4770      	bx	lr
 800fa94:	20003164 	.word	0x20003164
 800fa98:	20003150 	.word	0x20003150
 800fa9c:	20003144 	.word	0x20003144
 800faa0:	20002c6c 	.word	0x20002c6c
 800faa4:	20002c68 	.word	0x20002c68
 800faa8:	20000118 	.word	0x20000118

0800faac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b084      	sub	sp, #16
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d10a      	bne.n	800fad2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac0:	f383 8811 	msr	BASEPRI, r3
 800fac4:	f3bf 8f6f 	isb	sy
 800fac8:	f3bf 8f4f 	dsb	sy
 800facc:	60fb      	str	r3, [r7, #12]
}
 800face:	bf00      	nop
 800fad0:	e7fe      	b.n	800fad0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fad2:	4b07      	ldr	r3, [pc, #28]	; (800faf0 <vTaskPlaceOnEventList+0x44>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	3318      	adds	r3, #24
 800fad8:	4619      	mov	r1, r3
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	f7fe fb3f 	bl	800e15e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fae0:	2101      	movs	r1, #1
 800fae2:	6838      	ldr	r0, [r7, #0]
 800fae4:	f000 fb7e 	bl	80101e4 <prvAddCurrentTaskToDelayedList>
}
 800fae8:	bf00      	nop
 800faea:	3710      	adds	r7, #16
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}
 800faf0:	20002c68 	.word	0x20002c68

0800faf4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b086      	sub	sp, #24
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	60f8      	str	r0, [r7, #12]
 800fafc:	60b9      	str	r1, [r7, #8]
 800fafe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d10a      	bne.n	800fb1c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800fb06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb0a:	f383 8811 	msr	BASEPRI, r3
 800fb0e:	f3bf 8f6f 	isb	sy
 800fb12:	f3bf 8f4f 	dsb	sy
 800fb16:	617b      	str	r3, [r7, #20]
}
 800fb18:	bf00      	nop
 800fb1a:	e7fe      	b.n	800fb1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fb1c:	4b0a      	ldr	r3, [pc, #40]	; (800fb48 <vTaskPlaceOnEventListRestricted+0x54>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	3318      	adds	r3, #24
 800fb22:	4619      	mov	r1, r3
 800fb24:	68f8      	ldr	r0, [r7, #12]
 800fb26:	f7fe faf6 	bl	800e116 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d002      	beq.n	800fb36 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800fb30:	f04f 33ff 	mov.w	r3, #4294967295
 800fb34:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fb36:	6879      	ldr	r1, [r7, #4]
 800fb38:	68b8      	ldr	r0, [r7, #8]
 800fb3a:	f000 fb53 	bl	80101e4 <prvAddCurrentTaskToDelayedList>
	}
 800fb3e:	bf00      	nop
 800fb40:	3718      	adds	r7, #24
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	20002c68 	.word	0x20002c68

0800fb4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b086      	sub	sp, #24
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	68db      	ldr	r3, [r3, #12]
 800fb58:	68db      	ldr	r3, [r3, #12]
 800fb5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fb5c:	693b      	ldr	r3, [r7, #16]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d10a      	bne.n	800fb78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fb62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb66:	f383 8811 	msr	BASEPRI, r3
 800fb6a:	f3bf 8f6f 	isb	sy
 800fb6e:	f3bf 8f4f 	dsb	sy
 800fb72:	60fb      	str	r3, [r7, #12]
}
 800fb74:	bf00      	nop
 800fb76:	e7fe      	b.n	800fb76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	3318      	adds	r3, #24
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f7fe fb27 	bl	800e1d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb82:	4b1e      	ldr	r3, [pc, #120]	; (800fbfc <xTaskRemoveFromEventList+0xb0>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d11d      	bne.n	800fbc6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	3304      	adds	r3, #4
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7fe fb1e 	bl	800e1d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fb94:	693b      	ldr	r3, [r7, #16]
 800fb96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb98:	4b19      	ldr	r3, [pc, #100]	; (800fc00 <xTaskRemoveFromEventList+0xb4>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	d903      	bls.n	800fba8 <xTaskRemoveFromEventList+0x5c>
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fba4:	4a16      	ldr	r2, [pc, #88]	; (800fc00 <xTaskRemoveFromEventList+0xb4>)
 800fba6:	6013      	str	r3, [r2, #0]
 800fba8:	693b      	ldr	r3, [r7, #16]
 800fbaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbac:	4613      	mov	r3, r2
 800fbae:	009b      	lsls	r3, r3, #2
 800fbb0:	4413      	add	r3, r2
 800fbb2:	009b      	lsls	r3, r3, #2
 800fbb4:	4a13      	ldr	r2, [pc, #76]	; (800fc04 <xTaskRemoveFromEventList+0xb8>)
 800fbb6:	441a      	add	r2, r3
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	3304      	adds	r3, #4
 800fbbc:	4619      	mov	r1, r3
 800fbbe:	4610      	mov	r0, r2
 800fbc0:	f7fe faa9 	bl	800e116 <vListInsertEnd>
 800fbc4:	e005      	b.n	800fbd2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fbc6:	693b      	ldr	r3, [r7, #16]
 800fbc8:	3318      	adds	r3, #24
 800fbca:	4619      	mov	r1, r3
 800fbcc:	480e      	ldr	r0, [pc, #56]	; (800fc08 <xTaskRemoveFromEventList+0xbc>)
 800fbce:	f7fe faa2 	bl	800e116 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbd6:	4b0d      	ldr	r3, [pc, #52]	; (800fc0c <xTaskRemoveFromEventList+0xc0>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	d905      	bls.n	800fbec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fbe4:	4b0a      	ldr	r3, [pc, #40]	; (800fc10 <xTaskRemoveFromEventList+0xc4>)
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	601a      	str	r2, [r3, #0]
 800fbea:	e001      	b.n	800fbf0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800fbec:	2300      	movs	r3, #0
 800fbee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fbf0:	697b      	ldr	r3, [r7, #20]
}
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	3718      	adds	r7, #24
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	bd80      	pop	{r7, pc}
 800fbfa:	bf00      	nop
 800fbfc:	20003164 	.word	0x20003164
 800fc00:	20003144 	.word	0x20003144
 800fc04:	20002c6c 	.word	0x20002c6c
 800fc08:	200030fc 	.word	0x200030fc
 800fc0c:	20002c68 	.word	0x20002c68
 800fc10:	20003150 	.word	0x20003150

0800fc14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fc14:	b480      	push	{r7}
 800fc16:	b083      	sub	sp, #12
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fc1c:	4b06      	ldr	r3, [pc, #24]	; (800fc38 <vTaskInternalSetTimeOutState+0x24>)
 800fc1e:	681a      	ldr	r2, [r3, #0]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fc24:	4b05      	ldr	r3, [pc, #20]	; (800fc3c <vTaskInternalSetTimeOutState+0x28>)
 800fc26:	681a      	ldr	r2, [r3, #0]
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	605a      	str	r2, [r3, #4]
}
 800fc2c:	bf00      	nop
 800fc2e:	370c      	adds	r7, #12
 800fc30:	46bd      	mov	sp, r7
 800fc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc36:	4770      	bx	lr
 800fc38:	20003154 	.word	0x20003154
 800fc3c:	20003140 	.word	0x20003140

0800fc40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b088      	sub	sp, #32
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d10a      	bne.n	800fc66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc54:	f383 8811 	msr	BASEPRI, r3
 800fc58:	f3bf 8f6f 	isb	sy
 800fc5c:	f3bf 8f4f 	dsb	sy
 800fc60:	613b      	str	r3, [r7, #16]
}
 800fc62:	bf00      	nop
 800fc64:	e7fe      	b.n	800fc64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d10a      	bne.n	800fc82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc70:	f383 8811 	msr	BASEPRI, r3
 800fc74:	f3bf 8f6f 	isb	sy
 800fc78:	f3bf 8f4f 	dsb	sy
 800fc7c:	60fb      	str	r3, [r7, #12]
}
 800fc7e:	bf00      	nop
 800fc80:	e7fe      	b.n	800fc80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fc82:	f000 ff7f 	bl	8010b84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fc86:	4b1d      	ldr	r3, [pc, #116]	; (800fcfc <xTaskCheckForTimeOut+0xbc>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	685b      	ldr	r3, [r3, #4]
 800fc90:	69ba      	ldr	r2, [r7, #24]
 800fc92:	1ad3      	subs	r3, r2, r3
 800fc94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc9e:	d102      	bne.n	800fca6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fca0:	2300      	movs	r3, #0
 800fca2:	61fb      	str	r3, [r7, #28]
 800fca4:	e023      	b.n	800fcee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681a      	ldr	r2, [r3, #0]
 800fcaa:	4b15      	ldr	r3, [pc, #84]	; (800fd00 <xTaskCheckForTimeOut+0xc0>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d007      	beq.n	800fcc2 <xTaskCheckForTimeOut+0x82>
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	685b      	ldr	r3, [r3, #4]
 800fcb6:	69ba      	ldr	r2, [r7, #24]
 800fcb8:	429a      	cmp	r2, r3
 800fcba:	d302      	bcc.n	800fcc2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fcbc:	2301      	movs	r3, #1
 800fcbe:	61fb      	str	r3, [r7, #28]
 800fcc0:	e015      	b.n	800fcee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	697a      	ldr	r2, [r7, #20]
 800fcc8:	429a      	cmp	r2, r3
 800fcca:	d20b      	bcs.n	800fce4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	681a      	ldr	r2, [r3, #0]
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	1ad2      	subs	r2, r2, r3
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f7ff ff9b 	bl	800fc14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fcde:	2300      	movs	r3, #0
 800fce0:	61fb      	str	r3, [r7, #28]
 800fce2:	e004      	b.n	800fcee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	2200      	movs	r2, #0
 800fce8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fcea:	2301      	movs	r3, #1
 800fcec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fcee:	f000 ff79 	bl	8010be4 <vPortExitCritical>

	return xReturn;
 800fcf2:	69fb      	ldr	r3, [r7, #28]
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3720      	adds	r7, #32
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}
 800fcfc:	20003140 	.word	0x20003140
 800fd00:	20003154 	.word	0x20003154

0800fd04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fd04:	b480      	push	{r7}
 800fd06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fd08:	4b03      	ldr	r3, [pc, #12]	; (800fd18 <vTaskMissedYield+0x14>)
 800fd0a:	2201      	movs	r2, #1
 800fd0c:	601a      	str	r2, [r3, #0]
}
 800fd0e:	bf00      	nop
 800fd10:	46bd      	mov	sp, r7
 800fd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd16:	4770      	bx	lr
 800fd18:	20003150 	.word	0x20003150

0800fd1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b082      	sub	sp, #8
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fd24:	f000 f852 	bl	800fdcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fd28:	4b06      	ldr	r3, [pc, #24]	; (800fd44 <prvIdleTask+0x28>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	2b01      	cmp	r3, #1
 800fd2e:	d9f9      	bls.n	800fd24 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fd30:	4b05      	ldr	r3, [pc, #20]	; (800fd48 <prvIdleTask+0x2c>)
 800fd32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd36:	601a      	str	r2, [r3, #0]
 800fd38:	f3bf 8f4f 	dsb	sy
 800fd3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fd40:	e7f0      	b.n	800fd24 <prvIdleTask+0x8>
 800fd42:	bf00      	nop
 800fd44:	20002c6c 	.word	0x20002c6c
 800fd48:	e000ed04 	.word	0xe000ed04

0800fd4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b082      	sub	sp, #8
 800fd50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fd52:	2300      	movs	r3, #0
 800fd54:	607b      	str	r3, [r7, #4]
 800fd56:	e00c      	b.n	800fd72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fd58:	687a      	ldr	r2, [r7, #4]
 800fd5a:	4613      	mov	r3, r2
 800fd5c:	009b      	lsls	r3, r3, #2
 800fd5e:	4413      	add	r3, r2
 800fd60:	009b      	lsls	r3, r3, #2
 800fd62:	4a12      	ldr	r2, [pc, #72]	; (800fdac <prvInitialiseTaskLists+0x60>)
 800fd64:	4413      	add	r3, r2
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7fe f9a8 	bl	800e0bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	3301      	adds	r3, #1
 800fd70:	607b      	str	r3, [r7, #4]
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	2b37      	cmp	r3, #55	; 0x37
 800fd76:	d9ef      	bls.n	800fd58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fd78:	480d      	ldr	r0, [pc, #52]	; (800fdb0 <prvInitialiseTaskLists+0x64>)
 800fd7a:	f7fe f99f 	bl	800e0bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fd7e:	480d      	ldr	r0, [pc, #52]	; (800fdb4 <prvInitialiseTaskLists+0x68>)
 800fd80:	f7fe f99c 	bl	800e0bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fd84:	480c      	ldr	r0, [pc, #48]	; (800fdb8 <prvInitialiseTaskLists+0x6c>)
 800fd86:	f7fe f999 	bl	800e0bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fd8a:	480c      	ldr	r0, [pc, #48]	; (800fdbc <prvInitialiseTaskLists+0x70>)
 800fd8c:	f7fe f996 	bl	800e0bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fd90:	480b      	ldr	r0, [pc, #44]	; (800fdc0 <prvInitialiseTaskLists+0x74>)
 800fd92:	f7fe f993 	bl	800e0bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fd96:	4b0b      	ldr	r3, [pc, #44]	; (800fdc4 <prvInitialiseTaskLists+0x78>)
 800fd98:	4a05      	ldr	r2, [pc, #20]	; (800fdb0 <prvInitialiseTaskLists+0x64>)
 800fd9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fd9c:	4b0a      	ldr	r3, [pc, #40]	; (800fdc8 <prvInitialiseTaskLists+0x7c>)
 800fd9e:	4a05      	ldr	r2, [pc, #20]	; (800fdb4 <prvInitialiseTaskLists+0x68>)
 800fda0:	601a      	str	r2, [r3, #0]
}
 800fda2:	bf00      	nop
 800fda4:	3708      	adds	r7, #8
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	20002c6c 	.word	0x20002c6c
 800fdb0:	200030cc 	.word	0x200030cc
 800fdb4:	200030e0 	.word	0x200030e0
 800fdb8:	200030fc 	.word	0x200030fc
 800fdbc:	20003110 	.word	0x20003110
 800fdc0:	20003128 	.word	0x20003128
 800fdc4:	200030f4 	.word	0x200030f4
 800fdc8:	200030f8 	.word	0x200030f8

0800fdcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b082      	sub	sp, #8
 800fdd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fdd2:	e019      	b.n	800fe08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fdd4:	f000 fed6 	bl	8010b84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdd8:	4b10      	ldr	r3, [pc, #64]	; (800fe1c <prvCheckTasksWaitingTermination+0x50>)
 800fdda:	68db      	ldr	r3, [r3, #12]
 800fddc:	68db      	ldr	r3, [r3, #12]
 800fdde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	3304      	adds	r3, #4
 800fde4:	4618      	mov	r0, r3
 800fde6:	f7fe f9f3 	bl	800e1d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fdea:	4b0d      	ldr	r3, [pc, #52]	; (800fe20 <prvCheckTasksWaitingTermination+0x54>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	3b01      	subs	r3, #1
 800fdf0:	4a0b      	ldr	r2, [pc, #44]	; (800fe20 <prvCheckTasksWaitingTermination+0x54>)
 800fdf2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fdf4:	4b0b      	ldr	r3, [pc, #44]	; (800fe24 <prvCheckTasksWaitingTermination+0x58>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	3b01      	subs	r3, #1
 800fdfa:	4a0a      	ldr	r2, [pc, #40]	; (800fe24 <prvCheckTasksWaitingTermination+0x58>)
 800fdfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fdfe:	f000 fef1 	bl	8010be4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f000 f810 	bl	800fe28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe08:	4b06      	ldr	r3, [pc, #24]	; (800fe24 <prvCheckTasksWaitingTermination+0x58>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d1e1      	bne.n	800fdd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fe10:	bf00      	nop
 800fe12:	bf00      	nop
 800fe14:	3708      	adds	r7, #8
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}
 800fe1a:	bf00      	nop
 800fe1c:	20003110 	.word	0x20003110
 800fe20:	2000313c 	.word	0x2000313c
 800fe24:	20003124 	.word	0x20003124

0800fe28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b084      	sub	sp, #16
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	3354      	adds	r3, #84	; 0x54
 800fe34:	4618      	mov	r0, r3
 800fe36:	f002 fabd 	bl	80123b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d108      	bne.n	800fe56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f001 f889 	bl	8010f60 <vPortFree>
				vPortFree( pxTCB );
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	f001 f886 	bl	8010f60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fe54:	e018      	b.n	800fe88 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fe5c:	2b01      	cmp	r3, #1
 800fe5e:	d103      	bne.n	800fe68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	f001 f87d 	bl	8010f60 <vPortFree>
	}
 800fe66:	e00f      	b.n	800fe88 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fe6e:	2b02      	cmp	r3, #2
 800fe70:	d00a      	beq.n	800fe88 <prvDeleteTCB+0x60>
	__asm volatile
 800fe72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe76:	f383 8811 	msr	BASEPRI, r3
 800fe7a:	f3bf 8f6f 	isb	sy
 800fe7e:	f3bf 8f4f 	dsb	sy
 800fe82:	60fb      	str	r3, [r7, #12]
}
 800fe84:	bf00      	nop
 800fe86:	e7fe      	b.n	800fe86 <prvDeleteTCB+0x5e>
	}
 800fe88:	bf00      	nop
 800fe8a:	3710      	adds	r7, #16
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}

0800fe90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fe90:	b480      	push	{r7}
 800fe92:	b083      	sub	sp, #12
 800fe94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fe96:	4b0c      	ldr	r3, [pc, #48]	; (800fec8 <prvResetNextTaskUnblockTime+0x38>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d104      	bne.n	800feaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fea0:	4b0a      	ldr	r3, [pc, #40]	; (800fecc <prvResetNextTaskUnblockTime+0x3c>)
 800fea2:	f04f 32ff 	mov.w	r2, #4294967295
 800fea6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fea8:	e008      	b.n	800febc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800feaa:	4b07      	ldr	r3, [pc, #28]	; (800fec8 <prvResetNextTaskUnblockTime+0x38>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	68db      	ldr	r3, [r3, #12]
 800feb0:	68db      	ldr	r3, [r3, #12]
 800feb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	685b      	ldr	r3, [r3, #4]
 800feb8:	4a04      	ldr	r2, [pc, #16]	; (800fecc <prvResetNextTaskUnblockTime+0x3c>)
 800feba:	6013      	str	r3, [r2, #0]
}
 800febc:	bf00      	nop
 800febe:	370c      	adds	r7, #12
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr
 800fec8:	200030f4 	.word	0x200030f4
 800fecc:	2000315c 	.word	0x2000315c

0800fed0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fed0:	b480      	push	{r7}
 800fed2:	b083      	sub	sp, #12
 800fed4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fed6:	4b0b      	ldr	r3, [pc, #44]	; (800ff04 <xTaskGetSchedulerState+0x34>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d102      	bne.n	800fee4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fede:	2301      	movs	r3, #1
 800fee0:	607b      	str	r3, [r7, #4]
 800fee2:	e008      	b.n	800fef6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fee4:	4b08      	ldr	r3, [pc, #32]	; (800ff08 <xTaskGetSchedulerState+0x38>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d102      	bne.n	800fef2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800feec:	2302      	movs	r3, #2
 800feee:	607b      	str	r3, [r7, #4]
 800fef0:	e001      	b.n	800fef6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fef2:	2300      	movs	r3, #0
 800fef4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fef6:	687b      	ldr	r3, [r7, #4]
	}
 800fef8:	4618      	mov	r0, r3
 800fefa:	370c      	adds	r7, #12
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr
 800ff04:	20003148 	.word	0x20003148
 800ff08:	20003164 	.word	0x20003164

0800ff0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b084      	sub	sp, #16
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d051      	beq.n	800ffc6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff26:	4b2a      	ldr	r3, [pc, #168]	; (800ffd0 <xTaskPriorityInherit+0xc4>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d241      	bcs.n	800ffb4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	699b      	ldr	r3, [r3, #24]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	db06      	blt.n	800ff46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff38:	4b25      	ldr	r3, [pc, #148]	; (800ffd0 <xTaskPriorityInherit+0xc4>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ff42:	68bb      	ldr	r3, [r7, #8]
 800ff44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	6959      	ldr	r1, [r3, #20]
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff4e:	4613      	mov	r3, r2
 800ff50:	009b      	lsls	r3, r3, #2
 800ff52:	4413      	add	r3, r2
 800ff54:	009b      	lsls	r3, r3, #2
 800ff56:	4a1f      	ldr	r2, [pc, #124]	; (800ffd4 <xTaskPriorityInherit+0xc8>)
 800ff58:	4413      	add	r3, r2
 800ff5a:	4299      	cmp	r1, r3
 800ff5c:	d122      	bne.n	800ffa4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	3304      	adds	r3, #4
 800ff62:	4618      	mov	r0, r3
 800ff64:	f7fe f934 	bl	800e1d0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ff68:	4b19      	ldr	r3, [pc, #100]	; (800ffd0 <xTaskPriorityInherit+0xc4>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff76:	4b18      	ldr	r3, [pc, #96]	; (800ffd8 <xTaskPriorityInherit+0xcc>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	429a      	cmp	r2, r3
 800ff7c:	d903      	bls.n	800ff86 <xTaskPriorityInherit+0x7a>
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff82:	4a15      	ldr	r2, [pc, #84]	; (800ffd8 <xTaskPriorityInherit+0xcc>)
 800ff84:	6013      	str	r3, [r2, #0]
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff8a:	4613      	mov	r3, r2
 800ff8c:	009b      	lsls	r3, r3, #2
 800ff8e:	4413      	add	r3, r2
 800ff90:	009b      	lsls	r3, r3, #2
 800ff92:	4a10      	ldr	r2, [pc, #64]	; (800ffd4 <xTaskPriorityInherit+0xc8>)
 800ff94:	441a      	add	r2, r3
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	3304      	adds	r3, #4
 800ff9a:	4619      	mov	r1, r3
 800ff9c:	4610      	mov	r0, r2
 800ff9e:	f7fe f8ba 	bl	800e116 <vListInsertEnd>
 800ffa2:	e004      	b.n	800ffae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ffa4:	4b0a      	ldr	r3, [pc, #40]	; (800ffd0 <xTaskPriorityInherit+0xc4>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ffae:	2301      	movs	r3, #1
 800ffb0:	60fb      	str	r3, [r7, #12]
 800ffb2:	e008      	b.n	800ffc6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ffb8:	4b05      	ldr	r3, [pc, #20]	; (800ffd0 <xTaskPriorityInherit+0xc4>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d201      	bcs.n	800ffc6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
	}
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3710      	adds	r7, #16
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}
 800ffd0:	20002c68 	.word	0x20002c68
 800ffd4:	20002c6c 	.word	0x20002c6c
 800ffd8:	20003144 	.word	0x20003144

0800ffdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b086      	sub	sp, #24
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d056      	beq.n	80100a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fff2:	4b2e      	ldr	r3, [pc, #184]	; (80100ac <xTaskPriorityDisinherit+0xd0>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	693a      	ldr	r2, [r7, #16]
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d00a      	beq.n	8010012 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800fffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010000:	f383 8811 	msr	BASEPRI, r3
 8010004:	f3bf 8f6f 	isb	sy
 8010008:	f3bf 8f4f 	dsb	sy
 801000c:	60fb      	str	r3, [r7, #12]
}
 801000e:	bf00      	nop
 8010010:	e7fe      	b.n	8010010 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010012:	693b      	ldr	r3, [r7, #16]
 8010014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010016:	2b00      	cmp	r3, #0
 8010018:	d10a      	bne.n	8010030 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801001a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801001e:	f383 8811 	msr	BASEPRI, r3
 8010022:	f3bf 8f6f 	isb	sy
 8010026:	f3bf 8f4f 	dsb	sy
 801002a:	60bb      	str	r3, [r7, #8]
}
 801002c:	bf00      	nop
 801002e:	e7fe      	b.n	801002e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010034:	1e5a      	subs	r2, r3, #1
 8010036:	693b      	ldr	r3, [r7, #16]
 8010038:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801003a:	693b      	ldr	r3, [r7, #16]
 801003c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801003e:	693b      	ldr	r3, [r7, #16]
 8010040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010042:	429a      	cmp	r2, r3
 8010044:	d02c      	beq.n	80100a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010046:	693b      	ldr	r3, [r7, #16]
 8010048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801004a:	2b00      	cmp	r3, #0
 801004c:	d128      	bne.n	80100a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801004e:	693b      	ldr	r3, [r7, #16]
 8010050:	3304      	adds	r3, #4
 8010052:	4618      	mov	r0, r3
 8010054:	f7fe f8bc 	bl	800e1d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010058:	693b      	ldr	r3, [r7, #16]
 801005a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801005c:	693b      	ldr	r3, [r7, #16]
 801005e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010060:	693b      	ldr	r3, [r7, #16]
 8010062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010064:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010068:	693b      	ldr	r3, [r7, #16]
 801006a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010070:	4b0f      	ldr	r3, [pc, #60]	; (80100b0 <xTaskPriorityDisinherit+0xd4>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	429a      	cmp	r2, r3
 8010076:	d903      	bls.n	8010080 <xTaskPriorityDisinherit+0xa4>
 8010078:	693b      	ldr	r3, [r7, #16]
 801007a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801007c:	4a0c      	ldr	r2, [pc, #48]	; (80100b0 <xTaskPriorityDisinherit+0xd4>)
 801007e:	6013      	str	r3, [r2, #0]
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010084:	4613      	mov	r3, r2
 8010086:	009b      	lsls	r3, r3, #2
 8010088:	4413      	add	r3, r2
 801008a:	009b      	lsls	r3, r3, #2
 801008c:	4a09      	ldr	r2, [pc, #36]	; (80100b4 <xTaskPriorityDisinherit+0xd8>)
 801008e:	441a      	add	r2, r3
 8010090:	693b      	ldr	r3, [r7, #16]
 8010092:	3304      	adds	r3, #4
 8010094:	4619      	mov	r1, r3
 8010096:	4610      	mov	r0, r2
 8010098:	f7fe f83d 	bl	800e116 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801009c:	2301      	movs	r3, #1
 801009e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80100a0:	697b      	ldr	r3, [r7, #20]
	}
 80100a2:	4618      	mov	r0, r3
 80100a4:	3718      	adds	r7, #24
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}
 80100aa:	bf00      	nop
 80100ac:	20002c68 	.word	0x20002c68
 80100b0:	20003144 	.word	0x20003144
 80100b4:	20002c6c 	.word	0x20002c6c

080100b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b088      	sub	sp, #32
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80100c6:	2301      	movs	r3, #1
 80100c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d06a      	beq.n	80101a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80100d0:	69bb      	ldr	r3, [r7, #24]
 80100d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d10a      	bne.n	80100ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80100d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100dc:	f383 8811 	msr	BASEPRI, r3
 80100e0:	f3bf 8f6f 	isb	sy
 80100e4:	f3bf 8f4f 	dsb	sy
 80100e8:	60fb      	str	r3, [r7, #12]
}
 80100ea:	bf00      	nop
 80100ec:	e7fe      	b.n	80100ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80100ee:	69bb      	ldr	r3, [r7, #24]
 80100f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100f2:	683a      	ldr	r2, [r7, #0]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d902      	bls.n	80100fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	61fb      	str	r3, [r7, #28]
 80100fc:	e002      	b.n	8010104 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80100fe:	69bb      	ldr	r3, [r7, #24]
 8010100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010102:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010104:	69bb      	ldr	r3, [r7, #24]
 8010106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010108:	69fa      	ldr	r2, [r7, #28]
 801010a:	429a      	cmp	r2, r3
 801010c:	d04b      	beq.n	80101a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801010e:	69bb      	ldr	r3, [r7, #24]
 8010110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010112:	697a      	ldr	r2, [r7, #20]
 8010114:	429a      	cmp	r2, r3
 8010116:	d146      	bne.n	80101a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010118:	4b25      	ldr	r3, [pc, #148]	; (80101b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	69ba      	ldr	r2, [r7, #24]
 801011e:	429a      	cmp	r2, r3
 8010120:	d10a      	bne.n	8010138 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8010122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010126:	f383 8811 	msr	BASEPRI, r3
 801012a:	f3bf 8f6f 	isb	sy
 801012e:	f3bf 8f4f 	dsb	sy
 8010132:	60bb      	str	r3, [r7, #8]
}
 8010134:	bf00      	nop
 8010136:	e7fe      	b.n	8010136 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010138:	69bb      	ldr	r3, [r7, #24]
 801013a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801013c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801013e:	69bb      	ldr	r3, [r7, #24]
 8010140:	69fa      	ldr	r2, [r7, #28]
 8010142:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010144:	69bb      	ldr	r3, [r7, #24]
 8010146:	699b      	ldr	r3, [r3, #24]
 8010148:	2b00      	cmp	r3, #0
 801014a:	db04      	blt.n	8010156 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801014c:	69fb      	ldr	r3, [r7, #28]
 801014e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010152:	69bb      	ldr	r3, [r7, #24]
 8010154:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010156:	69bb      	ldr	r3, [r7, #24]
 8010158:	6959      	ldr	r1, [r3, #20]
 801015a:	693a      	ldr	r2, [r7, #16]
 801015c:	4613      	mov	r3, r2
 801015e:	009b      	lsls	r3, r3, #2
 8010160:	4413      	add	r3, r2
 8010162:	009b      	lsls	r3, r3, #2
 8010164:	4a13      	ldr	r2, [pc, #76]	; (80101b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010166:	4413      	add	r3, r2
 8010168:	4299      	cmp	r1, r3
 801016a:	d11c      	bne.n	80101a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801016c:	69bb      	ldr	r3, [r7, #24]
 801016e:	3304      	adds	r3, #4
 8010170:	4618      	mov	r0, r3
 8010172:	f7fe f82d 	bl	800e1d0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010176:	69bb      	ldr	r3, [r7, #24]
 8010178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801017a:	4b0f      	ldr	r3, [pc, #60]	; (80101b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	429a      	cmp	r2, r3
 8010180:	d903      	bls.n	801018a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8010182:	69bb      	ldr	r3, [r7, #24]
 8010184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010186:	4a0c      	ldr	r2, [pc, #48]	; (80101b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010188:	6013      	str	r3, [r2, #0]
 801018a:	69bb      	ldr	r3, [r7, #24]
 801018c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801018e:	4613      	mov	r3, r2
 8010190:	009b      	lsls	r3, r3, #2
 8010192:	4413      	add	r3, r2
 8010194:	009b      	lsls	r3, r3, #2
 8010196:	4a07      	ldr	r2, [pc, #28]	; (80101b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010198:	441a      	add	r2, r3
 801019a:	69bb      	ldr	r3, [r7, #24]
 801019c:	3304      	adds	r3, #4
 801019e:	4619      	mov	r1, r3
 80101a0:	4610      	mov	r0, r2
 80101a2:	f7fd ffb8 	bl	800e116 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80101a6:	bf00      	nop
 80101a8:	3720      	adds	r7, #32
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}
 80101ae:	bf00      	nop
 80101b0:	20002c68 	.word	0x20002c68
 80101b4:	20002c6c 	.word	0x20002c6c
 80101b8:	20003144 	.word	0x20003144

080101bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80101bc:	b480      	push	{r7}
 80101be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80101c0:	4b07      	ldr	r3, [pc, #28]	; (80101e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d004      	beq.n	80101d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80101c8:	4b05      	ldr	r3, [pc, #20]	; (80101e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80101ce:	3201      	adds	r2, #1
 80101d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80101d2:	4b03      	ldr	r3, [pc, #12]	; (80101e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80101d4:	681b      	ldr	r3, [r3, #0]
	}
 80101d6:	4618      	mov	r0, r3
 80101d8:	46bd      	mov	sp, r7
 80101da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101de:	4770      	bx	lr
 80101e0:	20002c68 	.word	0x20002c68

080101e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b084      	sub	sp, #16
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80101ee:	4b21      	ldr	r3, [pc, #132]	; (8010274 <prvAddCurrentTaskToDelayedList+0x90>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101f4:	4b20      	ldr	r3, [pc, #128]	; (8010278 <prvAddCurrentTaskToDelayedList+0x94>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	3304      	adds	r3, #4
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7fd ffe8 	bl	800e1d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010206:	d10a      	bne.n	801021e <prvAddCurrentTaskToDelayedList+0x3a>
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d007      	beq.n	801021e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801020e:	4b1a      	ldr	r3, [pc, #104]	; (8010278 <prvAddCurrentTaskToDelayedList+0x94>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	3304      	adds	r3, #4
 8010214:	4619      	mov	r1, r3
 8010216:	4819      	ldr	r0, [pc, #100]	; (801027c <prvAddCurrentTaskToDelayedList+0x98>)
 8010218:	f7fd ff7d 	bl	800e116 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801021c:	e026      	b.n	801026c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801021e:	68fa      	ldr	r2, [r7, #12]
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	4413      	add	r3, r2
 8010224:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010226:	4b14      	ldr	r3, [pc, #80]	; (8010278 <prvAddCurrentTaskToDelayedList+0x94>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	68ba      	ldr	r2, [r7, #8]
 801022c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801022e:	68ba      	ldr	r2, [r7, #8]
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	429a      	cmp	r2, r3
 8010234:	d209      	bcs.n	801024a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010236:	4b12      	ldr	r3, [pc, #72]	; (8010280 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	4b0f      	ldr	r3, [pc, #60]	; (8010278 <prvAddCurrentTaskToDelayedList+0x94>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	3304      	adds	r3, #4
 8010240:	4619      	mov	r1, r3
 8010242:	4610      	mov	r0, r2
 8010244:	f7fd ff8b 	bl	800e15e <vListInsert>
}
 8010248:	e010      	b.n	801026c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801024a:	4b0e      	ldr	r3, [pc, #56]	; (8010284 <prvAddCurrentTaskToDelayedList+0xa0>)
 801024c:	681a      	ldr	r2, [r3, #0]
 801024e:	4b0a      	ldr	r3, [pc, #40]	; (8010278 <prvAddCurrentTaskToDelayedList+0x94>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	3304      	adds	r3, #4
 8010254:	4619      	mov	r1, r3
 8010256:	4610      	mov	r0, r2
 8010258:	f7fd ff81 	bl	800e15e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801025c:	4b0a      	ldr	r3, [pc, #40]	; (8010288 <prvAddCurrentTaskToDelayedList+0xa4>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	68ba      	ldr	r2, [r7, #8]
 8010262:	429a      	cmp	r2, r3
 8010264:	d202      	bcs.n	801026c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010266:	4a08      	ldr	r2, [pc, #32]	; (8010288 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	6013      	str	r3, [r2, #0]
}
 801026c:	bf00      	nop
 801026e:	3710      	adds	r7, #16
 8010270:	46bd      	mov	sp, r7
 8010272:	bd80      	pop	{r7, pc}
 8010274:	20003140 	.word	0x20003140
 8010278:	20002c68 	.word	0x20002c68
 801027c:	20003128 	.word	0x20003128
 8010280:	200030f8 	.word	0x200030f8
 8010284:	200030f4 	.word	0x200030f4
 8010288:	2000315c 	.word	0x2000315c

0801028c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b08a      	sub	sp, #40	; 0x28
 8010290:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010292:	2300      	movs	r3, #0
 8010294:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010296:	f000 fb07 	bl	80108a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801029a:	4b1c      	ldr	r3, [pc, #112]	; (801030c <xTimerCreateTimerTask+0x80>)
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d021      	beq.n	80102e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80102a2:	2300      	movs	r3, #0
 80102a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80102a6:	2300      	movs	r3, #0
 80102a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80102aa:	1d3a      	adds	r2, r7, #4
 80102ac:	f107 0108 	add.w	r1, r7, #8
 80102b0:	f107 030c 	add.w	r3, r7, #12
 80102b4:	4618      	mov	r0, r3
 80102b6:	f7fd fee7 	bl	800e088 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80102ba:	6879      	ldr	r1, [r7, #4]
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	68fa      	ldr	r2, [r7, #12]
 80102c0:	9202      	str	r2, [sp, #8]
 80102c2:	9301      	str	r3, [sp, #4]
 80102c4:	2302      	movs	r3, #2
 80102c6:	9300      	str	r3, [sp, #0]
 80102c8:	2300      	movs	r3, #0
 80102ca:	460a      	mov	r2, r1
 80102cc:	4910      	ldr	r1, [pc, #64]	; (8010310 <xTimerCreateTimerTask+0x84>)
 80102ce:	4811      	ldr	r0, [pc, #68]	; (8010314 <xTimerCreateTimerTask+0x88>)
 80102d0:	f7fe ffb6 	bl	800f240 <xTaskCreateStatic>
 80102d4:	4603      	mov	r3, r0
 80102d6:	4a10      	ldr	r2, [pc, #64]	; (8010318 <xTimerCreateTimerTask+0x8c>)
 80102d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80102da:	4b0f      	ldr	r3, [pc, #60]	; (8010318 <xTimerCreateTimerTask+0x8c>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d001      	beq.n	80102e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80102e2:	2301      	movs	r3, #1
 80102e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d10a      	bne.n	8010302 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80102ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f0:	f383 8811 	msr	BASEPRI, r3
 80102f4:	f3bf 8f6f 	isb	sy
 80102f8:	f3bf 8f4f 	dsb	sy
 80102fc:	613b      	str	r3, [r7, #16]
}
 80102fe:	bf00      	nop
 8010300:	e7fe      	b.n	8010300 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010302:	697b      	ldr	r3, [r7, #20]
}
 8010304:	4618      	mov	r0, r3
 8010306:	3718      	adds	r7, #24
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}
 801030c:	20003198 	.word	0x20003198
 8010310:	08012e38 	.word	0x08012e38
 8010314:	08010451 	.word	0x08010451
 8010318:	2000319c 	.word	0x2000319c

0801031c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b08a      	sub	sp, #40	; 0x28
 8010320:	af00      	add	r7, sp, #0
 8010322:	60f8      	str	r0, [r7, #12]
 8010324:	60b9      	str	r1, [r7, #8]
 8010326:	607a      	str	r2, [r7, #4]
 8010328:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801032a:	2300      	movs	r3, #0
 801032c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d10a      	bne.n	801034a <xTimerGenericCommand+0x2e>
	__asm volatile
 8010334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010338:	f383 8811 	msr	BASEPRI, r3
 801033c:	f3bf 8f6f 	isb	sy
 8010340:	f3bf 8f4f 	dsb	sy
 8010344:	623b      	str	r3, [r7, #32]
}
 8010346:	bf00      	nop
 8010348:	e7fe      	b.n	8010348 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801034a:	4b1a      	ldr	r3, [pc, #104]	; (80103b4 <xTimerGenericCommand+0x98>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d02a      	beq.n	80103a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	2b05      	cmp	r3, #5
 8010362:	dc18      	bgt.n	8010396 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010364:	f7ff fdb4 	bl	800fed0 <xTaskGetSchedulerState>
 8010368:	4603      	mov	r3, r0
 801036a:	2b02      	cmp	r3, #2
 801036c:	d109      	bne.n	8010382 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801036e:	4b11      	ldr	r3, [pc, #68]	; (80103b4 <xTimerGenericCommand+0x98>)
 8010370:	6818      	ldr	r0, [r3, #0]
 8010372:	f107 0110 	add.w	r1, r7, #16
 8010376:	2300      	movs	r3, #0
 8010378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801037a:	f7fe f8fb 	bl	800e574 <xQueueGenericSend>
 801037e:	6278      	str	r0, [r7, #36]	; 0x24
 8010380:	e012      	b.n	80103a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010382:	4b0c      	ldr	r3, [pc, #48]	; (80103b4 <xTimerGenericCommand+0x98>)
 8010384:	6818      	ldr	r0, [r3, #0]
 8010386:	f107 0110 	add.w	r1, r7, #16
 801038a:	2300      	movs	r3, #0
 801038c:	2200      	movs	r2, #0
 801038e:	f7fe f8f1 	bl	800e574 <xQueueGenericSend>
 8010392:	6278      	str	r0, [r7, #36]	; 0x24
 8010394:	e008      	b.n	80103a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010396:	4b07      	ldr	r3, [pc, #28]	; (80103b4 <xTimerGenericCommand+0x98>)
 8010398:	6818      	ldr	r0, [r3, #0]
 801039a:	f107 0110 	add.w	r1, r7, #16
 801039e:	2300      	movs	r3, #0
 80103a0:	683a      	ldr	r2, [r7, #0]
 80103a2:	f7fe f9e5 	bl	800e770 <xQueueGenericSendFromISR>
 80103a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80103a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80103aa:	4618      	mov	r0, r3
 80103ac:	3728      	adds	r7, #40	; 0x28
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}
 80103b2:	bf00      	nop
 80103b4:	20003198 	.word	0x20003198

080103b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b088      	sub	sp, #32
 80103bc:	af02      	add	r7, sp, #8
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103c2:	4b22      	ldr	r3, [pc, #136]	; (801044c <prvProcessExpiredTimer+0x94>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	68db      	ldr	r3, [r3, #12]
 80103c8:	68db      	ldr	r3, [r3, #12]
 80103ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80103cc:	697b      	ldr	r3, [r7, #20]
 80103ce:	3304      	adds	r3, #4
 80103d0:	4618      	mov	r0, r3
 80103d2:	f7fd fefd 	bl	800e1d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80103dc:	f003 0304 	and.w	r3, r3, #4
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d022      	beq.n	801042a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	699a      	ldr	r2, [r3, #24]
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	18d1      	adds	r1, r2, r3
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	683a      	ldr	r2, [r7, #0]
 80103f0:	6978      	ldr	r0, [r7, #20]
 80103f2:	f000 f8d1 	bl	8010598 <prvInsertTimerInActiveList>
 80103f6:	4603      	mov	r3, r0
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d01f      	beq.n	801043c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80103fc:	2300      	movs	r3, #0
 80103fe:	9300      	str	r3, [sp, #0]
 8010400:	2300      	movs	r3, #0
 8010402:	687a      	ldr	r2, [r7, #4]
 8010404:	2100      	movs	r1, #0
 8010406:	6978      	ldr	r0, [r7, #20]
 8010408:	f7ff ff88 	bl	801031c <xTimerGenericCommand>
 801040c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801040e:	693b      	ldr	r3, [r7, #16]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d113      	bne.n	801043c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010418:	f383 8811 	msr	BASEPRI, r3
 801041c:	f3bf 8f6f 	isb	sy
 8010420:	f3bf 8f4f 	dsb	sy
 8010424:	60fb      	str	r3, [r7, #12]
}
 8010426:	bf00      	nop
 8010428:	e7fe      	b.n	8010428 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801042a:	697b      	ldr	r3, [r7, #20]
 801042c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010430:	f023 0301 	bic.w	r3, r3, #1
 8010434:	b2da      	uxtb	r2, r3
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	6a1b      	ldr	r3, [r3, #32]
 8010440:	6978      	ldr	r0, [r7, #20]
 8010442:	4798      	blx	r3
}
 8010444:	bf00      	nop
 8010446:	3718      	adds	r7, #24
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}
 801044c:	20003190 	.word	0x20003190

08010450 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b084      	sub	sp, #16
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010458:	f107 0308 	add.w	r3, r7, #8
 801045c:	4618      	mov	r0, r3
 801045e:	f000 f857 	bl	8010510 <prvGetNextExpireTime>
 8010462:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	4619      	mov	r1, r3
 8010468:	68f8      	ldr	r0, [r7, #12]
 801046a:	f000 f803 	bl	8010474 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801046e:	f000 f8d5 	bl	801061c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010472:	e7f1      	b.n	8010458 <prvTimerTask+0x8>

08010474 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b084      	sub	sp, #16
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801047e:	f7ff f93b 	bl	800f6f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010482:	f107 0308 	add.w	r3, r7, #8
 8010486:	4618      	mov	r0, r3
 8010488:	f000 f866 	bl	8010558 <prvSampleTimeNow>
 801048c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d130      	bne.n	80104f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d10a      	bne.n	80104b0 <prvProcessTimerOrBlockTask+0x3c>
 801049a:	687a      	ldr	r2, [r7, #4]
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	429a      	cmp	r2, r3
 80104a0:	d806      	bhi.n	80104b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80104a2:	f7ff f937 	bl	800f714 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80104a6:	68f9      	ldr	r1, [r7, #12]
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f7ff ff85 	bl	80103b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80104ae:	e024      	b.n	80104fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80104b0:	683b      	ldr	r3, [r7, #0]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d008      	beq.n	80104c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80104b6:	4b13      	ldr	r3, [pc, #76]	; (8010504 <prvProcessTimerOrBlockTask+0x90>)
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d101      	bne.n	80104c4 <prvProcessTimerOrBlockTask+0x50>
 80104c0:	2301      	movs	r3, #1
 80104c2:	e000      	b.n	80104c6 <prvProcessTimerOrBlockTask+0x52>
 80104c4:	2300      	movs	r3, #0
 80104c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80104c8:	4b0f      	ldr	r3, [pc, #60]	; (8010508 <prvProcessTimerOrBlockTask+0x94>)
 80104ca:	6818      	ldr	r0, [r3, #0]
 80104cc:	687a      	ldr	r2, [r7, #4]
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	1ad3      	subs	r3, r2, r3
 80104d2:	683a      	ldr	r2, [r7, #0]
 80104d4:	4619      	mov	r1, r3
 80104d6:	f7fe fe7f 	bl	800f1d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80104da:	f7ff f91b 	bl	800f714 <xTaskResumeAll>
 80104de:	4603      	mov	r3, r0
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d10a      	bne.n	80104fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80104e4:	4b09      	ldr	r3, [pc, #36]	; (801050c <prvProcessTimerOrBlockTask+0x98>)
 80104e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104ea:	601a      	str	r2, [r3, #0]
 80104ec:	f3bf 8f4f 	dsb	sy
 80104f0:	f3bf 8f6f 	isb	sy
}
 80104f4:	e001      	b.n	80104fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80104f6:	f7ff f90d 	bl	800f714 <xTaskResumeAll>
}
 80104fa:	bf00      	nop
 80104fc:	3710      	adds	r7, #16
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}
 8010502:	bf00      	nop
 8010504:	20003194 	.word	0x20003194
 8010508:	20003198 	.word	0x20003198
 801050c:	e000ed04 	.word	0xe000ed04

08010510 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010510:	b480      	push	{r7}
 8010512:	b085      	sub	sp, #20
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010518:	4b0e      	ldr	r3, [pc, #56]	; (8010554 <prvGetNextExpireTime+0x44>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d101      	bne.n	8010526 <prvGetNextExpireTime+0x16>
 8010522:	2201      	movs	r2, #1
 8010524:	e000      	b.n	8010528 <prvGetNextExpireTime+0x18>
 8010526:	2200      	movs	r2, #0
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d105      	bne.n	8010540 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010534:	4b07      	ldr	r3, [pc, #28]	; (8010554 <prvGetNextExpireTime+0x44>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	68db      	ldr	r3, [r3, #12]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	60fb      	str	r3, [r7, #12]
 801053e:	e001      	b.n	8010544 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010540:	2300      	movs	r3, #0
 8010542:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010544:	68fb      	ldr	r3, [r7, #12]
}
 8010546:	4618      	mov	r0, r3
 8010548:	3714      	adds	r7, #20
 801054a:	46bd      	mov	sp, r7
 801054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010550:	4770      	bx	lr
 8010552:	bf00      	nop
 8010554:	20003190 	.word	0x20003190

08010558 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b084      	sub	sp, #16
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010560:	f7ff f976 	bl	800f850 <xTaskGetTickCount>
 8010564:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010566:	4b0b      	ldr	r3, [pc, #44]	; (8010594 <prvSampleTimeNow+0x3c>)
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	68fa      	ldr	r2, [r7, #12]
 801056c:	429a      	cmp	r2, r3
 801056e:	d205      	bcs.n	801057c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010570:	f000 f936 	bl	80107e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2201      	movs	r2, #1
 8010578:	601a      	str	r2, [r3, #0]
 801057a:	e002      	b.n	8010582 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2200      	movs	r2, #0
 8010580:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010582:	4a04      	ldr	r2, [pc, #16]	; (8010594 <prvSampleTimeNow+0x3c>)
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010588:	68fb      	ldr	r3, [r7, #12]
}
 801058a:	4618      	mov	r0, r3
 801058c:	3710      	adds	r7, #16
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
 8010592:	bf00      	nop
 8010594:	200031a0 	.word	0x200031a0

08010598 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b086      	sub	sp, #24
 801059c:	af00      	add	r7, sp, #0
 801059e:	60f8      	str	r0, [r7, #12]
 80105a0:	60b9      	str	r1, [r7, #8]
 80105a2:	607a      	str	r2, [r7, #4]
 80105a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80105a6:	2300      	movs	r3, #0
 80105a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	68ba      	ldr	r2, [r7, #8]
 80105ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	68fa      	ldr	r2, [r7, #12]
 80105b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80105b6:	68ba      	ldr	r2, [r7, #8]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	429a      	cmp	r2, r3
 80105bc:	d812      	bhi.n	80105e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105be:	687a      	ldr	r2, [r7, #4]
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	1ad2      	subs	r2, r2, r3
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	699b      	ldr	r3, [r3, #24]
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d302      	bcc.n	80105d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80105cc:	2301      	movs	r3, #1
 80105ce:	617b      	str	r3, [r7, #20]
 80105d0:	e01b      	b.n	801060a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80105d2:	4b10      	ldr	r3, [pc, #64]	; (8010614 <prvInsertTimerInActiveList+0x7c>)
 80105d4:	681a      	ldr	r2, [r3, #0]
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	3304      	adds	r3, #4
 80105da:	4619      	mov	r1, r3
 80105dc:	4610      	mov	r0, r2
 80105de:	f7fd fdbe 	bl	800e15e <vListInsert>
 80105e2:	e012      	b.n	801060a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80105e4:	687a      	ldr	r2, [r7, #4]
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d206      	bcs.n	80105fa <prvInsertTimerInActiveList+0x62>
 80105ec:	68ba      	ldr	r2, [r7, #8]
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d302      	bcc.n	80105fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80105f4:	2301      	movs	r3, #1
 80105f6:	617b      	str	r3, [r7, #20]
 80105f8:	e007      	b.n	801060a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80105fa:	4b07      	ldr	r3, [pc, #28]	; (8010618 <prvInsertTimerInActiveList+0x80>)
 80105fc:	681a      	ldr	r2, [r3, #0]
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	3304      	adds	r3, #4
 8010602:	4619      	mov	r1, r3
 8010604:	4610      	mov	r0, r2
 8010606:	f7fd fdaa 	bl	800e15e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801060a:	697b      	ldr	r3, [r7, #20]
}
 801060c:	4618      	mov	r0, r3
 801060e:	3718      	adds	r7, #24
 8010610:	46bd      	mov	sp, r7
 8010612:	bd80      	pop	{r7, pc}
 8010614:	20003194 	.word	0x20003194
 8010618:	20003190 	.word	0x20003190

0801061c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b08e      	sub	sp, #56	; 0x38
 8010620:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010622:	e0ca      	b.n	80107ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2b00      	cmp	r3, #0
 8010628:	da18      	bge.n	801065c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801062a:	1d3b      	adds	r3, r7, #4
 801062c:	3304      	adds	r3, #4
 801062e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010632:	2b00      	cmp	r3, #0
 8010634:	d10a      	bne.n	801064c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010636:	f04f 0350 	mov.w	r3, #80	; 0x50
 801063a:	f383 8811 	msr	BASEPRI, r3
 801063e:	f3bf 8f6f 	isb	sy
 8010642:	f3bf 8f4f 	dsb	sy
 8010646:	61fb      	str	r3, [r7, #28]
}
 8010648:	bf00      	nop
 801064a:	e7fe      	b.n	801064a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801064c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010652:	6850      	ldr	r0, [r2, #4]
 8010654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010656:	6892      	ldr	r2, [r2, #8]
 8010658:	4611      	mov	r1, r2
 801065a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2b00      	cmp	r3, #0
 8010660:	f2c0 80aa 	blt.w	80107b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801066a:	695b      	ldr	r3, [r3, #20]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d004      	beq.n	801067a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010672:	3304      	adds	r3, #4
 8010674:	4618      	mov	r0, r3
 8010676:	f7fd fdab 	bl	800e1d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801067a:	463b      	mov	r3, r7
 801067c:	4618      	mov	r0, r3
 801067e:	f7ff ff6b 	bl	8010558 <prvSampleTimeNow>
 8010682:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2b09      	cmp	r3, #9
 8010688:	f200 8097 	bhi.w	80107ba <prvProcessReceivedCommands+0x19e>
 801068c:	a201      	add	r2, pc, #4	; (adr r2, 8010694 <prvProcessReceivedCommands+0x78>)
 801068e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010692:	bf00      	nop
 8010694:	080106bd 	.word	0x080106bd
 8010698:	080106bd 	.word	0x080106bd
 801069c:	080106bd 	.word	0x080106bd
 80106a0:	08010731 	.word	0x08010731
 80106a4:	08010745 	.word	0x08010745
 80106a8:	0801078f 	.word	0x0801078f
 80106ac:	080106bd 	.word	0x080106bd
 80106b0:	080106bd 	.word	0x080106bd
 80106b4:	08010731 	.word	0x08010731
 80106b8:	08010745 	.word	0x08010745
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80106bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80106c2:	f043 0301 	orr.w	r3, r3, #1
 80106c6:	b2da      	uxtb	r2, r3
 80106c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80106ce:	68ba      	ldr	r2, [r7, #8]
 80106d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106d2:	699b      	ldr	r3, [r3, #24]
 80106d4:	18d1      	adds	r1, r2, r3
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106dc:	f7ff ff5c 	bl	8010598 <prvInsertTimerInActiveList>
 80106e0:	4603      	mov	r3, r0
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d069      	beq.n	80107ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80106e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e8:	6a1b      	ldr	r3, [r3, #32]
 80106ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80106ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80106f4:	f003 0304 	and.w	r3, r3, #4
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d05e      	beq.n	80107ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80106fc:	68ba      	ldr	r2, [r7, #8]
 80106fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010700:	699b      	ldr	r3, [r3, #24]
 8010702:	441a      	add	r2, r3
 8010704:	2300      	movs	r3, #0
 8010706:	9300      	str	r3, [sp, #0]
 8010708:	2300      	movs	r3, #0
 801070a:	2100      	movs	r1, #0
 801070c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801070e:	f7ff fe05 	bl	801031c <xTimerGenericCommand>
 8010712:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010714:	6a3b      	ldr	r3, [r7, #32]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d14f      	bne.n	80107ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801071a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801071e:	f383 8811 	msr	BASEPRI, r3
 8010722:	f3bf 8f6f 	isb	sy
 8010726:	f3bf 8f4f 	dsb	sy
 801072a:	61bb      	str	r3, [r7, #24]
}
 801072c:	bf00      	nop
 801072e:	e7fe      	b.n	801072e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010736:	f023 0301 	bic.w	r3, r3, #1
 801073a:	b2da      	uxtb	r2, r3
 801073c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801073e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010742:	e03a      	b.n	80107ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010746:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801074a:	f043 0301 	orr.w	r3, r3, #1
 801074e:	b2da      	uxtb	r2, r3
 8010750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010752:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010756:	68ba      	ldr	r2, [r7, #8]
 8010758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801075a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801075c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801075e:	699b      	ldr	r3, [r3, #24]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d10a      	bne.n	801077a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010768:	f383 8811 	msr	BASEPRI, r3
 801076c:	f3bf 8f6f 	isb	sy
 8010770:	f3bf 8f4f 	dsb	sy
 8010774:	617b      	str	r3, [r7, #20]
}
 8010776:	bf00      	nop
 8010778:	e7fe      	b.n	8010778 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801077a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801077c:	699a      	ldr	r2, [r3, #24]
 801077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010780:	18d1      	adds	r1, r2, r3
 8010782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010788:	f7ff ff06 	bl	8010598 <prvInsertTimerInActiveList>
					break;
 801078c:	e015      	b.n	80107ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801078e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010794:	f003 0302 	and.w	r3, r3, #2
 8010798:	2b00      	cmp	r3, #0
 801079a:	d103      	bne.n	80107a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801079c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801079e:	f000 fbdf 	bl	8010f60 <vPortFree>
 80107a2:	e00a      	b.n	80107ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80107a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107aa:	f023 0301 	bic.w	r3, r3, #1
 80107ae:	b2da      	uxtb	r2, r3
 80107b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80107b6:	e000      	b.n	80107ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80107b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80107ba:	4b08      	ldr	r3, [pc, #32]	; (80107dc <prvProcessReceivedCommands+0x1c0>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	1d39      	adds	r1, r7, #4
 80107c0:	2200      	movs	r2, #0
 80107c2:	4618      	mov	r0, r3
 80107c4:	f7fe f8fc 	bl	800e9c0 <xQueueReceive>
 80107c8:	4603      	mov	r3, r0
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	f47f af2a 	bne.w	8010624 <prvProcessReceivedCommands+0x8>
	}
}
 80107d0:	bf00      	nop
 80107d2:	bf00      	nop
 80107d4:	3730      	adds	r7, #48	; 0x30
 80107d6:	46bd      	mov	sp, r7
 80107d8:	bd80      	pop	{r7, pc}
 80107da:	bf00      	nop
 80107dc:	20003198 	.word	0x20003198

080107e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b088      	sub	sp, #32
 80107e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80107e6:	e048      	b.n	801087a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80107e8:	4b2d      	ldr	r3, [pc, #180]	; (80108a0 <prvSwitchTimerLists+0xc0>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	68db      	ldr	r3, [r3, #12]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107f2:	4b2b      	ldr	r3, [pc, #172]	; (80108a0 <prvSwitchTimerLists+0xc0>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	68db      	ldr	r3, [r3, #12]
 80107f8:	68db      	ldr	r3, [r3, #12]
 80107fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	3304      	adds	r3, #4
 8010800:	4618      	mov	r0, r3
 8010802:	f7fd fce5 	bl	800e1d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	6a1b      	ldr	r3, [r3, #32]
 801080a:	68f8      	ldr	r0, [r7, #12]
 801080c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010814:	f003 0304 	and.w	r3, r3, #4
 8010818:	2b00      	cmp	r3, #0
 801081a:	d02e      	beq.n	801087a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	699b      	ldr	r3, [r3, #24]
 8010820:	693a      	ldr	r2, [r7, #16]
 8010822:	4413      	add	r3, r2
 8010824:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010826:	68ba      	ldr	r2, [r7, #8]
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	429a      	cmp	r2, r3
 801082c:	d90e      	bls.n	801084c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	68ba      	ldr	r2, [r7, #8]
 8010832:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	68fa      	ldr	r2, [r7, #12]
 8010838:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801083a:	4b19      	ldr	r3, [pc, #100]	; (80108a0 <prvSwitchTimerLists+0xc0>)
 801083c:	681a      	ldr	r2, [r3, #0]
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	3304      	adds	r3, #4
 8010842:	4619      	mov	r1, r3
 8010844:	4610      	mov	r0, r2
 8010846:	f7fd fc8a 	bl	800e15e <vListInsert>
 801084a:	e016      	b.n	801087a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801084c:	2300      	movs	r3, #0
 801084e:	9300      	str	r3, [sp, #0]
 8010850:	2300      	movs	r3, #0
 8010852:	693a      	ldr	r2, [r7, #16]
 8010854:	2100      	movs	r1, #0
 8010856:	68f8      	ldr	r0, [r7, #12]
 8010858:	f7ff fd60 	bl	801031c <xTimerGenericCommand>
 801085c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d10a      	bne.n	801087a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010868:	f383 8811 	msr	BASEPRI, r3
 801086c:	f3bf 8f6f 	isb	sy
 8010870:	f3bf 8f4f 	dsb	sy
 8010874:	603b      	str	r3, [r7, #0]
}
 8010876:	bf00      	nop
 8010878:	e7fe      	b.n	8010878 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801087a:	4b09      	ldr	r3, [pc, #36]	; (80108a0 <prvSwitchTimerLists+0xc0>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d1b1      	bne.n	80107e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010884:	4b06      	ldr	r3, [pc, #24]	; (80108a0 <prvSwitchTimerLists+0xc0>)
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801088a:	4b06      	ldr	r3, [pc, #24]	; (80108a4 <prvSwitchTimerLists+0xc4>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	4a04      	ldr	r2, [pc, #16]	; (80108a0 <prvSwitchTimerLists+0xc0>)
 8010890:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010892:	4a04      	ldr	r2, [pc, #16]	; (80108a4 <prvSwitchTimerLists+0xc4>)
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	6013      	str	r3, [r2, #0]
}
 8010898:	bf00      	nop
 801089a:	3718      	adds	r7, #24
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}
 80108a0:	20003190 	.word	0x20003190
 80108a4:	20003194 	.word	0x20003194

080108a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b082      	sub	sp, #8
 80108ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80108ae:	f000 f969 	bl	8010b84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80108b2:	4b15      	ldr	r3, [pc, #84]	; (8010908 <prvCheckForValidListAndQueue+0x60>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d120      	bne.n	80108fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80108ba:	4814      	ldr	r0, [pc, #80]	; (801090c <prvCheckForValidListAndQueue+0x64>)
 80108bc:	f7fd fbfe 	bl	800e0bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80108c0:	4813      	ldr	r0, [pc, #76]	; (8010910 <prvCheckForValidListAndQueue+0x68>)
 80108c2:	f7fd fbfb 	bl	800e0bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80108c6:	4b13      	ldr	r3, [pc, #76]	; (8010914 <prvCheckForValidListAndQueue+0x6c>)
 80108c8:	4a10      	ldr	r2, [pc, #64]	; (801090c <prvCheckForValidListAndQueue+0x64>)
 80108ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80108cc:	4b12      	ldr	r3, [pc, #72]	; (8010918 <prvCheckForValidListAndQueue+0x70>)
 80108ce:	4a10      	ldr	r2, [pc, #64]	; (8010910 <prvCheckForValidListAndQueue+0x68>)
 80108d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80108d2:	2300      	movs	r3, #0
 80108d4:	9300      	str	r3, [sp, #0]
 80108d6:	4b11      	ldr	r3, [pc, #68]	; (801091c <prvCheckForValidListAndQueue+0x74>)
 80108d8:	4a11      	ldr	r2, [pc, #68]	; (8010920 <prvCheckForValidListAndQueue+0x78>)
 80108da:	2110      	movs	r1, #16
 80108dc:	200a      	movs	r0, #10
 80108de:	f7fd fd09 	bl	800e2f4 <xQueueGenericCreateStatic>
 80108e2:	4603      	mov	r3, r0
 80108e4:	4a08      	ldr	r2, [pc, #32]	; (8010908 <prvCheckForValidListAndQueue+0x60>)
 80108e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80108e8:	4b07      	ldr	r3, [pc, #28]	; (8010908 <prvCheckForValidListAndQueue+0x60>)
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d005      	beq.n	80108fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80108f0:	4b05      	ldr	r3, [pc, #20]	; (8010908 <prvCheckForValidListAndQueue+0x60>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	490b      	ldr	r1, [pc, #44]	; (8010924 <prvCheckForValidListAndQueue+0x7c>)
 80108f6:	4618      	mov	r0, r3
 80108f8:	f7fe fc1a 	bl	800f130 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80108fc:	f000 f972 	bl	8010be4 <vPortExitCritical>
}
 8010900:	bf00      	nop
 8010902:	46bd      	mov	sp, r7
 8010904:	bd80      	pop	{r7, pc}
 8010906:	bf00      	nop
 8010908:	20003198 	.word	0x20003198
 801090c:	20003168 	.word	0x20003168
 8010910:	2000317c 	.word	0x2000317c
 8010914:	20003190 	.word	0x20003190
 8010918:	20003194 	.word	0x20003194
 801091c:	20003244 	.word	0x20003244
 8010920:	200031a4 	.word	0x200031a4
 8010924:	08012e40 	.word	0x08012e40

08010928 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010928:	b480      	push	{r7}
 801092a:	b085      	sub	sp, #20
 801092c:	af00      	add	r7, sp, #0
 801092e:	60f8      	str	r0, [r7, #12]
 8010930:	60b9      	str	r1, [r7, #8]
 8010932:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	3b04      	subs	r3, #4
 8010938:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	3b04      	subs	r3, #4
 8010946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	f023 0201 	bic.w	r2, r3, #1
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	3b04      	subs	r3, #4
 8010956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010958:	4a0c      	ldr	r2, [pc, #48]	; (801098c <pxPortInitialiseStack+0x64>)
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	3b14      	subs	r3, #20
 8010962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010964:	687a      	ldr	r2, [r7, #4]
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	3b04      	subs	r3, #4
 801096e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	f06f 0202 	mvn.w	r2, #2
 8010976:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	3b20      	subs	r3, #32
 801097c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801097e:	68fb      	ldr	r3, [r7, #12]
}
 8010980:	4618      	mov	r0, r3
 8010982:	3714      	adds	r7, #20
 8010984:	46bd      	mov	sp, r7
 8010986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098a:	4770      	bx	lr
 801098c:	08010991 	.word	0x08010991

08010990 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010990:	b480      	push	{r7}
 8010992:	b085      	sub	sp, #20
 8010994:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010996:	2300      	movs	r3, #0
 8010998:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801099a:	4b12      	ldr	r3, [pc, #72]	; (80109e4 <prvTaskExitError+0x54>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109a2:	d00a      	beq.n	80109ba <prvTaskExitError+0x2a>
	__asm volatile
 80109a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109a8:	f383 8811 	msr	BASEPRI, r3
 80109ac:	f3bf 8f6f 	isb	sy
 80109b0:	f3bf 8f4f 	dsb	sy
 80109b4:	60fb      	str	r3, [r7, #12]
}
 80109b6:	bf00      	nop
 80109b8:	e7fe      	b.n	80109b8 <prvTaskExitError+0x28>
	__asm volatile
 80109ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109be:	f383 8811 	msr	BASEPRI, r3
 80109c2:	f3bf 8f6f 	isb	sy
 80109c6:	f3bf 8f4f 	dsb	sy
 80109ca:	60bb      	str	r3, [r7, #8]
}
 80109cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80109ce:	bf00      	nop
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d0fc      	beq.n	80109d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80109d6:	bf00      	nop
 80109d8:	bf00      	nop
 80109da:	3714      	adds	r7, #20
 80109dc:	46bd      	mov	sp, r7
 80109de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e2:	4770      	bx	lr
 80109e4:	200000b0 	.word	0x200000b0
	...

080109f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80109f0:	4b07      	ldr	r3, [pc, #28]	; (8010a10 <pxCurrentTCBConst2>)
 80109f2:	6819      	ldr	r1, [r3, #0]
 80109f4:	6808      	ldr	r0, [r1, #0]
 80109f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109fa:	f380 8809 	msr	PSP, r0
 80109fe:	f3bf 8f6f 	isb	sy
 8010a02:	f04f 0000 	mov.w	r0, #0
 8010a06:	f380 8811 	msr	BASEPRI, r0
 8010a0a:	4770      	bx	lr
 8010a0c:	f3af 8000 	nop.w

08010a10 <pxCurrentTCBConst2>:
 8010a10:	20002c68 	.word	0x20002c68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010a14:	bf00      	nop
 8010a16:	bf00      	nop

08010a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010a18:	4808      	ldr	r0, [pc, #32]	; (8010a3c <prvPortStartFirstTask+0x24>)
 8010a1a:	6800      	ldr	r0, [r0, #0]
 8010a1c:	6800      	ldr	r0, [r0, #0]
 8010a1e:	f380 8808 	msr	MSP, r0
 8010a22:	f04f 0000 	mov.w	r0, #0
 8010a26:	f380 8814 	msr	CONTROL, r0
 8010a2a:	b662      	cpsie	i
 8010a2c:	b661      	cpsie	f
 8010a2e:	f3bf 8f4f 	dsb	sy
 8010a32:	f3bf 8f6f 	isb	sy
 8010a36:	df00      	svc	0
 8010a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010a3a:	bf00      	nop
 8010a3c:	e000ed08 	.word	0xe000ed08

08010a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b086      	sub	sp, #24
 8010a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010a46:	4b46      	ldr	r3, [pc, #280]	; (8010b60 <xPortStartScheduler+0x120>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	4a46      	ldr	r2, [pc, #280]	; (8010b64 <xPortStartScheduler+0x124>)
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	d10a      	bne.n	8010a66 <xPortStartScheduler+0x26>
	__asm volatile
 8010a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a54:	f383 8811 	msr	BASEPRI, r3
 8010a58:	f3bf 8f6f 	isb	sy
 8010a5c:	f3bf 8f4f 	dsb	sy
 8010a60:	613b      	str	r3, [r7, #16]
}
 8010a62:	bf00      	nop
 8010a64:	e7fe      	b.n	8010a64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010a66:	4b3e      	ldr	r3, [pc, #248]	; (8010b60 <xPortStartScheduler+0x120>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	4a3f      	ldr	r2, [pc, #252]	; (8010b68 <xPortStartScheduler+0x128>)
 8010a6c:	4293      	cmp	r3, r2
 8010a6e:	d10a      	bne.n	8010a86 <xPortStartScheduler+0x46>
	__asm volatile
 8010a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a74:	f383 8811 	msr	BASEPRI, r3
 8010a78:	f3bf 8f6f 	isb	sy
 8010a7c:	f3bf 8f4f 	dsb	sy
 8010a80:	60fb      	str	r3, [r7, #12]
}
 8010a82:	bf00      	nop
 8010a84:	e7fe      	b.n	8010a84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010a86:	4b39      	ldr	r3, [pc, #228]	; (8010b6c <xPortStartScheduler+0x12c>)
 8010a88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	781b      	ldrb	r3, [r3, #0]
 8010a8e:	b2db      	uxtb	r3, r3
 8010a90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010a92:	697b      	ldr	r3, [r7, #20]
 8010a94:	22ff      	movs	r2, #255	; 0xff
 8010a96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010a98:	697b      	ldr	r3, [r7, #20]
 8010a9a:	781b      	ldrb	r3, [r3, #0]
 8010a9c:	b2db      	uxtb	r3, r3
 8010a9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010aa0:	78fb      	ldrb	r3, [r7, #3]
 8010aa2:	b2db      	uxtb	r3, r3
 8010aa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010aa8:	b2da      	uxtb	r2, r3
 8010aaa:	4b31      	ldr	r3, [pc, #196]	; (8010b70 <xPortStartScheduler+0x130>)
 8010aac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010aae:	4b31      	ldr	r3, [pc, #196]	; (8010b74 <xPortStartScheduler+0x134>)
 8010ab0:	2207      	movs	r2, #7
 8010ab2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010ab4:	e009      	b.n	8010aca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010ab6:	4b2f      	ldr	r3, [pc, #188]	; (8010b74 <xPortStartScheduler+0x134>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	3b01      	subs	r3, #1
 8010abc:	4a2d      	ldr	r2, [pc, #180]	; (8010b74 <xPortStartScheduler+0x134>)
 8010abe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010ac0:	78fb      	ldrb	r3, [r7, #3]
 8010ac2:	b2db      	uxtb	r3, r3
 8010ac4:	005b      	lsls	r3, r3, #1
 8010ac6:	b2db      	uxtb	r3, r3
 8010ac8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010aca:	78fb      	ldrb	r3, [r7, #3]
 8010acc:	b2db      	uxtb	r3, r3
 8010ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ad2:	2b80      	cmp	r3, #128	; 0x80
 8010ad4:	d0ef      	beq.n	8010ab6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010ad6:	4b27      	ldr	r3, [pc, #156]	; (8010b74 <xPortStartScheduler+0x134>)
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	f1c3 0307 	rsb	r3, r3, #7
 8010ade:	2b04      	cmp	r3, #4
 8010ae0:	d00a      	beq.n	8010af8 <xPortStartScheduler+0xb8>
	__asm volatile
 8010ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae6:	f383 8811 	msr	BASEPRI, r3
 8010aea:	f3bf 8f6f 	isb	sy
 8010aee:	f3bf 8f4f 	dsb	sy
 8010af2:	60bb      	str	r3, [r7, #8]
}
 8010af4:	bf00      	nop
 8010af6:	e7fe      	b.n	8010af6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010af8:	4b1e      	ldr	r3, [pc, #120]	; (8010b74 <xPortStartScheduler+0x134>)
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	021b      	lsls	r3, r3, #8
 8010afe:	4a1d      	ldr	r2, [pc, #116]	; (8010b74 <xPortStartScheduler+0x134>)
 8010b00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010b02:	4b1c      	ldr	r3, [pc, #112]	; (8010b74 <xPortStartScheduler+0x134>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010b0a:	4a1a      	ldr	r2, [pc, #104]	; (8010b74 <xPortStartScheduler+0x134>)
 8010b0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	b2da      	uxtb	r2, r3
 8010b12:	697b      	ldr	r3, [r7, #20]
 8010b14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010b16:	4b18      	ldr	r3, [pc, #96]	; (8010b78 <xPortStartScheduler+0x138>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	4a17      	ldr	r2, [pc, #92]	; (8010b78 <xPortStartScheduler+0x138>)
 8010b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010b20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010b22:	4b15      	ldr	r3, [pc, #84]	; (8010b78 <xPortStartScheduler+0x138>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	4a14      	ldr	r2, [pc, #80]	; (8010b78 <xPortStartScheduler+0x138>)
 8010b28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010b2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010b2e:	f000 f8dd 	bl	8010cec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010b32:	4b12      	ldr	r3, [pc, #72]	; (8010b7c <xPortStartScheduler+0x13c>)
 8010b34:	2200      	movs	r2, #0
 8010b36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010b38:	f000 f8fc 	bl	8010d34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010b3c:	4b10      	ldr	r3, [pc, #64]	; (8010b80 <xPortStartScheduler+0x140>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	4a0f      	ldr	r2, [pc, #60]	; (8010b80 <xPortStartScheduler+0x140>)
 8010b42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010b46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010b48:	f7ff ff66 	bl	8010a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010b4c:	f7fe ff4a 	bl	800f9e4 <vTaskSwitchContext>
	prvTaskExitError();
 8010b50:	f7ff ff1e 	bl	8010990 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010b54:	2300      	movs	r3, #0
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3718      	adds	r7, #24
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}
 8010b5e:	bf00      	nop
 8010b60:	e000ed00 	.word	0xe000ed00
 8010b64:	410fc271 	.word	0x410fc271
 8010b68:	410fc270 	.word	0x410fc270
 8010b6c:	e000e400 	.word	0xe000e400
 8010b70:	20003294 	.word	0x20003294
 8010b74:	20003298 	.word	0x20003298
 8010b78:	e000ed20 	.word	0xe000ed20
 8010b7c:	200000b0 	.word	0x200000b0
 8010b80:	e000ef34 	.word	0xe000ef34

08010b84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010b84:	b480      	push	{r7}
 8010b86:	b083      	sub	sp, #12
 8010b88:	af00      	add	r7, sp, #0
	__asm volatile
 8010b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b8e:	f383 8811 	msr	BASEPRI, r3
 8010b92:	f3bf 8f6f 	isb	sy
 8010b96:	f3bf 8f4f 	dsb	sy
 8010b9a:	607b      	str	r3, [r7, #4]
}
 8010b9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010b9e:	4b0f      	ldr	r3, [pc, #60]	; (8010bdc <vPortEnterCritical+0x58>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	4a0d      	ldr	r2, [pc, #52]	; (8010bdc <vPortEnterCritical+0x58>)
 8010ba6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010ba8:	4b0c      	ldr	r3, [pc, #48]	; (8010bdc <vPortEnterCritical+0x58>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	2b01      	cmp	r3, #1
 8010bae:	d10f      	bne.n	8010bd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010bb0:	4b0b      	ldr	r3, [pc, #44]	; (8010be0 <vPortEnterCritical+0x5c>)
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	b2db      	uxtb	r3, r3
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d00a      	beq.n	8010bd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8010bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bbe:	f383 8811 	msr	BASEPRI, r3
 8010bc2:	f3bf 8f6f 	isb	sy
 8010bc6:	f3bf 8f4f 	dsb	sy
 8010bca:	603b      	str	r3, [r7, #0]
}
 8010bcc:	bf00      	nop
 8010bce:	e7fe      	b.n	8010bce <vPortEnterCritical+0x4a>
	}
}
 8010bd0:	bf00      	nop
 8010bd2:	370c      	adds	r7, #12
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bda:	4770      	bx	lr
 8010bdc:	200000b0 	.word	0x200000b0
 8010be0:	e000ed04 	.word	0xe000ed04

08010be4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010be4:	b480      	push	{r7}
 8010be6:	b083      	sub	sp, #12
 8010be8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010bea:	4b12      	ldr	r3, [pc, #72]	; (8010c34 <vPortExitCritical+0x50>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d10a      	bne.n	8010c08 <vPortExitCritical+0x24>
	__asm volatile
 8010bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bf6:	f383 8811 	msr	BASEPRI, r3
 8010bfa:	f3bf 8f6f 	isb	sy
 8010bfe:	f3bf 8f4f 	dsb	sy
 8010c02:	607b      	str	r3, [r7, #4]
}
 8010c04:	bf00      	nop
 8010c06:	e7fe      	b.n	8010c06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010c08:	4b0a      	ldr	r3, [pc, #40]	; (8010c34 <vPortExitCritical+0x50>)
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	3b01      	subs	r3, #1
 8010c0e:	4a09      	ldr	r2, [pc, #36]	; (8010c34 <vPortExitCritical+0x50>)
 8010c10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010c12:	4b08      	ldr	r3, [pc, #32]	; (8010c34 <vPortExitCritical+0x50>)
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d105      	bne.n	8010c26 <vPortExitCritical+0x42>
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010c1e:	683b      	ldr	r3, [r7, #0]
 8010c20:	f383 8811 	msr	BASEPRI, r3
}
 8010c24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010c26:	bf00      	nop
 8010c28:	370c      	adds	r7, #12
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c30:	4770      	bx	lr
 8010c32:	bf00      	nop
 8010c34:	200000b0 	.word	0x200000b0
	...

08010c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010c40:	f3ef 8009 	mrs	r0, PSP
 8010c44:	f3bf 8f6f 	isb	sy
 8010c48:	4b15      	ldr	r3, [pc, #84]	; (8010ca0 <pxCurrentTCBConst>)
 8010c4a:	681a      	ldr	r2, [r3, #0]
 8010c4c:	f01e 0f10 	tst.w	lr, #16
 8010c50:	bf08      	it	eq
 8010c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c5a:	6010      	str	r0, [r2, #0]
 8010c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010c60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010c64:	f380 8811 	msr	BASEPRI, r0
 8010c68:	f3bf 8f4f 	dsb	sy
 8010c6c:	f3bf 8f6f 	isb	sy
 8010c70:	f7fe feb8 	bl	800f9e4 <vTaskSwitchContext>
 8010c74:	f04f 0000 	mov.w	r0, #0
 8010c78:	f380 8811 	msr	BASEPRI, r0
 8010c7c:	bc09      	pop	{r0, r3}
 8010c7e:	6819      	ldr	r1, [r3, #0]
 8010c80:	6808      	ldr	r0, [r1, #0]
 8010c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c86:	f01e 0f10 	tst.w	lr, #16
 8010c8a:	bf08      	it	eq
 8010c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010c90:	f380 8809 	msr	PSP, r0
 8010c94:	f3bf 8f6f 	isb	sy
 8010c98:	4770      	bx	lr
 8010c9a:	bf00      	nop
 8010c9c:	f3af 8000 	nop.w

08010ca0 <pxCurrentTCBConst>:
 8010ca0:	20002c68 	.word	0x20002c68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010ca4:	bf00      	nop
 8010ca6:	bf00      	nop

08010ca8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
	__asm volatile
 8010cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cb2:	f383 8811 	msr	BASEPRI, r3
 8010cb6:	f3bf 8f6f 	isb	sy
 8010cba:	f3bf 8f4f 	dsb	sy
 8010cbe:	607b      	str	r3, [r7, #4]
}
 8010cc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010cc2:	f7fe fdd5 	bl	800f870 <xTaskIncrementTick>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d003      	beq.n	8010cd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010ccc:	4b06      	ldr	r3, [pc, #24]	; (8010ce8 <xPortSysTickHandler+0x40>)
 8010cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010cd2:	601a      	str	r2, [r3, #0]
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	f383 8811 	msr	BASEPRI, r3
}
 8010cde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010ce0:	bf00      	nop
 8010ce2:	3708      	adds	r7, #8
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}
 8010ce8:	e000ed04 	.word	0xe000ed04

08010cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010cec:	b480      	push	{r7}
 8010cee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010cf0:	4b0b      	ldr	r3, [pc, #44]	; (8010d20 <vPortSetupTimerInterrupt+0x34>)
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010cf6:	4b0b      	ldr	r3, [pc, #44]	; (8010d24 <vPortSetupTimerInterrupt+0x38>)
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010cfc:	4b0a      	ldr	r3, [pc, #40]	; (8010d28 <vPortSetupTimerInterrupt+0x3c>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	4a0a      	ldr	r2, [pc, #40]	; (8010d2c <vPortSetupTimerInterrupt+0x40>)
 8010d02:	fba2 2303 	umull	r2, r3, r2, r3
 8010d06:	099b      	lsrs	r3, r3, #6
 8010d08:	4a09      	ldr	r2, [pc, #36]	; (8010d30 <vPortSetupTimerInterrupt+0x44>)
 8010d0a:	3b01      	subs	r3, #1
 8010d0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010d0e:	4b04      	ldr	r3, [pc, #16]	; (8010d20 <vPortSetupTimerInterrupt+0x34>)
 8010d10:	2207      	movs	r2, #7
 8010d12:	601a      	str	r2, [r3, #0]
}
 8010d14:	bf00      	nop
 8010d16:	46bd      	mov	sp, r7
 8010d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1c:	4770      	bx	lr
 8010d1e:	bf00      	nop
 8010d20:	e000e010 	.word	0xe000e010
 8010d24:	e000e018 	.word	0xe000e018
 8010d28:	20000004 	.word	0x20000004
 8010d2c:	10624dd3 	.word	0x10624dd3
 8010d30:	e000e014 	.word	0xe000e014

08010d34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010d34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010d44 <vPortEnableVFP+0x10>
 8010d38:	6801      	ldr	r1, [r0, #0]
 8010d3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010d3e:	6001      	str	r1, [r0, #0]
 8010d40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010d42:	bf00      	nop
 8010d44:	e000ed88 	.word	0xe000ed88

08010d48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010d48:	b480      	push	{r7}
 8010d4a:	b085      	sub	sp, #20
 8010d4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010d4e:	f3ef 8305 	mrs	r3, IPSR
 8010d52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	2b0f      	cmp	r3, #15
 8010d58:	d914      	bls.n	8010d84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010d5a:	4a17      	ldr	r2, [pc, #92]	; (8010db8 <vPortValidateInterruptPriority+0x70>)
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	4413      	add	r3, r2
 8010d60:	781b      	ldrb	r3, [r3, #0]
 8010d62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010d64:	4b15      	ldr	r3, [pc, #84]	; (8010dbc <vPortValidateInterruptPriority+0x74>)
 8010d66:	781b      	ldrb	r3, [r3, #0]
 8010d68:	7afa      	ldrb	r2, [r7, #11]
 8010d6a:	429a      	cmp	r2, r3
 8010d6c:	d20a      	bcs.n	8010d84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d72:	f383 8811 	msr	BASEPRI, r3
 8010d76:	f3bf 8f6f 	isb	sy
 8010d7a:	f3bf 8f4f 	dsb	sy
 8010d7e:	607b      	str	r3, [r7, #4]
}
 8010d80:	bf00      	nop
 8010d82:	e7fe      	b.n	8010d82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010d84:	4b0e      	ldr	r3, [pc, #56]	; (8010dc0 <vPortValidateInterruptPriority+0x78>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010d8c:	4b0d      	ldr	r3, [pc, #52]	; (8010dc4 <vPortValidateInterruptPriority+0x7c>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	429a      	cmp	r2, r3
 8010d92:	d90a      	bls.n	8010daa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d98:	f383 8811 	msr	BASEPRI, r3
 8010d9c:	f3bf 8f6f 	isb	sy
 8010da0:	f3bf 8f4f 	dsb	sy
 8010da4:	603b      	str	r3, [r7, #0]
}
 8010da6:	bf00      	nop
 8010da8:	e7fe      	b.n	8010da8 <vPortValidateInterruptPriority+0x60>
	}
 8010daa:	bf00      	nop
 8010dac:	3714      	adds	r7, #20
 8010dae:	46bd      	mov	sp, r7
 8010db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db4:	4770      	bx	lr
 8010db6:	bf00      	nop
 8010db8:	e000e3f0 	.word	0xe000e3f0
 8010dbc:	20003294 	.word	0x20003294
 8010dc0:	e000ed0c 	.word	0xe000ed0c
 8010dc4:	20003298 	.word	0x20003298

08010dc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b08a      	sub	sp, #40	; 0x28
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010dd4:	f7fe fc90 	bl	800f6f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010dd8:	4b5b      	ldr	r3, [pc, #364]	; (8010f48 <pvPortMalloc+0x180>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d101      	bne.n	8010de4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010de0:	f000 f920 	bl	8011024 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010de4:	4b59      	ldr	r3, [pc, #356]	; (8010f4c <pvPortMalloc+0x184>)
 8010de6:	681a      	ldr	r2, [r3, #0]
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	4013      	ands	r3, r2
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	f040 8093 	bne.w	8010f18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d01d      	beq.n	8010e34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010df8:	2208      	movs	r2, #8
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	4413      	add	r3, r2
 8010dfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f003 0307 	and.w	r3, r3, #7
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d014      	beq.n	8010e34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f023 0307 	bic.w	r3, r3, #7
 8010e10:	3308      	adds	r3, #8
 8010e12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f003 0307 	and.w	r3, r3, #7
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d00a      	beq.n	8010e34 <pvPortMalloc+0x6c>
	__asm volatile
 8010e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e22:	f383 8811 	msr	BASEPRI, r3
 8010e26:	f3bf 8f6f 	isb	sy
 8010e2a:	f3bf 8f4f 	dsb	sy
 8010e2e:	617b      	str	r3, [r7, #20]
}
 8010e30:	bf00      	nop
 8010e32:	e7fe      	b.n	8010e32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d06e      	beq.n	8010f18 <pvPortMalloc+0x150>
 8010e3a:	4b45      	ldr	r3, [pc, #276]	; (8010f50 <pvPortMalloc+0x188>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	687a      	ldr	r2, [r7, #4]
 8010e40:	429a      	cmp	r2, r3
 8010e42:	d869      	bhi.n	8010f18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010e44:	4b43      	ldr	r3, [pc, #268]	; (8010f54 <pvPortMalloc+0x18c>)
 8010e46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010e48:	4b42      	ldr	r3, [pc, #264]	; (8010f54 <pvPortMalloc+0x18c>)
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010e4e:	e004      	b.n	8010e5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e5c:	685b      	ldr	r3, [r3, #4]
 8010e5e:	687a      	ldr	r2, [r7, #4]
 8010e60:	429a      	cmp	r2, r3
 8010e62:	d903      	bls.n	8010e6c <pvPortMalloc+0xa4>
 8010e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d1f1      	bne.n	8010e50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010e6c:	4b36      	ldr	r3, [pc, #216]	; (8010f48 <pvPortMalloc+0x180>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e72:	429a      	cmp	r2, r3
 8010e74:	d050      	beq.n	8010f18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010e76:	6a3b      	ldr	r3, [r7, #32]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	2208      	movs	r2, #8
 8010e7c:	4413      	add	r3, r2
 8010e7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e82:	681a      	ldr	r2, [r3, #0]
 8010e84:	6a3b      	ldr	r3, [r7, #32]
 8010e86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e8a:	685a      	ldr	r2, [r3, #4]
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	1ad2      	subs	r2, r2, r3
 8010e90:	2308      	movs	r3, #8
 8010e92:	005b      	lsls	r3, r3, #1
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d91f      	bls.n	8010ed8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	4413      	add	r3, r2
 8010e9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ea0:	69bb      	ldr	r3, [r7, #24]
 8010ea2:	f003 0307 	and.w	r3, r3, #7
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d00a      	beq.n	8010ec0 <pvPortMalloc+0xf8>
	__asm volatile
 8010eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eae:	f383 8811 	msr	BASEPRI, r3
 8010eb2:	f3bf 8f6f 	isb	sy
 8010eb6:	f3bf 8f4f 	dsb	sy
 8010eba:	613b      	str	r3, [r7, #16]
}
 8010ebc:	bf00      	nop
 8010ebe:	e7fe      	b.n	8010ebe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec2:	685a      	ldr	r2, [r3, #4]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	1ad2      	subs	r2, r2, r3
 8010ec8:	69bb      	ldr	r3, [r7, #24]
 8010eca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ece:	687a      	ldr	r2, [r7, #4]
 8010ed0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010ed2:	69b8      	ldr	r0, [r7, #24]
 8010ed4:	f000 f908 	bl	80110e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010ed8:	4b1d      	ldr	r3, [pc, #116]	; (8010f50 <pvPortMalloc+0x188>)
 8010eda:	681a      	ldr	r2, [r3, #0]
 8010edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ede:	685b      	ldr	r3, [r3, #4]
 8010ee0:	1ad3      	subs	r3, r2, r3
 8010ee2:	4a1b      	ldr	r2, [pc, #108]	; (8010f50 <pvPortMalloc+0x188>)
 8010ee4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010ee6:	4b1a      	ldr	r3, [pc, #104]	; (8010f50 <pvPortMalloc+0x188>)
 8010ee8:	681a      	ldr	r2, [r3, #0]
 8010eea:	4b1b      	ldr	r3, [pc, #108]	; (8010f58 <pvPortMalloc+0x190>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	d203      	bcs.n	8010efa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010ef2:	4b17      	ldr	r3, [pc, #92]	; (8010f50 <pvPortMalloc+0x188>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	4a18      	ldr	r2, [pc, #96]	; (8010f58 <pvPortMalloc+0x190>)
 8010ef8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010efc:	685a      	ldr	r2, [r3, #4]
 8010efe:	4b13      	ldr	r3, [pc, #76]	; (8010f4c <pvPortMalloc+0x184>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	431a      	orrs	r2, r3
 8010f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010f0e:	4b13      	ldr	r3, [pc, #76]	; (8010f5c <pvPortMalloc+0x194>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	3301      	adds	r3, #1
 8010f14:	4a11      	ldr	r2, [pc, #68]	; (8010f5c <pvPortMalloc+0x194>)
 8010f16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010f18:	f7fe fbfc 	bl	800f714 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f1c:	69fb      	ldr	r3, [r7, #28]
 8010f1e:	f003 0307 	and.w	r3, r3, #7
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d00a      	beq.n	8010f3c <pvPortMalloc+0x174>
	__asm volatile
 8010f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f2a:	f383 8811 	msr	BASEPRI, r3
 8010f2e:	f3bf 8f6f 	isb	sy
 8010f32:	f3bf 8f4f 	dsb	sy
 8010f36:	60fb      	str	r3, [r7, #12]
}
 8010f38:	bf00      	nop
 8010f3a:	e7fe      	b.n	8010f3a <pvPortMalloc+0x172>
	return pvReturn;
 8010f3c:	69fb      	ldr	r3, [r7, #28]
}
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3728      	adds	r7, #40	; 0x28
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}
 8010f46:	bf00      	nop
 8010f48:	20006ea4 	.word	0x20006ea4
 8010f4c:	20006eb8 	.word	0x20006eb8
 8010f50:	20006ea8 	.word	0x20006ea8
 8010f54:	20006e9c 	.word	0x20006e9c
 8010f58:	20006eac 	.word	0x20006eac
 8010f5c:	20006eb0 	.word	0x20006eb0

08010f60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b086      	sub	sp, #24
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d04d      	beq.n	801100e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010f72:	2308      	movs	r3, #8
 8010f74:	425b      	negs	r3, r3
 8010f76:	697a      	ldr	r2, [r7, #20]
 8010f78:	4413      	add	r3, r2
 8010f7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010f7c:	697b      	ldr	r3, [r7, #20]
 8010f7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010f80:	693b      	ldr	r3, [r7, #16]
 8010f82:	685a      	ldr	r2, [r3, #4]
 8010f84:	4b24      	ldr	r3, [pc, #144]	; (8011018 <vPortFree+0xb8>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	4013      	ands	r3, r2
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d10a      	bne.n	8010fa4 <vPortFree+0x44>
	__asm volatile
 8010f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f92:	f383 8811 	msr	BASEPRI, r3
 8010f96:	f3bf 8f6f 	isb	sy
 8010f9a:	f3bf 8f4f 	dsb	sy
 8010f9e:	60fb      	str	r3, [r7, #12]
}
 8010fa0:	bf00      	nop
 8010fa2:	e7fe      	b.n	8010fa2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010fa4:	693b      	ldr	r3, [r7, #16]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d00a      	beq.n	8010fc2 <vPortFree+0x62>
	__asm volatile
 8010fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fb0:	f383 8811 	msr	BASEPRI, r3
 8010fb4:	f3bf 8f6f 	isb	sy
 8010fb8:	f3bf 8f4f 	dsb	sy
 8010fbc:	60bb      	str	r3, [r7, #8]
}
 8010fbe:	bf00      	nop
 8010fc0:	e7fe      	b.n	8010fc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010fc2:	693b      	ldr	r3, [r7, #16]
 8010fc4:	685a      	ldr	r2, [r3, #4]
 8010fc6:	4b14      	ldr	r3, [pc, #80]	; (8011018 <vPortFree+0xb8>)
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	4013      	ands	r3, r2
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d01e      	beq.n	801100e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010fd0:	693b      	ldr	r3, [r7, #16]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d11a      	bne.n	801100e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010fd8:	693b      	ldr	r3, [r7, #16]
 8010fda:	685a      	ldr	r2, [r3, #4]
 8010fdc:	4b0e      	ldr	r3, [pc, #56]	; (8011018 <vPortFree+0xb8>)
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	43db      	mvns	r3, r3
 8010fe2:	401a      	ands	r2, r3
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010fe8:	f7fe fb86 	bl	800f6f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010fec:	693b      	ldr	r3, [r7, #16]
 8010fee:	685a      	ldr	r2, [r3, #4]
 8010ff0:	4b0a      	ldr	r3, [pc, #40]	; (801101c <vPortFree+0xbc>)
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	4413      	add	r3, r2
 8010ff6:	4a09      	ldr	r2, [pc, #36]	; (801101c <vPortFree+0xbc>)
 8010ff8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010ffa:	6938      	ldr	r0, [r7, #16]
 8010ffc:	f000 f874 	bl	80110e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011000:	4b07      	ldr	r3, [pc, #28]	; (8011020 <vPortFree+0xc0>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	3301      	adds	r3, #1
 8011006:	4a06      	ldr	r2, [pc, #24]	; (8011020 <vPortFree+0xc0>)
 8011008:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801100a:	f7fe fb83 	bl	800f714 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801100e:	bf00      	nop
 8011010:	3718      	adds	r7, #24
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}
 8011016:	bf00      	nop
 8011018:	20006eb8 	.word	0x20006eb8
 801101c:	20006ea8 	.word	0x20006ea8
 8011020:	20006eb4 	.word	0x20006eb4

08011024 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011024:	b480      	push	{r7}
 8011026:	b085      	sub	sp, #20
 8011028:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801102a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801102e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011030:	4b27      	ldr	r3, [pc, #156]	; (80110d0 <prvHeapInit+0xac>)
 8011032:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	f003 0307 	and.w	r3, r3, #7
 801103a:	2b00      	cmp	r3, #0
 801103c:	d00c      	beq.n	8011058 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	3307      	adds	r3, #7
 8011042:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	f023 0307 	bic.w	r3, r3, #7
 801104a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801104c:	68ba      	ldr	r2, [r7, #8]
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	1ad3      	subs	r3, r2, r3
 8011052:	4a1f      	ldr	r2, [pc, #124]	; (80110d0 <prvHeapInit+0xac>)
 8011054:	4413      	add	r3, r2
 8011056:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801105c:	4a1d      	ldr	r2, [pc, #116]	; (80110d4 <prvHeapInit+0xb0>)
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011062:	4b1c      	ldr	r3, [pc, #112]	; (80110d4 <prvHeapInit+0xb0>)
 8011064:	2200      	movs	r2, #0
 8011066:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	68ba      	ldr	r2, [r7, #8]
 801106c:	4413      	add	r3, r2
 801106e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011070:	2208      	movs	r2, #8
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	1a9b      	subs	r3, r3, r2
 8011076:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	f023 0307 	bic.w	r3, r3, #7
 801107e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	4a15      	ldr	r2, [pc, #84]	; (80110d8 <prvHeapInit+0xb4>)
 8011084:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011086:	4b14      	ldr	r3, [pc, #80]	; (80110d8 <prvHeapInit+0xb4>)
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	2200      	movs	r2, #0
 801108c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801108e:	4b12      	ldr	r3, [pc, #72]	; (80110d8 <prvHeapInit+0xb4>)
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	2200      	movs	r2, #0
 8011094:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	68fa      	ldr	r2, [r7, #12]
 801109e:	1ad2      	subs	r2, r2, r3
 80110a0:	683b      	ldr	r3, [r7, #0]
 80110a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80110a4:	4b0c      	ldr	r3, [pc, #48]	; (80110d8 <prvHeapInit+0xb4>)
 80110a6:	681a      	ldr	r2, [r3, #0]
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80110ac:	683b      	ldr	r3, [r7, #0]
 80110ae:	685b      	ldr	r3, [r3, #4]
 80110b0:	4a0a      	ldr	r2, [pc, #40]	; (80110dc <prvHeapInit+0xb8>)
 80110b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	685b      	ldr	r3, [r3, #4]
 80110b8:	4a09      	ldr	r2, [pc, #36]	; (80110e0 <prvHeapInit+0xbc>)
 80110ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80110bc:	4b09      	ldr	r3, [pc, #36]	; (80110e4 <prvHeapInit+0xc0>)
 80110be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80110c2:	601a      	str	r2, [r3, #0]
}
 80110c4:	bf00      	nop
 80110c6:	3714      	adds	r7, #20
 80110c8:	46bd      	mov	sp, r7
 80110ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ce:	4770      	bx	lr
 80110d0:	2000329c 	.word	0x2000329c
 80110d4:	20006e9c 	.word	0x20006e9c
 80110d8:	20006ea4 	.word	0x20006ea4
 80110dc:	20006eac 	.word	0x20006eac
 80110e0:	20006ea8 	.word	0x20006ea8
 80110e4:	20006eb8 	.word	0x20006eb8

080110e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80110e8:	b480      	push	{r7}
 80110ea:	b085      	sub	sp, #20
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80110f0:	4b28      	ldr	r3, [pc, #160]	; (8011194 <prvInsertBlockIntoFreeList+0xac>)
 80110f2:	60fb      	str	r3, [r7, #12]
 80110f4:	e002      	b.n	80110fc <prvInsertBlockIntoFreeList+0x14>
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	60fb      	str	r3, [r7, #12]
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	687a      	ldr	r2, [r7, #4]
 8011102:	429a      	cmp	r2, r3
 8011104:	d8f7      	bhi.n	80110f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	685b      	ldr	r3, [r3, #4]
 801110e:	68ba      	ldr	r2, [r7, #8]
 8011110:	4413      	add	r3, r2
 8011112:	687a      	ldr	r2, [r7, #4]
 8011114:	429a      	cmp	r2, r3
 8011116:	d108      	bne.n	801112a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	685a      	ldr	r2, [r3, #4]
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	685b      	ldr	r3, [r3, #4]
 8011120:	441a      	add	r2, r3
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	685b      	ldr	r3, [r3, #4]
 8011132:	68ba      	ldr	r2, [r7, #8]
 8011134:	441a      	add	r2, r3
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	429a      	cmp	r2, r3
 801113c:	d118      	bne.n	8011170 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	681a      	ldr	r2, [r3, #0]
 8011142:	4b15      	ldr	r3, [pc, #84]	; (8011198 <prvInsertBlockIntoFreeList+0xb0>)
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	429a      	cmp	r2, r3
 8011148:	d00d      	beq.n	8011166 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	685a      	ldr	r2, [r3, #4]
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	685b      	ldr	r3, [r3, #4]
 8011154:	441a      	add	r2, r3
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	681a      	ldr	r2, [r3, #0]
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	601a      	str	r2, [r3, #0]
 8011164:	e008      	b.n	8011178 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011166:	4b0c      	ldr	r3, [pc, #48]	; (8011198 <prvInsertBlockIntoFreeList+0xb0>)
 8011168:	681a      	ldr	r2, [r3, #0]
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	601a      	str	r2, [r3, #0]
 801116e:	e003      	b.n	8011178 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	681a      	ldr	r2, [r3, #0]
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011178:	68fa      	ldr	r2, [r7, #12]
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	429a      	cmp	r2, r3
 801117e:	d002      	beq.n	8011186 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	687a      	ldr	r2, [r7, #4]
 8011184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011186:	bf00      	nop
 8011188:	3714      	adds	r7, #20
 801118a:	46bd      	mov	sp, r7
 801118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011190:	4770      	bx	lr
 8011192:	bf00      	nop
 8011194:	20006e9c 	.word	0x20006e9c
 8011198:	20006ea4 	.word	0x20006ea4

0801119c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80111a0:	2200      	movs	r2, #0
 80111a2:	4912      	ldr	r1, [pc, #72]	; (80111ec <MX_USB_DEVICE_Init+0x50>)
 80111a4:	4812      	ldr	r0, [pc, #72]	; (80111f0 <MX_USB_DEVICE_Init+0x54>)
 80111a6:	f7f8 fe4f 	bl	8009e48 <USBD_Init>
 80111aa:	4603      	mov	r3, r0
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d001      	beq.n	80111b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80111b0:	f7f1 f83a 	bl	8002228 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80111b4:	490f      	ldr	r1, [pc, #60]	; (80111f4 <MX_USB_DEVICE_Init+0x58>)
 80111b6:	480e      	ldr	r0, [pc, #56]	; (80111f0 <MX_USB_DEVICE_Init+0x54>)
 80111b8:	f7f8 fe76 	bl	8009ea8 <USBD_RegisterClass>
 80111bc:	4603      	mov	r3, r0
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d001      	beq.n	80111c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80111c2:	f7f1 f831 	bl	8002228 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80111c6:	490c      	ldr	r1, [pc, #48]	; (80111f8 <MX_USB_DEVICE_Init+0x5c>)
 80111c8:	4809      	ldr	r0, [pc, #36]	; (80111f0 <MX_USB_DEVICE_Init+0x54>)
 80111ca:	f7f8 fd67 	bl	8009c9c <USBD_CDC_RegisterInterface>
 80111ce:	4603      	mov	r3, r0
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d001      	beq.n	80111d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80111d4:	f7f1 f828 	bl	8002228 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80111d8:	4805      	ldr	r0, [pc, #20]	; (80111f0 <MX_USB_DEVICE_Init+0x54>)
 80111da:	f7f8 fe9b 	bl	8009f14 <USBD_Start>
 80111de:	4603      	mov	r3, r0
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d001      	beq.n	80111e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80111e4:	f7f1 f820 	bl	8002228 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80111e8:	bf00      	nop
 80111ea:	bd80      	pop	{r7, pc}
 80111ec:	200000c8 	.word	0x200000c8
 80111f0:	20006ebc 	.word	0x20006ebc
 80111f4:	20000030 	.word	0x20000030
 80111f8:	200000b4 	.word	0x200000b4

080111fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011200:	2200      	movs	r2, #0
 8011202:	4905      	ldr	r1, [pc, #20]	; (8011218 <CDC_Init_FS+0x1c>)
 8011204:	4805      	ldr	r0, [pc, #20]	; (801121c <CDC_Init_FS+0x20>)
 8011206:	f7f8 fd63 	bl	8009cd0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801120a:	4905      	ldr	r1, [pc, #20]	; (8011220 <CDC_Init_FS+0x24>)
 801120c:	4803      	ldr	r0, [pc, #12]	; (801121c <CDC_Init_FS+0x20>)
 801120e:	f7f8 fd81 	bl	8009d14 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011212:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011214:	4618      	mov	r0, r3
 8011216:	bd80      	pop	{r7, pc}
 8011218:	20007580 	.word	0x20007580
 801121c:	20006ebc 	.word	0x20006ebc
 8011220:	20007198 	.word	0x20007198

08011224 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011224:	b480      	push	{r7}
 8011226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011228:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801122a:	4618      	mov	r0, r3
 801122c:	46bd      	mov	sp, r7
 801122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011232:	4770      	bx	lr

08011234 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011234:	b480      	push	{r7}
 8011236:	b083      	sub	sp, #12
 8011238:	af00      	add	r7, sp, #0
 801123a:	4603      	mov	r3, r0
 801123c:	6039      	str	r1, [r7, #0]
 801123e:	71fb      	strb	r3, [r7, #7]
 8011240:	4613      	mov	r3, r2
 8011242:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011244:	79fb      	ldrb	r3, [r7, #7]
 8011246:	2b23      	cmp	r3, #35	; 0x23
 8011248:	d84a      	bhi.n	80112e0 <CDC_Control_FS+0xac>
 801124a:	a201      	add	r2, pc, #4	; (adr r2, 8011250 <CDC_Control_FS+0x1c>)
 801124c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011250:	080112e1 	.word	0x080112e1
 8011254:	080112e1 	.word	0x080112e1
 8011258:	080112e1 	.word	0x080112e1
 801125c:	080112e1 	.word	0x080112e1
 8011260:	080112e1 	.word	0x080112e1
 8011264:	080112e1 	.word	0x080112e1
 8011268:	080112e1 	.word	0x080112e1
 801126c:	080112e1 	.word	0x080112e1
 8011270:	080112e1 	.word	0x080112e1
 8011274:	080112e1 	.word	0x080112e1
 8011278:	080112e1 	.word	0x080112e1
 801127c:	080112e1 	.word	0x080112e1
 8011280:	080112e1 	.word	0x080112e1
 8011284:	080112e1 	.word	0x080112e1
 8011288:	080112e1 	.word	0x080112e1
 801128c:	080112e1 	.word	0x080112e1
 8011290:	080112e1 	.word	0x080112e1
 8011294:	080112e1 	.word	0x080112e1
 8011298:	080112e1 	.word	0x080112e1
 801129c:	080112e1 	.word	0x080112e1
 80112a0:	080112e1 	.word	0x080112e1
 80112a4:	080112e1 	.word	0x080112e1
 80112a8:	080112e1 	.word	0x080112e1
 80112ac:	080112e1 	.word	0x080112e1
 80112b0:	080112e1 	.word	0x080112e1
 80112b4:	080112e1 	.word	0x080112e1
 80112b8:	080112e1 	.word	0x080112e1
 80112bc:	080112e1 	.word	0x080112e1
 80112c0:	080112e1 	.word	0x080112e1
 80112c4:	080112e1 	.word	0x080112e1
 80112c8:	080112e1 	.word	0x080112e1
 80112cc:	080112e1 	.word	0x080112e1
 80112d0:	080112e1 	.word	0x080112e1
 80112d4:	080112e1 	.word	0x080112e1
 80112d8:	080112e1 	.word	0x080112e1
 80112dc:	080112e1 	.word	0x080112e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80112e0:	bf00      	nop
  }

  return (USBD_OK);
 80112e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	370c      	adds	r7, #12
 80112e8:	46bd      	mov	sp, r7
 80112ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ee:	4770      	bx	lr

080112f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b082      	sub	sp, #8
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
 80112f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80112fa:	6879      	ldr	r1, [r7, #4]
 80112fc:	4805      	ldr	r0, [pc, #20]	; (8011314 <CDC_Receive_FS+0x24>)
 80112fe:	f7f8 fd09 	bl	8009d14 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011302:	4804      	ldr	r0, [pc, #16]	; (8011314 <CDC_Receive_FS+0x24>)
 8011304:	f7f8 fd6a 	bl	8009ddc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011308:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801130a:	4618      	mov	r0, r3
 801130c:	3708      	adds	r7, #8
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}
 8011312:	bf00      	nop
 8011314:	20006ebc 	.word	0x20006ebc

08011318 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b084      	sub	sp, #16
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
 8011320:	460b      	mov	r3, r1
 8011322:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011324:	2300      	movs	r3, #0
 8011326:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011328:	4b0d      	ldr	r3, [pc, #52]	; (8011360 <CDC_Transmit_FS+0x48>)
 801132a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801132e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011336:	2b00      	cmp	r3, #0
 8011338:	d001      	beq.n	801133e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801133a:	2301      	movs	r3, #1
 801133c:	e00b      	b.n	8011356 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801133e:	887b      	ldrh	r3, [r7, #2]
 8011340:	461a      	mov	r2, r3
 8011342:	6879      	ldr	r1, [r7, #4]
 8011344:	4806      	ldr	r0, [pc, #24]	; (8011360 <CDC_Transmit_FS+0x48>)
 8011346:	f7f8 fcc3 	bl	8009cd0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801134a:	4805      	ldr	r0, [pc, #20]	; (8011360 <CDC_Transmit_FS+0x48>)
 801134c:	f7f8 fd00 	bl	8009d50 <USBD_CDC_TransmitPacket>
 8011350:	4603      	mov	r3, r0
 8011352:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011354:	7bfb      	ldrb	r3, [r7, #15]
}
 8011356:	4618      	mov	r0, r3
 8011358:	3710      	adds	r7, #16
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}
 801135e:	bf00      	nop
 8011360:	20006ebc 	.word	0x20006ebc

08011364 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011364:	b480      	push	{r7}
 8011366:	b087      	sub	sp, #28
 8011368:	af00      	add	r7, sp, #0
 801136a:	60f8      	str	r0, [r7, #12]
 801136c:	60b9      	str	r1, [r7, #8]
 801136e:	4613      	mov	r3, r2
 8011370:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011372:	2300      	movs	r3, #0
 8011374:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011376:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801137a:	4618      	mov	r0, r3
 801137c:	371c      	adds	r7, #28
 801137e:	46bd      	mov	sp, r7
 8011380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011384:	4770      	bx	lr
	...

08011388 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011388:	b480      	push	{r7}
 801138a:	b083      	sub	sp, #12
 801138c:	af00      	add	r7, sp, #0
 801138e:	4603      	mov	r3, r0
 8011390:	6039      	str	r1, [r7, #0]
 8011392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	2212      	movs	r2, #18
 8011398:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801139a:	4b03      	ldr	r3, [pc, #12]	; (80113a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 801139c:	4618      	mov	r0, r3
 801139e:	370c      	adds	r7, #12
 80113a0:	46bd      	mov	sp, r7
 80113a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a6:	4770      	bx	lr
 80113a8:	200000e4 	.word	0x200000e4

080113ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113ac:	b480      	push	{r7}
 80113ae:	b083      	sub	sp, #12
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	4603      	mov	r3, r0
 80113b4:	6039      	str	r1, [r7, #0]
 80113b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	2204      	movs	r2, #4
 80113bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80113be:	4b03      	ldr	r3, [pc, #12]	; (80113cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80113c0:	4618      	mov	r0, r3
 80113c2:	370c      	adds	r7, #12
 80113c4:	46bd      	mov	sp, r7
 80113c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ca:	4770      	bx	lr
 80113cc:	200000f8 	.word	0x200000f8

080113d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	4603      	mov	r3, r0
 80113d8:	6039      	str	r1, [r7, #0]
 80113da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80113dc:	79fb      	ldrb	r3, [r7, #7]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d105      	bne.n	80113ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80113e2:	683a      	ldr	r2, [r7, #0]
 80113e4:	4907      	ldr	r1, [pc, #28]	; (8011404 <USBD_FS_ProductStrDescriptor+0x34>)
 80113e6:	4808      	ldr	r0, [pc, #32]	; (8011408 <USBD_FS_ProductStrDescriptor+0x38>)
 80113e8:	f7f9 ff40 	bl	800b26c <USBD_GetString>
 80113ec:	e004      	b.n	80113f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80113ee:	683a      	ldr	r2, [r7, #0]
 80113f0:	4904      	ldr	r1, [pc, #16]	; (8011404 <USBD_FS_ProductStrDescriptor+0x34>)
 80113f2:	4805      	ldr	r0, [pc, #20]	; (8011408 <USBD_FS_ProductStrDescriptor+0x38>)
 80113f4:	f7f9 ff3a 	bl	800b26c <USBD_GetString>
  }
  return USBD_StrDesc;
 80113f8:	4b02      	ldr	r3, [pc, #8]	; (8011404 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80113fa:	4618      	mov	r0, r3
 80113fc:	3708      	adds	r7, #8
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}
 8011402:	bf00      	nop
 8011404:	20007968 	.word	0x20007968
 8011408:	08012e48 	.word	0x08012e48

0801140c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b082      	sub	sp, #8
 8011410:	af00      	add	r7, sp, #0
 8011412:	4603      	mov	r3, r0
 8011414:	6039      	str	r1, [r7, #0]
 8011416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011418:	683a      	ldr	r2, [r7, #0]
 801141a:	4904      	ldr	r1, [pc, #16]	; (801142c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801141c:	4804      	ldr	r0, [pc, #16]	; (8011430 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801141e:	f7f9 ff25 	bl	800b26c <USBD_GetString>
  return USBD_StrDesc;
 8011422:	4b02      	ldr	r3, [pc, #8]	; (801142c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011424:	4618      	mov	r0, r3
 8011426:	3708      	adds	r7, #8
 8011428:	46bd      	mov	sp, r7
 801142a:	bd80      	pop	{r7, pc}
 801142c:	20007968 	.word	0x20007968
 8011430:	08012e60 	.word	0x08012e60

08011434 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b082      	sub	sp, #8
 8011438:	af00      	add	r7, sp, #0
 801143a:	4603      	mov	r3, r0
 801143c:	6039      	str	r1, [r7, #0]
 801143e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	221a      	movs	r2, #26
 8011444:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011446:	f000 f843 	bl	80114d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801144a:	4b02      	ldr	r3, [pc, #8]	; (8011454 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801144c:	4618      	mov	r0, r3
 801144e:	3708      	adds	r7, #8
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}
 8011454:	200000fc 	.word	0x200000fc

08011458 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b082      	sub	sp, #8
 801145c:	af00      	add	r7, sp, #0
 801145e:	4603      	mov	r3, r0
 8011460:	6039      	str	r1, [r7, #0]
 8011462:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011464:	79fb      	ldrb	r3, [r7, #7]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d105      	bne.n	8011476 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801146a:	683a      	ldr	r2, [r7, #0]
 801146c:	4907      	ldr	r1, [pc, #28]	; (801148c <USBD_FS_ConfigStrDescriptor+0x34>)
 801146e:	4808      	ldr	r0, [pc, #32]	; (8011490 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011470:	f7f9 fefc 	bl	800b26c <USBD_GetString>
 8011474:	e004      	b.n	8011480 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011476:	683a      	ldr	r2, [r7, #0]
 8011478:	4904      	ldr	r1, [pc, #16]	; (801148c <USBD_FS_ConfigStrDescriptor+0x34>)
 801147a:	4805      	ldr	r0, [pc, #20]	; (8011490 <USBD_FS_ConfigStrDescriptor+0x38>)
 801147c:	f7f9 fef6 	bl	800b26c <USBD_GetString>
  }
  return USBD_StrDesc;
 8011480:	4b02      	ldr	r3, [pc, #8]	; (801148c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011482:	4618      	mov	r0, r3
 8011484:	3708      	adds	r7, #8
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}
 801148a:	bf00      	nop
 801148c:	20007968 	.word	0x20007968
 8011490:	08012e74 	.word	0x08012e74

08011494 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b082      	sub	sp, #8
 8011498:	af00      	add	r7, sp, #0
 801149a:	4603      	mov	r3, r0
 801149c:	6039      	str	r1, [r7, #0]
 801149e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80114a0:	79fb      	ldrb	r3, [r7, #7]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d105      	bne.n	80114b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80114a6:	683a      	ldr	r2, [r7, #0]
 80114a8:	4907      	ldr	r1, [pc, #28]	; (80114c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80114aa:	4808      	ldr	r0, [pc, #32]	; (80114cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80114ac:	f7f9 fede 	bl	800b26c <USBD_GetString>
 80114b0:	e004      	b.n	80114bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80114b2:	683a      	ldr	r2, [r7, #0]
 80114b4:	4904      	ldr	r1, [pc, #16]	; (80114c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80114b6:	4805      	ldr	r0, [pc, #20]	; (80114cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80114b8:	f7f9 fed8 	bl	800b26c <USBD_GetString>
  }
  return USBD_StrDesc;
 80114bc:	4b02      	ldr	r3, [pc, #8]	; (80114c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80114be:	4618      	mov	r0, r3
 80114c0:	3708      	adds	r7, #8
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}
 80114c6:	bf00      	nop
 80114c8:	20007968 	.word	0x20007968
 80114cc:	08012e80 	.word	0x08012e80

080114d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b084      	sub	sp, #16
 80114d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80114d6:	4b0f      	ldr	r3, [pc, #60]	; (8011514 <Get_SerialNum+0x44>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80114dc:	4b0e      	ldr	r3, [pc, #56]	; (8011518 <Get_SerialNum+0x48>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80114e2:	4b0e      	ldr	r3, [pc, #56]	; (801151c <Get_SerialNum+0x4c>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80114e8:	68fa      	ldr	r2, [r7, #12]
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	4413      	add	r3, r2
 80114ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d009      	beq.n	801150a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80114f6:	2208      	movs	r2, #8
 80114f8:	4909      	ldr	r1, [pc, #36]	; (8011520 <Get_SerialNum+0x50>)
 80114fa:	68f8      	ldr	r0, [r7, #12]
 80114fc:	f000 f814 	bl	8011528 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011500:	2204      	movs	r2, #4
 8011502:	4908      	ldr	r1, [pc, #32]	; (8011524 <Get_SerialNum+0x54>)
 8011504:	68b8      	ldr	r0, [r7, #8]
 8011506:	f000 f80f 	bl	8011528 <IntToUnicode>
  }
}
 801150a:	bf00      	nop
 801150c:	3710      	adds	r7, #16
 801150e:	46bd      	mov	sp, r7
 8011510:	bd80      	pop	{r7, pc}
 8011512:	bf00      	nop
 8011514:	1fff7a10 	.word	0x1fff7a10
 8011518:	1fff7a14 	.word	0x1fff7a14
 801151c:	1fff7a18 	.word	0x1fff7a18
 8011520:	200000fe 	.word	0x200000fe
 8011524:	2000010e 	.word	0x2000010e

08011528 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011528:	b480      	push	{r7}
 801152a:	b087      	sub	sp, #28
 801152c:	af00      	add	r7, sp, #0
 801152e:	60f8      	str	r0, [r7, #12]
 8011530:	60b9      	str	r1, [r7, #8]
 8011532:	4613      	mov	r3, r2
 8011534:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011536:	2300      	movs	r3, #0
 8011538:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801153a:	2300      	movs	r3, #0
 801153c:	75fb      	strb	r3, [r7, #23]
 801153e:	e027      	b.n	8011590 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	0f1b      	lsrs	r3, r3, #28
 8011544:	2b09      	cmp	r3, #9
 8011546:	d80b      	bhi.n	8011560 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	0f1b      	lsrs	r3, r3, #28
 801154c:	b2da      	uxtb	r2, r3
 801154e:	7dfb      	ldrb	r3, [r7, #23]
 8011550:	005b      	lsls	r3, r3, #1
 8011552:	4619      	mov	r1, r3
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	440b      	add	r3, r1
 8011558:	3230      	adds	r2, #48	; 0x30
 801155a:	b2d2      	uxtb	r2, r2
 801155c:	701a      	strb	r2, [r3, #0]
 801155e:	e00a      	b.n	8011576 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	0f1b      	lsrs	r3, r3, #28
 8011564:	b2da      	uxtb	r2, r3
 8011566:	7dfb      	ldrb	r3, [r7, #23]
 8011568:	005b      	lsls	r3, r3, #1
 801156a:	4619      	mov	r1, r3
 801156c:	68bb      	ldr	r3, [r7, #8]
 801156e:	440b      	add	r3, r1
 8011570:	3237      	adds	r2, #55	; 0x37
 8011572:	b2d2      	uxtb	r2, r2
 8011574:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	011b      	lsls	r3, r3, #4
 801157a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801157c:	7dfb      	ldrb	r3, [r7, #23]
 801157e:	005b      	lsls	r3, r3, #1
 8011580:	3301      	adds	r3, #1
 8011582:	68ba      	ldr	r2, [r7, #8]
 8011584:	4413      	add	r3, r2
 8011586:	2200      	movs	r2, #0
 8011588:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801158a:	7dfb      	ldrb	r3, [r7, #23]
 801158c:	3301      	adds	r3, #1
 801158e:	75fb      	strb	r3, [r7, #23]
 8011590:	7dfa      	ldrb	r2, [r7, #23]
 8011592:	79fb      	ldrb	r3, [r7, #7]
 8011594:	429a      	cmp	r2, r3
 8011596:	d3d3      	bcc.n	8011540 <IntToUnicode+0x18>
  }
}
 8011598:	bf00      	nop
 801159a:	bf00      	nop
 801159c:	371c      	adds	r7, #28
 801159e:	46bd      	mov	sp, r7
 80115a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a4:	4770      	bx	lr
	...

080115a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b08a      	sub	sp, #40	; 0x28
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80115b0:	f107 0314 	add.w	r3, r7, #20
 80115b4:	2200      	movs	r2, #0
 80115b6:	601a      	str	r2, [r3, #0]
 80115b8:	605a      	str	r2, [r3, #4]
 80115ba:	609a      	str	r2, [r3, #8]
 80115bc:	60da      	str	r2, [r3, #12]
 80115be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80115c8:	d13a      	bne.n	8011640 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80115ca:	2300      	movs	r3, #0
 80115cc:	613b      	str	r3, [r7, #16]
 80115ce:	4b1e      	ldr	r3, [pc, #120]	; (8011648 <HAL_PCD_MspInit+0xa0>)
 80115d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115d2:	4a1d      	ldr	r2, [pc, #116]	; (8011648 <HAL_PCD_MspInit+0xa0>)
 80115d4:	f043 0301 	orr.w	r3, r3, #1
 80115d8:	6313      	str	r3, [r2, #48]	; 0x30
 80115da:	4b1b      	ldr	r3, [pc, #108]	; (8011648 <HAL_PCD_MspInit+0xa0>)
 80115dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115de:	f003 0301 	and.w	r3, r3, #1
 80115e2:	613b      	str	r3, [r7, #16]
 80115e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80115e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80115ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80115ec:	2302      	movs	r3, #2
 80115ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80115f0:	2300      	movs	r3, #0
 80115f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80115f4:	2303      	movs	r3, #3
 80115f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80115f8:	230a      	movs	r3, #10
 80115fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80115fc:	f107 0314 	add.w	r3, r7, #20
 8011600:	4619      	mov	r1, r3
 8011602:	4812      	ldr	r0, [pc, #72]	; (801164c <HAL_PCD_MspInit+0xa4>)
 8011604:	f7f1 fde6 	bl	80031d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011608:	4b0f      	ldr	r3, [pc, #60]	; (8011648 <HAL_PCD_MspInit+0xa0>)
 801160a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801160c:	4a0e      	ldr	r2, [pc, #56]	; (8011648 <HAL_PCD_MspInit+0xa0>)
 801160e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011612:	6353      	str	r3, [r2, #52]	; 0x34
 8011614:	2300      	movs	r3, #0
 8011616:	60fb      	str	r3, [r7, #12]
 8011618:	4b0b      	ldr	r3, [pc, #44]	; (8011648 <HAL_PCD_MspInit+0xa0>)
 801161a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801161c:	4a0a      	ldr	r2, [pc, #40]	; (8011648 <HAL_PCD_MspInit+0xa0>)
 801161e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011622:	6453      	str	r3, [r2, #68]	; 0x44
 8011624:	4b08      	ldr	r3, [pc, #32]	; (8011648 <HAL_PCD_MspInit+0xa0>)
 8011626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801162c:	60fb      	str	r3, [r7, #12]
 801162e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011630:	2200      	movs	r2, #0
 8011632:	2105      	movs	r1, #5
 8011634:	2043      	movs	r0, #67	; 0x43
 8011636:	f7f1 fda3 	bl	8003180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801163a:	2043      	movs	r0, #67	; 0x43
 801163c:	f7f1 fdbc 	bl	80031b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011640:	bf00      	nop
 8011642:	3728      	adds	r7, #40	; 0x28
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}
 8011648:	40023800 	.word	0x40023800
 801164c:	40020000 	.word	0x40020000

08011650 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b082      	sub	sp, #8
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011664:	4619      	mov	r1, r3
 8011666:	4610      	mov	r0, r2
 8011668:	f7f8 fca1 	bl	8009fae <USBD_LL_SetupStage>
}
 801166c:	bf00      	nop
 801166e:	3708      	adds	r7, #8
 8011670:	46bd      	mov	sp, r7
 8011672:	bd80      	pop	{r7, pc}

08011674 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b082      	sub	sp, #8
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
 801167c:	460b      	mov	r3, r1
 801167e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8011686:	78fa      	ldrb	r2, [r7, #3]
 8011688:	6879      	ldr	r1, [r7, #4]
 801168a:	4613      	mov	r3, r2
 801168c:	00db      	lsls	r3, r3, #3
 801168e:	4413      	add	r3, r2
 8011690:	009b      	lsls	r3, r3, #2
 8011692:	440b      	add	r3, r1
 8011694:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8011698:	681a      	ldr	r2, [r3, #0]
 801169a:	78fb      	ldrb	r3, [r7, #3]
 801169c:	4619      	mov	r1, r3
 801169e:	f7f8 fcdb 	bl	800a058 <USBD_LL_DataOutStage>
}
 80116a2:	bf00      	nop
 80116a4:	3708      	adds	r7, #8
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd80      	pop	{r7, pc}

080116aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116aa:	b580      	push	{r7, lr}
 80116ac:	b082      	sub	sp, #8
 80116ae:	af00      	add	r7, sp, #0
 80116b0:	6078      	str	r0, [r7, #4]
 80116b2:	460b      	mov	r3, r1
 80116b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80116bc:	78fa      	ldrb	r2, [r7, #3]
 80116be:	6879      	ldr	r1, [r7, #4]
 80116c0:	4613      	mov	r3, r2
 80116c2:	00db      	lsls	r3, r3, #3
 80116c4:	4413      	add	r3, r2
 80116c6:	009b      	lsls	r3, r3, #2
 80116c8:	440b      	add	r3, r1
 80116ca:	334c      	adds	r3, #76	; 0x4c
 80116cc:	681a      	ldr	r2, [r3, #0]
 80116ce:	78fb      	ldrb	r3, [r7, #3]
 80116d0:	4619      	mov	r1, r3
 80116d2:	f7f8 fd74 	bl	800a1be <USBD_LL_DataInStage>
}
 80116d6:	bf00      	nop
 80116d8:	3708      	adds	r7, #8
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd80      	pop	{r7, pc}

080116de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116de:	b580      	push	{r7, lr}
 80116e0:	b082      	sub	sp, #8
 80116e2:	af00      	add	r7, sp, #0
 80116e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80116ec:	4618      	mov	r0, r3
 80116ee:	f7f8 fea8 	bl	800a442 <USBD_LL_SOF>
}
 80116f2:	bf00      	nop
 80116f4:	3708      	adds	r7, #8
 80116f6:	46bd      	mov	sp, r7
 80116f8:	bd80      	pop	{r7, pc}

080116fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116fa:	b580      	push	{r7, lr}
 80116fc:	b084      	sub	sp, #16
 80116fe:	af00      	add	r7, sp, #0
 8011700:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011702:	2301      	movs	r3, #1
 8011704:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	68db      	ldr	r3, [r3, #12]
 801170a:	2b02      	cmp	r3, #2
 801170c:	d001      	beq.n	8011712 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801170e:	f7f0 fd8b 	bl	8002228 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011718:	7bfa      	ldrb	r2, [r7, #15]
 801171a:	4611      	mov	r1, r2
 801171c:	4618      	mov	r0, r3
 801171e:	f7f8 fe52 	bl	800a3c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011728:	4618      	mov	r0, r3
 801172a:	f7f8 fdfa 	bl	800a322 <USBD_LL_Reset>
}
 801172e:	bf00      	nop
 8011730:	3710      	adds	r7, #16
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}
	...

08011738 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b082      	sub	sp, #8
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011746:	4618      	mov	r0, r3
 8011748:	f7f8 fe4d 	bl	800a3e6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	687a      	ldr	r2, [r7, #4]
 8011758:	6812      	ldr	r2, [r2, #0]
 801175a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801175e:	f043 0301 	orr.w	r3, r3, #1
 8011762:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6a1b      	ldr	r3, [r3, #32]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d005      	beq.n	8011778 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801176c:	4b04      	ldr	r3, [pc, #16]	; (8011780 <HAL_PCD_SuspendCallback+0x48>)
 801176e:	691b      	ldr	r3, [r3, #16]
 8011770:	4a03      	ldr	r2, [pc, #12]	; (8011780 <HAL_PCD_SuspendCallback+0x48>)
 8011772:	f043 0306 	orr.w	r3, r3, #6
 8011776:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011778:	bf00      	nop
 801177a:	3708      	adds	r7, #8
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}
 8011780:	e000ed00 	.word	0xe000ed00

08011784 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011792:	4618      	mov	r0, r3
 8011794:	f7f8 fe3d 	bl	800a412 <USBD_LL_Resume>
}
 8011798:	bf00      	nop
 801179a:	3708      	adds	r7, #8
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}

080117a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b082      	sub	sp, #8
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
 80117a8:	460b      	mov	r3, r1
 80117aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80117b2:	78fa      	ldrb	r2, [r7, #3]
 80117b4:	4611      	mov	r1, r2
 80117b6:	4618      	mov	r0, r3
 80117b8:	f7f8 fe95 	bl	800a4e6 <USBD_LL_IsoOUTIncomplete>
}
 80117bc:	bf00      	nop
 80117be:	3708      	adds	r7, #8
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}

080117c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b082      	sub	sp, #8
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	460b      	mov	r3, r1
 80117ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80117d6:	78fa      	ldrb	r2, [r7, #3]
 80117d8:	4611      	mov	r1, r2
 80117da:	4618      	mov	r0, r3
 80117dc:	f7f8 fe51 	bl	800a482 <USBD_LL_IsoINIncomplete>
}
 80117e0:	bf00      	nop
 80117e2:	3708      	adds	r7, #8
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}

080117e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b082      	sub	sp, #8
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80117f6:	4618      	mov	r0, r3
 80117f8:	f7f8 fea7 	bl	800a54a <USBD_LL_DevConnected>
}
 80117fc:	bf00      	nop
 80117fe:	3708      	adds	r7, #8
 8011800:	46bd      	mov	sp, r7
 8011802:	bd80      	pop	{r7, pc}

08011804 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b082      	sub	sp, #8
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011812:	4618      	mov	r0, r3
 8011814:	f7f8 fea4 	bl	800a560 <USBD_LL_DevDisconnected>
}
 8011818:	bf00      	nop
 801181a:	3708      	adds	r7, #8
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}

08011820 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b082      	sub	sp, #8
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	781b      	ldrb	r3, [r3, #0]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d13c      	bne.n	80118aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011830:	4a20      	ldr	r2, [pc, #128]	; (80118b4 <USBD_LL_Init+0x94>)
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	4a1e      	ldr	r2, [pc, #120]	; (80118b4 <USBD_LL_Init+0x94>)
 801183c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011840:	4b1c      	ldr	r3, [pc, #112]	; (80118b4 <USBD_LL_Init+0x94>)
 8011842:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011846:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011848:	4b1a      	ldr	r3, [pc, #104]	; (80118b4 <USBD_LL_Init+0x94>)
 801184a:	2204      	movs	r2, #4
 801184c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801184e:	4b19      	ldr	r3, [pc, #100]	; (80118b4 <USBD_LL_Init+0x94>)
 8011850:	2202      	movs	r2, #2
 8011852:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011854:	4b17      	ldr	r3, [pc, #92]	; (80118b4 <USBD_LL_Init+0x94>)
 8011856:	2200      	movs	r2, #0
 8011858:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801185a:	4b16      	ldr	r3, [pc, #88]	; (80118b4 <USBD_LL_Init+0x94>)
 801185c:	2202      	movs	r2, #2
 801185e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011860:	4b14      	ldr	r3, [pc, #80]	; (80118b4 <USBD_LL_Init+0x94>)
 8011862:	2200      	movs	r2, #0
 8011864:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011866:	4b13      	ldr	r3, [pc, #76]	; (80118b4 <USBD_LL_Init+0x94>)
 8011868:	2200      	movs	r2, #0
 801186a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801186c:	4b11      	ldr	r3, [pc, #68]	; (80118b4 <USBD_LL_Init+0x94>)
 801186e:	2200      	movs	r2, #0
 8011870:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011872:	4b10      	ldr	r3, [pc, #64]	; (80118b4 <USBD_LL_Init+0x94>)
 8011874:	2200      	movs	r2, #0
 8011876:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011878:	4b0e      	ldr	r3, [pc, #56]	; (80118b4 <USBD_LL_Init+0x94>)
 801187a:	2200      	movs	r2, #0
 801187c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801187e:	480d      	ldr	r0, [pc, #52]	; (80118b4 <USBD_LL_Init+0x94>)
 8011880:	f7f2 fe0d 	bl	800449e <HAL_PCD_Init>
 8011884:	4603      	mov	r3, r0
 8011886:	2b00      	cmp	r3, #0
 8011888:	d001      	beq.n	801188e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801188a:	f7f0 fccd 	bl	8002228 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801188e:	2180      	movs	r1, #128	; 0x80
 8011890:	4808      	ldr	r0, [pc, #32]	; (80118b4 <USBD_LL_Init+0x94>)
 8011892:	f7f4 f864 	bl	800595e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011896:	2240      	movs	r2, #64	; 0x40
 8011898:	2100      	movs	r1, #0
 801189a:	4806      	ldr	r0, [pc, #24]	; (80118b4 <USBD_LL_Init+0x94>)
 801189c:	f7f4 f818 	bl	80058d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80118a0:	2280      	movs	r2, #128	; 0x80
 80118a2:	2101      	movs	r1, #1
 80118a4:	4803      	ldr	r0, [pc, #12]	; (80118b4 <USBD_LL_Init+0x94>)
 80118a6:	f7f4 f813 	bl	80058d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80118aa:	2300      	movs	r3, #0
}
 80118ac:	4618      	mov	r0, r3
 80118ae:	3708      	adds	r7, #8
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}
 80118b4:	20007b68 	.word	0x20007b68

080118b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b084      	sub	sp, #16
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118c0:	2300      	movs	r3, #0
 80118c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118c4:	2300      	movs	r3, #0
 80118c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80118ce:	4618      	mov	r0, r3
 80118d0:	f7f2 ff02 	bl	80046d8 <HAL_PCD_Start>
 80118d4:	4603      	mov	r3, r0
 80118d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80118d8:	7bfb      	ldrb	r3, [r7, #15]
 80118da:	4618      	mov	r0, r3
 80118dc:	f000 f942 	bl	8011b64 <USBD_Get_USB_Status>
 80118e0:	4603      	mov	r3, r0
 80118e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80118e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80118e6:	4618      	mov	r0, r3
 80118e8:	3710      	adds	r7, #16
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}

080118ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80118ee:	b580      	push	{r7, lr}
 80118f0:	b084      	sub	sp, #16
 80118f2:	af00      	add	r7, sp, #0
 80118f4:	6078      	str	r0, [r7, #4]
 80118f6:	4608      	mov	r0, r1
 80118f8:	4611      	mov	r1, r2
 80118fa:	461a      	mov	r2, r3
 80118fc:	4603      	mov	r3, r0
 80118fe:	70fb      	strb	r3, [r7, #3]
 8011900:	460b      	mov	r3, r1
 8011902:	70bb      	strb	r3, [r7, #2]
 8011904:	4613      	mov	r3, r2
 8011906:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011908:	2300      	movs	r3, #0
 801190a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801190c:	2300      	movs	r3, #0
 801190e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011916:	78bb      	ldrb	r3, [r7, #2]
 8011918:	883a      	ldrh	r2, [r7, #0]
 801191a:	78f9      	ldrb	r1, [r7, #3]
 801191c:	f7f3 fbd3 	bl	80050c6 <HAL_PCD_EP_Open>
 8011920:	4603      	mov	r3, r0
 8011922:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011924:	7bfb      	ldrb	r3, [r7, #15]
 8011926:	4618      	mov	r0, r3
 8011928:	f000 f91c 	bl	8011b64 <USBD_Get_USB_Status>
 801192c:	4603      	mov	r3, r0
 801192e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011930:	7bbb      	ldrb	r3, [r7, #14]
}
 8011932:	4618      	mov	r0, r3
 8011934:	3710      	adds	r7, #16
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}

0801193a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801193a:	b580      	push	{r7, lr}
 801193c:	b084      	sub	sp, #16
 801193e:	af00      	add	r7, sp, #0
 8011940:	6078      	str	r0, [r7, #4]
 8011942:	460b      	mov	r3, r1
 8011944:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011946:	2300      	movs	r3, #0
 8011948:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801194a:	2300      	movs	r3, #0
 801194c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011954:	78fa      	ldrb	r2, [r7, #3]
 8011956:	4611      	mov	r1, r2
 8011958:	4618      	mov	r0, r3
 801195a:	f7f3 fc1c 	bl	8005196 <HAL_PCD_EP_Close>
 801195e:	4603      	mov	r3, r0
 8011960:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011962:	7bfb      	ldrb	r3, [r7, #15]
 8011964:	4618      	mov	r0, r3
 8011966:	f000 f8fd 	bl	8011b64 <USBD_Get_USB_Status>
 801196a:	4603      	mov	r3, r0
 801196c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801196e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011970:	4618      	mov	r0, r3
 8011972:	3710      	adds	r7, #16
 8011974:	46bd      	mov	sp, r7
 8011976:	bd80      	pop	{r7, pc}

08011978 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b084      	sub	sp, #16
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
 8011980:	460b      	mov	r3, r1
 8011982:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011984:	2300      	movs	r3, #0
 8011986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011988:	2300      	movs	r3, #0
 801198a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011992:	78fa      	ldrb	r2, [r7, #3]
 8011994:	4611      	mov	r1, r2
 8011996:	4618      	mov	r0, r3
 8011998:	f7f3 fcf4 	bl	8005384 <HAL_PCD_EP_SetStall>
 801199c:	4603      	mov	r3, r0
 801199e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80119a0:	7bfb      	ldrb	r3, [r7, #15]
 80119a2:	4618      	mov	r0, r3
 80119a4:	f000 f8de 	bl	8011b64 <USBD_Get_USB_Status>
 80119a8:	4603      	mov	r3, r0
 80119aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80119ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	3710      	adds	r7, #16
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}

080119b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80119b6:	b580      	push	{r7, lr}
 80119b8:	b084      	sub	sp, #16
 80119ba:	af00      	add	r7, sp, #0
 80119bc:	6078      	str	r0, [r7, #4]
 80119be:	460b      	mov	r3, r1
 80119c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119c2:	2300      	movs	r3, #0
 80119c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119c6:	2300      	movs	r3, #0
 80119c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80119d0:	78fa      	ldrb	r2, [r7, #3]
 80119d2:	4611      	mov	r1, r2
 80119d4:	4618      	mov	r0, r3
 80119d6:	f7f3 fd39 	bl	800544c <HAL_PCD_EP_ClrStall>
 80119da:	4603      	mov	r3, r0
 80119dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80119de:	7bfb      	ldrb	r3, [r7, #15]
 80119e0:	4618      	mov	r0, r3
 80119e2:	f000 f8bf 	bl	8011b64 <USBD_Get_USB_Status>
 80119e6:	4603      	mov	r3, r0
 80119e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80119ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80119ec:	4618      	mov	r0, r3
 80119ee:	3710      	adds	r7, #16
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}

080119f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80119f4:	b480      	push	{r7}
 80119f6:	b085      	sub	sp, #20
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	460b      	mov	r3, r1
 80119fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011a06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	da0b      	bge.n	8011a28 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011a10:	78fb      	ldrb	r3, [r7, #3]
 8011a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011a16:	68f9      	ldr	r1, [r7, #12]
 8011a18:	4613      	mov	r3, r2
 8011a1a:	00db      	lsls	r3, r3, #3
 8011a1c:	4413      	add	r3, r2
 8011a1e:	009b      	lsls	r3, r3, #2
 8011a20:	440b      	add	r3, r1
 8011a22:	333e      	adds	r3, #62	; 0x3e
 8011a24:	781b      	ldrb	r3, [r3, #0]
 8011a26:	e00b      	b.n	8011a40 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011a28:	78fb      	ldrb	r3, [r7, #3]
 8011a2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011a2e:	68f9      	ldr	r1, [r7, #12]
 8011a30:	4613      	mov	r3, r2
 8011a32:	00db      	lsls	r3, r3, #3
 8011a34:	4413      	add	r3, r2
 8011a36:	009b      	lsls	r3, r3, #2
 8011a38:	440b      	add	r3, r1
 8011a3a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8011a3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011a40:	4618      	mov	r0, r3
 8011a42:	3714      	adds	r7, #20
 8011a44:	46bd      	mov	sp, r7
 8011a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4a:	4770      	bx	lr

08011a4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b084      	sub	sp, #16
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
 8011a54:	460b      	mov	r3, r1
 8011a56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a58:	2300      	movs	r3, #0
 8011a5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011a66:	78fa      	ldrb	r2, [r7, #3]
 8011a68:	4611      	mov	r1, r2
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7f3 fb06 	bl	800507c <HAL_PCD_SetAddress>
 8011a70:	4603      	mov	r3, r0
 8011a72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a74:	7bfb      	ldrb	r3, [r7, #15]
 8011a76:	4618      	mov	r0, r3
 8011a78:	f000 f874 	bl	8011b64 <USBD_Get_USB_Status>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a82:	4618      	mov	r0, r3
 8011a84:	3710      	adds	r7, #16
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}

08011a8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011a8a:	b580      	push	{r7, lr}
 8011a8c:	b086      	sub	sp, #24
 8011a8e:	af00      	add	r7, sp, #0
 8011a90:	60f8      	str	r0, [r7, #12]
 8011a92:	607a      	str	r2, [r7, #4]
 8011a94:	603b      	str	r3, [r7, #0]
 8011a96:	460b      	mov	r3, r1
 8011a98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011aa8:	7af9      	ldrb	r1, [r7, #11]
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	687a      	ldr	r2, [r7, #4]
 8011aae:	f7f3 fc1f 	bl	80052f0 <HAL_PCD_EP_Transmit>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ab6:	7dfb      	ldrb	r3, [r7, #23]
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f000 f853 	bl	8011b64 <USBD_Get_USB_Status>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011ac2:	7dbb      	ldrb	r3, [r7, #22]
}
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	3718      	adds	r7, #24
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}

08011acc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b086      	sub	sp, #24
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	60f8      	str	r0, [r7, #12]
 8011ad4:	607a      	str	r2, [r7, #4]
 8011ad6:	603b      	str	r3, [r7, #0]
 8011ad8:	460b      	mov	r3, r1
 8011ada:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011adc:	2300      	movs	r3, #0
 8011ade:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011aea:	7af9      	ldrb	r1, [r7, #11]
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	687a      	ldr	r2, [r7, #4]
 8011af0:	f7f3 fb9b 	bl	800522a <HAL_PCD_EP_Receive>
 8011af4:	4603      	mov	r3, r0
 8011af6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011af8:	7dfb      	ldrb	r3, [r7, #23]
 8011afa:	4618      	mov	r0, r3
 8011afc:	f000 f832 	bl	8011b64 <USBD_Get_USB_Status>
 8011b00:	4603      	mov	r3, r0
 8011b02:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011b04:	7dbb      	ldrb	r3, [r7, #22]
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3718      	adds	r7, #24
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}

08011b0e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b0e:	b580      	push	{r7, lr}
 8011b10:	b082      	sub	sp, #8
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	6078      	str	r0, [r7, #4]
 8011b16:	460b      	mov	r3, r1
 8011b18:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011b20:	78fa      	ldrb	r2, [r7, #3]
 8011b22:	4611      	mov	r1, r2
 8011b24:	4618      	mov	r0, r3
 8011b26:	f7f3 fbcb 	bl	80052c0 <HAL_PCD_EP_GetRxCount>
 8011b2a:	4603      	mov	r3, r0
}
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	3708      	adds	r7, #8
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}

08011b34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011b34:	b480      	push	{r7}
 8011b36:	b083      	sub	sp, #12
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011b3c:	4b03      	ldr	r3, [pc, #12]	; (8011b4c <USBD_static_malloc+0x18>)
}
 8011b3e:	4618      	mov	r0, r3
 8011b40:	370c      	adds	r7, #12
 8011b42:	46bd      	mov	sp, r7
 8011b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b48:	4770      	bx	lr
 8011b4a:	bf00      	nop
 8011b4c:	20008074 	.word	0x20008074

08011b50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011b50:	b480      	push	{r7}
 8011b52:	b083      	sub	sp, #12
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]

}
 8011b58:	bf00      	nop
 8011b5a:	370c      	adds	r7, #12
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b62:	4770      	bx	lr

08011b64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011b64:	b480      	push	{r7}
 8011b66:	b085      	sub	sp, #20
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	4603      	mov	r3, r0
 8011b6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b6e:	2300      	movs	r3, #0
 8011b70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011b72:	79fb      	ldrb	r3, [r7, #7]
 8011b74:	2b03      	cmp	r3, #3
 8011b76:	d817      	bhi.n	8011ba8 <USBD_Get_USB_Status+0x44>
 8011b78:	a201      	add	r2, pc, #4	; (adr r2, 8011b80 <USBD_Get_USB_Status+0x1c>)
 8011b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b7e:	bf00      	nop
 8011b80:	08011b91 	.word	0x08011b91
 8011b84:	08011b97 	.word	0x08011b97
 8011b88:	08011b9d 	.word	0x08011b9d
 8011b8c:	08011ba3 	.word	0x08011ba3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011b90:	2300      	movs	r3, #0
 8011b92:	73fb      	strb	r3, [r7, #15]
    break;
 8011b94:	e00b      	b.n	8011bae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011b96:	2303      	movs	r3, #3
 8011b98:	73fb      	strb	r3, [r7, #15]
    break;
 8011b9a:	e008      	b.n	8011bae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8011ba0:	e005      	b.n	8011bae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011ba2:	2303      	movs	r3, #3
 8011ba4:	73fb      	strb	r3, [r7, #15]
    break;
 8011ba6:	e002      	b.n	8011bae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011ba8:	2303      	movs	r3, #3
 8011baa:	73fb      	strb	r3, [r7, #15]
    break;
 8011bac:	bf00      	nop
  }
  return usb_status;
 8011bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3714      	adds	r7, #20
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bba:	4770      	bx	lr

08011bbc <DS18_StartConv>:
  return DS18_ERROR;

}


uint8_t DS18_StartConv(uint64_t id){
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b082      	sub	sp, #8
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	e9c7 0100 	strd	r0, r1, [r7]
	DS18_ResetPulse_sens_detect();
 8011bc6:	f000 f8d0 	bl	8011d6a <DS18_ResetPulse_sens_detect>

	if(id == DS18_SKIP_ROM)
 8011bca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011bce:	4313      	orrs	r3, r2
 8011bd0:	d107      	bne.n	8011be2 <DS18_StartConv+0x26>
	{
	//SKIP ROM
	DS18_WriteByte(DS18_SKIP_ROM_CMD);
 8011bd2:	20cc      	movs	r0, #204	; 0xcc
 8011bd4:	f000 f876 	bl	8011cc4 <DS18_WriteByte>

	}else return DS18_ERROR;

	//CONVERT T
	DS18_WriteByte(DS18_T_CONV_CMD);
 8011bd8:	2044      	movs	r0, #68	; 0x44
 8011bda:	f000 f873 	bl	8011cc4 <DS18_WriteByte>
	return DS18_OK;
 8011bde:	2300      	movs	r3, #0
 8011be0:	e000      	b.n	8011be4 <DS18_StartConv+0x28>
	}else return DS18_ERROR;
 8011be2:	2301      	movs	r3, #1
}
 8011be4:	4618      	mov	r0, r3
 8011be6:	3708      	adds	r7, #8
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}

08011bec <DS18_GetData>:

uint8_t DS18_GetData(uint64_t id, uint16_t* temp ){
 8011bec:	b590      	push	{r4, r7, lr}
 8011bee:	b089      	sub	sp, #36	; 0x24
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8011bf6:	607a      	str	r2, [r7, #4]
	uint8_t Data[8];
	DS18_ResetPulse_sens_detect();
 8011bf8:	f000 f8b7 	bl	8011d6a <DS18_ResetPulse_sens_detect>
	if(id == DS18_SKIP_ROM)
 8011bfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011c00:	4313      	orrs	r3, r2
 8011c02:	d108      	bne.n	8011c16 <DS18_GetData+0x2a>
	{
		//SKIP ROM
		DS18_WriteByte(DS18_SKIP_ROM_CMD);
 8011c04:	20cc      	movs	r0, #204	; 0xcc
 8011c06:	f000 f85d 	bl	8011cc4 <DS18_WriteByte>

	}else return DS18_ERROR;


	DS18_WriteByte(DS18_R_SCRATCHPAD_CMD);
 8011c0a:	20be      	movs	r0, #190	; 0xbe
 8011c0c:	f000 f85a 	bl	8011cc4 <DS18_WriteByte>

	for(uint8_t i=0;i<8;i++)
 8011c10:	2300      	movs	r3, #0
 8011c12:	77fb      	strb	r3, [r7, #31]
 8011c14:	e00e      	b.n	8011c34 <DS18_GetData+0x48>
	}else return DS18_ERROR;
 8011c16:	2301      	movs	r3, #1
 8011c18:	e01a      	b.n	8011c50 <DS18_GetData+0x64>
	{
		Data[i] = DS18_ReadByte();
 8011c1a:	7ffc      	ldrb	r4, [r7, #31]
 8011c1c:	f000 f884 	bl	8011d28 <DS18_ReadByte>
 8011c20:	4603      	mov	r3, r0
 8011c22:	461a      	mov	r2, r3
 8011c24:	f104 0320 	add.w	r3, r4, #32
 8011c28:	443b      	add	r3, r7
 8011c2a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i=0;i<8;i++)
 8011c2e:	7ffb      	ldrb	r3, [r7, #31]
 8011c30:	3301      	adds	r3, #1
 8011c32:	77fb      	strb	r3, [r7, #31]
 8011c34:	7ffb      	ldrb	r3, [r7, #31]
 8011c36:	2b07      	cmp	r3, #7
 8011c38:	d9ef      	bls.n	8011c1a <DS18_GetData+0x2e>
	}

	*temp = Data[1] << 8 | Data[0];
 8011c3a:	7d7b      	ldrb	r3, [r7, #21]
 8011c3c:	021b      	lsls	r3, r3, #8
 8011c3e:	b21a      	sxth	r2, r3
 8011c40:	7d3b      	ldrb	r3, [r7, #20]
 8011c42:	b21b      	sxth	r3, r3
 8011c44:	4313      	orrs	r3, r2
 8011c46:	b21b      	sxth	r3, r3
 8011c48:	b29a      	uxth	r2, r3
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	801a      	strh	r2, [r3, #0]
	return DS18_OK;
 8011c4e:	2300      	movs	r3, #0
}
 8011c50:	4618      	mov	r0, r3
 8011c52:	3724      	adds	r7, #36	; 0x24
 8011c54:	46bd      	mov	sp, r7
 8011c56:	bd90      	pop	{r4, r7, pc}

08011c58 <DS18_TempConvert>:
float DS18_TempConvert(uint16_t rawTemp)
{
 8011c58:	b480      	push	{r7}
 8011c5a:	b083      	sub	sp, #12
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	4603      	mov	r3, r0
 8011c60:	80fb      	strh	r3, [r7, #6]
	return (float)rawTemp/16.0f;
 8011c62:	88fb      	ldrh	r3, [r7, #6]
 8011c64:	ee07 3a90 	vmov	s15, r3
 8011c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011c6c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8011c70:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8011c74:	eef0 7a66 	vmov.f32	s15, s13
}
 8011c78:	eeb0 0a67 	vmov.f32	s0, s15
 8011c7c:	370c      	adds	r7, #12
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c84:	4770      	bx	lr

08011c86 <DS18_WriteBit>:

/************************************************************************************************************/
/************************************************************************************************************/
/************************************************************************************************************/
void DS18_WriteBit(uint8_t bit){
 8011c86:	b580      	push	{r7, lr}
 8011c88:	b082      	sub	sp, #8
 8011c8a:	af00      	add	r7, sp, #0
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	71fb      	strb	r3, [r7, #7]
	DS18_USER_GPIO_ToGround();
 8011c90:	f000 f8a0 	bl	8011dd4 <DS18_USER_GPIO_ToGround>

	DS18_USER_DelayMicroSec(bit ? 3 : 65);
 8011c94:	79fb      	ldrb	r3, [r7, #7]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d001      	beq.n	8011c9e <DS18_WriteBit+0x18>
 8011c9a:	2303      	movs	r3, #3
 8011c9c:	e000      	b.n	8011ca0 <DS18_WriteBit+0x1a>
 8011c9e:	2341      	movs	r3, #65	; 0x41
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f000 f8a3 	bl	8011dec <DS18_USER_DelayMicroSec>

	DS18_USER_GPIO_HIZ_IN();
 8011ca6:	f000 f883 	bl	8011db0 <DS18_USER_GPIO_HIZ_IN>

	DS18_USER_DelayMicroSec(bit ? 65 : 3);
 8011caa:	79fb      	ldrb	r3, [r7, #7]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d001      	beq.n	8011cb4 <DS18_WriteBit+0x2e>
 8011cb0:	2341      	movs	r3, #65	; 0x41
 8011cb2:	e000      	b.n	8011cb6 <DS18_WriteBit+0x30>
 8011cb4:	2303      	movs	r3, #3
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f000 f898 	bl	8011dec <DS18_USER_DelayMicroSec>
}
 8011cbc:	bf00      	nop
 8011cbe:	3708      	adds	r7, #8
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}

08011cc4 <DS18_WriteByte>:

void DS18_WriteByte(uint8_t dt){
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b084      	sub	sp, #16
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	4603      	mov	r3, r0
 8011ccc:	71fb      	strb	r3, [r7, #7]
	  for (uint8_t i = 0; i < 8; i++)
 8011cce:	2300      	movs	r3, #0
 8011cd0:	73fb      	strb	r3, [r7, #15]
 8011cd2:	e010      	b.n	8011cf6 <DS18_WriteByte+0x32>
	  {
		DS18_WriteBit((dt >> i) & 1);
 8011cd4:	79fa      	ldrb	r2, [r7, #7]
 8011cd6:	7bfb      	ldrb	r3, [r7, #15]
 8011cd8:	fa42 f303 	asr.w	r3, r2, r3
 8011cdc:	b2db      	uxtb	r3, r3
 8011cde:	f003 0301 	and.w	r3, r3, #1
 8011ce2:	b2db      	uxtb	r3, r3
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f7ff ffce 	bl	8011c86 <DS18_WriteBit>
	    //Delay Protection
		DS18_USER_DelayMicroSec(5);
 8011cea:	2005      	movs	r0, #5
 8011cec:	f000 f87e 	bl	8011dec <DS18_USER_DelayMicroSec>
	  for (uint8_t i = 0; i < 8; i++)
 8011cf0:	7bfb      	ldrb	r3, [r7, #15]
 8011cf2:	3301      	adds	r3, #1
 8011cf4:	73fb      	strb	r3, [r7, #15]
 8011cf6:	7bfb      	ldrb	r3, [r7, #15]
 8011cf8:	2b07      	cmp	r3, #7
 8011cfa:	d9eb      	bls.n	8011cd4 <DS18_WriteByte+0x10>
	  }
}
 8011cfc:	bf00      	nop
 8011cfe:	bf00      	nop
 8011d00:	3710      	adds	r7, #16
 8011d02:	46bd      	mov	sp, r7
 8011d04:	bd80      	pop	{r7, pc}

08011d06 <DS18_ReadBit>:
uint8_t DS18_ReadBit(){
 8011d06:	b580      	push	{r7, lr}
 8011d08:	af00      	add	r7, sp, #0

	  DS18_USER_GPIO_ToGround();//низкий уровень
 8011d0a:	f000 f863 	bl	8011dd4 <DS18_USER_GPIO_ToGround>
	  DS18_USER_DelayMicroSec(2);
 8011d0e:	2002      	movs	r0, #2
 8011d10:	f000 f86c 	bl	8011dec <DS18_USER_DelayMicroSec>
	  DS18_USER_GPIO_HIZ_IN();//высокий уровень
 8011d14:	f000 f84c 	bl	8011db0 <DS18_USER_GPIO_HIZ_IN>
	  DS18_USER_DelayMicroSec(13);
 8011d18:	200d      	movs	r0, #13
 8011d1a:	f000 f867 	bl	8011dec <DS18_USER_DelayMicroSec>

	  return DS18_USER_GPIO_HIZ_IN();
 8011d1e:	f000 f847 	bl	8011db0 <DS18_USER_GPIO_HIZ_IN>
 8011d22:	4603      	mov	r3, r0
}
 8011d24:	4618      	mov	r0, r3
 8011d26:	bd80      	pop	{r7, pc}

08011d28 <DS18_ReadByte>:
uint8_t DS18_ReadByte(){
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
	  uint8_t data = 0;
 8011d2e:	2300      	movs	r3, #0
 8011d30:	71fb      	strb	r3, [r7, #7]

	  for (uint8_t i = 0; i <= 7; i++)
 8011d32:	2300      	movs	r3, #0
 8011d34:	71bb      	strb	r3, [r7, #6]
 8011d36:	e010      	b.n	8011d5a <DS18_ReadByte+0x32>
	  {
		  data += DS18_ReadBit() << i;
 8011d38:	f7ff ffe5 	bl	8011d06 <DS18_ReadBit>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	461a      	mov	r2, r3
 8011d40:	79bb      	ldrb	r3, [r7, #6]
 8011d42:	fa02 f303 	lsl.w	r3, r2, r3
 8011d46:	b2da      	uxtb	r2, r3
 8011d48:	79fb      	ldrb	r3, [r7, #7]
 8011d4a:	4413      	add	r3, r2
 8011d4c:	71fb      	strb	r3, [r7, #7]
		  DS18_USER_DelayMicroSec(45);
 8011d4e:	202d      	movs	r0, #45	; 0x2d
 8011d50:	f000 f84c 	bl	8011dec <DS18_USER_DelayMicroSec>
	  for (uint8_t i = 0; i <= 7; i++)
 8011d54:	79bb      	ldrb	r3, [r7, #6]
 8011d56:	3301      	adds	r3, #1
 8011d58:	71bb      	strb	r3, [r7, #6]
 8011d5a:	79bb      	ldrb	r3, [r7, #6]
 8011d5c:	2b07      	cmp	r3, #7
 8011d5e:	d9eb      	bls.n	8011d38 <DS18_ReadByte+0x10>
	  }
	  return data;
 8011d60:	79fb      	ldrb	r3, [r7, #7]
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	3708      	adds	r7, #8
 8011d66:	46bd      	mov	sp, r7
 8011d68:	bd80      	pop	{r7, pc}

08011d6a <DS18_ResetPulse_sens_detect>:



uint8_t DS18_ResetPulse_sens_detect(){
 8011d6a:	b580      	push	{r7, lr}
 8011d6c:	b082      	sub	sp, #8
 8011d6e:	af00      	add	r7, sp, #0
	uint8_t answer = 1;
 8011d70:	2301      	movs	r3, #1
 8011d72:	71fb      	strb	r3, [r7, #7]
	DS18_USER_GPIO_HIZ_IN();
 8011d74:	f000 f81c 	bl	8011db0 <DS18_USER_GPIO_HIZ_IN>

	DS18_USER_GPIO_ToGround();
 8011d78:	f000 f82c 	bl	8011dd4 <DS18_USER_GPIO_ToGround>
	DS18_USER_DelayMicroSec(480);
 8011d7c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8011d80:	f000 f834 	bl	8011dec <DS18_USER_DelayMicroSec>
	DS18_USER_GPIO_HIZ_IN();
 8011d84:	f000 f814 	bl	8011db0 <DS18_USER_GPIO_HIZ_IN>

	DS18_USER_DelayMicroSec(65);
 8011d88:	2041      	movs	r0, #65	; 0x41
 8011d8a:	f000 f82f 	bl	8011dec <DS18_USER_DelayMicroSec>
	answer = DS18_USER_GPIO_HIZ_IN();
 8011d8e:	f000 f80f 	bl	8011db0 <DS18_USER_GPIO_HIZ_IN>
 8011d92:	4603      	mov	r3, r0
 8011d94:	71fb      	strb	r3, [r7, #7]
	DS18_USER_DelayMicroSec(240);
 8011d96:	20f0      	movs	r0, #240	; 0xf0
 8011d98:	f000 f828 	bl	8011dec <DS18_USER_DelayMicroSec>

	return answer ? DS18_ERROR : DS18_OK;
 8011d9c:	79fb      	ldrb	r3, [r7, #7]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	bf14      	ite	ne
 8011da2:	2301      	movne	r3, #1
 8011da4:	2300      	moveq	r3, #0
 8011da6:	b2db      	uxtb	r3, r3
}
 8011da8:	4618      	mov	r0, r3
 8011daa:	3708      	adds	r7, #8
 8011dac:	46bd      	mov	sp, r7
 8011dae:	bd80      	pop	{r7, pc}

08011db0 <DS18_USER_GPIO_HIZ_IN>:
#include "DS18B20_port.h"
#include "DS18B20_macro.h"

extern TIM_HandleTypeDef htim11;

uint8_t DS18_USER_GPIO_HIZ_IN() {
 8011db0:	b580      	push	{r7, lr}
 8011db2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DS18_DQ_GPIO_Port, DS18_DQ_Pin, SET);
 8011db4:	2201      	movs	r2, #1
 8011db6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011dba:	4805      	ldr	r0, [pc, #20]	; (8011dd0 <DS18_USER_GPIO_HIZ_IN+0x20>)
 8011dbc:	f7f1 fba6 	bl	800350c <HAL_GPIO_WritePin>
	return (HAL_GPIO_ReadPin(DS18_DQ_GPIO_Port, DS18_DQ_Pin));
 8011dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011dc4:	4802      	ldr	r0, [pc, #8]	; (8011dd0 <DS18_USER_GPIO_HIZ_IN+0x20>)
 8011dc6:	f7f1 fb89 	bl	80034dc <HAL_GPIO_ReadPin>
 8011dca:	4603      	mov	r3, r0
}
 8011dcc:	4618      	mov	r0, r3
 8011dce:	bd80      	pop	{r7, pc}
 8011dd0:	40020000 	.word	0x40020000

08011dd4 <DS18_USER_GPIO_ToGround>:
void DS18_USER_GPIO_ToGround() {
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DS18_DQ_GPIO_Port, DS18_DQ_Pin, RESET);
 8011dd8:	2200      	movs	r2, #0
 8011dda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011dde:	4802      	ldr	r0, [pc, #8]	; (8011de8 <DS18_USER_GPIO_ToGround+0x14>)
 8011de0:	f7f1 fb94 	bl	800350c <HAL_GPIO_WritePin>
}
 8011de4:	bf00      	nop
 8011de6:	bd80      	pop	{r7, pc}
 8011de8:	40020000 	.word	0x40020000

08011dec <DS18_USER_DelayMicroSec>:
void DS18_USER_DelayMicroSec(uint32_t micros) {
 8011dec:	b480      	push	{r7}
 8011dee:	b083      	sub	sp, #12
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11, 0);
 8011df4:	4b08      	ldr	r3, [pc, #32]	; (8011e18 <DS18_USER_DelayMicroSec+0x2c>)
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	2200      	movs	r2, #0
 8011dfa:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim11) < micros);
 8011dfc:	bf00      	nop
 8011dfe:	4b06      	ldr	r3, [pc, #24]	; (8011e18 <DS18_USER_DelayMicroSec+0x2c>)
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e04:	687a      	ldr	r2, [r7, #4]
 8011e06:	429a      	cmp	r2, r3
 8011e08:	d8f9      	bhi.n	8011dfe <DS18_USER_DelayMicroSec+0x12>
}
 8011e0a:	bf00      	nop
 8011e0c:	bf00      	nop
 8011e0e:	370c      	adds	r7, #12
 8011e10:	46bd      	mov	sp, r7
 8011e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e16:	4770      	bx	lr
 8011e18:	200002d8 	.word	0x200002d8

08011e1c <LSM6DS3_GetData>:

	return LSM6DS3_OK;
}

void LSM6DS3_GetData(int16_t* AccelData, int16_t* GyroData)
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b086      	sub	sp, #24
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	6039      	str	r1, [r7, #0]


	uint8_t tmpData[12];

	//Start ACCEL read
	LSM6DS3_USER_CS_Activate();
 8011e26:	f000 f9b1 	bl	801218c <LSM6DS3_USER_CS_Activate>
	tmpData[0] = LSM6DS3_ReadRegister(0x28);
 8011e2a:	2028      	movs	r0, #40	; 0x28
 8011e2c:	f000 f99a 	bl	8012164 <LSM6DS3_ReadRegister>
 8011e30:	4603      	mov	r3, r0
 8011e32:	733b      	strb	r3, [r7, #12]
	LSM6DS3_USER_CS_Deactivate();
 8011e34:	f000 f9b6 	bl	80121a4 <LSM6DS3_USER_CS_Deactivate>

	LSM6DS3_USER_CS_Activate();
 8011e38:	f000 f9a8 	bl	801218c <LSM6DS3_USER_CS_Activate>
	tmpData[1] = LSM6DS3_ReadRegister(0x29);
 8011e3c:	2029      	movs	r0, #41	; 0x29
 8011e3e:	f000 f991 	bl	8012164 <LSM6DS3_ReadRegister>
 8011e42:	4603      	mov	r3, r0
 8011e44:	737b      	strb	r3, [r7, #13]
	LSM6DS3_USER_CS_Deactivate();
 8011e46:	f000 f9ad 	bl	80121a4 <LSM6DS3_USER_CS_Deactivate>

	LSM6DS3_USER_CS_Activate();
 8011e4a:	f000 f99f 	bl	801218c <LSM6DS3_USER_CS_Activate>
	tmpData[2] = LSM6DS3_ReadRegister(0x2A);
 8011e4e:	202a      	movs	r0, #42	; 0x2a
 8011e50:	f000 f988 	bl	8012164 <LSM6DS3_ReadRegister>
 8011e54:	4603      	mov	r3, r0
 8011e56:	73bb      	strb	r3, [r7, #14]
	LSM6DS3_USER_CS_Deactivate();
 8011e58:	f000 f9a4 	bl	80121a4 <LSM6DS3_USER_CS_Deactivate>

	LSM6DS3_USER_CS_Activate();
 8011e5c:	f000 f996 	bl	801218c <LSM6DS3_USER_CS_Activate>
	tmpData[3] = LSM6DS3_ReadRegister(0x2B);
 8011e60:	202b      	movs	r0, #43	; 0x2b
 8011e62:	f000 f97f 	bl	8012164 <LSM6DS3_ReadRegister>
 8011e66:	4603      	mov	r3, r0
 8011e68:	73fb      	strb	r3, [r7, #15]
	LSM6DS3_USER_CS_Deactivate();
 8011e6a:	f000 f99b 	bl	80121a4 <LSM6DS3_USER_CS_Deactivate>

	LSM6DS3_USER_CS_Activate();
 8011e6e:	f000 f98d 	bl	801218c <LSM6DS3_USER_CS_Activate>
	tmpData[4] = LSM6DS3_ReadRegister(0x2C);
 8011e72:	202c      	movs	r0, #44	; 0x2c
 8011e74:	f000 f976 	bl	8012164 <LSM6DS3_ReadRegister>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	743b      	strb	r3, [r7, #16]
	LSM6DS3_USER_CS_Deactivate();
 8011e7c:	f000 f992 	bl	80121a4 <LSM6DS3_USER_CS_Deactivate>

	LSM6DS3_USER_CS_Activate();
 8011e80:	f000 f984 	bl	801218c <LSM6DS3_USER_CS_Activate>
	tmpData[5] = LSM6DS3_ReadRegister(0x2D);
 8011e84:	202d      	movs	r0, #45	; 0x2d
 8011e86:	f000 f96d 	bl	8012164 <LSM6DS3_ReadRegister>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	747b      	strb	r3, [r7, #17]
	LSM6DS3_USER_CS_Deactivate();
 8011e8e:	f000 f989 	bl	80121a4 <LSM6DS3_USER_CS_Deactivate>


	//Start GYRO read
	LSM6DS3_USER_CS_Activate();
 8011e92:	f000 f97b 	bl	801218c <LSM6DS3_USER_CS_Activate>
	tmpData[6] = LSM6DS3_ReadRegister(0x22);
 8011e96:	2022      	movs	r0, #34	; 0x22
 8011e98:	f000 f964 	bl	8012164 <LSM6DS3_ReadRegister>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	74bb      	strb	r3, [r7, #18]
	LSM6DS3_USER_CS_Deactivate();
 8011ea0:	f000 f980 	bl	80121a4 <LSM6DS3_USER_CS_Deactivate>

	LSM6DS3_USER_CS_Activate();
 8011ea4:	f000 f972 	bl	801218c <LSM6DS3_USER_CS_Activate>
	tmpData[7] = LSM6DS3_ReadRegister(0x23);
 8011ea8:	2023      	movs	r0, #35	; 0x23
 8011eaa:	f000 f95b 	bl	8012164 <LSM6DS3_ReadRegister>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	74fb      	strb	r3, [r7, #19]
	LSM6DS3_USER_CS_Deactivate();
 8011eb2:	f000 f977 	bl	80121a4 <LSM6DS3_USER_CS_Deactivate>

	LSM6DS3_USER_CS_Activate();
 8011eb6:	f000 f969 	bl	801218c <LSM6DS3_USER_CS_Activate>
	tmpData[8] = LSM6DS3_ReadRegister(0x24);
 8011eba:	2024      	movs	r0, #36	; 0x24
 8011ebc:	f000 f952 	bl	8012164 <LSM6DS3_ReadRegister>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	753b      	strb	r3, [r7, #20]
	LSM6DS3_USER_CS_Deactivate();
 8011ec4:	f000 f96e 	bl	80121a4 <LSM6DS3_USER_CS_Deactivate>

	LSM6DS3_USER_CS_Activate();
 8011ec8:	f000 f960 	bl	801218c <LSM6DS3_USER_CS_Activate>
	tmpData[9] = LSM6DS3_ReadRegister(0x25);
 8011ecc:	2025      	movs	r0, #37	; 0x25
 8011ece:	f000 f949 	bl	8012164 <LSM6DS3_ReadRegister>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	757b      	strb	r3, [r7, #21]
	LSM6DS3_USER_CS_Deactivate();
 8011ed6:	f000 f965 	bl	80121a4 <LSM6DS3_USER_CS_Deactivate>

	LSM6DS3_USER_CS_Activate();
 8011eda:	f000 f957 	bl	801218c <LSM6DS3_USER_CS_Activate>
	tmpData[10] = LSM6DS3_ReadRegister(0x26);
 8011ede:	2026      	movs	r0, #38	; 0x26
 8011ee0:	f000 f940 	bl	8012164 <LSM6DS3_ReadRegister>
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	75bb      	strb	r3, [r7, #22]
	LSM6DS3_USER_CS_Deactivate();
 8011ee8:	f000 f95c 	bl	80121a4 <LSM6DS3_USER_CS_Deactivate>

	LSM6DS3_USER_CS_Activate();
 8011eec:	f000 f94e 	bl	801218c <LSM6DS3_USER_CS_Activate>
	tmpData[11] = LSM6DS3_ReadRegister(0x27);
 8011ef0:	2027      	movs	r0, #39	; 0x27
 8011ef2:	f000 f937 	bl	8012164 <LSM6DS3_ReadRegister>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	75fb      	strb	r3, [r7, #23]
	LSM6DS3_USER_CS_Deactivate();
 8011efa:	f000 f953 	bl	80121a4 <LSM6DS3_USER_CS_Deactivate>


	//Write data
	AccelData[0] = (tmpData[1] << 8) | tmpData[0];	//ACCEL X
 8011efe:	7b7b      	ldrb	r3, [r7, #13]
 8011f00:	021b      	lsls	r3, r3, #8
 8011f02:	b21a      	sxth	r2, r3
 8011f04:	7b3b      	ldrb	r3, [r7, #12]
 8011f06:	b21b      	sxth	r3, r3
 8011f08:	4313      	orrs	r3, r2
 8011f0a:	b21a      	sxth	r2, r3
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	801a      	strh	r2, [r3, #0]
	AccelData[1] = (tmpData[3] << 8) | tmpData[2];	//ACCEL Y
 8011f10:	7bfb      	ldrb	r3, [r7, #15]
 8011f12:	021b      	lsls	r3, r3, #8
 8011f14:	b219      	sxth	r1, r3
 8011f16:	7bbb      	ldrb	r3, [r7, #14]
 8011f18:	b21a      	sxth	r2, r3
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	3302      	adds	r3, #2
 8011f1e:	430a      	orrs	r2, r1
 8011f20:	b212      	sxth	r2, r2
 8011f22:	801a      	strh	r2, [r3, #0]
	AccelData[2] = (tmpData[5] << 8) | tmpData[4];	//ACCEL Z
 8011f24:	7c7b      	ldrb	r3, [r7, #17]
 8011f26:	021b      	lsls	r3, r3, #8
 8011f28:	b219      	sxth	r1, r3
 8011f2a:	7c3b      	ldrb	r3, [r7, #16]
 8011f2c:	b21a      	sxth	r2, r3
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	3304      	adds	r3, #4
 8011f32:	430a      	orrs	r2, r1
 8011f34:	b212      	sxth	r2, r2
 8011f36:	801a      	strh	r2, [r3, #0]

	GyroData[0] = (tmpData[7] << 8) | tmpData[6];	//GYRO X
 8011f38:	7cfb      	ldrb	r3, [r7, #19]
 8011f3a:	021b      	lsls	r3, r3, #8
 8011f3c:	b21a      	sxth	r2, r3
 8011f3e:	7cbb      	ldrb	r3, [r7, #18]
 8011f40:	b21b      	sxth	r3, r3
 8011f42:	4313      	orrs	r3, r2
 8011f44:	b21a      	sxth	r2, r3
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (tmpData[9] << 8) | tmpData[8];	//GYRO Y
 8011f4a:	7d7b      	ldrb	r3, [r7, #21]
 8011f4c:	021b      	lsls	r3, r3, #8
 8011f4e:	b219      	sxth	r1, r3
 8011f50:	7d3b      	ldrb	r3, [r7, #20]
 8011f52:	b21a      	sxth	r2, r3
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	3302      	adds	r3, #2
 8011f58:	430a      	orrs	r2, r1
 8011f5a:	b212      	sxth	r2, r2
 8011f5c:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (tmpData[11] << 8) | tmpData[10];//GYRO Z
 8011f5e:	7dfb      	ldrb	r3, [r7, #23]
 8011f60:	021b      	lsls	r3, r3, #8
 8011f62:	b219      	sxth	r1, r3
 8011f64:	7dbb      	ldrb	r3, [r7, #22]
 8011f66:	b21a      	sxth	r2, r3
 8011f68:	683b      	ldr	r3, [r7, #0]
 8011f6a:	3304      	adds	r3, #4
 8011f6c:	430a      	orrs	r2, r1
 8011f6e:	b212      	sxth	r2, r2
 8011f70:	801a      	strh	r2, [r3, #0]

}
 8011f72:	bf00      	nop
 8011f74:	3718      	adds	r7, #24
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bd80      	pop	{r7, pc}
	...

08011f7c <LSM6DS3_AccelConvert>:

void LSM6DS3_AccelConvert(int16_t* pAccelRaw, float* pAccelG)
{
 8011f7c:	b590      	push	{r4, r7, lr}
 8011f7e:	b083      	sub	sp, #12
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
 8011f84:	6039      	str	r1, [r7, #0]
	pAccelG[0] = pAccelRaw[0] * 0.488f / 1000.0f;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011f8c:	ee07 3a90 	vmov	s15, r3
 8011f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f94:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8012068 <LSM6DS3_AccelConvert+0xec>
 8011f98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011f9c:	eddf 6a33 	vldr	s13, [pc, #204]	; 801206c <LSM6DS3_AccelConvert+0xf0>
 8011fa0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011fa4:	683b      	ldr	r3, [r7, #0]
 8011fa6:	edc3 7a00 	vstr	s15, [r3]
	pAccelG[1] = pAccelRaw[1] * 0.488f / 1000.0f;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	3302      	adds	r3, #2
 8011fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011fb2:	ee07 3a90 	vmov	s15, r3
 8011fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011fba:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8012068 <LSM6DS3_AccelConvert+0xec>
 8011fbe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011fc2:	683b      	ldr	r3, [r7, #0]
 8011fc4:	3304      	adds	r3, #4
 8011fc6:	eddf 6a29 	vldr	s13, [pc, #164]	; 801206c <LSM6DS3_AccelConvert+0xf0>
 8011fca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011fce:	edc3 7a00 	vstr	s15, [r3]
	pAccelG[2] = pAccelRaw[2] * 0.488f / 1000.0f;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	3304      	adds	r3, #4
 8011fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011fda:	ee07 3a90 	vmov	s15, r3
 8011fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011fe2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8012068 <LSM6DS3_AccelConvert+0xec>
 8011fe6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011fea:	683b      	ldr	r3, [r7, #0]
 8011fec:	3308      	adds	r3, #8
 8011fee:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801206c <LSM6DS3_AccelConvert+0xf0>
 8011ff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011ff6:	edc3 7a00 	vstr	s15, [r3]
	pAccelG[3] = sqrt( (pAccelG[0]*pAccelG[0] ) + (pAccelG[1]*pAccelG[1]) + (pAccelG[2]*pAccelG[2]) );
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	ed93 7a00 	vldr	s14, [r3]
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	edd3 7a00 	vldr	s15, [r3]
 8012006:	ee27 7a27 	vmul.f32	s14, s14, s15
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	3304      	adds	r3, #4
 801200e:	edd3 6a00 	vldr	s13, [r3]
 8012012:	683b      	ldr	r3, [r7, #0]
 8012014:	3304      	adds	r3, #4
 8012016:	edd3 7a00 	vldr	s15, [r3]
 801201a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801201e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012022:	683b      	ldr	r3, [r7, #0]
 8012024:	3308      	adds	r3, #8
 8012026:	edd3 6a00 	vldr	s13, [r3]
 801202a:	683b      	ldr	r3, [r7, #0]
 801202c:	3308      	adds	r3, #8
 801202e:	edd3 7a00 	vldr	s15, [r3]
 8012032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012036:	ee77 7a27 	vadd.f32	s15, s14, s15
 801203a:	ee17 0a90 	vmov	r0, s15
 801203e:	f7ee fa83 	bl	8000548 <__aeabi_f2d>
 8012042:	4602      	mov	r2, r0
 8012044:	460b      	mov	r3, r1
 8012046:	ec43 2b10 	vmov	d0, r2, r3
 801204a:	f000 fdd8 	bl	8012bfe <sqrt>
 801204e:	ec51 0b10 	vmov	r0, r1, d0
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	f103 040c 	add.w	r4, r3, #12
 8012058:	f7ee fd7e 	bl	8000b58 <__aeabi_d2f>
 801205c:	4603      	mov	r3, r0
 801205e:	6023      	str	r3, [r4, #0]
}
 8012060:	bf00      	nop
 8012062:	370c      	adds	r7, #12
 8012064:	46bd      	mov	sp, r7
 8012066:	bd90      	pop	{r4, r7, pc}
 8012068:	3ef9db23 	.word	0x3ef9db23
 801206c:	447a0000 	.word	0x447a0000

08012070 <LSM6DS3_GyroConvert>:
void LSM6DS3_GyroConvert(int16_t* pGyroRaw, float* pGyroDS)
{
 8012070:	b590      	push	{r4, r7, lr}
 8012072:	b083      	sub	sp, #12
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
 8012078:	6039      	str	r1, [r7, #0]
	pGyroDS[0] = pGyroRaw[0] * 17.5f / 1000.0f;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012080:	ee07 3a90 	vmov	s15, r3
 8012084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012088:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801215c <LSM6DS3_GyroConvert+0xec>
 801208c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012090:	eddf 6a33 	vldr	s13, [pc, #204]	; 8012160 <LSM6DS3_GyroConvert+0xf0>
 8012094:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012098:	683b      	ldr	r3, [r7, #0]
 801209a:	edc3 7a00 	vstr	s15, [r3]
	pGyroDS[1] = pGyroRaw[1] * 17.5f / 1000.0f;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	3302      	adds	r3, #2
 80120a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80120a6:	ee07 3a90 	vmov	s15, r3
 80120aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80120ae:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 801215c <LSM6DS3_GyroConvert+0xec>
 80120b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	3304      	adds	r3, #4
 80120ba:	eddf 6a29 	vldr	s13, [pc, #164]	; 8012160 <LSM6DS3_GyroConvert+0xf0>
 80120be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80120c2:	edc3 7a00 	vstr	s15, [r3]
	pGyroDS[2] = pGyroRaw[2] * 17.5f / 1000.0f;
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	3304      	adds	r3, #4
 80120ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80120ce:	ee07 3a90 	vmov	s15, r3
 80120d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80120d6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 801215c <LSM6DS3_GyroConvert+0xec>
 80120da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80120de:	683b      	ldr	r3, [r7, #0]
 80120e0:	3308      	adds	r3, #8
 80120e2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8012160 <LSM6DS3_GyroConvert+0xf0>
 80120e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80120ea:	edc3 7a00 	vstr	s15, [r3]
	pGyroDS[3] = sqrt( (pGyroDS[0]*pGyroDS[0]) + (pGyroDS[1]*pGyroDS[1]) + (pGyroDS[2]*pGyroDS[2]) );
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	ed93 7a00 	vldr	s14, [r3]
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	edd3 7a00 	vldr	s15, [r3]
 80120fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80120fe:	683b      	ldr	r3, [r7, #0]
 8012100:	3304      	adds	r3, #4
 8012102:	edd3 6a00 	vldr	s13, [r3]
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	3304      	adds	r3, #4
 801210a:	edd3 7a00 	vldr	s15, [r3]
 801210e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012112:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	3308      	adds	r3, #8
 801211a:	edd3 6a00 	vldr	s13, [r3]
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	3308      	adds	r3, #8
 8012122:	edd3 7a00 	vldr	s15, [r3]
 8012126:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801212a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801212e:	ee17 0a90 	vmov	r0, s15
 8012132:	f7ee fa09 	bl	8000548 <__aeabi_f2d>
 8012136:	4602      	mov	r2, r0
 8012138:	460b      	mov	r3, r1
 801213a:	ec43 2b10 	vmov	d0, r2, r3
 801213e:	f000 fd5e 	bl	8012bfe <sqrt>
 8012142:	ec51 0b10 	vmov	r0, r1, d0
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	f103 040c 	add.w	r4, r3, #12
 801214c:	f7ee fd04 	bl	8000b58 <__aeabi_d2f>
 8012150:	4603      	mov	r3, r0
 8012152:	6023      	str	r3, [r4, #0]
}
 8012154:	bf00      	nop
 8012156:	370c      	adds	r7, #12
 8012158:	46bd      	mov	sp, r7
 801215a:	bd90      	pop	{r4, r7, pc}
 801215c:	418c0000 	.word	0x418c0000
 8012160:	447a0000 	.word	0x447a0000

08012164 <LSM6DS3_ReadRegister>:





uint8_t LSM6DS3_ReadRegister(uint8_t regAddr){
 8012164:	b580      	push	{r7, lr}
 8012166:	b082      	sub	sp, #8
 8012168:	af00      	add	r7, sp, #0
 801216a:	4603      	mov	r3, r0
 801216c:	71fb      	strb	r3, [r7, #7]

	LSM6DS3_USER_SPI_RxTx(regAddr | (1<<7));
 801216e:	79fb      	ldrb	r3, [r7, #7]
 8012170:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012174:	b2db      	uxtb	r3, r3
 8012176:	4618      	mov	r0, r3
 8012178:	f000 f820 	bl	80121bc <LSM6DS3_USER_SPI_RxTx>
	return LSM6DS3_USER_SPI_RxTx(0xFF);
 801217c:	20ff      	movs	r0, #255	; 0xff
 801217e:	f000 f81d 	bl	80121bc <LSM6DS3_USER_SPI_RxTx>
 8012182:	4603      	mov	r3, r0
}
 8012184:	4618      	mov	r0, r3
 8012186:	3708      	adds	r7, #8
 8012188:	46bd      	mov	sp, r7
 801218a:	bd80      	pop	{r7, pc}

0801218c <LSM6DS3_USER_CS_Activate>:
#include "LSM6DS3_port.h"
extern SPI_HandleTypeDef hspi1;

void LSM6DS3_USER_CS_Activate()
{
 801218c:	b580      	push	{r7, lr}
 801218e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LSM_CS_GPIO_Port, LSM_CS_Pin, GPIO_PIN_RESET);
 8012190:	2200      	movs	r2, #0
 8012192:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012196:	4802      	ldr	r0, [pc, #8]	; (80121a0 <LSM6DS3_USER_CS_Activate+0x14>)
 8012198:	f7f1 f9b8 	bl	800350c <HAL_GPIO_WritePin>
}
 801219c:	bf00      	nop
 801219e:	bd80      	pop	{r7, pc}
 80121a0:	40020400 	.word	0x40020400

080121a4 <LSM6DS3_USER_CS_Deactivate>:

void LSM6DS3_USER_CS_Deactivate()
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LSM_CS_GPIO_Port, LSM_CS_Pin, GPIO_PIN_SET);
 80121a8:	2201      	movs	r2, #1
 80121aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80121ae:	4802      	ldr	r0, [pc, #8]	; (80121b8 <LSM6DS3_USER_CS_Deactivate+0x14>)
 80121b0:	f7f1 f9ac 	bl	800350c <HAL_GPIO_WritePin>
}
 80121b4:	bf00      	nop
 80121b6:	bd80      	pop	{r7, pc}
 80121b8:	40020400 	.word	0x40020400

080121bc <LSM6DS3_USER_SPI_RxTx>:
uint8_t LSM6DS3_USER_SPI_RxTx(uint8_t txData)
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b086      	sub	sp, #24
 80121c0:	af02      	add	r7, sp, #8
 80121c2:	4603      	mov	r3, r0
 80121c4:	71fb      	strb	r3, [r7, #7]
	uint8_t rxData = 0xFF;
 80121c6:	23ff      	movs	r3, #255	; 0xff
 80121c8:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 2000);
 80121ca:	f107 020f 	add.w	r2, r7, #15
 80121ce:	1df9      	adds	r1, r7, #7
 80121d0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80121d4:	9300      	str	r3, [sp, #0]
 80121d6:	2301      	movs	r3, #1
 80121d8:	4803      	ldr	r0, [pc, #12]	; (80121e8 <LSM6DS3_USER_SPI_RxTx+0x2c>)
 80121da:	f7f4 fa2c 	bl	8006636 <HAL_SPI_TransmitReceive>
	return rxData;
 80121de:	7bfb      	ldrb	r3, [r7, #15]
}
 80121e0:	4618      	mov	r0, r3
 80121e2:	3710      	adds	r7, #16
 80121e4:	46bd      	mov	sp, r7
 80121e6:	bd80      	pop	{r7, pc}
 80121e8:	20000238 	.word	0x20000238

080121ec <__errno>:
 80121ec:	4b01      	ldr	r3, [pc, #4]	; (80121f4 <__errno+0x8>)
 80121ee:	6818      	ldr	r0, [r3, #0]
 80121f0:	4770      	bx	lr
 80121f2:	bf00      	nop
 80121f4:	20000118 	.word	0x20000118

080121f8 <__libc_init_array>:
 80121f8:	b570      	push	{r4, r5, r6, lr}
 80121fa:	4d0d      	ldr	r5, [pc, #52]	; (8012230 <__libc_init_array+0x38>)
 80121fc:	4c0d      	ldr	r4, [pc, #52]	; (8012234 <__libc_init_array+0x3c>)
 80121fe:	1b64      	subs	r4, r4, r5
 8012200:	10a4      	asrs	r4, r4, #2
 8012202:	2600      	movs	r6, #0
 8012204:	42a6      	cmp	r6, r4
 8012206:	d109      	bne.n	801221c <__libc_init_array+0x24>
 8012208:	4d0b      	ldr	r5, [pc, #44]	; (8012238 <__libc_init_array+0x40>)
 801220a:	4c0c      	ldr	r4, [pc, #48]	; (801223c <__libc_init_array+0x44>)
 801220c:	f000 fdd6 	bl	8012dbc <_init>
 8012210:	1b64      	subs	r4, r4, r5
 8012212:	10a4      	asrs	r4, r4, #2
 8012214:	2600      	movs	r6, #0
 8012216:	42a6      	cmp	r6, r4
 8012218:	d105      	bne.n	8012226 <__libc_init_array+0x2e>
 801221a:	bd70      	pop	{r4, r5, r6, pc}
 801221c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012220:	4798      	blx	r3
 8012222:	3601      	adds	r6, #1
 8012224:	e7ee      	b.n	8012204 <__libc_init_array+0xc>
 8012226:	f855 3b04 	ldr.w	r3, [r5], #4
 801222a:	4798      	blx	r3
 801222c:	3601      	adds	r6, #1
 801222e:	e7f2      	b.n	8012216 <__libc_init_array+0x1e>
 8012230:	08012fe8 	.word	0x08012fe8
 8012234:	08012fe8 	.word	0x08012fe8
 8012238:	08012fe8 	.word	0x08012fe8
 801223c:	08012fec 	.word	0x08012fec

08012240 <__retarget_lock_acquire_recursive>:
 8012240:	4770      	bx	lr

08012242 <__retarget_lock_release_recursive>:
 8012242:	4770      	bx	lr

08012244 <memcpy>:
 8012244:	440a      	add	r2, r1
 8012246:	4291      	cmp	r1, r2
 8012248:	f100 33ff 	add.w	r3, r0, #4294967295
 801224c:	d100      	bne.n	8012250 <memcpy+0xc>
 801224e:	4770      	bx	lr
 8012250:	b510      	push	{r4, lr}
 8012252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012256:	f803 4f01 	strb.w	r4, [r3, #1]!
 801225a:	4291      	cmp	r1, r2
 801225c:	d1f9      	bne.n	8012252 <memcpy+0xe>
 801225e:	bd10      	pop	{r4, pc}

08012260 <memset>:
 8012260:	4402      	add	r2, r0
 8012262:	4603      	mov	r3, r0
 8012264:	4293      	cmp	r3, r2
 8012266:	d100      	bne.n	801226a <memset+0xa>
 8012268:	4770      	bx	lr
 801226a:	f803 1b01 	strb.w	r1, [r3], #1
 801226e:	e7f9      	b.n	8012264 <memset+0x4>

08012270 <sbrk_aligned>:
 8012270:	b570      	push	{r4, r5, r6, lr}
 8012272:	4e0e      	ldr	r6, [pc, #56]	; (80122ac <sbrk_aligned+0x3c>)
 8012274:	460c      	mov	r4, r1
 8012276:	6831      	ldr	r1, [r6, #0]
 8012278:	4605      	mov	r5, r0
 801227a:	b911      	cbnz	r1, 8012282 <sbrk_aligned+0x12>
 801227c:	f000 f8f6 	bl	801246c <_sbrk_r>
 8012280:	6030      	str	r0, [r6, #0]
 8012282:	4621      	mov	r1, r4
 8012284:	4628      	mov	r0, r5
 8012286:	f000 f8f1 	bl	801246c <_sbrk_r>
 801228a:	1c43      	adds	r3, r0, #1
 801228c:	d00a      	beq.n	80122a4 <sbrk_aligned+0x34>
 801228e:	1cc4      	adds	r4, r0, #3
 8012290:	f024 0403 	bic.w	r4, r4, #3
 8012294:	42a0      	cmp	r0, r4
 8012296:	d007      	beq.n	80122a8 <sbrk_aligned+0x38>
 8012298:	1a21      	subs	r1, r4, r0
 801229a:	4628      	mov	r0, r5
 801229c:	f000 f8e6 	bl	801246c <_sbrk_r>
 80122a0:	3001      	adds	r0, #1
 80122a2:	d101      	bne.n	80122a8 <sbrk_aligned+0x38>
 80122a4:	f04f 34ff 	mov.w	r4, #4294967295
 80122a8:	4620      	mov	r0, r4
 80122aa:	bd70      	pop	{r4, r5, r6, pc}
 80122ac:	2000829c 	.word	0x2000829c

080122b0 <_malloc_r>:
 80122b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122b4:	1ccd      	adds	r5, r1, #3
 80122b6:	f025 0503 	bic.w	r5, r5, #3
 80122ba:	3508      	adds	r5, #8
 80122bc:	2d0c      	cmp	r5, #12
 80122be:	bf38      	it	cc
 80122c0:	250c      	movcc	r5, #12
 80122c2:	2d00      	cmp	r5, #0
 80122c4:	4607      	mov	r7, r0
 80122c6:	db01      	blt.n	80122cc <_malloc_r+0x1c>
 80122c8:	42a9      	cmp	r1, r5
 80122ca:	d905      	bls.n	80122d8 <_malloc_r+0x28>
 80122cc:	230c      	movs	r3, #12
 80122ce:	603b      	str	r3, [r7, #0]
 80122d0:	2600      	movs	r6, #0
 80122d2:	4630      	mov	r0, r6
 80122d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122d8:	4e2e      	ldr	r6, [pc, #184]	; (8012394 <_malloc_r+0xe4>)
 80122da:	f000 f8f7 	bl	80124cc <__malloc_lock>
 80122de:	6833      	ldr	r3, [r6, #0]
 80122e0:	461c      	mov	r4, r3
 80122e2:	bb34      	cbnz	r4, 8012332 <_malloc_r+0x82>
 80122e4:	4629      	mov	r1, r5
 80122e6:	4638      	mov	r0, r7
 80122e8:	f7ff ffc2 	bl	8012270 <sbrk_aligned>
 80122ec:	1c43      	adds	r3, r0, #1
 80122ee:	4604      	mov	r4, r0
 80122f0:	d14d      	bne.n	801238e <_malloc_r+0xde>
 80122f2:	6834      	ldr	r4, [r6, #0]
 80122f4:	4626      	mov	r6, r4
 80122f6:	2e00      	cmp	r6, #0
 80122f8:	d140      	bne.n	801237c <_malloc_r+0xcc>
 80122fa:	6823      	ldr	r3, [r4, #0]
 80122fc:	4631      	mov	r1, r6
 80122fe:	4638      	mov	r0, r7
 8012300:	eb04 0803 	add.w	r8, r4, r3
 8012304:	f000 f8b2 	bl	801246c <_sbrk_r>
 8012308:	4580      	cmp	r8, r0
 801230a:	d13a      	bne.n	8012382 <_malloc_r+0xd2>
 801230c:	6821      	ldr	r1, [r4, #0]
 801230e:	3503      	adds	r5, #3
 8012310:	1a6d      	subs	r5, r5, r1
 8012312:	f025 0503 	bic.w	r5, r5, #3
 8012316:	3508      	adds	r5, #8
 8012318:	2d0c      	cmp	r5, #12
 801231a:	bf38      	it	cc
 801231c:	250c      	movcc	r5, #12
 801231e:	4629      	mov	r1, r5
 8012320:	4638      	mov	r0, r7
 8012322:	f7ff ffa5 	bl	8012270 <sbrk_aligned>
 8012326:	3001      	adds	r0, #1
 8012328:	d02b      	beq.n	8012382 <_malloc_r+0xd2>
 801232a:	6823      	ldr	r3, [r4, #0]
 801232c:	442b      	add	r3, r5
 801232e:	6023      	str	r3, [r4, #0]
 8012330:	e00e      	b.n	8012350 <_malloc_r+0xa0>
 8012332:	6822      	ldr	r2, [r4, #0]
 8012334:	1b52      	subs	r2, r2, r5
 8012336:	d41e      	bmi.n	8012376 <_malloc_r+0xc6>
 8012338:	2a0b      	cmp	r2, #11
 801233a:	d916      	bls.n	801236a <_malloc_r+0xba>
 801233c:	1961      	adds	r1, r4, r5
 801233e:	42a3      	cmp	r3, r4
 8012340:	6025      	str	r5, [r4, #0]
 8012342:	bf18      	it	ne
 8012344:	6059      	strne	r1, [r3, #4]
 8012346:	6863      	ldr	r3, [r4, #4]
 8012348:	bf08      	it	eq
 801234a:	6031      	streq	r1, [r6, #0]
 801234c:	5162      	str	r2, [r4, r5]
 801234e:	604b      	str	r3, [r1, #4]
 8012350:	4638      	mov	r0, r7
 8012352:	f104 060b 	add.w	r6, r4, #11
 8012356:	f000 f8bf 	bl	80124d8 <__malloc_unlock>
 801235a:	f026 0607 	bic.w	r6, r6, #7
 801235e:	1d23      	adds	r3, r4, #4
 8012360:	1af2      	subs	r2, r6, r3
 8012362:	d0b6      	beq.n	80122d2 <_malloc_r+0x22>
 8012364:	1b9b      	subs	r3, r3, r6
 8012366:	50a3      	str	r3, [r4, r2]
 8012368:	e7b3      	b.n	80122d2 <_malloc_r+0x22>
 801236a:	6862      	ldr	r2, [r4, #4]
 801236c:	42a3      	cmp	r3, r4
 801236e:	bf0c      	ite	eq
 8012370:	6032      	streq	r2, [r6, #0]
 8012372:	605a      	strne	r2, [r3, #4]
 8012374:	e7ec      	b.n	8012350 <_malloc_r+0xa0>
 8012376:	4623      	mov	r3, r4
 8012378:	6864      	ldr	r4, [r4, #4]
 801237a:	e7b2      	b.n	80122e2 <_malloc_r+0x32>
 801237c:	4634      	mov	r4, r6
 801237e:	6876      	ldr	r6, [r6, #4]
 8012380:	e7b9      	b.n	80122f6 <_malloc_r+0x46>
 8012382:	230c      	movs	r3, #12
 8012384:	603b      	str	r3, [r7, #0]
 8012386:	4638      	mov	r0, r7
 8012388:	f000 f8a6 	bl	80124d8 <__malloc_unlock>
 801238c:	e7a1      	b.n	80122d2 <_malloc_r+0x22>
 801238e:	6025      	str	r5, [r4, #0]
 8012390:	e7de      	b.n	8012350 <_malloc_r+0xa0>
 8012392:	bf00      	nop
 8012394:	20008298 	.word	0x20008298

08012398 <cleanup_glue>:
 8012398:	b538      	push	{r3, r4, r5, lr}
 801239a:	460c      	mov	r4, r1
 801239c:	6809      	ldr	r1, [r1, #0]
 801239e:	4605      	mov	r5, r0
 80123a0:	b109      	cbz	r1, 80123a6 <cleanup_glue+0xe>
 80123a2:	f7ff fff9 	bl	8012398 <cleanup_glue>
 80123a6:	4621      	mov	r1, r4
 80123a8:	4628      	mov	r0, r5
 80123aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123ae:	f000 b899 	b.w	80124e4 <_free_r>
	...

080123b4 <_reclaim_reent>:
 80123b4:	4b2c      	ldr	r3, [pc, #176]	; (8012468 <_reclaim_reent+0xb4>)
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	4283      	cmp	r3, r0
 80123ba:	b570      	push	{r4, r5, r6, lr}
 80123bc:	4604      	mov	r4, r0
 80123be:	d051      	beq.n	8012464 <_reclaim_reent+0xb0>
 80123c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80123c2:	b143      	cbz	r3, 80123d6 <_reclaim_reent+0x22>
 80123c4:	68db      	ldr	r3, [r3, #12]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d14a      	bne.n	8012460 <_reclaim_reent+0xac>
 80123ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123cc:	6819      	ldr	r1, [r3, #0]
 80123ce:	b111      	cbz	r1, 80123d6 <_reclaim_reent+0x22>
 80123d0:	4620      	mov	r0, r4
 80123d2:	f000 f887 	bl	80124e4 <_free_r>
 80123d6:	6961      	ldr	r1, [r4, #20]
 80123d8:	b111      	cbz	r1, 80123e0 <_reclaim_reent+0x2c>
 80123da:	4620      	mov	r0, r4
 80123dc:	f000 f882 	bl	80124e4 <_free_r>
 80123e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80123e2:	b111      	cbz	r1, 80123ea <_reclaim_reent+0x36>
 80123e4:	4620      	mov	r0, r4
 80123e6:	f000 f87d 	bl	80124e4 <_free_r>
 80123ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80123ec:	b111      	cbz	r1, 80123f4 <_reclaim_reent+0x40>
 80123ee:	4620      	mov	r0, r4
 80123f0:	f000 f878 	bl	80124e4 <_free_r>
 80123f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80123f6:	b111      	cbz	r1, 80123fe <_reclaim_reent+0x4a>
 80123f8:	4620      	mov	r0, r4
 80123fa:	f000 f873 	bl	80124e4 <_free_r>
 80123fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012400:	b111      	cbz	r1, 8012408 <_reclaim_reent+0x54>
 8012402:	4620      	mov	r0, r4
 8012404:	f000 f86e 	bl	80124e4 <_free_r>
 8012408:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801240a:	b111      	cbz	r1, 8012412 <_reclaim_reent+0x5e>
 801240c:	4620      	mov	r0, r4
 801240e:	f000 f869 	bl	80124e4 <_free_r>
 8012412:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012414:	b111      	cbz	r1, 801241c <_reclaim_reent+0x68>
 8012416:	4620      	mov	r0, r4
 8012418:	f000 f864 	bl	80124e4 <_free_r>
 801241c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801241e:	b111      	cbz	r1, 8012426 <_reclaim_reent+0x72>
 8012420:	4620      	mov	r0, r4
 8012422:	f000 f85f 	bl	80124e4 <_free_r>
 8012426:	69a3      	ldr	r3, [r4, #24]
 8012428:	b1e3      	cbz	r3, 8012464 <_reclaim_reent+0xb0>
 801242a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801242c:	4620      	mov	r0, r4
 801242e:	4798      	blx	r3
 8012430:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012432:	b1b9      	cbz	r1, 8012464 <_reclaim_reent+0xb0>
 8012434:	4620      	mov	r0, r4
 8012436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801243a:	f7ff bfad 	b.w	8012398 <cleanup_glue>
 801243e:	5949      	ldr	r1, [r1, r5]
 8012440:	b941      	cbnz	r1, 8012454 <_reclaim_reent+0xa0>
 8012442:	3504      	adds	r5, #4
 8012444:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012446:	2d80      	cmp	r5, #128	; 0x80
 8012448:	68d9      	ldr	r1, [r3, #12]
 801244a:	d1f8      	bne.n	801243e <_reclaim_reent+0x8a>
 801244c:	4620      	mov	r0, r4
 801244e:	f000 f849 	bl	80124e4 <_free_r>
 8012452:	e7ba      	b.n	80123ca <_reclaim_reent+0x16>
 8012454:	680e      	ldr	r6, [r1, #0]
 8012456:	4620      	mov	r0, r4
 8012458:	f000 f844 	bl	80124e4 <_free_r>
 801245c:	4631      	mov	r1, r6
 801245e:	e7ef      	b.n	8012440 <_reclaim_reent+0x8c>
 8012460:	2500      	movs	r5, #0
 8012462:	e7ef      	b.n	8012444 <_reclaim_reent+0x90>
 8012464:	bd70      	pop	{r4, r5, r6, pc}
 8012466:	bf00      	nop
 8012468:	20000118 	.word	0x20000118

0801246c <_sbrk_r>:
 801246c:	b538      	push	{r3, r4, r5, lr}
 801246e:	4d06      	ldr	r5, [pc, #24]	; (8012488 <_sbrk_r+0x1c>)
 8012470:	2300      	movs	r3, #0
 8012472:	4604      	mov	r4, r0
 8012474:	4608      	mov	r0, r1
 8012476:	602b      	str	r3, [r5, #0]
 8012478:	f7f0 f910 	bl	800269c <_sbrk>
 801247c:	1c43      	adds	r3, r0, #1
 801247e:	d102      	bne.n	8012486 <_sbrk_r+0x1a>
 8012480:	682b      	ldr	r3, [r5, #0]
 8012482:	b103      	cbz	r3, 8012486 <_sbrk_r+0x1a>
 8012484:	6023      	str	r3, [r4, #0]
 8012486:	bd38      	pop	{r3, r4, r5, pc}
 8012488:	200082a0 	.word	0x200082a0

0801248c <siprintf>:
 801248c:	b40e      	push	{r1, r2, r3}
 801248e:	b500      	push	{lr}
 8012490:	b09c      	sub	sp, #112	; 0x70
 8012492:	ab1d      	add	r3, sp, #116	; 0x74
 8012494:	9002      	str	r0, [sp, #8]
 8012496:	9006      	str	r0, [sp, #24]
 8012498:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801249c:	4809      	ldr	r0, [pc, #36]	; (80124c4 <siprintf+0x38>)
 801249e:	9107      	str	r1, [sp, #28]
 80124a0:	9104      	str	r1, [sp, #16]
 80124a2:	4909      	ldr	r1, [pc, #36]	; (80124c8 <siprintf+0x3c>)
 80124a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80124a8:	9105      	str	r1, [sp, #20]
 80124aa:	6800      	ldr	r0, [r0, #0]
 80124ac:	9301      	str	r3, [sp, #4]
 80124ae:	a902      	add	r1, sp, #8
 80124b0:	f000 f8c0 	bl	8012634 <_svfiprintf_r>
 80124b4:	9b02      	ldr	r3, [sp, #8]
 80124b6:	2200      	movs	r2, #0
 80124b8:	701a      	strb	r2, [r3, #0]
 80124ba:	b01c      	add	sp, #112	; 0x70
 80124bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80124c0:	b003      	add	sp, #12
 80124c2:	4770      	bx	lr
 80124c4:	20000118 	.word	0x20000118
 80124c8:	ffff0208 	.word	0xffff0208

080124cc <__malloc_lock>:
 80124cc:	4801      	ldr	r0, [pc, #4]	; (80124d4 <__malloc_lock+0x8>)
 80124ce:	f7ff beb7 	b.w	8012240 <__retarget_lock_acquire_recursive>
 80124d2:	bf00      	nop
 80124d4:	20008294 	.word	0x20008294

080124d8 <__malloc_unlock>:
 80124d8:	4801      	ldr	r0, [pc, #4]	; (80124e0 <__malloc_unlock+0x8>)
 80124da:	f7ff beb2 	b.w	8012242 <__retarget_lock_release_recursive>
 80124de:	bf00      	nop
 80124e0:	20008294 	.word	0x20008294

080124e4 <_free_r>:
 80124e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80124e6:	2900      	cmp	r1, #0
 80124e8:	d044      	beq.n	8012574 <_free_r+0x90>
 80124ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80124ee:	9001      	str	r0, [sp, #4]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	f1a1 0404 	sub.w	r4, r1, #4
 80124f6:	bfb8      	it	lt
 80124f8:	18e4      	addlt	r4, r4, r3
 80124fa:	f7ff ffe7 	bl	80124cc <__malloc_lock>
 80124fe:	4a1e      	ldr	r2, [pc, #120]	; (8012578 <_free_r+0x94>)
 8012500:	9801      	ldr	r0, [sp, #4]
 8012502:	6813      	ldr	r3, [r2, #0]
 8012504:	b933      	cbnz	r3, 8012514 <_free_r+0x30>
 8012506:	6063      	str	r3, [r4, #4]
 8012508:	6014      	str	r4, [r2, #0]
 801250a:	b003      	add	sp, #12
 801250c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012510:	f7ff bfe2 	b.w	80124d8 <__malloc_unlock>
 8012514:	42a3      	cmp	r3, r4
 8012516:	d908      	bls.n	801252a <_free_r+0x46>
 8012518:	6825      	ldr	r5, [r4, #0]
 801251a:	1961      	adds	r1, r4, r5
 801251c:	428b      	cmp	r3, r1
 801251e:	bf01      	itttt	eq
 8012520:	6819      	ldreq	r1, [r3, #0]
 8012522:	685b      	ldreq	r3, [r3, #4]
 8012524:	1949      	addeq	r1, r1, r5
 8012526:	6021      	streq	r1, [r4, #0]
 8012528:	e7ed      	b.n	8012506 <_free_r+0x22>
 801252a:	461a      	mov	r2, r3
 801252c:	685b      	ldr	r3, [r3, #4]
 801252e:	b10b      	cbz	r3, 8012534 <_free_r+0x50>
 8012530:	42a3      	cmp	r3, r4
 8012532:	d9fa      	bls.n	801252a <_free_r+0x46>
 8012534:	6811      	ldr	r1, [r2, #0]
 8012536:	1855      	adds	r5, r2, r1
 8012538:	42a5      	cmp	r5, r4
 801253a:	d10b      	bne.n	8012554 <_free_r+0x70>
 801253c:	6824      	ldr	r4, [r4, #0]
 801253e:	4421      	add	r1, r4
 8012540:	1854      	adds	r4, r2, r1
 8012542:	42a3      	cmp	r3, r4
 8012544:	6011      	str	r1, [r2, #0]
 8012546:	d1e0      	bne.n	801250a <_free_r+0x26>
 8012548:	681c      	ldr	r4, [r3, #0]
 801254a:	685b      	ldr	r3, [r3, #4]
 801254c:	6053      	str	r3, [r2, #4]
 801254e:	4421      	add	r1, r4
 8012550:	6011      	str	r1, [r2, #0]
 8012552:	e7da      	b.n	801250a <_free_r+0x26>
 8012554:	d902      	bls.n	801255c <_free_r+0x78>
 8012556:	230c      	movs	r3, #12
 8012558:	6003      	str	r3, [r0, #0]
 801255a:	e7d6      	b.n	801250a <_free_r+0x26>
 801255c:	6825      	ldr	r5, [r4, #0]
 801255e:	1961      	adds	r1, r4, r5
 8012560:	428b      	cmp	r3, r1
 8012562:	bf04      	itt	eq
 8012564:	6819      	ldreq	r1, [r3, #0]
 8012566:	685b      	ldreq	r3, [r3, #4]
 8012568:	6063      	str	r3, [r4, #4]
 801256a:	bf04      	itt	eq
 801256c:	1949      	addeq	r1, r1, r5
 801256e:	6021      	streq	r1, [r4, #0]
 8012570:	6054      	str	r4, [r2, #4]
 8012572:	e7ca      	b.n	801250a <_free_r+0x26>
 8012574:	b003      	add	sp, #12
 8012576:	bd30      	pop	{r4, r5, pc}
 8012578:	20008298 	.word	0x20008298

0801257c <__ssputs_r>:
 801257c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012580:	688e      	ldr	r6, [r1, #8]
 8012582:	429e      	cmp	r6, r3
 8012584:	4682      	mov	sl, r0
 8012586:	460c      	mov	r4, r1
 8012588:	4690      	mov	r8, r2
 801258a:	461f      	mov	r7, r3
 801258c:	d838      	bhi.n	8012600 <__ssputs_r+0x84>
 801258e:	898a      	ldrh	r2, [r1, #12]
 8012590:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012594:	d032      	beq.n	80125fc <__ssputs_r+0x80>
 8012596:	6825      	ldr	r5, [r4, #0]
 8012598:	6909      	ldr	r1, [r1, #16]
 801259a:	eba5 0901 	sub.w	r9, r5, r1
 801259e:	6965      	ldr	r5, [r4, #20]
 80125a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80125a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80125a8:	3301      	adds	r3, #1
 80125aa:	444b      	add	r3, r9
 80125ac:	106d      	asrs	r5, r5, #1
 80125ae:	429d      	cmp	r5, r3
 80125b0:	bf38      	it	cc
 80125b2:	461d      	movcc	r5, r3
 80125b4:	0553      	lsls	r3, r2, #21
 80125b6:	d531      	bpl.n	801261c <__ssputs_r+0xa0>
 80125b8:	4629      	mov	r1, r5
 80125ba:	f7ff fe79 	bl	80122b0 <_malloc_r>
 80125be:	4606      	mov	r6, r0
 80125c0:	b950      	cbnz	r0, 80125d8 <__ssputs_r+0x5c>
 80125c2:	230c      	movs	r3, #12
 80125c4:	f8ca 3000 	str.w	r3, [sl]
 80125c8:	89a3      	ldrh	r3, [r4, #12]
 80125ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80125ce:	81a3      	strh	r3, [r4, #12]
 80125d0:	f04f 30ff 	mov.w	r0, #4294967295
 80125d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125d8:	6921      	ldr	r1, [r4, #16]
 80125da:	464a      	mov	r2, r9
 80125dc:	f7ff fe32 	bl	8012244 <memcpy>
 80125e0:	89a3      	ldrh	r3, [r4, #12]
 80125e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80125e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125ea:	81a3      	strh	r3, [r4, #12]
 80125ec:	6126      	str	r6, [r4, #16]
 80125ee:	6165      	str	r5, [r4, #20]
 80125f0:	444e      	add	r6, r9
 80125f2:	eba5 0509 	sub.w	r5, r5, r9
 80125f6:	6026      	str	r6, [r4, #0]
 80125f8:	60a5      	str	r5, [r4, #8]
 80125fa:	463e      	mov	r6, r7
 80125fc:	42be      	cmp	r6, r7
 80125fe:	d900      	bls.n	8012602 <__ssputs_r+0x86>
 8012600:	463e      	mov	r6, r7
 8012602:	6820      	ldr	r0, [r4, #0]
 8012604:	4632      	mov	r2, r6
 8012606:	4641      	mov	r1, r8
 8012608:	f000 faa8 	bl	8012b5c <memmove>
 801260c:	68a3      	ldr	r3, [r4, #8]
 801260e:	1b9b      	subs	r3, r3, r6
 8012610:	60a3      	str	r3, [r4, #8]
 8012612:	6823      	ldr	r3, [r4, #0]
 8012614:	4433      	add	r3, r6
 8012616:	6023      	str	r3, [r4, #0]
 8012618:	2000      	movs	r0, #0
 801261a:	e7db      	b.n	80125d4 <__ssputs_r+0x58>
 801261c:	462a      	mov	r2, r5
 801261e:	f000 fab7 	bl	8012b90 <_realloc_r>
 8012622:	4606      	mov	r6, r0
 8012624:	2800      	cmp	r0, #0
 8012626:	d1e1      	bne.n	80125ec <__ssputs_r+0x70>
 8012628:	6921      	ldr	r1, [r4, #16]
 801262a:	4650      	mov	r0, sl
 801262c:	f7ff ff5a 	bl	80124e4 <_free_r>
 8012630:	e7c7      	b.n	80125c2 <__ssputs_r+0x46>
	...

08012634 <_svfiprintf_r>:
 8012634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012638:	4698      	mov	r8, r3
 801263a:	898b      	ldrh	r3, [r1, #12]
 801263c:	061b      	lsls	r3, r3, #24
 801263e:	b09d      	sub	sp, #116	; 0x74
 8012640:	4607      	mov	r7, r0
 8012642:	460d      	mov	r5, r1
 8012644:	4614      	mov	r4, r2
 8012646:	d50e      	bpl.n	8012666 <_svfiprintf_r+0x32>
 8012648:	690b      	ldr	r3, [r1, #16]
 801264a:	b963      	cbnz	r3, 8012666 <_svfiprintf_r+0x32>
 801264c:	2140      	movs	r1, #64	; 0x40
 801264e:	f7ff fe2f 	bl	80122b0 <_malloc_r>
 8012652:	6028      	str	r0, [r5, #0]
 8012654:	6128      	str	r0, [r5, #16]
 8012656:	b920      	cbnz	r0, 8012662 <_svfiprintf_r+0x2e>
 8012658:	230c      	movs	r3, #12
 801265a:	603b      	str	r3, [r7, #0]
 801265c:	f04f 30ff 	mov.w	r0, #4294967295
 8012660:	e0d1      	b.n	8012806 <_svfiprintf_r+0x1d2>
 8012662:	2340      	movs	r3, #64	; 0x40
 8012664:	616b      	str	r3, [r5, #20]
 8012666:	2300      	movs	r3, #0
 8012668:	9309      	str	r3, [sp, #36]	; 0x24
 801266a:	2320      	movs	r3, #32
 801266c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012670:	f8cd 800c 	str.w	r8, [sp, #12]
 8012674:	2330      	movs	r3, #48	; 0x30
 8012676:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012820 <_svfiprintf_r+0x1ec>
 801267a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801267e:	f04f 0901 	mov.w	r9, #1
 8012682:	4623      	mov	r3, r4
 8012684:	469a      	mov	sl, r3
 8012686:	f813 2b01 	ldrb.w	r2, [r3], #1
 801268a:	b10a      	cbz	r2, 8012690 <_svfiprintf_r+0x5c>
 801268c:	2a25      	cmp	r2, #37	; 0x25
 801268e:	d1f9      	bne.n	8012684 <_svfiprintf_r+0x50>
 8012690:	ebba 0b04 	subs.w	fp, sl, r4
 8012694:	d00b      	beq.n	80126ae <_svfiprintf_r+0x7a>
 8012696:	465b      	mov	r3, fp
 8012698:	4622      	mov	r2, r4
 801269a:	4629      	mov	r1, r5
 801269c:	4638      	mov	r0, r7
 801269e:	f7ff ff6d 	bl	801257c <__ssputs_r>
 80126a2:	3001      	adds	r0, #1
 80126a4:	f000 80aa 	beq.w	80127fc <_svfiprintf_r+0x1c8>
 80126a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126aa:	445a      	add	r2, fp
 80126ac:	9209      	str	r2, [sp, #36]	; 0x24
 80126ae:	f89a 3000 	ldrb.w	r3, [sl]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	f000 80a2 	beq.w	80127fc <_svfiprintf_r+0x1c8>
 80126b8:	2300      	movs	r3, #0
 80126ba:	f04f 32ff 	mov.w	r2, #4294967295
 80126be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80126c2:	f10a 0a01 	add.w	sl, sl, #1
 80126c6:	9304      	str	r3, [sp, #16]
 80126c8:	9307      	str	r3, [sp, #28]
 80126ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80126ce:	931a      	str	r3, [sp, #104]	; 0x68
 80126d0:	4654      	mov	r4, sl
 80126d2:	2205      	movs	r2, #5
 80126d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126d8:	4851      	ldr	r0, [pc, #324]	; (8012820 <_svfiprintf_r+0x1ec>)
 80126da:	f7ed fd81 	bl	80001e0 <memchr>
 80126de:	9a04      	ldr	r2, [sp, #16]
 80126e0:	b9d8      	cbnz	r0, 801271a <_svfiprintf_r+0xe6>
 80126e2:	06d0      	lsls	r0, r2, #27
 80126e4:	bf44      	itt	mi
 80126e6:	2320      	movmi	r3, #32
 80126e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80126ec:	0711      	lsls	r1, r2, #28
 80126ee:	bf44      	itt	mi
 80126f0:	232b      	movmi	r3, #43	; 0x2b
 80126f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80126f6:	f89a 3000 	ldrb.w	r3, [sl]
 80126fa:	2b2a      	cmp	r3, #42	; 0x2a
 80126fc:	d015      	beq.n	801272a <_svfiprintf_r+0xf6>
 80126fe:	9a07      	ldr	r2, [sp, #28]
 8012700:	4654      	mov	r4, sl
 8012702:	2000      	movs	r0, #0
 8012704:	f04f 0c0a 	mov.w	ip, #10
 8012708:	4621      	mov	r1, r4
 801270a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801270e:	3b30      	subs	r3, #48	; 0x30
 8012710:	2b09      	cmp	r3, #9
 8012712:	d94e      	bls.n	80127b2 <_svfiprintf_r+0x17e>
 8012714:	b1b0      	cbz	r0, 8012744 <_svfiprintf_r+0x110>
 8012716:	9207      	str	r2, [sp, #28]
 8012718:	e014      	b.n	8012744 <_svfiprintf_r+0x110>
 801271a:	eba0 0308 	sub.w	r3, r0, r8
 801271e:	fa09 f303 	lsl.w	r3, r9, r3
 8012722:	4313      	orrs	r3, r2
 8012724:	9304      	str	r3, [sp, #16]
 8012726:	46a2      	mov	sl, r4
 8012728:	e7d2      	b.n	80126d0 <_svfiprintf_r+0x9c>
 801272a:	9b03      	ldr	r3, [sp, #12]
 801272c:	1d19      	adds	r1, r3, #4
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	9103      	str	r1, [sp, #12]
 8012732:	2b00      	cmp	r3, #0
 8012734:	bfbb      	ittet	lt
 8012736:	425b      	neglt	r3, r3
 8012738:	f042 0202 	orrlt.w	r2, r2, #2
 801273c:	9307      	strge	r3, [sp, #28]
 801273e:	9307      	strlt	r3, [sp, #28]
 8012740:	bfb8      	it	lt
 8012742:	9204      	strlt	r2, [sp, #16]
 8012744:	7823      	ldrb	r3, [r4, #0]
 8012746:	2b2e      	cmp	r3, #46	; 0x2e
 8012748:	d10c      	bne.n	8012764 <_svfiprintf_r+0x130>
 801274a:	7863      	ldrb	r3, [r4, #1]
 801274c:	2b2a      	cmp	r3, #42	; 0x2a
 801274e:	d135      	bne.n	80127bc <_svfiprintf_r+0x188>
 8012750:	9b03      	ldr	r3, [sp, #12]
 8012752:	1d1a      	adds	r2, r3, #4
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	9203      	str	r2, [sp, #12]
 8012758:	2b00      	cmp	r3, #0
 801275a:	bfb8      	it	lt
 801275c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012760:	3402      	adds	r4, #2
 8012762:	9305      	str	r3, [sp, #20]
 8012764:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012830 <_svfiprintf_r+0x1fc>
 8012768:	7821      	ldrb	r1, [r4, #0]
 801276a:	2203      	movs	r2, #3
 801276c:	4650      	mov	r0, sl
 801276e:	f7ed fd37 	bl	80001e0 <memchr>
 8012772:	b140      	cbz	r0, 8012786 <_svfiprintf_r+0x152>
 8012774:	2340      	movs	r3, #64	; 0x40
 8012776:	eba0 000a 	sub.w	r0, r0, sl
 801277a:	fa03 f000 	lsl.w	r0, r3, r0
 801277e:	9b04      	ldr	r3, [sp, #16]
 8012780:	4303      	orrs	r3, r0
 8012782:	3401      	adds	r4, #1
 8012784:	9304      	str	r3, [sp, #16]
 8012786:	f814 1b01 	ldrb.w	r1, [r4], #1
 801278a:	4826      	ldr	r0, [pc, #152]	; (8012824 <_svfiprintf_r+0x1f0>)
 801278c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012790:	2206      	movs	r2, #6
 8012792:	f7ed fd25 	bl	80001e0 <memchr>
 8012796:	2800      	cmp	r0, #0
 8012798:	d038      	beq.n	801280c <_svfiprintf_r+0x1d8>
 801279a:	4b23      	ldr	r3, [pc, #140]	; (8012828 <_svfiprintf_r+0x1f4>)
 801279c:	bb1b      	cbnz	r3, 80127e6 <_svfiprintf_r+0x1b2>
 801279e:	9b03      	ldr	r3, [sp, #12]
 80127a0:	3307      	adds	r3, #7
 80127a2:	f023 0307 	bic.w	r3, r3, #7
 80127a6:	3308      	adds	r3, #8
 80127a8:	9303      	str	r3, [sp, #12]
 80127aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127ac:	4433      	add	r3, r6
 80127ae:	9309      	str	r3, [sp, #36]	; 0x24
 80127b0:	e767      	b.n	8012682 <_svfiprintf_r+0x4e>
 80127b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80127b6:	460c      	mov	r4, r1
 80127b8:	2001      	movs	r0, #1
 80127ba:	e7a5      	b.n	8012708 <_svfiprintf_r+0xd4>
 80127bc:	2300      	movs	r3, #0
 80127be:	3401      	adds	r4, #1
 80127c0:	9305      	str	r3, [sp, #20]
 80127c2:	4619      	mov	r1, r3
 80127c4:	f04f 0c0a 	mov.w	ip, #10
 80127c8:	4620      	mov	r0, r4
 80127ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80127ce:	3a30      	subs	r2, #48	; 0x30
 80127d0:	2a09      	cmp	r2, #9
 80127d2:	d903      	bls.n	80127dc <_svfiprintf_r+0x1a8>
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d0c5      	beq.n	8012764 <_svfiprintf_r+0x130>
 80127d8:	9105      	str	r1, [sp, #20]
 80127da:	e7c3      	b.n	8012764 <_svfiprintf_r+0x130>
 80127dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80127e0:	4604      	mov	r4, r0
 80127e2:	2301      	movs	r3, #1
 80127e4:	e7f0      	b.n	80127c8 <_svfiprintf_r+0x194>
 80127e6:	ab03      	add	r3, sp, #12
 80127e8:	9300      	str	r3, [sp, #0]
 80127ea:	462a      	mov	r2, r5
 80127ec:	4b0f      	ldr	r3, [pc, #60]	; (801282c <_svfiprintf_r+0x1f8>)
 80127ee:	a904      	add	r1, sp, #16
 80127f0:	4638      	mov	r0, r7
 80127f2:	f3af 8000 	nop.w
 80127f6:	1c42      	adds	r2, r0, #1
 80127f8:	4606      	mov	r6, r0
 80127fa:	d1d6      	bne.n	80127aa <_svfiprintf_r+0x176>
 80127fc:	89ab      	ldrh	r3, [r5, #12]
 80127fe:	065b      	lsls	r3, r3, #25
 8012800:	f53f af2c 	bmi.w	801265c <_svfiprintf_r+0x28>
 8012804:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012806:	b01d      	add	sp, #116	; 0x74
 8012808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801280c:	ab03      	add	r3, sp, #12
 801280e:	9300      	str	r3, [sp, #0]
 8012810:	462a      	mov	r2, r5
 8012812:	4b06      	ldr	r3, [pc, #24]	; (801282c <_svfiprintf_r+0x1f8>)
 8012814:	a904      	add	r1, sp, #16
 8012816:	4638      	mov	r0, r7
 8012818:	f000 f87a 	bl	8012910 <_printf_i>
 801281c:	e7eb      	b.n	80127f6 <_svfiprintf_r+0x1c2>
 801281e:	bf00      	nop
 8012820:	08012fac 	.word	0x08012fac
 8012824:	08012fb6 	.word	0x08012fb6
 8012828:	00000000 	.word	0x00000000
 801282c:	0801257d 	.word	0x0801257d
 8012830:	08012fb2 	.word	0x08012fb2

08012834 <_printf_common>:
 8012834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012838:	4616      	mov	r6, r2
 801283a:	4699      	mov	r9, r3
 801283c:	688a      	ldr	r2, [r1, #8]
 801283e:	690b      	ldr	r3, [r1, #16]
 8012840:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012844:	4293      	cmp	r3, r2
 8012846:	bfb8      	it	lt
 8012848:	4613      	movlt	r3, r2
 801284a:	6033      	str	r3, [r6, #0]
 801284c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012850:	4607      	mov	r7, r0
 8012852:	460c      	mov	r4, r1
 8012854:	b10a      	cbz	r2, 801285a <_printf_common+0x26>
 8012856:	3301      	adds	r3, #1
 8012858:	6033      	str	r3, [r6, #0]
 801285a:	6823      	ldr	r3, [r4, #0]
 801285c:	0699      	lsls	r1, r3, #26
 801285e:	bf42      	ittt	mi
 8012860:	6833      	ldrmi	r3, [r6, #0]
 8012862:	3302      	addmi	r3, #2
 8012864:	6033      	strmi	r3, [r6, #0]
 8012866:	6825      	ldr	r5, [r4, #0]
 8012868:	f015 0506 	ands.w	r5, r5, #6
 801286c:	d106      	bne.n	801287c <_printf_common+0x48>
 801286e:	f104 0a19 	add.w	sl, r4, #25
 8012872:	68e3      	ldr	r3, [r4, #12]
 8012874:	6832      	ldr	r2, [r6, #0]
 8012876:	1a9b      	subs	r3, r3, r2
 8012878:	42ab      	cmp	r3, r5
 801287a:	dc26      	bgt.n	80128ca <_printf_common+0x96>
 801287c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012880:	1e13      	subs	r3, r2, #0
 8012882:	6822      	ldr	r2, [r4, #0]
 8012884:	bf18      	it	ne
 8012886:	2301      	movne	r3, #1
 8012888:	0692      	lsls	r2, r2, #26
 801288a:	d42b      	bmi.n	80128e4 <_printf_common+0xb0>
 801288c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012890:	4649      	mov	r1, r9
 8012892:	4638      	mov	r0, r7
 8012894:	47c0      	blx	r8
 8012896:	3001      	adds	r0, #1
 8012898:	d01e      	beq.n	80128d8 <_printf_common+0xa4>
 801289a:	6823      	ldr	r3, [r4, #0]
 801289c:	68e5      	ldr	r5, [r4, #12]
 801289e:	6832      	ldr	r2, [r6, #0]
 80128a0:	f003 0306 	and.w	r3, r3, #6
 80128a4:	2b04      	cmp	r3, #4
 80128a6:	bf08      	it	eq
 80128a8:	1aad      	subeq	r5, r5, r2
 80128aa:	68a3      	ldr	r3, [r4, #8]
 80128ac:	6922      	ldr	r2, [r4, #16]
 80128ae:	bf0c      	ite	eq
 80128b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80128b4:	2500      	movne	r5, #0
 80128b6:	4293      	cmp	r3, r2
 80128b8:	bfc4      	itt	gt
 80128ba:	1a9b      	subgt	r3, r3, r2
 80128bc:	18ed      	addgt	r5, r5, r3
 80128be:	2600      	movs	r6, #0
 80128c0:	341a      	adds	r4, #26
 80128c2:	42b5      	cmp	r5, r6
 80128c4:	d11a      	bne.n	80128fc <_printf_common+0xc8>
 80128c6:	2000      	movs	r0, #0
 80128c8:	e008      	b.n	80128dc <_printf_common+0xa8>
 80128ca:	2301      	movs	r3, #1
 80128cc:	4652      	mov	r2, sl
 80128ce:	4649      	mov	r1, r9
 80128d0:	4638      	mov	r0, r7
 80128d2:	47c0      	blx	r8
 80128d4:	3001      	adds	r0, #1
 80128d6:	d103      	bne.n	80128e0 <_printf_common+0xac>
 80128d8:	f04f 30ff 	mov.w	r0, #4294967295
 80128dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128e0:	3501      	adds	r5, #1
 80128e2:	e7c6      	b.n	8012872 <_printf_common+0x3e>
 80128e4:	18e1      	adds	r1, r4, r3
 80128e6:	1c5a      	adds	r2, r3, #1
 80128e8:	2030      	movs	r0, #48	; 0x30
 80128ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80128ee:	4422      	add	r2, r4
 80128f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80128f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80128f8:	3302      	adds	r3, #2
 80128fa:	e7c7      	b.n	801288c <_printf_common+0x58>
 80128fc:	2301      	movs	r3, #1
 80128fe:	4622      	mov	r2, r4
 8012900:	4649      	mov	r1, r9
 8012902:	4638      	mov	r0, r7
 8012904:	47c0      	blx	r8
 8012906:	3001      	adds	r0, #1
 8012908:	d0e6      	beq.n	80128d8 <_printf_common+0xa4>
 801290a:	3601      	adds	r6, #1
 801290c:	e7d9      	b.n	80128c2 <_printf_common+0x8e>
	...

08012910 <_printf_i>:
 8012910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012914:	7e0f      	ldrb	r7, [r1, #24]
 8012916:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012918:	2f78      	cmp	r7, #120	; 0x78
 801291a:	4691      	mov	r9, r2
 801291c:	4680      	mov	r8, r0
 801291e:	460c      	mov	r4, r1
 8012920:	469a      	mov	sl, r3
 8012922:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012926:	d807      	bhi.n	8012938 <_printf_i+0x28>
 8012928:	2f62      	cmp	r7, #98	; 0x62
 801292a:	d80a      	bhi.n	8012942 <_printf_i+0x32>
 801292c:	2f00      	cmp	r7, #0
 801292e:	f000 80d8 	beq.w	8012ae2 <_printf_i+0x1d2>
 8012932:	2f58      	cmp	r7, #88	; 0x58
 8012934:	f000 80a3 	beq.w	8012a7e <_printf_i+0x16e>
 8012938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801293c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012940:	e03a      	b.n	80129b8 <_printf_i+0xa8>
 8012942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012946:	2b15      	cmp	r3, #21
 8012948:	d8f6      	bhi.n	8012938 <_printf_i+0x28>
 801294a:	a101      	add	r1, pc, #4	; (adr r1, 8012950 <_printf_i+0x40>)
 801294c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012950:	080129a9 	.word	0x080129a9
 8012954:	080129bd 	.word	0x080129bd
 8012958:	08012939 	.word	0x08012939
 801295c:	08012939 	.word	0x08012939
 8012960:	08012939 	.word	0x08012939
 8012964:	08012939 	.word	0x08012939
 8012968:	080129bd 	.word	0x080129bd
 801296c:	08012939 	.word	0x08012939
 8012970:	08012939 	.word	0x08012939
 8012974:	08012939 	.word	0x08012939
 8012978:	08012939 	.word	0x08012939
 801297c:	08012ac9 	.word	0x08012ac9
 8012980:	080129ed 	.word	0x080129ed
 8012984:	08012aab 	.word	0x08012aab
 8012988:	08012939 	.word	0x08012939
 801298c:	08012939 	.word	0x08012939
 8012990:	08012aeb 	.word	0x08012aeb
 8012994:	08012939 	.word	0x08012939
 8012998:	080129ed 	.word	0x080129ed
 801299c:	08012939 	.word	0x08012939
 80129a0:	08012939 	.word	0x08012939
 80129a4:	08012ab3 	.word	0x08012ab3
 80129a8:	682b      	ldr	r3, [r5, #0]
 80129aa:	1d1a      	adds	r2, r3, #4
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	602a      	str	r2, [r5, #0]
 80129b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80129b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80129b8:	2301      	movs	r3, #1
 80129ba:	e0a3      	b.n	8012b04 <_printf_i+0x1f4>
 80129bc:	6820      	ldr	r0, [r4, #0]
 80129be:	6829      	ldr	r1, [r5, #0]
 80129c0:	0606      	lsls	r6, r0, #24
 80129c2:	f101 0304 	add.w	r3, r1, #4
 80129c6:	d50a      	bpl.n	80129de <_printf_i+0xce>
 80129c8:	680e      	ldr	r6, [r1, #0]
 80129ca:	602b      	str	r3, [r5, #0]
 80129cc:	2e00      	cmp	r6, #0
 80129ce:	da03      	bge.n	80129d8 <_printf_i+0xc8>
 80129d0:	232d      	movs	r3, #45	; 0x2d
 80129d2:	4276      	negs	r6, r6
 80129d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129d8:	485e      	ldr	r0, [pc, #376]	; (8012b54 <_printf_i+0x244>)
 80129da:	230a      	movs	r3, #10
 80129dc:	e019      	b.n	8012a12 <_printf_i+0x102>
 80129de:	680e      	ldr	r6, [r1, #0]
 80129e0:	602b      	str	r3, [r5, #0]
 80129e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80129e6:	bf18      	it	ne
 80129e8:	b236      	sxthne	r6, r6
 80129ea:	e7ef      	b.n	80129cc <_printf_i+0xbc>
 80129ec:	682b      	ldr	r3, [r5, #0]
 80129ee:	6820      	ldr	r0, [r4, #0]
 80129f0:	1d19      	adds	r1, r3, #4
 80129f2:	6029      	str	r1, [r5, #0]
 80129f4:	0601      	lsls	r1, r0, #24
 80129f6:	d501      	bpl.n	80129fc <_printf_i+0xec>
 80129f8:	681e      	ldr	r6, [r3, #0]
 80129fa:	e002      	b.n	8012a02 <_printf_i+0xf2>
 80129fc:	0646      	lsls	r6, r0, #25
 80129fe:	d5fb      	bpl.n	80129f8 <_printf_i+0xe8>
 8012a00:	881e      	ldrh	r6, [r3, #0]
 8012a02:	4854      	ldr	r0, [pc, #336]	; (8012b54 <_printf_i+0x244>)
 8012a04:	2f6f      	cmp	r7, #111	; 0x6f
 8012a06:	bf0c      	ite	eq
 8012a08:	2308      	moveq	r3, #8
 8012a0a:	230a      	movne	r3, #10
 8012a0c:	2100      	movs	r1, #0
 8012a0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012a12:	6865      	ldr	r5, [r4, #4]
 8012a14:	60a5      	str	r5, [r4, #8]
 8012a16:	2d00      	cmp	r5, #0
 8012a18:	bfa2      	ittt	ge
 8012a1a:	6821      	ldrge	r1, [r4, #0]
 8012a1c:	f021 0104 	bicge.w	r1, r1, #4
 8012a20:	6021      	strge	r1, [r4, #0]
 8012a22:	b90e      	cbnz	r6, 8012a28 <_printf_i+0x118>
 8012a24:	2d00      	cmp	r5, #0
 8012a26:	d04d      	beq.n	8012ac4 <_printf_i+0x1b4>
 8012a28:	4615      	mov	r5, r2
 8012a2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8012a2e:	fb03 6711 	mls	r7, r3, r1, r6
 8012a32:	5dc7      	ldrb	r7, [r0, r7]
 8012a34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012a38:	4637      	mov	r7, r6
 8012a3a:	42bb      	cmp	r3, r7
 8012a3c:	460e      	mov	r6, r1
 8012a3e:	d9f4      	bls.n	8012a2a <_printf_i+0x11a>
 8012a40:	2b08      	cmp	r3, #8
 8012a42:	d10b      	bne.n	8012a5c <_printf_i+0x14c>
 8012a44:	6823      	ldr	r3, [r4, #0]
 8012a46:	07de      	lsls	r6, r3, #31
 8012a48:	d508      	bpl.n	8012a5c <_printf_i+0x14c>
 8012a4a:	6923      	ldr	r3, [r4, #16]
 8012a4c:	6861      	ldr	r1, [r4, #4]
 8012a4e:	4299      	cmp	r1, r3
 8012a50:	bfde      	ittt	le
 8012a52:	2330      	movle	r3, #48	; 0x30
 8012a54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012a58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012a5c:	1b52      	subs	r2, r2, r5
 8012a5e:	6122      	str	r2, [r4, #16]
 8012a60:	f8cd a000 	str.w	sl, [sp]
 8012a64:	464b      	mov	r3, r9
 8012a66:	aa03      	add	r2, sp, #12
 8012a68:	4621      	mov	r1, r4
 8012a6a:	4640      	mov	r0, r8
 8012a6c:	f7ff fee2 	bl	8012834 <_printf_common>
 8012a70:	3001      	adds	r0, #1
 8012a72:	d14c      	bne.n	8012b0e <_printf_i+0x1fe>
 8012a74:	f04f 30ff 	mov.w	r0, #4294967295
 8012a78:	b004      	add	sp, #16
 8012a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a7e:	4835      	ldr	r0, [pc, #212]	; (8012b54 <_printf_i+0x244>)
 8012a80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012a84:	6829      	ldr	r1, [r5, #0]
 8012a86:	6823      	ldr	r3, [r4, #0]
 8012a88:	f851 6b04 	ldr.w	r6, [r1], #4
 8012a8c:	6029      	str	r1, [r5, #0]
 8012a8e:	061d      	lsls	r5, r3, #24
 8012a90:	d514      	bpl.n	8012abc <_printf_i+0x1ac>
 8012a92:	07df      	lsls	r7, r3, #31
 8012a94:	bf44      	itt	mi
 8012a96:	f043 0320 	orrmi.w	r3, r3, #32
 8012a9a:	6023      	strmi	r3, [r4, #0]
 8012a9c:	b91e      	cbnz	r6, 8012aa6 <_printf_i+0x196>
 8012a9e:	6823      	ldr	r3, [r4, #0]
 8012aa0:	f023 0320 	bic.w	r3, r3, #32
 8012aa4:	6023      	str	r3, [r4, #0]
 8012aa6:	2310      	movs	r3, #16
 8012aa8:	e7b0      	b.n	8012a0c <_printf_i+0xfc>
 8012aaa:	6823      	ldr	r3, [r4, #0]
 8012aac:	f043 0320 	orr.w	r3, r3, #32
 8012ab0:	6023      	str	r3, [r4, #0]
 8012ab2:	2378      	movs	r3, #120	; 0x78
 8012ab4:	4828      	ldr	r0, [pc, #160]	; (8012b58 <_printf_i+0x248>)
 8012ab6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012aba:	e7e3      	b.n	8012a84 <_printf_i+0x174>
 8012abc:	0659      	lsls	r1, r3, #25
 8012abe:	bf48      	it	mi
 8012ac0:	b2b6      	uxthmi	r6, r6
 8012ac2:	e7e6      	b.n	8012a92 <_printf_i+0x182>
 8012ac4:	4615      	mov	r5, r2
 8012ac6:	e7bb      	b.n	8012a40 <_printf_i+0x130>
 8012ac8:	682b      	ldr	r3, [r5, #0]
 8012aca:	6826      	ldr	r6, [r4, #0]
 8012acc:	6961      	ldr	r1, [r4, #20]
 8012ace:	1d18      	adds	r0, r3, #4
 8012ad0:	6028      	str	r0, [r5, #0]
 8012ad2:	0635      	lsls	r5, r6, #24
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	d501      	bpl.n	8012adc <_printf_i+0x1cc>
 8012ad8:	6019      	str	r1, [r3, #0]
 8012ada:	e002      	b.n	8012ae2 <_printf_i+0x1d2>
 8012adc:	0670      	lsls	r0, r6, #25
 8012ade:	d5fb      	bpl.n	8012ad8 <_printf_i+0x1c8>
 8012ae0:	8019      	strh	r1, [r3, #0]
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	6123      	str	r3, [r4, #16]
 8012ae6:	4615      	mov	r5, r2
 8012ae8:	e7ba      	b.n	8012a60 <_printf_i+0x150>
 8012aea:	682b      	ldr	r3, [r5, #0]
 8012aec:	1d1a      	adds	r2, r3, #4
 8012aee:	602a      	str	r2, [r5, #0]
 8012af0:	681d      	ldr	r5, [r3, #0]
 8012af2:	6862      	ldr	r2, [r4, #4]
 8012af4:	2100      	movs	r1, #0
 8012af6:	4628      	mov	r0, r5
 8012af8:	f7ed fb72 	bl	80001e0 <memchr>
 8012afc:	b108      	cbz	r0, 8012b02 <_printf_i+0x1f2>
 8012afe:	1b40      	subs	r0, r0, r5
 8012b00:	6060      	str	r0, [r4, #4]
 8012b02:	6863      	ldr	r3, [r4, #4]
 8012b04:	6123      	str	r3, [r4, #16]
 8012b06:	2300      	movs	r3, #0
 8012b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b0c:	e7a8      	b.n	8012a60 <_printf_i+0x150>
 8012b0e:	6923      	ldr	r3, [r4, #16]
 8012b10:	462a      	mov	r2, r5
 8012b12:	4649      	mov	r1, r9
 8012b14:	4640      	mov	r0, r8
 8012b16:	47d0      	blx	sl
 8012b18:	3001      	adds	r0, #1
 8012b1a:	d0ab      	beq.n	8012a74 <_printf_i+0x164>
 8012b1c:	6823      	ldr	r3, [r4, #0]
 8012b1e:	079b      	lsls	r3, r3, #30
 8012b20:	d413      	bmi.n	8012b4a <_printf_i+0x23a>
 8012b22:	68e0      	ldr	r0, [r4, #12]
 8012b24:	9b03      	ldr	r3, [sp, #12]
 8012b26:	4298      	cmp	r0, r3
 8012b28:	bfb8      	it	lt
 8012b2a:	4618      	movlt	r0, r3
 8012b2c:	e7a4      	b.n	8012a78 <_printf_i+0x168>
 8012b2e:	2301      	movs	r3, #1
 8012b30:	4632      	mov	r2, r6
 8012b32:	4649      	mov	r1, r9
 8012b34:	4640      	mov	r0, r8
 8012b36:	47d0      	blx	sl
 8012b38:	3001      	adds	r0, #1
 8012b3a:	d09b      	beq.n	8012a74 <_printf_i+0x164>
 8012b3c:	3501      	adds	r5, #1
 8012b3e:	68e3      	ldr	r3, [r4, #12]
 8012b40:	9903      	ldr	r1, [sp, #12]
 8012b42:	1a5b      	subs	r3, r3, r1
 8012b44:	42ab      	cmp	r3, r5
 8012b46:	dcf2      	bgt.n	8012b2e <_printf_i+0x21e>
 8012b48:	e7eb      	b.n	8012b22 <_printf_i+0x212>
 8012b4a:	2500      	movs	r5, #0
 8012b4c:	f104 0619 	add.w	r6, r4, #25
 8012b50:	e7f5      	b.n	8012b3e <_printf_i+0x22e>
 8012b52:	bf00      	nop
 8012b54:	08012fbd 	.word	0x08012fbd
 8012b58:	08012fce 	.word	0x08012fce

08012b5c <memmove>:
 8012b5c:	4288      	cmp	r0, r1
 8012b5e:	b510      	push	{r4, lr}
 8012b60:	eb01 0402 	add.w	r4, r1, r2
 8012b64:	d902      	bls.n	8012b6c <memmove+0x10>
 8012b66:	4284      	cmp	r4, r0
 8012b68:	4623      	mov	r3, r4
 8012b6a:	d807      	bhi.n	8012b7c <memmove+0x20>
 8012b6c:	1e43      	subs	r3, r0, #1
 8012b6e:	42a1      	cmp	r1, r4
 8012b70:	d008      	beq.n	8012b84 <memmove+0x28>
 8012b72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012b7a:	e7f8      	b.n	8012b6e <memmove+0x12>
 8012b7c:	4402      	add	r2, r0
 8012b7e:	4601      	mov	r1, r0
 8012b80:	428a      	cmp	r2, r1
 8012b82:	d100      	bne.n	8012b86 <memmove+0x2a>
 8012b84:	bd10      	pop	{r4, pc}
 8012b86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b8e:	e7f7      	b.n	8012b80 <memmove+0x24>

08012b90 <_realloc_r>:
 8012b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b94:	4680      	mov	r8, r0
 8012b96:	4614      	mov	r4, r2
 8012b98:	460e      	mov	r6, r1
 8012b9a:	b921      	cbnz	r1, 8012ba6 <_realloc_r+0x16>
 8012b9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ba0:	4611      	mov	r1, r2
 8012ba2:	f7ff bb85 	b.w	80122b0 <_malloc_r>
 8012ba6:	b92a      	cbnz	r2, 8012bb4 <_realloc_r+0x24>
 8012ba8:	f7ff fc9c 	bl	80124e4 <_free_r>
 8012bac:	4625      	mov	r5, r4
 8012bae:	4628      	mov	r0, r5
 8012bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bb4:	f000 f81b 	bl	8012bee <_malloc_usable_size_r>
 8012bb8:	4284      	cmp	r4, r0
 8012bba:	4607      	mov	r7, r0
 8012bbc:	d802      	bhi.n	8012bc4 <_realloc_r+0x34>
 8012bbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012bc2:	d812      	bhi.n	8012bea <_realloc_r+0x5a>
 8012bc4:	4621      	mov	r1, r4
 8012bc6:	4640      	mov	r0, r8
 8012bc8:	f7ff fb72 	bl	80122b0 <_malloc_r>
 8012bcc:	4605      	mov	r5, r0
 8012bce:	2800      	cmp	r0, #0
 8012bd0:	d0ed      	beq.n	8012bae <_realloc_r+0x1e>
 8012bd2:	42bc      	cmp	r4, r7
 8012bd4:	4622      	mov	r2, r4
 8012bd6:	4631      	mov	r1, r6
 8012bd8:	bf28      	it	cs
 8012bda:	463a      	movcs	r2, r7
 8012bdc:	f7ff fb32 	bl	8012244 <memcpy>
 8012be0:	4631      	mov	r1, r6
 8012be2:	4640      	mov	r0, r8
 8012be4:	f7ff fc7e 	bl	80124e4 <_free_r>
 8012be8:	e7e1      	b.n	8012bae <_realloc_r+0x1e>
 8012bea:	4635      	mov	r5, r6
 8012bec:	e7df      	b.n	8012bae <_realloc_r+0x1e>

08012bee <_malloc_usable_size_r>:
 8012bee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012bf2:	1f18      	subs	r0, r3, #4
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	bfbc      	itt	lt
 8012bf8:	580b      	ldrlt	r3, [r1, r0]
 8012bfa:	18c0      	addlt	r0, r0, r3
 8012bfc:	4770      	bx	lr

08012bfe <sqrt>:
 8012bfe:	b538      	push	{r3, r4, r5, lr}
 8012c00:	ed2d 8b02 	vpush	{d8}
 8012c04:	ec55 4b10 	vmov	r4, r5, d0
 8012c08:	f000 f826 	bl	8012c58 <__ieee754_sqrt>
 8012c0c:	4622      	mov	r2, r4
 8012c0e:	462b      	mov	r3, r5
 8012c10:	4620      	mov	r0, r4
 8012c12:	4629      	mov	r1, r5
 8012c14:	eeb0 8a40 	vmov.f32	s16, s0
 8012c18:	eef0 8a60 	vmov.f32	s17, s1
 8012c1c:	f7ed ff86 	bl	8000b2c <__aeabi_dcmpun>
 8012c20:	b990      	cbnz	r0, 8012c48 <sqrt+0x4a>
 8012c22:	2200      	movs	r2, #0
 8012c24:	2300      	movs	r3, #0
 8012c26:	4620      	mov	r0, r4
 8012c28:	4629      	mov	r1, r5
 8012c2a:	f7ed ff57 	bl	8000adc <__aeabi_dcmplt>
 8012c2e:	b158      	cbz	r0, 8012c48 <sqrt+0x4a>
 8012c30:	f7ff fadc 	bl	80121ec <__errno>
 8012c34:	2321      	movs	r3, #33	; 0x21
 8012c36:	6003      	str	r3, [r0, #0]
 8012c38:	2200      	movs	r2, #0
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	4610      	mov	r0, r2
 8012c3e:	4619      	mov	r1, r3
 8012c40:	f7ed fe04 	bl	800084c <__aeabi_ddiv>
 8012c44:	ec41 0b18 	vmov	d8, r0, r1
 8012c48:	eeb0 0a48 	vmov.f32	s0, s16
 8012c4c:	eef0 0a68 	vmov.f32	s1, s17
 8012c50:	ecbd 8b02 	vpop	{d8}
 8012c54:	bd38      	pop	{r3, r4, r5, pc}
	...

08012c58 <__ieee754_sqrt>:
 8012c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c5c:	ec55 4b10 	vmov	r4, r5, d0
 8012c60:	4e55      	ldr	r6, [pc, #340]	; (8012db8 <__ieee754_sqrt+0x160>)
 8012c62:	43ae      	bics	r6, r5
 8012c64:	ee10 0a10 	vmov	r0, s0
 8012c68:	ee10 3a10 	vmov	r3, s0
 8012c6c:	462a      	mov	r2, r5
 8012c6e:	4629      	mov	r1, r5
 8012c70:	d110      	bne.n	8012c94 <__ieee754_sqrt+0x3c>
 8012c72:	ee10 2a10 	vmov	r2, s0
 8012c76:	462b      	mov	r3, r5
 8012c78:	f7ed fcbe 	bl	80005f8 <__aeabi_dmul>
 8012c7c:	4602      	mov	r2, r0
 8012c7e:	460b      	mov	r3, r1
 8012c80:	4620      	mov	r0, r4
 8012c82:	4629      	mov	r1, r5
 8012c84:	f7ed fb02 	bl	800028c <__adddf3>
 8012c88:	4604      	mov	r4, r0
 8012c8a:	460d      	mov	r5, r1
 8012c8c:	ec45 4b10 	vmov	d0, r4, r5
 8012c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c94:	2d00      	cmp	r5, #0
 8012c96:	dc10      	bgt.n	8012cba <__ieee754_sqrt+0x62>
 8012c98:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012c9c:	4330      	orrs	r0, r6
 8012c9e:	d0f5      	beq.n	8012c8c <__ieee754_sqrt+0x34>
 8012ca0:	b15d      	cbz	r5, 8012cba <__ieee754_sqrt+0x62>
 8012ca2:	ee10 2a10 	vmov	r2, s0
 8012ca6:	462b      	mov	r3, r5
 8012ca8:	ee10 0a10 	vmov	r0, s0
 8012cac:	f7ed faec 	bl	8000288 <__aeabi_dsub>
 8012cb0:	4602      	mov	r2, r0
 8012cb2:	460b      	mov	r3, r1
 8012cb4:	f7ed fdca 	bl	800084c <__aeabi_ddiv>
 8012cb8:	e7e6      	b.n	8012c88 <__ieee754_sqrt+0x30>
 8012cba:	1512      	asrs	r2, r2, #20
 8012cbc:	d074      	beq.n	8012da8 <__ieee754_sqrt+0x150>
 8012cbe:	07d4      	lsls	r4, r2, #31
 8012cc0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012cc4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8012cc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012ccc:	bf5e      	ittt	pl
 8012cce:	0fda      	lsrpl	r2, r3, #31
 8012cd0:	005b      	lslpl	r3, r3, #1
 8012cd2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8012cd6:	2400      	movs	r4, #0
 8012cd8:	0fda      	lsrs	r2, r3, #31
 8012cda:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8012cde:	107f      	asrs	r7, r7, #1
 8012ce0:	005b      	lsls	r3, r3, #1
 8012ce2:	2516      	movs	r5, #22
 8012ce4:	4620      	mov	r0, r4
 8012ce6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8012cea:	1886      	adds	r6, r0, r2
 8012cec:	428e      	cmp	r6, r1
 8012cee:	bfde      	ittt	le
 8012cf0:	1b89      	suble	r1, r1, r6
 8012cf2:	18b0      	addle	r0, r6, r2
 8012cf4:	18a4      	addle	r4, r4, r2
 8012cf6:	0049      	lsls	r1, r1, #1
 8012cf8:	3d01      	subs	r5, #1
 8012cfa:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8012cfe:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012d02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012d06:	d1f0      	bne.n	8012cea <__ieee754_sqrt+0x92>
 8012d08:	462a      	mov	r2, r5
 8012d0a:	f04f 0e20 	mov.w	lr, #32
 8012d0e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012d12:	4281      	cmp	r1, r0
 8012d14:	eb06 0c05 	add.w	ip, r6, r5
 8012d18:	dc02      	bgt.n	8012d20 <__ieee754_sqrt+0xc8>
 8012d1a:	d113      	bne.n	8012d44 <__ieee754_sqrt+0xec>
 8012d1c:	459c      	cmp	ip, r3
 8012d1e:	d811      	bhi.n	8012d44 <__ieee754_sqrt+0xec>
 8012d20:	f1bc 0f00 	cmp.w	ip, #0
 8012d24:	eb0c 0506 	add.w	r5, ip, r6
 8012d28:	da43      	bge.n	8012db2 <__ieee754_sqrt+0x15a>
 8012d2a:	2d00      	cmp	r5, #0
 8012d2c:	db41      	blt.n	8012db2 <__ieee754_sqrt+0x15a>
 8012d2e:	f100 0801 	add.w	r8, r0, #1
 8012d32:	1a09      	subs	r1, r1, r0
 8012d34:	459c      	cmp	ip, r3
 8012d36:	bf88      	it	hi
 8012d38:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8012d3c:	eba3 030c 	sub.w	r3, r3, ip
 8012d40:	4432      	add	r2, r6
 8012d42:	4640      	mov	r0, r8
 8012d44:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8012d48:	f1be 0e01 	subs.w	lr, lr, #1
 8012d4c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8012d50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012d54:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012d58:	d1db      	bne.n	8012d12 <__ieee754_sqrt+0xba>
 8012d5a:	430b      	orrs	r3, r1
 8012d5c:	d006      	beq.n	8012d6c <__ieee754_sqrt+0x114>
 8012d5e:	1c50      	adds	r0, r2, #1
 8012d60:	bf13      	iteet	ne
 8012d62:	3201      	addne	r2, #1
 8012d64:	3401      	addeq	r4, #1
 8012d66:	4672      	moveq	r2, lr
 8012d68:	f022 0201 	bicne.w	r2, r2, #1
 8012d6c:	1063      	asrs	r3, r4, #1
 8012d6e:	0852      	lsrs	r2, r2, #1
 8012d70:	07e1      	lsls	r1, r4, #31
 8012d72:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012d76:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012d7a:	bf48      	it	mi
 8012d7c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8012d80:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8012d84:	4614      	mov	r4, r2
 8012d86:	e781      	b.n	8012c8c <__ieee754_sqrt+0x34>
 8012d88:	0ad9      	lsrs	r1, r3, #11
 8012d8a:	3815      	subs	r0, #21
 8012d8c:	055b      	lsls	r3, r3, #21
 8012d8e:	2900      	cmp	r1, #0
 8012d90:	d0fa      	beq.n	8012d88 <__ieee754_sqrt+0x130>
 8012d92:	02cd      	lsls	r5, r1, #11
 8012d94:	d50a      	bpl.n	8012dac <__ieee754_sqrt+0x154>
 8012d96:	f1c2 0420 	rsb	r4, r2, #32
 8012d9a:	fa23 f404 	lsr.w	r4, r3, r4
 8012d9e:	1e55      	subs	r5, r2, #1
 8012da0:	4093      	lsls	r3, r2
 8012da2:	4321      	orrs	r1, r4
 8012da4:	1b42      	subs	r2, r0, r5
 8012da6:	e78a      	b.n	8012cbe <__ieee754_sqrt+0x66>
 8012da8:	4610      	mov	r0, r2
 8012daa:	e7f0      	b.n	8012d8e <__ieee754_sqrt+0x136>
 8012dac:	0049      	lsls	r1, r1, #1
 8012dae:	3201      	adds	r2, #1
 8012db0:	e7ef      	b.n	8012d92 <__ieee754_sqrt+0x13a>
 8012db2:	4680      	mov	r8, r0
 8012db4:	e7bd      	b.n	8012d32 <__ieee754_sqrt+0xda>
 8012db6:	bf00      	nop
 8012db8:	7ff00000 	.word	0x7ff00000

08012dbc <_init>:
 8012dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dbe:	bf00      	nop
 8012dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dc2:	bc08      	pop	{r3}
 8012dc4:	469e      	mov	lr, r3
 8012dc6:	4770      	bx	lr

08012dc8 <_fini>:
 8012dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dca:	bf00      	nop
 8012dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dce:	bc08      	pop	{r3}
 8012dd0:	469e      	mov	lr, r3
 8012dd2:	4770      	bx	lr
