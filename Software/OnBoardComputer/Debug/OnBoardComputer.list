
OnBoardComputer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  0800bb4c  0800bb4c  0001bb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c084  0800c084  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800c084  0800c084  0001c084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c08c  0800c08c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c08c  0800c08c  0001c08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c090  0800c090  0001c090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800c094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002580  20000088  0800c11c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002608  0800c11c  00022608  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba68  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040cd  00000000  00000000  0003bb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001888  00000000  00000000  0003fbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016c0  00000000  00000000  00041478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c2f1  00000000  00000000  00042b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022e63  00000000  00000000  0005ee29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0e44  00000000  00000000  00081c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122ad0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006964  00000000  00000000  00122b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bb34 	.word	0x0800bb34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800bb34 	.word	0x0800bb34

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058e:	4804      	ldr	r0, [pc, #16]	; (80005a0 <SELECT+0x1c>)
 8000590:	f003 fe64 	bl	800425c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000594:	2001      	movs	r0, #1
 8000596:	f002 fc2d 	bl	8002df4 <HAL_Delay>
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40020800 	.word	0x40020800

080005a4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ae:	4804      	ldr	r0, [pc, #16]	; (80005c0 <DESELECT+0x1c>)
 80005b0:	f003 fe54 	bl	800425c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005b4:	2001      	movs	r0, #1
 80005b6:	f002 fc1d 	bl	8002df4 <HAL_Delay>
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40020800 	.word	0x40020800

080005c4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005ce:	bf00      	nop
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <SPI_TxByte+0x30>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d1f8      	bne.n	80005d0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005de:	1df9      	adds	r1, r7, #7
 80005e0:	2364      	movs	r3, #100	; 0x64
 80005e2:	2201      	movs	r2, #1
 80005e4:	4803      	ldr	r0, [pc, #12]	; (80005f4 <SPI_TxByte+0x30>)
 80005e6:	f005 ff68 	bl	80064ba <HAL_SPI_Transmit>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	200001a4 	.word	0x200001a4

080005f8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000604:	bf00      	nop
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <SPI_TxBuffer+0x30>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	f003 0302 	and.w	r3, r3, #2
 8000610:	2b02      	cmp	r3, #2
 8000612:	d1f8      	bne.n	8000606 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000614:	887a      	ldrh	r2, [r7, #2]
 8000616:	2364      	movs	r3, #100	; 0x64
 8000618:	6879      	ldr	r1, [r7, #4]
 800061a:	4803      	ldr	r0, [pc, #12]	; (8000628 <SPI_TxBuffer+0x30>)
 800061c:	f005 ff4d 	bl	80064ba <HAL_SPI_Transmit>
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200001a4 	.word	0x200001a4

0800062c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000632:	23ff      	movs	r3, #255	; 0xff
 8000634:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000636:	bf00      	nop
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <SPI_RxByte+0x34>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	f003 0302 	and.w	r3, r3, #2
 8000642:	2b02      	cmp	r3, #2
 8000644:	d1f8      	bne.n	8000638 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000646:	1dba      	adds	r2, r7, #6
 8000648:	1df9      	adds	r1, r7, #7
 800064a:	2364      	movs	r3, #100	; 0x64
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2301      	movs	r3, #1
 8000650:	4803      	ldr	r0, [pc, #12]	; (8000660 <SPI_RxByte+0x34>)
 8000652:	f006 f86e 	bl	8006732 <HAL_SPI_TransmitReceive>

	return data;
 8000656:	79bb      	ldrb	r3, [r7, #6]
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200001a4 	.word	0x200001a4

08000664 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800066c:	f7ff ffde 	bl	800062c <SPI_RxByte>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	701a      	strb	r2, [r3, #0]
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <SD_ReadyWait+0x30>)
 8000688:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800068c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800068e:	f7ff ffcd 	bl	800062c <SPI_RxByte>
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2bff      	cmp	r3, #255	; 0xff
 800069a:	d004      	beq.n	80006a6 <SD_ReadyWait+0x26>
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <SD_ReadyWait+0x30>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d1f3      	bne.n	800068e <SD_ReadyWait+0xe>

	return res;
 80006a6:	79fb      	ldrb	r3, [r7, #7]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200023b0 	.word	0x200023b0

080006b4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80006ba:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80006be:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80006c0:	f7ff ff70 	bl	80005a4 <DESELECT>
	for(int i = 0; i < 10; i++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	e005      	b.n	80006d6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006ca:	20ff      	movs	r0, #255	; 0xff
 80006cc:	f7ff ff7a 	bl	80005c4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	3301      	adds	r3, #1
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	2b09      	cmp	r3, #9
 80006da:	ddf6      	ble.n	80006ca <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80006dc:	f7ff ff52 	bl	8000584 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80006e0:	2340      	movs	r3, #64	; 0x40
 80006e2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80006f4:	2395      	movs	r3, #149	; 0x95
 80006f6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80006f8:	463b      	mov	r3, r7
 80006fa:	2106      	movs	r1, #6
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff7b 	bl	80005f8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000702:	e002      	b.n	800070a <SD_PowerOn+0x56>
	{
		cnt--;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	3b01      	subs	r3, #1
 8000708:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800070a:	f7ff ff8f 	bl	800062c <SPI_RxByte>
 800070e:	4603      	mov	r3, r0
 8000710:	2b01      	cmp	r3, #1
 8000712:	d002      	beq.n	800071a <SD_PowerOn+0x66>
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d1f4      	bne.n	8000704 <SD_PowerOn+0x50>
	}

	DESELECT();
 800071a:	f7ff ff43 	bl	80005a4 <DESELECT>
	SPI_TxByte(0XFF);
 800071e:	20ff      	movs	r0, #255	; 0xff
 8000720:	f7ff ff50 	bl	80005c4 <SPI_TxByte>

	PowerFlag = 1;
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <SD_PowerOn+0x80>)
 8000726:	2201      	movs	r2, #1
 8000728:	701a      	strb	r2, [r3, #0]
}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200000a5 	.word	0x200000a5

08000738 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <SD_PowerOff+0x14>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	200000a5 	.word	0x200000a5

08000750 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <SD_CheckPower+0x14>)
 8000756:	781b      	ldrb	r3, [r3, #0]
}
 8000758:	4618      	mov	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	200000a5 	.word	0x200000a5

08000768 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <SD_RxDataBlock+0x5c>)
 8000774:	22c8      	movs	r2, #200	; 0xc8
 8000776:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000778:	f7ff ff58 	bl	800062c <SPI_RxByte>
 800077c:	4603      	mov	r3, r0
 800077e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	2bff      	cmp	r3, #255	; 0xff
 8000784:	d104      	bne.n	8000790 <SD_RxDataBlock+0x28>
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <SD_RxDataBlock+0x5c>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	b29b      	uxth	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d1f3      	bne.n	8000778 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	2bfe      	cmp	r3, #254	; 0xfe
 8000794:	d001      	beq.n	800079a <SD_RxDataBlock+0x32>
 8000796:	2300      	movs	r3, #0
 8000798:	e00f      	b.n	80007ba <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	607a      	str	r2, [r7, #4]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff5f 	bl	8000664 <SPI_RxBytePtr>
	} while(len--);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	1e5a      	subs	r2, r3, #1
 80007aa:	603a      	str	r2, [r7, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d1f4      	bne.n	800079a <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80007b0:	f7ff ff3c 	bl	800062c <SPI_RxByte>
	SPI_RxByte();
 80007b4:	f7ff ff3a 	bl	800062c <SPI_RxByte>

	return TRUE;
 80007b8:	2301      	movs	r3, #1
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200023af 	.word	0x200023af

080007c8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	460b      	mov	r3, r1
 80007d2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007d8:	f7ff ff52 	bl	8000680 <SD_ReadyWait>
 80007dc:	4603      	mov	r3, r0
 80007de:	2bff      	cmp	r3, #255	; 0xff
 80007e0:	d001      	beq.n	80007e6 <SD_TxDataBlock+0x1e>
 80007e2:	2300      	movs	r3, #0
 80007e4:	e02f      	b.n	8000846 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80007e6:	78fb      	ldrb	r3, [r7, #3]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff feeb 	bl	80005c4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80007ee:	78fb      	ldrb	r3, [r7, #3]
 80007f0:	2bfd      	cmp	r3, #253	; 0xfd
 80007f2:	d020      	beq.n	8000836 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80007f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff fefd 	bl	80005f8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80007fe:	f7ff ff15 	bl	800062c <SPI_RxByte>
		SPI_RxByte();
 8000802:	f7ff ff13 	bl	800062c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000806:	e00b      	b.n	8000820 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000808:	f7ff ff10 	bl	800062c <SPI_RxByte>
 800080c:	4603      	mov	r3, r0
 800080e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	f003 031f 	and.w	r3, r3, #31
 8000816:	2b05      	cmp	r3, #5
 8000818:	d006      	beq.n	8000828 <SD_TxDataBlock+0x60>
			i++;
 800081a:	7bbb      	ldrb	r3, [r7, #14]
 800081c:	3301      	adds	r3, #1
 800081e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000820:	7bbb      	ldrb	r3, [r7, #14]
 8000822:	2b40      	cmp	r3, #64	; 0x40
 8000824:	d9f0      	bls.n	8000808 <SD_TxDataBlock+0x40>
 8000826:	e000      	b.n	800082a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000828:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800082a:	bf00      	nop
 800082c:	f7ff fefe 	bl	800062c <SPI_RxByte>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0fa      	beq.n	800082c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	f003 031f 	and.w	r3, r3, #31
 800083c:	2b05      	cmp	r3, #5
 800083e:	d101      	bne.n	8000844 <SD_TxDataBlock+0x7c>
 8000840:	2301      	movs	r3, #1
 8000842:	e000      	b.n	8000846 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b084      	sub	sp, #16
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	6039      	str	r1, [r7, #0]
 8000858:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800085a:	f7ff ff11 	bl	8000680 <SD_ReadyWait>
 800085e:	4603      	mov	r3, r0
 8000860:	2bff      	cmp	r3, #255	; 0xff
 8000862:	d001      	beq.n	8000868 <SD_SendCmd+0x1a>
 8000864:	23ff      	movs	r3, #255	; 0xff
 8000866:	e042      	b.n	80008ee <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff feaa 	bl	80005c4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	0e1b      	lsrs	r3, r3, #24
 8000874:	b2db      	uxtb	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fea4 	bl	80005c4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	0c1b      	lsrs	r3, r3, #16
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fe9e 	bl	80005c4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	0a1b      	lsrs	r3, r3, #8
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fe98 	bl	80005c4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fe93 	bl	80005c4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b40      	cmp	r3, #64	; 0x40
 80008a2:	d102      	bne.n	80008aa <SD_SendCmd+0x5c>
 80008a4:	2395      	movs	r3, #149	; 0x95
 80008a6:	73fb      	strb	r3, [r7, #15]
 80008a8:	e007      	b.n	80008ba <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b48      	cmp	r3, #72	; 0x48
 80008ae:	d102      	bne.n	80008b6 <SD_SendCmd+0x68>
 80008b0:	2387      	movs	r3, #135	; 0x87
 80008b2:	73fb      	strb	r3, [r7, #15]
 80008b4:	e001      	b.n	80008ba <SD_SendCmd+0x6c>
	else crc = 1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fe81 	bl	80005c4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	2b4c      	cmp	r3, #76	; 0x4c
 80008c6:	d101      	bne.n	80008cc <SD_SendCmd+0x7e>
 80008c8:	f7ff feb0 	bl	800062c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80008cc:	230a      	movs	r3, #10
 80008ce:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80008d0:	f7ff feac 	bl	800062c <SPI_RxByte>
 80008d4:	4603      	mov	r3, r0
 80008d6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80008d8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	da05      	bge.n	80008ec <SD_SendCmd+0x9e>
 80008e0:	7bbb      	ldrb	r3, [r7, #14]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	73bb      	strb	r3, [r7, #14]
 80008e6:	7bbb      	ldrb	r3, [r7, #14]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1f1      	bne.n	80008d0 <SD_SendCmd+0x82>

	return res;
 80008ec:	7b7b      	ldrb	r3, [r7, #13]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SD_disk_initialize+0x14>
 8000908:	2301      	movs	r3, #1
 800090a:	e0d6      	b.n	8000aba <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800090c:	4b6d      	ldr	r3, [pc, #436]	; (8000ac4 <SD_disk_initialize+0x1cc>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	2b00      	cmp	r3, #0
 8000918:	d003      	beq.n	8000922 <SD_disk_initialize+0x2a>
 800091a:	4b6a      	ldr	r3, [pc, #424]	; (8000ac4 <SD_disk_initialize+0x1cc>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	e0cb      	b.n	8000aba <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000922:	f7ff fec7 	bl	80006b4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000926:	f7ff fe2d 	bl	8000584 <SELECT>

	/* check disk type */
	type = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800092e:	2100      	movs	r1, #0
 8000930:	2040      	movs	r0, #64	; 0x40
 8000932:	f7ff ff8c 	bl	800084e <SD_SendCmd>
 8000936:	4603      	mov	r3, r0
 8000938:	2b01      	cmp	r3, #1
 800093a:	f040 80a6 	bne.w	8000a8a <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800093e:	4b62      	ldr	r3, [pc, #392]	; (8000ac8 <SD_disk_initialize+0x1d0>)
 8000940:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000944:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000946:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800094a:	2048      	movs	r0, #72	; 0x48
 800094c:	f7ff ff7f 	bl	800084e <SD_SendCmd>
 8000950:	4603      	mov	r3, r0
 8000952:	2b01      	cmp	r3, #1
 8000954:	d158      	bne.n	8000a08 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000956:	2300      	movs	r3, #0
 8000958:	73fb      	strb	r3, [r7, #15]
 800095a:	e00c      	b.n	8000976 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800095c:	7bfc      	ldrb	r4, [r7, #15]
 800095e:	f7ff fe65 	bl	800062c <SPI_RxByte>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	f104 0310 	add.w	r3, r4, #16
 800096a:	443b      	add	r3, r7
 800096c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	3301      	adds	r3, #1
 8000974:	73fb      	strb	r3, [r7, #15]
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	2b03      	cmp	r3, #3
 800097a:	d9ef      	bls.n	800095c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800097c:	7abb      	ldrb	r3, [r7, #10]
 800097e:	2b01      	cmp	r3, #1
 8000980:	f040 8083 	bne.w	8000a8a <SD_disk_initialize+0x192>
 8000984:	7afb      	ldrb	r3, [r7, #11]
 8000986:	2baa      	cmp	r3, #170	; 0xaa
 8000988:	d17f      	bne.n	8000a8a <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800098a:	2100      	movs	r1, #0
 800098c:	2077      	movs	r0, #119	; 0x77
 800098e:	f7ff ff5e 	bl	800084e <SD_SendCmd>
 8000992:	4603      	mov	r3, r0
 8000994:	2b01      	cmp	r3, #1
 8000996:	d807      	bhi.n	80009a8 <SD_disk_initialize+0xb0>
 8000998:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800099c:	2069      	movs	r0, #105	; 0x69
 800099e:	f7ff ff56 	bl	800084e <SD_SendCmd>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d005      	beq.n	80009b4 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80009a8:	4b47      	ldr	r3, [pc, #284]	; (8000ac8 <SD_disk_initialize+0x1d0>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d1eb      	bne.n	800098a <SD_disk_initialize+0x92>
 80009b2:	e000      	b.n	80009b6 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009b4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009b6:	4b44      	ldr	r3, [pc, #272]	; (8000ac8 <SD_disk_initialize+0x1d0>)
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d064      	beq.n	8000a8a <SD_disk_initialize+0x192>
 80009c0:	2100      	movs	r1, #0
 80009c2:	207a      	movs	r0, #122	; 0x7a
 80009c4:	f7ff ff43 	bl	800084e <SD_SendCmd>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d15d      	bne.n	8000a8a <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80009ce:	2300      	movs	r3, #0
 80009d0:	73fb      	strb	r3, [r7, #15]
 80009d2:	e00c      	b.n	80009ee <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80009d4:	7bfc      	ldrb	r4, [r7, #15]
 80009d6:	f7ff fe29 	bl	800062c <SPI_RxByte>
 80009da:	4603      	mov	r3, r0
 80009dc:	461a      	mov	r2, r3
 80009de:	f104 0310 	add.w	r3, r4, #16
 80009e2:	443b      	add	r3, r7
 80009e4:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	3301      	adds	r3, #1
 80009ec:	73fb      	strb	r3, [r7, #15]
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	2b03      	cmp	r3, #3
 80009f2:	d9ef      	bls.n	80009d4 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80009f4:	7a3b      	ldrb	r3, [r7, #8]
 80009f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SD_disk_initialize+0x10a>
 80009fe:	230c      	movs	r3, #12
 8000a00:	e000      	b.n	8000a04 <SD_disk_initialize+0x10c>
 8000a02:	2304      	movs	r3, #4
 8000a04:	73bb      	strb	r3, [r7, #14]
 8000a06:	e040      	b.n	8000a8a <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2077      	movs	r0, #119	; 0x77
 8000a0c:	f7ff ff1f 	bl	800084e <SD_SendCmd>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d808      	bhi.n	8000a28 <SD_disk_initialize+0x130>
 8000a16:	2100      	movs	r1, #0
 8000a18:	2069      	movs	r0, #105	; 0x69
 8000a1a:	f7ff ff18 	bl	800084e <SD_SendCmd>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d801      	bhi.n	8000a28 <SD_disk_initialize+0x130>
 8000a24:	2302      	movs	r3, #2
 8000a26:	e000      	b.n	8000a2a <SD_disk_initialize+0x132>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a2c:	7bbb      	ldrb	r3, [r7, #14]
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d10e      	bne.n	8000a50 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a32:	2100      	movs	r1, #0
 8000a34:	2077      	movs	r0, #119	; 0x77
 8000a36:	f7ff ff0a 	bl	800084e <SD_SendCmd>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d80e      	bhi.n	8000a5e <SD_disk_initialize+0x166>
 8000a40:	2100      	movs	r1, #0
 8000a42:	2069      	movs	r0, #105	; 0x69
 8000a44:	f7ff ff03 	bl	800084e <SD_SendCmd>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d107      	bne.n	8000a5e <SD_disk_initialize+0x166>
 8000a4e:	e00d      	b.n	8000a6c <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a50:	2100      	movs	r1, #0
 8000a52:	2041      	movs	r0, #65	; 0x41
 8000a54:	f7ff fefb 	bl	800084e <SD_SendCmd>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d005      	beq.n	8000a6a <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <SD_disk_initialize+0x1d0>)
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1e1      	bne.n	8000a2c <SD_disk_initialize+0x134>
 8000a68:	e000      	b.n	8000a6c <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a6a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <SD_disk_initialize+0x1d0>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d007      	beq.n	8000a86 <SD_disk_initialize+0x18e>
 8000a76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7a:	2050      	movs	r0, #80	; 0x50
 8000a7c:	f7ff fee7 	bl	800084e <SD_SendCmd>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SD_disk_initialize+0x192>
 8000a86:	2300      	movs	r3, #0
 8000a88:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <SD_disk_initialize+0x1d4>)
 8000a8c:	7bbb      	ldrb	r3, [r7, #14]
 8000a8e:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000a90:	f7ff fd88 	bl	80005a4 <DESELECT>
	SPI_RxByte();
 8000a94:	f7ff fdca 	bl	800062c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a98:	7bbb      	ldrb	r3, [r7, #14]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d008      	beq.n	8000ab0 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <SD_disk_initialize+0x1cc>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	f023 0301 	bic.w	r3, r3, #1
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <SD_disk_initialize+0x1cc>)
 8000aac:	701a      	strb	r2, [r3, #0]
 8000aae:	e001      	b.n	8000ab4 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000ab0:	f7ff fe42 	bl	8000738 <SD_PowerOff>
	}

	return Stat;
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <SD_disk_initialize+0x1cc>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b2db      	uxtb	r3, r3
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd90      	pop	{r4, r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	200023af 	.word	0x200023af
 8000acc:	200000a4 	.word	0x200000a4

08000ad0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SD_disk_status+0x14>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e002      	b.n	8000aea <SD_disk_status+0x1a>
	return Stat;
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <SD_disk_status+0x28>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000000 	.word	0x20000000

08000afc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	4603      	mov	r3, r0
 8000b0a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d102      	bne.n	8000b18 <SD_disk_read+0x1c>
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d101      	bne.n	8000b1c <SD_disk_read+0x20>
 8000b18:	2304      	movs	r3, #4
 8000b1a:	e051      	b.n	8000bc0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b1c:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <SD_disk_read+0xcc>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SD_disk_read+0x32>
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	e048      	b.n	8000bc0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b2e:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <SD_disk_read+0xd0>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d102      	bne.n	8000b40 <SD_disk_read+0x44>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	025b      	lsls	r3, r3, #9
 8000b3e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b40:	f7ff fd20 	bl	8000584 <SELECT>

	if (count == 1)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d111      	bne.n	8000b6e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	2051      	movs	r0, #81	; 0x51
 8000b4e:	f7ff fe7e 	bl	800084e <SD_SendCmd>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d129      	bne.n	8000bac <SD_disk_read+0xb0>
 8000b58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b5c:	68b8      	ldr	r0, [r7, #8]
 8000b5e:	f7ff fe03 	bl	8000768 <SD_RxDataBlock>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d021      	beq.n	8000bac <SD_disk_read+0xb0>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	e01e      	b.n	8000bac <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	2052      	movs	r0, #82	; 0x52
 8000b72:	f7ff fe6c 	bl	800084e <SD_SendCmd>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d117      	bne.n	8000bac <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b80:	68b8      	ldr	r0, [r7, #8]
 8000b82:	f7ff fdf1 	bl	8000768 <SD_RxDataBlock>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d00a      	beq.n	8000ba2 <SD_disk_read+0xa6>
				buff += 512;
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b92:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d1ed      	bne.n	8000b7c <SD_disk_read+0x80>
 8000ba0:	e000      	b.n	8000ba4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ba2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	204c      	movs	r0, #76	; 0x4c
 8000ba8:	f7ff fe51 	bl	800084e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000bac:	f7ff fcfa 	bl	80005a4 <DESELECT>
	SPI_RxByte();
 8000bb0:	f7ff fd3c 	bl	800062c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	bf14      	ite	ne
 8000bba:	2301      	movne	r3, #1
 8000bbc:	2300      	moveq	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	200000a4 	.word	0x200000a4

08000bd0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	4603      	mov	r3, r0
 8000bde:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d102      	bne.n	8000bec <SD_disk_write+0x1c>
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d101      	bne.n	8000bf0 <SD_disk_write+0x20>
 8000bec:	2304      	movs	r3, #4
 8000bee:	e06b      	b.n	8000cc8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bf0:	4b37      	ldr	r3, [pc, #220]	; (8000cd0 <SD_disk_write+0x100>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SD_disk_write+0x32>
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e062      	b.n	8000cc8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c02:	4b33      	ldr	r3, [pc, #204]	; (8000cd0 <SD_disk_write+0x100>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SD_disk_write+0x44>
 8000c10:	2302      	movs	r3, #2
 8000c12:	e059      	b.n	8000cc8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <SD_disk_write+0x104>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d102      	bne.n	8000c26 <SD_disk_write+0x56>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	025b      	lsls	r3, r3, #9
 8000c24:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c26:	f7ff fcad 	bl	8000584 <SELECT>

	if (count == 1)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d110      	bne.n	8000c52 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	2058      	movs	r0, #88	; 0x58
 8000c34:	f7ff fe0b 	bl	800084e <SD_SendCmd>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d13a      	bne.n	8000cb4 <SD_disk_write+0xe4>
 8000c3e:	21fe      	movs	r1, #254	; 0xfe
 8000c40:	68b8      	ldr	r0, [r7, #8]
 8000c42:	f7ff fdc1 	bl	80007c8 <SD_TxDataBlock>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d033      	beq.n	8000cb4 <SD_disk_write+0xe4>
			count = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	e030      	b.n	8000cb4 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <SD_disk_write+0x104>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d007      	beq.n	8000c6e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2077      	movs	r0, #119	; 0x77
 8000c62:	f7ff fdf4 	bl	800084e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c66:	6839      	ldr	r1, [r7, #0]
 8000c68:	2057      	movs	r0, #87	; 0x57
 8000c6a:	f7ff fdf0 	bl	800084e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	2059      	movs	r0, #89	; 0x59
 8000c72:	f7ff fdec 	bl	800084e <SD_SendCmd>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d11b      	bne.n	8000cb4 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c7c:	21fc      	movs	r1, #252	; 0xfc
 8000c7e:	68b8      	ldr	r0, [r7, #8]
 8000c80:	f7ff fda2 	bl	80007c8 <SD_TxDataBlock>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d00a      	beq.n	8000ca0 <SD_disk_write+0xd0>
				buff += 512;
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c90:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1ee      	bne.n	8000c7c <SD_disk_write+0xac>
 8000c9e:	e000      	b.n	8000ca2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000ca0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000ca2:	21fd      	movs	r1, #253	; 0xfd
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f7ff fd8f 	bl	80007c8 <SD_TxDataBlock>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d101      	bne.n	8000cb4 <SD_disk_write+0xe4>
			{
				count = 1;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000cb4:	f7ff fc76 	bl	80005a4 <DESELECT>
	SPI_RxByte();
 8000cb8:	f7ff fcb8 	bl	800062c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	bf14      	ite	ne
 8000cc2:	2301      	movne	r3, #1
 8000cc4:	2300      	moveq	r3, #0
 8000cc6:	b2db      	uxtb	r3, r3
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	200000a4 	.word	0x200000a4

08000cd8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b08b      	sub	sp, #44	; 0x2c
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	603a      	str	r2, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SD_disk_ioctl+0x1e>
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	e115      	b.n	8000f22 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000cfc:	79bb      	ldrb	r3, [r7, #6]
 8000cfe:	2b05      	cmp	r3, #5
 8000d00:	d124      	bne.n	8000d4c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d02:	6a3b      	ldr	r3, [r7, #32]
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d012      	beq.n	8000d30 <SD_disk_ioctl+0x58>
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	dc1a      	bgt.n	8000d44 <SD_disk_ioctl+0x6c>
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d002      	beq.n	8000d18 <SD_disk_ioctl+0x40>
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d006      	beq.n	8000d24 <SD_disk_ioctl+0x4c>
 8000d16:	e015      	b.n	8000d44 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000d18:	f7ff fd0e 	bl	8000738 <SD_PowerOff>
			res = RES_OK;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d22:	e0fc      	b.n	8000f1e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d24:	f7ff fcc6 	bl	80006b4 <SD_PowerOn>
			res = RES_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d2e:	e0f6      	b.n	8000f1e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d30:	6a3b      	ldr	r3, [r7, #32]
 8000d32:	1c5c      	adds	r4, r3, #1
 8000d34:	f7ff fd0c 	bl	8000750 <SD_CheckPower>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d42:	e0ec      	b.n	8000f1e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000d44:	2304      	movs	r3, #4
 8000d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d4a:	e0e8      	b.n	8000f1e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d4c:	4b77      	ldr	r3, [pc, #476]	; (8000f2c <SD_disk_ioctl+0x254>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SD_disk_ioctl+0x86>
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	e0e1      	b.n	8000f22 <SD_disk_ioctl+0x24a>

		SELECT();
 8000d5e:	f7ff fc11 	bl	8000584 <SELECT>

		switch (ctrl)
 8000d62:	79bb      	ldrb	r3, [r7, #6]
 8000d64:	2b0d      	cmp	r3, #13
 8000d66:	f200 80cb 	bhi.w	8000f00 <SD_disk_ioctl+0x228>
 8000d6a:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <SD_disk_ioctl+0x98>)
 8000d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d70:	08000e6b 	.word	0x08000e6b
 8000d74:	08000da9 	.word	0x08000da9
 8000d78:	08000e5b 	.word	0x08000e5b
 8000d7c:	08000f01 	.word	0x08000f01
 8000d80:	08000f01 	.word	0x08000f01
 8000d84:	08000f01 	.word	0x08000f01
 8000d88:	08000f01 	.word	0x08000f01
 8000d8c:	08000f01 	.word	0x08000f01
 8000d90:	08000f01 	.word	0x08000f01
 8000d94:	08000f01 	.word	0x08000f01
 8000d98:	08000f01 	.word	0x08000f01
 8000d9c:	08000e7d 	.word	0x08000e7d
 8000da0:	08000ea1 	.word	0x08000ea1
 8000da4:	08000ec5 	.word	0x08000ec5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000da8:	2100      	movs	r1, #0
 8000daa:	2049      	movs	r0, #73	; 0x49
 8000dac:	f7ff fd4f 	bl	800084e <SD_SendCmd>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 80a8 	bne.w	8000f08 <SD_disk_ioctl+0x230>
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2110      	movs	r1, #16
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fcd2 	bl	8000768 <SD_RxDataBlock>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 809e 	beq.w	8000f08 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000dcc:	7b3b      	ldrb	r3, [r7, #12]
 8000dce:	099b      	lsrs	r3, r3, #6
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d10e      	bne.n	8000df4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dd6:	7d7b      	ldrb	r3, [r7, #21]
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	7d3b      	ldrb	r3, [r7, #20]
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	4413      	add	r3, r2
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	3301      	adds	r3, #1
 8000de8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000dea:	8bfb      	ldrh	r3, [r7, #30]
 8000dec:	029a      	lsls	r2, r3, #10
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	e02e      	b.n	8000e52 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000df4:	7c7b      	ldrb	r3, [r7, #17]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	7dbb      	ldrb	r3, [r7, #22]
 8000dfe:	09db      	lsrs	r3, r3, #7
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4413      	add	r3, r2
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	7d7b      	ldrb	r3, [r7, #21]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	f003 0306 	and.w	r3, r3, #6
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	4413      	add	r3, r2
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	3302      	adds	r3, #2
 8000e18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e1c:	7d3b      	ldrb	r3, [r7, #20]
 8000e1e:	099b      	lsrs	r3, r3, #6
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	7cfb      	ldrb	r3, [r7, #19]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	4413      	add	r3, r2
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	7cbb      	ldrb	r3, [r7, #18]
 8000e32:	029b      	lsls	r3, r3, #10
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	3301      	adds	r3, #1
 8000e42:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e44:	8bfa      	ldrh	r2, [r7, #30]
 8000e46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e4a:	3b09      	subs	r3, #9
 8000e4c:	409a      	lsls	r2, r3
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e58:	e056      	b.n	8000f08 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e60:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e68:	e055      	b.n	8000f16 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e6a:	f7ff fc09 	bl	8000680 <SD_ReadyWait>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2bff      	cmp	r3, #255	; 0xff
 8000e72:	d14b      	bne.n	8000f0c <SD_disk_ioctl+0x234>
 8000e74:	2300      	movs	r3, #0
 8000e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e7a:	e047      	b.n	8000f0c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2049      	movs	r0, #73	; 0x49
 8000e80:	f7ff fce5 	bl	800084e <SD_SendCmd>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d142      	bne.n	8000f10 <SD_disk_ioctl+0x238>
 8000e8a:	2110      	movs	r1, #16
 8000e8c:	6a38      	ldr	r0, [r7, #32]
 8000e8e:	f7ff fc6b 	bl	8000768 <SD_RxDataBlock>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d03b      	beq.n	8000f10 <SD_disk_ioctl+0x238>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e9e:	e037      	b.n	8000f10 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	204a      	movs	r0, #74	; 0x4a
 8000ea4:	f7ff fcd3 	bl	800084e <SD_SendCmd>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d132      	bne.n	8000f14 <SD_disk_ioctl+0x23c>
 8000eae:	2110      	movs	r1, #16
 8000eb0:	6a38      	ldr	r0, [r7, #32]
 8000eb2:	f7ff fc59 	bl	8000768 <SD_RxDataBlock>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d02b      	beq.n	8000f14 <SD_disk_ioctl+0x23c>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ec2:	e027      	b.n	8000f14 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	207a      	movs	r0, #122	; 0x7a
 8000ec8:	f7ff fcc1 	bl	800084e <SD_SendCmd>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d116      	bne.n	8000f00 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ed8:	e00b      	b.n	8000ef2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000eda:	6a3c      	ldr	r4, [r7, #32]
 8000edc:	1c63      	adds	r3, r4, #1
 8000ede:	623b      	str	r3, [r7, #32]
 8000ee0:	f7ff fba4 	bl	800062c <SPI_RxByte>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ee8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eec:	3301      	adds	r3, #1
 8000eee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ef2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d9ef      	bls.n	8000eda <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000f00:	2304      	movs	r3, #4
 8000f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f06:	e006      	b.n	8000f16 <SD_disk_ioctl+0x23e>
			break;
 8000f08:	bf00      	nop
 8000f0a:	e004      	b.n	8000f16 <SD_disk_ioctl+0x23e>
			break;
 8000f0c:	bf00      	nop
 8000f0e:	e002      	b.n	8000f16 <SD_disk_ioctl+0x23e>
			break;
 8000f10:	bf00      	nop
 8000f12:	e000      	b.n	8000f16 <SD_disk_ioctl+0x23e>
			break;
 8000f14:	bf00      	nop
		}

		DESELECT();
 8000f16:	f7ff fb45 	bl	80005a4 <DESELECT>
		SPI_RxByte();
 8000f1a:	f7ff fb87 	bl	800062c <SPI_RxByte>
	}

	return res;
 8000f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	372c      	adds	r7, #44	; 0x2c
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd90      	pop	{r4, r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000000 	.word	0x20000000

08000f30 <Delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Delay_us(uint16_t Time) {
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim11, 0);
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <Delay_us+0x30>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24

	while (__HAL_TIM_GET_COUNTER(&htim11) < Time);
 8000f42:	bf00      	nop
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <Delay_us+0x30>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d3f9      	bcc.n	8000f44 <Delay_us+0x14>
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000244 	.word	0x20000244

08000f64 <StructsInit>:

void StructsInit() {
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <TransmitRadio>:

uint8_t TransmitRadio(uint8_t *Data, uint8_t Length) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	70fb      	strb	r3, [r7, #3]
	uint8_t CommData[3] = { 0x0D, 0x01, Length };
 8000f80:	230d      	movs	r3, #13
 8000f82:	733b      	strb	r3, [r7, #12]
 8000f84:	2301      	movs	r3, #1
 8000f86:	737b      	strb	r3, [r7, #13]
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	73bb      	strb	r3, [r7, #14]

	HAL_StatusTypeDef Status = HAL_I2C_Master_Transmit(&hi2c1, 0x00, CommData, 3, 1000);
 8000f8c:	f107 020c 	add.w	r2, r7, #12
 8000f90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2303      	movs	r3, #3
 8000f98:	2100      	movs	r1, #0
 8000f9a:	480e      	ldr	r0, [pc, #56]	; (8000fd4 <TransmitRadio+0x60>)
 8000f9c:	f003 fabc 	bl	8004518 <HAL_I2C_Master_Transmit>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	73fb      	strb	r3, [r7, #15]

	if (Status != HAL_OK) {
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <TransmitRadio+0x3a>
		return Transmit_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00e      	b.n	8000fcc <TransmitRadio+0x58>
	}

	Delay_us(1000);
 8000fae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb2:	f7ff ffbd 	bl	8000f30 <Delay_us>
	HAL_I2C_Master_Transmit(&hi2c1, 0x00, Data, Length, 1000);
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fbe:	9200      	str	r2, [sp, #0]
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <TransmitRadio+0x60>)
 8000fc6:	f003 faa7 	bl	8004518 <HAL_I2C_Master_Transmit>

	return Transmit_OK;
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000150 	.word	0x20000150

08000fd8 <GetAllGPS>:

uint8_t GetAllGPS()
{
 8000fd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fdc:	b089      	sub	sp, #36	; 0x24
 8000fde:	af02      	add	r7, sp, #8
 8000fe0:	466b      	mov	r3, sp
 8000fe2:	461e      	mov	r6, r3
	UINT bw;
	uint8_t CommData[3] = { 0x0D, 0x03, 0x00 };
 8000fe4:	4a3a      	ldr	r2, [pc, #232]	; (80010d0 <GetAllGPS+0xf8>)
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	6812      	ldr	r2, [r2, #0]
 8000fea:	4611      	mov	r1, r2
 8000fec:	8019      	strh	r1, [r3, #0]
 8000fee:	3302      	adds	r3, #2
 8000ff0:	0c12      	lsrs	r2, r2, #16
 8000ff2:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef Status = HAL_I2C_Master_Transmit(&hi2c1, 0x00, CommData, 3, 1000);
 8000ff4:	1d3a      	adds	r2, r7, #4
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	2100      	movs	r1, #0
 8001000:	4834      	ldr	r0, [pc, #208]	; (80010d4 <GetAllGPS+0xfc>)
 8001002:	f003 fa89 	bl	8004518 <HAL_I2C_Master_Transmit>
 8001006:	4603      	mov	r3, r0
 8001008:	75fb      	strb	r3, [r7, #23]

	if (Status != HAL_OK) {
 800100a:	7dfb      	ldrb	r3, [r7, #23]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <GetAllGPS+0x3c>
		return Transmit_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e056      	b.n	80010c2 <GetAllGPS+0xea>
	}

	uint8_t Lth;
	HAL_I2C_Master_Receive(&hi2c1, 0x00, &Lth, 1, 1000);
 8001014:	1cfa      	adds	r2, r7, #3
 8001016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2301      	movs	r3, #1
 800101e:	2100      	movs	r1, #0
 8001020:	482c      	ldr	r0, [pc, #176]	; (80010d4 <GetAllGPS+0xfc>)
 8001022:	f003 fb77 	bl	8004714 <HAL_I2C_Master_Receive>
	uint8_t AllData[Lth];
 8001026:	78f9      	ldrb	r1, [r7, #3]
 8001028:	460b      	mov	r3, r1
 800102a:	3b01      	subs	r3, #1
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	b2cb      	uxtb	r3, r1
 8001030:	2200      	movs	r2, #0
 8001032:	4698      	mov	r8, r3
 8001034:	4691      	mov	r9, r2
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	f04f 0300 	mov.w	r3, #0
 800103e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001042:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001046:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800104a:	b2cb      	uxtb	r3, r1
 800104c:	2200      	movs	r2, #0
 800104e:	461c      	mov	r4, r3
 8001050:	4615      	mov	r5, r2
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	f04f 0300 	mov.w	r3, #0
 800105a:	00eb      	lsls	r3, r5, #3
 800105c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001060:	00e2      	lsls	r2, r4, #3
 8001062:	460b      	mov	r3, r1
 8001064:	3307      	adds	r3, #7
 8001066:	08db      	lsrs	r3, r3, #3
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	ebad 0d03 	sub.w	sp, sp, r3
 800106e:	ab02      	add	r3, sp, #8
 8001070:	3300      	adds	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Master_Receive(&hi2c1, 0x00, AllData, Lth, 1000);
 8001074:	78fb      	ldrb	r3, [r7, #3]
 8001076:	b29b      	uxth	r3, r3
 8001078:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800107c:	9200      	str	r2, [sp, #0]
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	2100      	movs	r1, #0
 8001082:	4814      	ldr	r0, [pc, #80]	; (80010d4 <GetAllGPS+0xfc>)
 8001084:	f003 fb46 	bl	8004714 <HAL_I2C_Master_Receive>

	fresult = f_open(&fil, "AllGPS.bin", FA_OPEN_APPEND | FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001088:	2233      	movs	r2, #51	; 0x33
 800108a:	4913      	ldr	r1, [pc, #76]	; (80010d8 <GetAllGPS+0x100>)
 800108c:	4813      	ldr	r0, [pc, #76]	; (80010dc <GetAllGPS+0x104>)
 800108e:	f009 fb4d 	bl	800a72c <f_open>
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <GetAllGPS+0x108>)
 8001098:	701a      	strb	r2, [r3, #0]
	fresult = f_write(&fil, AllData, Lth, &bw);
 800109a:	78fb      	ldrb	r3, [r7, #3]
 800109c:	461a      	mov	r2, r3
 800109e:	f107 0308 	add.w	r3, r7, #8
 80010a2:	68f9      	ldr	r1, [r7, #12]
 80010a4:	480d      	ldr	r0, [pc, #52]	; (80010dc <GetAllGPS+0x104>)
 80010a6:	f009 fd0d 	bl	800aac4 <f_write>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <GetAllGPS+0x108>)
 80010b0:	701a      	strb	r2, [r3, #0]
	fresult = f_close(&fil);
 80010b2:	480a      	ldr	r0, [pc, #40]	; (80010dc <GetAllGPS+0x104>)
 80010b4:	f009 ff18 	bl	800aee8 <f_close>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <GetAllGPS+0x108>)
 80010be:	701a      	strb	r2, [r3, #0]

	return Transmit_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	46b5      	mov	sp, r6
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	371c      	adds	r7, #28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010ce:	bf00      	nop
 80010d0:	0800bb58 	.word	0x0800bb58
 80010d4:	20000150 	.word	0x20000150
 80010d8:	0800bb4c 	.word	0x0800bb4c
 80010dc:	2000136c 	.word	0x2000136c
 80010e0:	2000239c 	.word	0x2000239c

080010e4 <HealthMonitor>:
	*Attitude = (Data[8] | Data[9] | Data[10] | Data[11]);

	return Transmit_OK;
}

void HealthMonitor() {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	if (health.DS18B20_OK == 0) {
 80010e8:	4b22      	ldr	r3, [pc, #136]	; (8001174 <HealthMonitor+0x90>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d114      	bne.n	800111a <HealthMonitor+0x36>
		HAL_TIM_Base_Start(&htim11);
 80010f0:	4821      	ldr	r0, [pc, #132]	; (8001178 <HealthMonitor+0x94>)
 80010f2:	f005 fddb 	bl	8006cac <HAL_TIM_Base_Start>
		if (DS18_Init(DS18_SKIP_ROM) == DS18_OK) {
 80010f6:	f04f 0000 	mov.w	r0, #0
 80010fa:	f04f 0100 	mov.w	r1, #0
 80010fe:	f001 f81a 	bl	8002136 <DS18_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d108      	bne.n	800111a <HealthMonitor+0x36>
			DS18_StartConv(DS18_SKIP_ROM);
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	f04f 0100 	mov.w	r1, #0
 8001110:	f001 f847 	bl	80021a2 <DS18_StartConv>
			health.DS18B20_OK = 1;
 8001114:	4b17      	ldr	r3, [pc, #92]	; (8001174 <HealthMonitor+0x90>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
		}
	}
	if (health.LSM6_OK == 0) {
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HealthMonitor+0x90>)
 800111c:	785b      	ldrb	r3, [r3, #1]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d104      	bne.n	800112c <HealthMonitor+0x48>
		LSM6DS3_Init();
 8001122:	f001 f9a3 	bl	800246c <LSM6DS3_Init>
		health.LSM6_OK = 1;
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <HealthMonitor+0x90>)
 8001128:	2201      	movs	r2, #1
 800112a:	705a      	strb	r2, [r3, #1]
	}
	if (health.QMC_OK == 0) {
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HealthMonitor+0x90>)
 800112e:	78db      	ldrb	r3, [r3, #3]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d108      	bne.n	8001146 <HealthMonitor+0x62>
		QMC5883L_Init(QMC5883L_ODR_100HZ, QMC5883L_RNG_2G, QMC5883L_OSR_512,
 8001134:	2301      	movs	r3, #1
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2002      	movs	r0, #2
 800113c:	f001 fb29 	bl	8002792 <QMC5883L_Init>
		QMC5883L_MODE_CONT);
		health.QMC_OK = 1;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HealthMonitor+0x90>)
 8001142:	2201      	movs	r2, #1
 8001144:	70da      	strb	r2, [r3, #3]
	}
	if (health.MS56_OK == 0) {
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HealthMonitor+0x90>)
 8001148:	789b      	ldrb	r3, [r3, #2]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d104      	bne.n	8001158 <HealthMonitor+0x74>
		MS5607_Init();
 800114e:	f001 fabd 	bl	80026cc <MS5607_Init>
		health.MS56_OK = 1;
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <HealthMonitor+0x90>)
 8001154:	2201      	movs	r2, #1
 8001156:	709a      	strb	r2, [r3, #2]
	}
	if(health.UCAM_OK == 0){
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HealthMonitor+0x90>)
 800115a:	795b      	ldrb	r3, [r3, #5]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d107      	bne.n	8001170 <HealthMonitor+0x8c>
		if(UCAM3_Init() == UCAM3_OK)
 8001160:	f006 fcb2 	bl	8007ac8 <UCAM3_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d102      	bne.n	8001170 <HealthMonitor+0x8c>
		{
			health.UCAM_OK = 1;
 800116a:	4b02      	ldr	r3, [pc, #8]	; (8001174 <HealthMonitor+0x90>)
 800116c:	2201      	movs	r2, #1
 800116e:	715a      	strb	r2, [r3, #5]
		}
	}

}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000300 	.word	0x20000300
 8001178:	20000244 	.word	0x20000244

0800117c <GetData>:
void GetData() {
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0

	if (softTimers.DS18B20_REQ > 800) {
 8001182:	4b4f      	ldr	r3, [pc, #316]	; (80012c0 <GetData+0x144>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800118a:	d916      	bls.n	80011ba <GetData+0x3e>

		uint16_t temp = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	83fb      	strh	r3, [r7, #30]

		DS18_GetData(DS18_SKIP_ROM, &temp);
 8001190:	f107 031e 	add.w	r3, r7, #30
 8001194:	461a      	mov	r2, r3
 8001196:	f04f 0000 	mov.w	r0, #0
 800119a:	f04f 0100 	mov.w	r1, #0
 800119e:	f001 f818 	bl	80021d2 <DS18_GetData>
		DS18_StartConv(DS18_SKIP_ROM);
 80011a2:	f04f 0000 	mov.w	r0, #0
 80011a6:	f04f 0100 	mov.w	r1, #0
 80011aa:	f000 fffa 	bl	80021a2 <DS18_StartConv>
		telemetry.DS18_temp = temp;
 80011ae:	8bfa      	ldrh	r2, [r7, #30]
 80011b0:	4b44      	ldr	r3, [pc, #272]	; (80012c4 <GetData+0x148>)
 80011b2:	815a      	strh	r2, [r3, #10]
		softTimers.DS18B20_REQ = 0;
 80011b4:	4b42      	ldr	r3, [pc, #264]	; (80012c0 <GetData+0x144>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]

	}
	if (softTimers.LSM6DS3_REQ > 20) {
 80011ba:	4b41      	ldr	r3, [pc, #260]	; (80012c0 <GetData+0x144>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b14      	cmp	r3, #20
 80011c0:	d922      	bls.n	8001208 <GetData+0x8c>
		int16_t LSM6DS3_Acc[3];
		int16_t LSM6DS3_Gyro[3];
		LSM6DS3_GetData(LSM6DS3_Acc, LSM6DS3_Gyro);
 80011c2:	f107 0210 	add.w	r2, r7, #16
 80011c6:	f107 0318 	add.w	r3, r7, #24
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 f973 	bl	80024b8 <LSM6DS3_GetData>
		telemetry.AccX = LSM6DS3_Acc[0];
 80011d2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80011d6:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <GetData+0x148>)
 80011d8:	819a      	strh	r2, [r3, #12]
		telemetry.GyroX = LSM6DS3_Gyro[0];
 80011da:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80011de:	4b39      	ldr	r3, [pc, #228]	; (80012c4 <GetData+0x148>)
 80011e0:	825a      	strh	r2, [r3, #18]
		telemetry.AccY = LSM6DS3_Acc[1];
 80011e2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80011e6:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <GetData+0x148>)
 80011e8:	81da      	strh	r2, [r3, #14]
		telemetry.GyroY = LSM6DS3_Gyro[1];
 80011ea:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80011ee:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <GetData+0x148>)
 80011f0:	829a      	strh	r2, [r3, #20]
		telemetry.AccZ = LSM6DS3_Acc[2];
 80011f2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80011f6:	4b33      	ldr	r3, [pc, #204]	; (80012c4 <GetData+0x148>)
 80011f8:	821a      	strh	r2, [r3, #16]
		telemetry.GyroZ = LSM6DS3_Gyro[2];
 80011fa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80011fe:	4b31      	ldr	r3, [pc, #196]	; (80012c4 <GetData+0x148>)
 8001200:	82da      	strh	r2, [r3, #22]
		softTimers.LSM6DS3_REQ = 0;
 8001202:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <GetData+0x144>)
 8001204:	2200      	movs	r2, #0
 8001206:	605a      	str	r2, [r3, #4]
	}
	if (softTimers.QMC5883_REQ > 100) {
 8001208:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <GetData+0x144>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2b64      	cmp	r3, #100	; 0x64
 800120e:	d91d      	bls.n	800124c <GetData+0xd0>
		int16_t MagX = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	81fb      	strh	r3, [r7, #14]
		int16_t MagY = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	81bb      	strh	r3, [r7, #12]
		int16_t MagZ = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	817b      	strh	r3, [r7, #10]
		QMC5883L_Read_Mag_Data(&MagX, &MagY, &MagZ);
 800121c:	f107 020a 	add.w	r2, r7, #10
 8001220:	f107 010c 	add.w	r1, r7, #12
 8001224:	f107 030e 	add.w	r3, r7, #14
 8001228:	4618      	mov	r0, r3
 800122a:	f001 fae0 	bl	80027ee <QMC5883L_Read_Mag_Data>
		telemetry.MagX = MagX;
 800122e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001232:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <GetData+0x148>)
 8001234:	831a      	strh	r2, [r3, #24]
		telemetry.MagY = MagY;
 8001236:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800123a:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <GetData+0x148>)
 800123c:	835a      	strh	r2, [r3, #26]
		telemetry.MagZ = MagZ;
 800123e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001242:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <GetData+0x148>)
 8001244:	839a      	strh	r2, [r3, #28]
		softTimers.QMC5883_REQ = 0;
 8001246:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <GetData+0x144>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
	}
	if (softTimers.MS5607_REQ > 100) {
 800124c:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <GetData+0x144>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	2b64      	cmp	r3, #100	; 0x64
 8001252:	d90b      	bls.n	800126c <GetData+0xf0>
		uint32_t MS56_Pres = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
		MS5607_GetPres(&MS56_Pres);
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	4618      	mov	r0, r3
 800125c:	f001 fa58 	bl	8002710 <MS5607_GetPres>
		telemetry.MS5607_pres = MS56_Pres;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a18      	ldr	r2, [pc, #96]	; (80012c4 <GetData+0x148>)
 8001264:	6213      	str	r3, [r2, #32]
		softTimers.MS5607_REQ = 0;
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <GetData+0x144>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
	}
	if (softTimers.GPS_GetFull > 5000) {
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <GetData+0x144>)
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	f241 3288 	movw	r2, #5000	; 0x1388
 8001274:	4293      	cmp	r3, r2
 8001276:	d904      	bls.n	8001282 <GetData+0x106>
		softTimers.GPS_GetFull = 0;
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <GetData+0x144>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
		GetAllGPS();
 800127e:	f7ff feab 	bl	8000fd8 <GetAllGPS>
	}
	if (softTimers.GPS_GetShort > 1000) {

	}
	if (softTimers.GetPicture > 30000) {
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <GetData+0x144>)
 8001284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001286:	f247 5230 	movw	r2, #30000	; 0x7530
 800128a:	4293      	cmp	r3, r2
 800128c:	d913      	bls.n	80012b6 <GetData+0x13a>
		if(UCAM3_GetPucture(PicNum) != UCAM3_OK)
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <GetData+0x14c>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f006 fcca 	bl	8007c2c <UCAM3_GetPucture>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d002      	beq.n	80012a4 <GetData+0x128>
		{
			health.UCAM_OK = 0;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <GetData+0x150>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	715a      	strb	r2, [r3, #5]
		}
		PicNum++;
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <GetData+0x14c>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <GetData+0x14c>)
 80012ae:	801a      	strh	r2, [r3, #0]
		softTimers.GetPicture = 0;
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <GetData+0x144>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 80012b6:	bf00      	nop
 80012b8:	3720      	adds	r7, #32
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000308 	.word	0x20000308
 80012c4:	200002d0 	.word	0x200002d0
 80012c8:	200023a4 	.word	0x200023a4
 80012cc:	20000300 	.word	0x20000300

080012d0 <SendData>:
void SendData() {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b092      	sub	sp, #72	; 0x48
 80012d4:	af00      	add	r7, sp, #0

	if (softTimers.SD_WriteFull > 100) {
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <SendData+0x7c>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	2b64      	cmp	r3, #100	; 0x64
 80012dc:	d91e      	bls.n	800131c <SendData+0x4c>
		uint8_t data[48];
		SetAllData(&telemetry, data);
 80012de:	463b      	mov	r3, r7
 80012e0:	4619      	mov	r1, r3
 80012e2:	481b      	ldr	r0, [pc, #108]	; (8001350 <SendData+0x80>)
 80012e4:	f001 fbb2 	bl	8002a4c <SetAllData>

		fresult = f_open(&fil, "MainTLM.bin", FA_OPEN_APPEND | FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80012e8:	2233      	movs	r2, #51	; 0x33
 80012ea:	491a      	ldr	r1, [pc, #104]	; (8001354 <SendData+0x84>)
 80012ec:	481a      	ldr	r0, [pc, #104]	; (8001358 <SendData+0x88>)
 80012ee:	f009 fa1d 	bl	800a72c <f_open>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <SendData+0x8c>)
 80012f8:	701a      	strb	r2, [r3, #0]
		fresult = f_write(&fil, data, 48, &bw);
 80012fa:	4639      	mov	r1, r7
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <SendData+0x90>)
 80012fe:	2230      	movs	r2, #48	; 0x30
 8001300:	4815      	ldr	r0, [pc, #84]	; (8001358 <SendData+0x88>)
 8001302:	f009 fbdf 	bl	800aac4 <f_write>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <SendData+0x8c>)
 800130c:	701a      	strb	r2, [r3, #0]
		fresult = f_close(&fil);
 800130e:	4812      	ldr	r0, [pc, #72]	; (8001358 <SendData+0x88>)
 8001310:	f009 fdea 	bl	800aee8 <f_close>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	4b10      	ldr	r3, [pc, #64]	; (800135c <SendData+0x8c>)
 800131a:	701a      	strb	r2, [r3, #0]
	}

	if (softTimers.RF_SendMain > 500) {
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <SendData+0x7c>)
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001324:	d90e      	bls.n	8001344 <SendData+0x74>
		softTimers.RF_SendMain = 0;
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <SendData+0x7c>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
		uint8_t data[24];
		SetRadioData(&telemetry, data);
 800132c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001330:	4619      	mov	r1, r3
 8001332:	4807      	ldr	r0, [pc, #28]	; (8001350 <SendData+0x80>)
 8001334:	f001 fade 	bl	80028f4 <SetRadioData>

		TransmitRadio(data, 24);
 8001338:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800133c:	2118      	movs	r1, #24
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fe18 	bl	8000f74 <TransmitRadio>
	}

}
 8001344:	bf00      	nop
 8001346:	3748      	adds	r7, #72	; 0x48
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000308 	.word	0x20000308
 8001350:	200002d0 	.word	0x200002d0
 8001354:	0800bb60 	.word	0x0800bb60
 8001358:	2000136c 	.word	0x2000136c
 800135c:	2000239c 	.word	0x2000239c
 8001360:	200023a0 	.word	0x200023a0

08001364 <CheckForFiles>:

uint16_t CheckForFiles() {
 8001364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001368:	b089      	sub	sp, #36	; 0x24
 800136a:	af00      	add	r7, sp, #0
 800136c:	466b      	mov	r3, sp
 800136e:	607b      	str	r3, [r7, #4]
	char fname[NameLength];
 8001370:	4b4a      	ldr	r3, [pc, #296]	; (800149c <CheckForFiles+0x138>)
 8001372:	781e      	ldrb	r6, [r3, #0]
 8001374:	4633      	mov	r3, r6
 8001376:	3b01      	subs	r3, #1
 8001378:	61fb      	str	r3, [r7, #28]
 800137a:	b2f3      	uxtb	r3, r6
 800137c:	2200      	movs	r2, #0
 800137e:	469a      	mov	sl, r3
 8001380:	4693      	mov	fp, r2
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800138e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001392:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001396:	b2f3      	uxtb	r3, r6
 8001398:	2200      	movs	r2, #0
 800139a:	4618      	mov	r0, r3
 800139c:	4611      	mov	r1, r2
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	00cb      	lsls	r3, r1, #3
 80013a8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80013ac:	00c2      	lsls	r2, r0, #3
 80013ae:	4633      	mov	r3, r6
 80013b0:	3307      	adds	r3, #7
 80013b2:	08db      	lsrs	r3, r3, #3
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	ebad 0d03 	sub.w	sp, sp, r3
 80013ba:	466b      	mov	r3, sp
 80013bc:	3300      	adds	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
	uint16_t n = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	82fb      	strh	r3, [r7, #22]

	sprintf(&fname[0], "%d.jpeg", n);
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	8afa      	ldrh	r2, [r7, #22]
 80013c8:	4935      	ldr	r1, [pc, #212]	; (80014a0 <CheckForFiles+0x13c>)
 80013ca:	4618      	mov	r0, r3
 80013cc:	f009 ff44 	bl	800b258 <siprintf>
	fresult = f_stat(fname, NULL);
 80013d0:	2100      	movs	r1, #0
 80013d2:	6938      	ldr	r0, [r7, #16]
 80013d4:	f009 fdb2 	bl	800af3c <f_stat>
 80013d8:	4603      	mov	r3, r0
 80013da:	461a      	mov	r2, r3
 80013dc:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <CheckForFiles+0x140>)
 80013de:	701a      	strb	r2, [r3, #0]

	while (fresult != FR_NO_FILE) {
 80013e0:	e050      	b.n	8001484 <CheckForFiles+0x120>
 80013e2:	466b      	mov	r3, sp
 80013e4:	461e      	mov	r6, r3
		char fBuffname[NameLength];
 80013e6:	4b2d      	ldr	r3, [pc, #180]	; (800149c <CheckForFiles+0x138>)
 80013e8:	7819      	ldrb	r1, [r3, #0]
 80013ea:	460b      	mov	r3, r1
 80013ec:	3b01      	subs	r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	b2cb      	uxtb	r3, r1
 80013f2:	2200      	movs	r2, #0
 80013f4:	461c      	mov	r4, r3
 80013f6:	4615      	mov	r5, r2
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	00eb      	lsls	r3, r5, #3
 8001402:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001406:	00e2      	lsls	r2, r4, #3
 8001408:	b2cb      	uxtb	r3, r1
 800140a:	2200      	movs	r2, #0
 800140c:	4698      	mov	r8, r3
 800140e:	4691      	mov	r9, r2
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800141c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001420:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001424:	460b      	mov	r3, r1
 8001426:	3307      	adds	r3, #7
 8001428:	08db      	lsrs	r3, r3, #3
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	ebad 0d03 	sub.w	sp, sp, r3
 8001430:	466b      	mov	r3, sp
 8001432:	3300      	adds	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]

		for (int i = 0; i < NameLength; i++) {
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	e00b      	b.n	8001454 <CheckForFiles+0xf0>
			fBuffname[i] = fname[i];
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	4413      	add	r3, r2
 8001442:	7819      	ldrb	r1, [r3, #0]
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	4413      	add	r3, r2
 800144a:	460a      	mov	r2, r1
 800144c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < NameLength; i++) {
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	3301      	adds	r3, #1
 8001452:	61bb      	str	r3, [r7, #24]
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <CheckForFiles+0x138>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	4293      	cmp	r3, r2
 800145e:	dbed      	blt.n	800143c <CheckForFiles+0xd8>
		}

		n++;
 8001460:	8afb      	ldrh	r3, [r7, #22]
 8001462:	3301      	adds	r3, #1
 8001464:	82fb      	strh	r3, [r7, #22]
		sprintf(&fBuffname[0], "%d.jpeg", n);
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	8afa      	ldrh	r2, [r7, #22]
 800146a:	490d      	ldr	r1, [pc, #52]	; (80014a0 <CheckForFiles+0x13c>)
 800146c:	4618      	mov	r0, r3
 800146e:	f009 fef3 	bl	800b258 <siprintf>
		fresult = f_stat(fBuffname, NULL);
 8001472:	2100      	movs	r1, #0
 8001474:	68b8      	ldr	r0, [r7, #8]
 8001476:	f009 fd61 	bl	800af3c <f_stat>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <CheckForFiles+0x140>)
 8001480:	701a      	strb	r2, [r3, #0]
 8001482:	46b5      	mov	sp, r6
	while (fresult != FR_NO_FILE) {
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <CheckForFiles+0x140>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b04      	cmp	r3, #4
 800148a:	d1aa      	bne.n	80013e2 <CheckForFiles+0x7e>
	}

	return n;
 800148c:	8afb      	ldrh	r3, [r7, #22]
 800148e:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800149c:	20000001 	.word	0x20000001
 80014a0:	0800bb6c 	.word	0x0800bb6c
 80014a4:	2000239c 	.word	0x2000239c

080014a8 <WriteOnSD>:

void WriteOnSD(int n, uint8_t *Data, uint8_t Lth) {
 80014a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014ac:	b089      	sub	sp, #36	; 0x24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	4613      	mov	r3, r2
 80014b6:	71fb      	strb	r3, [r7, #7]
 80014b8:	466b      	mov	r3, sp
 80014ba:	461e      	mov	r6, r3
	UINT bw;

	char fname[NameLength];
 80014bc:	4b27      	ldr	r3, [pc, #156]	; (800155c <WriteOnSD+0xb4>)
 80014be:	7819      	ldrb	r1, [r3, #0]
 80014c0:	460b      	mov	r3, r1
 80014c2:	3b01      	subs	r3, #1
 80014c4:	61fb      	str	r3, [r7, #28]
 80014c6:	b2cb      	uxtb	r3, r1
 80014c8:	2200      	movs	r2, #0
 80014ca:	4698      	mov	r8, r3
 80014cc:	4691      	mov	r9, r2
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	f04f 0300 	mov.w	r3, #0
 80014d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014e2:	b2cb      	uxtb	r3, r1
 80014e4:	2200      	movs	r2, #0
 80014e6:	461c      	mov	r4, r3
 80014e8:	4615      	mov	r5, r2
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	00eb      	lsls	r3, r5, #3
 80014f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014f8:	00e2      	lsls	r2, r4, #3
 80014fa:	460b      	mov	r3, r1
 80014fc:	3307      	adds	r3, #7
 80014fe:	08db      	lsrs	r3, r3, #3
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	ebad 0d03 	sub.w	sp, sp, r3
 8001506:	466b      	mov	r3, sp
 8001508:	3300      	adds	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
	sprintf(&fname[0], "%d.jpeg", n);
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	4913      	ldr	r1, [pc, #76]	; (8001560 <WriteOnSD+0xb8>)
 8001512:	4618      	mov	r0, r3
 8001514:	f009 fea0 	bl	800b258 <siprintf>
	fresult = f_open(&fil, &fname[0],
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	2233      	movs	r2, #51	; 0x33
 800151c:	4619      	mov	r1, r3
 800151e:	4811      	ldr	r0, [pc, #68]	; (8001564 <WriteOnSD+0xbc>)
 8001520:	f009 f904 	bl	800a72c <f_open>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <WriteOnSD+0xc0>)
 800152a:	701a      	strb	r2, [r3, #0]
			FA_OPEN_APPEND | FA_OPEN_ALWAYS | FA_READ | FA_WRITE);

	fresult = f_write(&fil, Data, Lth, &bw);
 800152c:	79fa      	ldrb	r2, [r7, #7]
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	480b      	ldr	r0, [pc, #44]	; (8001564 <WriteOnSD+0xbc>)
 8001536:	f009 fac5 	bl	800aac4 <f_write>
 800153a:	4603      	mov	r3, r0
 800153c:	461a      	mov	r2, r3
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <WriteOnSD+0xc0>)
 8001540:	701a      	strb	r2, [r3, #0]

	fresult = f_close(&fil);
 8001542:	4808      	ldr	r0, [pc, #32]	; (8001564 <WriteOnSD+0xbc>)
 8001544:	f009 fcd0 	bl	800aee8 <f_close>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <WriteOnSD+0xc0>)
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	46b5      	mov	sp, r6
}
 8001552:	bf00      	nop
 8001554:	3724      	adds	r7, #36	; 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800155c:	20000001 	.word	0x20000001
 8001560:	0800bb6c 	.word	0x0800bb6c
 8001564:	2000136c 	.word	0x2000136c
 8001568:	2000239c 	.word	0x2000239c

0800156c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001570:	f001 fbce 	bl	8002d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001574:	f000 f85e 	bl	8001634 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	StructsInit();
 8001578:	f7ff fcf4 	bl	8000f64 <StructsInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157c:	f000 fa50 	bl	8001a20 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001580:	f000 f994 	bl	80018ac <MX_TIM2_Init>
  MX_I2C1_Init();
 8001584:	f000 f92e 	bl	80017e4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001588:	f000 f95a 	bl	8001840 <MX_SPI1_Init>
  MX_FATFS_Init();
 800158c:	f006 fd60 	bl	8008050 <MX_FATFS_Init>
  MX_DMA_Init();
 8001590:	f000 fa26 	bl	80019e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001594:	f000 f9fa 	bl	800198c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001598:	f000 f8b6 	bl	8001708 <MX_ADC1_Init>
  MX_TIM11_Init();
 800159c:	f000 f9d2 	bl	8001944 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a6:	481a      	ldr	r0, [pc, #104]	; (8001610 <main+0xa4>)
 80015a8:	f002 fe58 	bl	800425c <HAL_GPIO_WritePin>
	LSM6DS3_CS_Prepare();
 80015ac:	f000 ff58 	bl	8002460 <LSM6DS3_CS_Prepare>

	HAL_Delay(100);
 80015b0:	2064      	movs	r0, #100	; 0x64
 80015b2:	f001 fc1f 	bl	8002df4 <HAL_Delay>


	HAL_TIM_Base_Start(&htim2);
 80015b6:	4817      	ldr	r0, [pc, #92]	; (8001614 <main+0xa8>)
 80015b8:	f005 fb78 	bl	8006cac <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim11);
 80015bc:	4816      	ldr	r0, [pc, #88]	; (8001618 <main+0xac>)
 80015be:	f005 fb75 	bl	8006cac <HAL_TIM_Base_Start>
	fresult = f_mount(&fs, "", 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	4915      	ldr	r1, [pc, #84]	; (800161c <main+0xb0>)
 80015c6:	4816      	ldr	r0, [pc, #88]	; (8001620 <main+0xb4>)
 80015c8:	f009 f86a 	bl	800a6a0 <f_mount>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b14      	ldr	r3, [pc, #80]	; (8001624 <main+0xb8>)
 80015d2:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Raw, 3);
 80015d4:	2203      	movs	r2, #3
 80015d6:	4914      	ldr	r1, [pc, #80]	; (8001628 <main+0xbc>)
 80015d8:	4814      	ldr	r0, [pc, #80]	; (800162c <main+0xc0>)
 80015da:	f001 fc73 	bl	8002ec4 <HAL_ADC_Start_DMA>
  /* USER CODE BEGIN WHILE */



	while (1) {
		HealthMonitor();
 80015de:	f7ff fd81 	bl	80010e4 <HealthMonitor>
		GetData();
 80015e2:	f7ff fdcb 	bl	800117c <GetData>
		SendData();
 80015e6:	f7ff fe73 	bl	80012d0 <SendData>


		telemetry.Vbat = ADC_Raw[0];
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <main+0xbc>)
 80015ec:	881a      	ldrh	r2, [r3, #0]
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <main+0xc4>)
 80015f0:	809a      	strh	r2, [r3, #4]
		telemetry.I_CH = ADC_Raw[1];
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <main+0xbc>)
 80015f4:	885a      	ldrh	r2, [r3, #2]
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <main+0xc4>)
 80015f8:	811a      	strh	r2, [r3, #8]
		telemetry.I_DS = ADC_Raw[2];
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <main+0xbc>)
 80015fc:	889a      	ldrh	r2, [r3, #4]
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <main+0xc4>)
 8001600:	80da      	strh	r2, [r3, #6]
		telemetry.Ticks = __HAL_TIM_GET_COUNTER(&htim2);
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <main+0xa8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	4a09      	ldr	r2, [pc, #36]	; (8001630 <main+0xc4>)
 800160a:	6013      	str	r3, [r2, #0]
		HealthMonitor();
 800160c:	e7e7      	b.n	80015de <main+0x72>
 800160e:	bf00      	nop
 8001610:	40020800 	.word	0x40020800
 8001614:	200001fc 	.word	0x200001fc
 8001618:	20000244 	.word	0x20000244
 800161c:	0800bb74 	.word	0x0800bb74
 8001620:	20000334 	.word	0x20000334
 8001624:	2000239c 	.word	0x2000239c
 8001628:	200023a8 	.word	0x200023a8
 800162c:	200000a8 	.word	0x200000a8
 8001630:	200002d0 	.word	0x200002d0

08001634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b094      	sub	sp, #80	; 0x50
 8001638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163a:	f107 0320 	add.w	r3, r7, #32
 800163e:	2230      	movs	r2, #48	; 0x30
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f009 fe00 	bl	800b248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	4b28      	ldr	r3, [pc, #160]	; (8001700 <SystemClock_Config+0xcc>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	4a27      	ldr	r2, [pc, #156]	; (8001700 <SystemClock_Config+0xcc>)
 8001662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001666:	6413      	str	r3, [r2, #64]	; 0x40
 8001668:	4b25      	ldr	r3, [pc, #148]	; (8001700 <SystemClock_Config+0xcc>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001674:	2300      	movs	r3, #0
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	4b22      	ldr	r3, [pc, #136]	; (8001704 <SystemClock_Config+0xd0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001680:	4a20      	ldr	r2, [pc, #128]	; (8001704 <SystemClock_Config+0xd0>)
 8001682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <SystemClock_Config+0xd0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001694:	2301      	movs	r3, #1
 8001696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169e:	2302      	movs	r3, #2
 80016a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80016a8:	2306      	movs	r3, #6
 80016aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80016ac:	2354      	movs	r3, #84	; 0x54
 80016ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016b0:	2302      	movs	r3, #2
 80016b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016b4:	2304      	movs	r3, #4
 80016b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b8:	f107 0320 	add.w	r3, r7, #32
 80016bc:	4618      	mov	r0, r3
 80016be:	f004 fa1b 	bl	8005af8 <HAL_RCC_OscConfig>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80016c8:	f000 fa86 	bl	8001bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016cc:	230f      	movs	r3, #15
 80016ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d0:	2302      	movs	r3, #2
 80016d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	2102      	movs	r1, #2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f004 fc7d 	bl	8005fe8 <HAL_RCC_ClockConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016f4:	f000 fa70 	bl	8001bd8 <Error_Handler>
  }
}
 80016f8:	bf00      	nop
 80016fa:	3750      	adds	r7, #80	; 0x50
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40023800 	.word	0x40023800
 8001704:	40007000 	.word	0x40007000

08001708 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800170e:	463b      	mov	r3, r7
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800171a:	4b2f      	ldr	r3, [pc, #188]	; (80017d8 <MX_ADC1_Init+0xd0>)
 800171c:	4a2f      	ldr	r2, [pc, #188]	; (80017dc <MX_ADC1_Init+0xd4>)
 800171e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001720:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <MX_ADC1_Init+0xd0>)
 8001722:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001726:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001728:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <MX_ADC1_Init+0xd0>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800172e:	4b2a      	ldr	r3, [pc, #168]	; (80017d8 <MX_ADC1_Init+0xd0>)
 8001730:	2201      	movs	r2, #1
 8001732:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001734:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <MX_ADC1_Init+0xd0>)
 8001736:	2201      	movs	r2, #1
 8001738:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800173a:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <MX_ADC1_Init+0xd0>)
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001742:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <MX_ADC1_Init+0xd0>)
 8001744:	2200      	movs	r2, #0
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001748:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <MX_ADC1_Init+0xd0>)
 800174a:	4a25      	ldr	r2, [pc, #148]	; (80017e0 <MX_ADC1_Init+0xd8>)
 800174c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800174e:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <MX_ADC1_Init+0xd0>)
 8001750:	2200      	movs	r2, #0
 8001752:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001754:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <MX_ADC1_Init+0xd0>)
 8001756:	2203      	movs	r2, #3
 8001758:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800175a:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <MX_ADC1_Init+0xd0>)
 800175c:	2201      	movs	r2, #1
 800175e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <MX_ADC1_Init+0xd0>)
 8001764:	2201      	movs	r2, #1
 8001766:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001768:	481b      	ldr	r0, [pc, #108]	; (80017d8 <MX_ADC1_Init+0xd0>)
 800176a:	f001 fb67 	bl	8002e3c <HAL_ADC_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001774:	f000 fa30 	bl	8001bd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001778:	2300      	movs	r3, #0
 800177a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800177c:	2301      	movs	r3, #1
 800177e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001780:	2307      	movs	r3, #7
 8001782:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001784:	463b      	mov	r3, r7
 8001786:	4619      	mov	r1, r3
 8001788:	4813      	ldr	r0, [pc, #76]	; (80017d8 <MX_ADC1_Init+0xd0>)
 800178a:	f001 fca9 	bl	80030e0 <HAL_ADC_ConfigChannel>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001794:	f000 fa20 	bl	8001bd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001798:	2308      	movs	r3, #8
 800179a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800179c:	2302      	movs	r3, #2
 800179e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017a0:	463b      	mov	r3, r7
 80017a2:	4619      	mov	r1, r3
 80017a4:	480c      	ldr	r0, [pc, #48]	; (80017d8 <MX_ADC1_Init+0xd0>)
 80017a6:	f001 fc9b 	bl	80030e0 <HAL_ADC_ConfigChannel>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80017b0:	f000 fa12 	bl	8001bd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80017b4:	2309      	movs	r3, #9
 80017b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80017b8:	2303      	movs	r3, #3
 80017ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017bc:	463b      	mov	r3, r7
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_ADC1_Init+0xd0>)
 80017c2:	f001 fc8d 	bl	80030e0 <HAL_ADC_ConfigChannel>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80017cc:	f000 fa04 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200000a8 	.word	0x200000a8
 80017dc:	40012000 	.word	0x40012000
 80017e0:	0f000001 	.word	0x0f000001

080017e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <MX_I2C1_Init+0x50>)
 80017ea:	4a13      	ldr	r2, [pc, #76]	; (8001838 <MX_I2C1_Init+0x54>)
 80017ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <MX_I2C1_Init+0x50>)
 80017f0:	4a12      	ldr	r2, [pc, #72]	; (800183c <MX_I2C1_Init+0x58>)
 80017f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <MX_I2C1_Init+0x50>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_I2C1_Init+0x50>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MX_I2C1_Init+0x50>)
 8001802:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001806:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <MX_I2C1_Init+0x50>)
 800180a:	2200      	movs	r2, #0
 800180c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_I2C1_Init+0x50>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <MX_I2C1_Init+0x50>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <MX_I2C1_Init+0x50>)
 800181c:	2200      	movs	r2, #0
 800181e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <MX_I2C1_Init+0x50>)
 8001822:	f002 fd35 	bl	8004290 <HAL_I2C_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800182c:	f000 f9d4 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000150 	.word	0x20000150
 8001838:	40005400 	.word	0x40005400
 800183c:	000186a0 	.word	0x000186a0

08001840 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001846:	4a18      	ldr	r2, [pc, #96]	; (80018a8 <MX_SPI1_Init+0x68>)
 8001848:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <MX_SPI1_Init+0x64>)
 800184c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001850:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001852:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <MX_SPI1_Init+0x64>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001866:	2200      	movs	r2, #0
 8001868:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <MX_SPI1_Init+0x64>)
 800186c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001870:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001874:	2220      	movs	r2, #32
 8001876:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <MX_SPI1_Init+0x64>)
 800187a:	2200      	movs	r2, #0
 800187c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001880:	2200      	movs	r2, #0
 8001882:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <MX_SPI1_Init+0x64>)
 800188c:	220a      	movs	r2, #10
 800188e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001890:	4804      	ldr	r0, [pc, #16]	; (80018a4 <MX_SPI1_Init+0x64>)
 8001892:	f004 fd89 	bl	80063a8 <HAL_SPI_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800189c:	f000 f99c 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200001a4 	.word	0x200001a4
 80018a8:	40013000 	.word	0x40013000

080018ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b2:	f107 0308 	add.w	r3, r7, #8
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c0:	463b      	mov	r3, r7
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018c8:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <MX_TIM2_Init+0x94>)
 80018ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80018d0:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <MX_TIM2_Init+0x94>)
 80018d2:	2253      	movs	r2, #83	; 0x53
 80018d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d6:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <MX_TIM2_Init+0x94>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80018dc:	4b18      	ldr	r3, [pc, #96]	; (8001940 <MX_TIM2_Init+0x94>)
 80018de:	f04f 32ff 	mov.w	r2, #4294967295
 80018e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e4:	4b16      	ldr	r3, [pc, #88]	; (8001940 <MX_TIM2_Init+0x94>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <MX_TIM2_Init+0x94>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018f0:	4813      	ldr	r0, [pc, #76]	; (8001940 <MX_TIM2_Init+0x94>)
 80018f2:	f005 f98b 	bl	8006c0c <HAL_TIM_Base_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80018fc:	f000 f96c 	bl	8001bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001904:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001906:	f107 0308 	add.w	r3, r7, #8
 800190a:	4619      	mov	r1, r3
 800190c:	480c      	ldr	r0, [pc, #48]	; (8001940 <MX_TIM2_Init+0x94>)
 800190e:	f005 fa27 	bl	8006d60 <HAL_TIM_ConfigClockSource>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001918:	f000 f95e 	bl	8001bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191c:	2300      	movs	r3, #0
 800191e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001924:	463b      	mov	r3, r7
 8001926:	4619      	mov	r1, r3
 8001928:	4805      	ldr	r0, [pc, #20]	; (8001940 <MX_TIM2_Init+0x94>)
 800192a:	f005 fbfb 	bl	8007124 <HAL_TIMEx_MasterConfigSynchronization>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001934:	f000 f950 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200001fc 	.word	0x200001fc

08001944 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001948:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <MX_TIM11_Init+0x40>)
 800194a:	4a0f      	ldr	r2, [pc, #60]	; (8001988 <MX_TIM11_Init+0x44>)
 800194c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <MX_TIM11_Init+0x40>)
 8001950:	2253      	movs	r2, #83	; 0x53
 8001952:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <MX_TIM11_Init+0x40>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <MX_TIM11_Init+0x40>)
 800195c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001960:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <MX_TIM11_Init+0x40>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <MX_TIM11_Init+0x40>)
 800196a:	2200      	movs	r2, #0
 800196c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800196e:	4805      	ldr	r0, [pc, #20]	; (8001984 <MX_TIM11_Init+0x40>)
 8001970:	f005 f94c 	bl	8006c0c <HAL_TIM_Base_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800197a:	f000 f92d 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000244 	.word	0x20000244
 8001988:	40014800 	.word	0x40014800

0800198c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <MX_USART2_UART_Init+0x4c>)
 8001992:	4a12      	ldr	r2, [pc, #72]	; (80019dc <MX_USART2_UART_Init+0x50>)
 8001994:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <MX_USART2_UART_Init+0x4c>)
 8001998:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800199c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <MX_USART2_UART_Init+0x4c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <MX_USART2_UART_Init+0x4c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <MX_USART2_UART_Init+0x4c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <MX_USART2_UART_Init+0x4c>)
 80019b2:	220c      	movs	r2, #12
 80019b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <MX_USART2_UART_Init+0x4c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <MX_USART2_UART_Init+0x4c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019c2:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_USART2_UART_Init+0x4c>)
 80019c4:	f005 fc1c 	bl	8007200 <HAL_UART_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019ce:	f000 f903 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	2000028c 	.word	0x2000028c
 80019dc:	40004400 	.word	0x40004400

080019e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <MX_DMA_Init+0x3c>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <MX_DMA_Init+0x3c>)
 80019f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <MX_DMA_Init+0x3c>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	2038      	movs	r0, #56	; 0x38
 8001a08:	f001 fee5 	bl	80037d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a0c:	2038      	movs	r0, #56	; 0x38
 8001a0e:	f001 fefe 	bl	800380e <HAL_NVIC_EnableIRQ>

}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800

08001a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <MX_GPIO_Init+0x128>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a42      	ldr	r2, [pc, #264]	; (8001b48 <MX_GPIO_Init+0x128>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <MX_GPIO_Init+0x128>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4b3c      	ldr	r3, [pc, #240]	; (8001b48 <MX_GPIO_Init+0x128>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a3b      	ldr	r2, [pc, #236]	; (8001b48 <MX_GPIO_Init+0x128>)
 8001a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <MX_GPIO_Init+0x128>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	4b35      	ldr	r3, [pc, #212]	; (8001b48 <MX_GPIO_Init+0x128>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a34      	ldr	r2, [pc, #208]	; (8001b48 <MX_GPIO_Init+0x128>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b32      	ldr	r3, [pc, #200]	; (8001b48 <MX_GPIO_Init+0x128>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <MX_GPIO_Init+0x128>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a2d      	ldr	r2, [pc, #180]	; (8001b48 <MX_GPIO_Init+0x128>)
 8001a94:	f043 0302 	orr.w	r3, r3, #2
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <MX_GPIO_Init+0x128>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aac:	4827      	ldr	r0, [pc, #156]	; (8001b4c <MX_GPIO_Init+0x12c>)
 8001aae:	f002 fbd5 	bl	800425c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAM_RESET_Pin|DS18B20_DQ_Pin, GPIO_PIN_SET);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001ab8:	4825      	ldr	r0, [pc, #148]	; (8001b50 <MX_GPIO_Init+0x130>)
 8001aba:	f002 fbcf 	bl	800425c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LSM_CS_GPIO_Port, LSM_CS_Pin, GPIO_PIN_SET);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ac4:	4823      	ldr	r0, [pc, #140]	; (8001b54 <MX_GPIO_Init+0x134>)
 8001ac6:	f002 fbc9 	bl	800425c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001aca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	481a      	ldr	r0, [pc, #104]	; (8001b4c <MX_GPIO_Init+0x12c>)
 8001ae4:	f002 fa1e 	bl	8003f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_RESET_Pin */
  GPIO_InitStruct.Pin = CAM_RESET_Pin;
 8001ae8:	2310      	movs	r3, #16
 8001aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001aec:	2311      	movs	r3, #17
 8001aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af0:	2301      	movs	r3, #1
 8001af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_RESET_GPIO_Port, &GPIO_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	4814      	ldr	r0, [pc, #80]	; (8001b50 <MX_GPIO_Init+0x130>)
 8001b00:	f002 fa10 	bl	8003f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LSM_CS_Pin */
  GPIO_InitStruct.Pin = LSM_CS_Pin;
 8001b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LSM_CS_GPIO_Port, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	480d      	ldr	r0, [pc, #52]	; (8001b54 <MX_GPIO_Init+0x134>)
 8001b1e:	f002 fa01 	bl	8003f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_DQ_Pin */
  GPIO_InitStruct.Pin = DS18B20_DQ_Pin;
 8001b22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b28:	2311      	movs	r3, #17
 8001b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b30:	2302      	movs	r3, #2
 8001b32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DS18B20_DQ_GPIO_Port, &GPIO_InitStruct);
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4805      	ldr	r0, [pc, #20]	; (8001b50 <MX_GPIO_Init+0x130>)
 8001b3c:	f002 f9f2 	bl	8003f24 <HAL_GPIO_Init>

}
 8001b40:	bf00      	nop
 8001b42:	3728      	adds	r7, #40	; 0x28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40020800 	.word	0x40020800
 8001b50:	40020000 	.word	0x40020000
 8001b54:	40020400 	.word	0x40020400

08001b58 <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 4 */
void HAL_SYSTICK_Callback(void) {
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
	softTimers.DS18B20_REQ++;
 8001b5c:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <HAL_SYSTICK_Callback+0x7c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3301      	adds	r3, #1
 8001b62:	4a1c      	ldr	r2, [pc, #112]	; (8001bd4 <HAL_SYSTICK_Callback+0x7c>)
 8001b64:	6013      	str	r3, [r2, #0]
	softTimers.LSM6DS3_REQ++;
 8001b66:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <HAL_SYSTICK_Callback+0x7c>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	4a19      	ldr	r2, [pc, #100]	; (8001bd4 <HAL_SYSTICK_Callback+0x7c>)
 8001b6e:	6053      	str	r3, [r2, #4]
	softTimers.QMC5883_REQ++;
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <HAL_SYSTICK_Callback+0x7c>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	3301      	adds	r3, #1
 8001b76:	4a17      	ldr	r2, [pc, #92]	; (8001bd4 <HAL_SYSTICK_Callback+0x7c>)
 8001b78:	6093      	str	r3, [r2, #8]
	softTimers.MS5607_REQ++;
 8001b7a:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <HAL_SYSTICK_Callback+0x7c>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	4a14      	ldr	r2, [pc, #80]	; (8001bd4 <HAL_SYSTICK_Callback+0x7c>)
 8001b82:	60d3      	str	r3, [r2, #12]
	softTimers.GPS_GetFull++;
 8001b84:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <HAL_SYSTICK_Callback+0x7c>)
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <HAL_SYSTICK_Callback+0x7c>)
 8001b8c:	6113      	str	r3, [r2, #16]
	softTimers.GPS_GetShort++;
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_SYSTICK_Callback+0x7c>)
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	3301      	adds	r3, #1
 8001b94:	4a0f      	ldr	r2, [pc, #60]	; (8001bd4 <HAL_SYSTICK_Callback+0x7c>)
 8001b96:	6153      	str	r3, [r2, #20]

	softTimers.SD_WriteFull++;
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <HAL_SYSTICK_Callback+0x7c>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	4a0d      	ldr	r2, [pc, #52]	; (8001bd4 <HAL_SYSTICK_Callback+0x7c>)
 8001ba0:	6193      	str	r3, [r2, #24]
	softTimers.SD_WriteGPS_Full++;
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <HAL_SYSTICK_Callback+0x7c>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <HAL_SYSTICK_Callback+0x7c>)
 8001baa:	61d3      	str	r3, [r2, #28]

	softTimers.RF_SendMain++;
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_SYSTICK_Callback+0x7c>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	4a08      	ldr	r2, [pc, #32]	; (8001bd4 <HAL_SYSTICK_Callback+0x7c>)
 8001bb4:	6213      	str	r3, [r2, #32]
	softTimers.RF_SendIMU++;
 8001bb6:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <HAL_SYSTICK_Callback+0x7c>)
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	3301      	adds	r3, #1
 8001bbc:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <HAL_SYSTICK_Callback+0x7c>)
 8001bbe:	6253      	str	r3, [r2, #36]	; 0x24

	softTimers.GetPicture++;
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <HAL_SYSTICK_Callback+0x7c>)
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	4a03      	ldr	r2, [pc, #12]	; (8001bd4 <HAL_SYSTICK_Callback+0x7c>)
 8001bc8:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	20000308 	.word	0x20000308

08001bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bdc:	b672      	cpsid	i
}
 8001bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001be0:	e7fe      	b.n	8001be0 <Error_Handler+0x8>
	...

08001be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <HAL_MspInit+0x4c>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	4a0f      	ldr	r2, [pc, #60]	; (8001c30 <HAL_MspInit+0x4c>)
 8001bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <HAL_MspInit+0x4c>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	603b      	str	r3, [r7, #0]
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_MspInit+0x4c>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	4a08      	ldr	r2, [pc, #32]	; (8001c30 <HAL_MspInit+0x4c>)
 8001c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c14:	6413      	str	r3, [r2, #64]	; 0x40
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_MspInit+0x4c>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800

08001c34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a3c      	ldr	r2, [pc, #240]	; (8001d44 <HAL_ADC_MspInit+0x110>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d171      	bne.n	8001d3a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	4b3b      	ldr	r3, [pc, #236]	; (8001d48 <HAL_ADC_MspInit+0x114>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	4a3a      	ldr	r2, [pc, #232]	; (8001d48 <HAL_ADC_MspInit+0x114>)
 8001c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c64:	6453      	str	r3, [r2, #68]	; 0x44
 8001c66:	4b38      	ldr	r3, [pc, #224]	; (8001d48 <HAL_ADC_MspInit+0x114>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	4b34      	ldr	r3, [pc, #208]	; (8001d48 <HAL_ADC_MspInit+0x114>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a33      	ldr	r2, [pc, #204]	; (8001d48 <HAL_ADC_MspInit+0x114>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b31      	ldr	r3, [pc, #196]	; (8001d48 <HAL_ADC_MspInit+0x114>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	4b2d      	ldr	r3, [pc, #180]	; (8001d48 <HAL_ADC_MspInit+0x114>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a2c      	ldr	r2, [pc, #176]	; (8001d48 <HAL_ADC_MspInit+0x114>)
 8001c98:	f043 0302 	orr.w	r3, r3, #2
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <HAL_ADC_MspInit+0x114>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001caa:	2301      	movs	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4823      	ldr	r0, [pc, #140]	; (8001d4c <HAL_ADC_MspInit+0x118>)
 8001cbe:	f002 f931 	bl	8003f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	481e      	ldr	r0, [pc, #120]	; (8001d50 <HAL_ADC_MspInit+0x11c>)
 8001cd6:	f002 f925 	bl	8003f24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001cda:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <HAL_ADC_MspInit+0x120>)
 8001cdc:	4a1e      	ldr	r2, [pc, #120]	; (8001d58 <HAL_ADC_MspInit+0x124>)
 8001cde:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ce0:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <HAL_ADC_MspInit+0x120>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_ADC_MspInit+0x120>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_ADC_MspInit+0x120>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cf2:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <HAL_ADC_MspInit+0x120>)
 8001cf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cf8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <HAL_ADC_MspInit+0x120>)
 8001cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d00:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d02:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <HAL_ADC_MspInit+0x120>)
 8001d04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d0a:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_ADC_MspInit+0x120>)
 8001d0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d10:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_ADC_MspInit+0x120>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d18:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <HAL_ADC_MspInit+0x120>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d1e:	480d      	ldr	r0, [pc, #52]	; (8001d54 <HAL_ADC_MspInit+0x120>)
 8001d20:	f001 fd90 	bl	8003844 <HAL_DMA_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001d2a:	f7ff ff55 	bl	8001bd8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a08      	ldr	r2, [pc, #32]	; (8001d54 <HAL_ADC_MspInit+0x120>)
 8001d32:	639a      	str	r2, [r3, #56]	; 0x38
 8001d34:	4a07      	ldr	r2, [pc, #28]	; (8001d54 <HAL_ADC_MspInit+0x120>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d3a:	bf00      	nop
 8001d3c:	3728      	adds	r7, #40	; 0x28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40012000 	.word	0x40012000
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	40020400 	.word	0x40020400
 8001d54:	200000f0 	.word	0x200000f0
 8001d58:	40026410 	.word	0x40026410

08001d5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <HAL_I2C_MspInit+0x84>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d12b      	bne.n	8001dd6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <HAL_I2C_MspInit+0x88>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a17      	ldr	r2, [pc, #92]	; (8001de4 <HAL_I2C_MspInit+0x88>)
 8001d88:	f043 0302 	orr.w	r3, r3, #2
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <HAL_I2C_MspInit+0x88>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d9a:	23c0      	movs	r3, #192	; 0xc0
 8001d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d9e:	2312      	movs	r3, #18
 8001da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001da2:	2301      	movs	r3, #1
 8001da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da6:	2302      	movs	r3, #2
 8001da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001daa:	2304      	movs	r3, #4
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	4619      	mov	r1, r3
 8001db4:	480c      	ldr	r0, [pc, #48]	; (8001de8 <HAL_I2C_MspInit+0x8c>)
 8001db6:	f002 f8b5 	bl	8003f24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_I2C_MspInit+0x88>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	4a08      	ldr	r2, [pc, #32]	; (8001de4 <HAL_I2C_MspInit+0x88>)
 8001dc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_I2C_MspInit+0x88>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dd6:	bf00      	nop
 8001dd8:	3728      	adds	r7, #40	; 0x28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40005400 	.word	0x40005400
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40020400 	.word	0x40020400

08001dec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a19      	ldr	r2, [pc, #100]	; (8001e70 <HAL_SPI_MspInit+0x84>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d12b      	bne.n	8001e66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <HAL_SPI_MspInit+0x88>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	4a17      	ldr	r2, [pc, #92]	; (8001e74 <HAL_SPI_MspInit+0x88>)
 8001e18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1e:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <HAL_SPI_MspInit+0x88>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <HAL_SPI_MspInit+0x88>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a10      	ldr	r2, [pc, #64]	; (8001e74 <HAL_SPI_MspInit+0x88>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <HAL_SPI_MspInit+0x88>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e46:	23e0      	movs	r3, #224	; 0xe0
 8001e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e56:	2305      	movs	r3, #5
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4805      	ldr	r0, [pc, #20]	; (8001e78 <HAL_SPI_MspInit+0x8c>)
 8001e62:	f002 f85f 	bl	8003f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e66:	bf00      	nop
 8001e68:	3728      	adds	r7, #40	; 0x28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40013000 	.word	0x40013000
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40020000 	.word	0x40020000

08001e7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e8c:	d10e      	bne.n	8001eac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <HAL_TIM_Base_MspInit+0x64>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <HAL_TIM_Base_MspInit+0x64>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <HAL_TIM_Base_MspInit+0x64>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001eaa:	e012      	b.n	8001ed2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM11)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0c      	ldr	r2, [pc, #48]	; (8001ee4 <HAL_TIM_Base_MspInit+0x68>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d10d      	bne.n	8001ed2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_TIM_Base_MspInit+0x64>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <HAL_TIM_Base_MspInit+0x64>)
 8001ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_TIM_Base_MspInit+0x64>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
}
 8001ed2:	bf00      	nop
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40014800 	.word	0x40014800

08001ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a19      	ldr	r2, [pc, #100]	; (8001f6c <HAL_UART_MspInit+0x84>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d12b      	bne.n	8001f62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <HAL_UART_MspInit+0x88>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a17      	ldr	r2, [pc, #92]	; (8001f70 <HAL_UART_MspInit+0x88>)
 8001f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <HAL_UART_MspInit+0x88>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <HAL_UART_MspInit+0x88>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a10      	ldr	r2, [pc, #64]	; (8001f70 <HAL_UART_MspInit+0x88>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <HAL_UART_MspInit+0x88>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f42:	230c      	movs	r3, #12
 8001f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f52:	2307      	movs	r3, #7
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4805      	ldr	r0, [pc, #20]	; (8001f74 <HAL_UART_MspInit+0x8c>)
 8001f5e:	f001 ffe1 	bl	8003f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f62:	bf00      	nop
 8001f64:	3728      	adds	r7, #40	; 0x28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40004400 	.word	0x40004400
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020000 	.word	0x40020000

08001f78 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler()
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <SDTimer_Handler+0x40>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d006      	beq.n	8001f94 <SDTimer_Handler+0x1c>
		Timer1--;
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <SDTimer_Handler+0x40>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <SDTimer_Handler+0x40>)
 8001f92:	701a      	strb	r2, [r3, #0]

	if(Timer2 > 0)
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <SDTimer_Handler+0x44>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d006      	beq.n	8001fac <SDTimer_Handler+0x34>
		Timer2--;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <SDTimer_Handler+0x44>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <SDTimer_Handler+0x44>)
 8001faa:	701a      	strb	r2, [r3, #0]
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	200023af 	.word	0x200023af
 8001fbc:	200023b0 	.word	0x200023b0

08001fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <NMI_Handler+0x4>

08001fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <HardFault_Handler+0x4>

08001fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <MemManage_Handler+0x4>

08001fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd6:	e7fe      	b.n	8001fd6 <BusFault_Handler+0x4>

08001fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <UsageFault_Handler+0x4>

08001fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800200c:	f000 fed2 	bl	8002db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 8002010:	f7ff fda2 	bl	8001b58 <HAL_SYSTICK_Callback>
	 FatFsCnt++;
 8002014:	4b09      	ldr	r3, [pc, #36]	; (800203c <SysTick_Handler+0x34>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	3301      	adds	r3, #1
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4b07      	ldr	r3, [pc, #28]	; (800203c <SysTick_Handler+0x34>)
 8002020:	701a      	strb	r2, [r3, #0]
	 if(FatFsCnt >= 10)
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <SysTick_Handler+0x34>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b09      	cmp	r3, #9
 800202a:	d904      	bls.n	8002036 <SysTick_Handler+0x2e>
	 {
		 FatFsCnt = 0;
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <SysTick_Handler+0x34>)
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
		 SDTimer_Handler();
 8002032:	f7ff ffa1 	bl	8001f78 <SDTimer_Handler>
	 }
  /* USER CODE END SysTick_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200023ae 	.word	0x200023ae

08002040 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002044:	4802      	ldr	r0, [pc, #8]	; (8002050 <DMA2_Stream0_IRQHandler+0x10>)
 8002046:	f001 fd03 	bl	8003a50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200000f0 	.word	0x200000f0

08002054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800205c:	4a14      	ldr	r2, [pc, #80]	; (80020b0 <_sbrk+0x5c>)
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <_sbrk+0x60>)
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <_sbrk+0x64>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d102      	bne.n	8002076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <_sbrk+0x64>)
 8002072:	4a12      	ldr	r2, [pc, #72]	; (80020bc <_sbrk+0x68>)
 8002074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	429a      	cmp	r2, r3
 8002082:	d207      	bcs.n	8002094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002084:	f009 f8b6 	bl	800b1f4 <__errno>
 8002088:	4603      	mov	r3, r0
 800208a:	220c      	movs	r2, #12
 800208c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
 8002092:	e009      	b.n	80020a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <_sbrk+0x64>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <_sbrk+0x64>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <_sbrk+0x64>)
 80020a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020a6:	68fb      	ldr	r3, [r7, #12]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20010000 	.word	0x20010000
 80020b4:	00000400 	.word	0x00000400
 80020b8:	200023b4 	.word	0x200023b4
 80020bc:	20002608 	.word	0x20002608

080020c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <SystemInit+0x20>)
 80020c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ca:	4a05      	ldr	r2, [pc, #20]	; (80020e0 <SystemInit+0x20>)
 80020cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800211c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020e8:	480d      	ldr	r0, [pc, #52]	; (8002120 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020ea:	490e      	ldr	r1, [pc, #56]	; (8002124 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020ec:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f0:	e002      	b.n	80020f8 <LoopCopyDataInit>

080020f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f6:	3304      	adds	r3, #4

080020f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020fc:	d3f9      	bcc.n	80020f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fe:	4a0b      	ldr	r2, [pc, #44]	; (800212c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002100:	4c0b      	ldr	r4, [pc, #44]	; (8002130 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002104:	e001      	b.n	800210a <LoopFillZerobss>

08002106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002108:	3204      	adds	r2, #4

0800210a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800210a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800210c:	d3fb      	bcc.n	8002106 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800210e:	f7ff ffd7 	bl	80020c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002112:	f009 f875 	bl	800b200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002116:	f7ff fa29 	bl	800156c <main>
  bx  lr    
 800211a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800211c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002124:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002128:	0800c094 	.word	0x0800c094
  ldr r2, =_sbss
 800212c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002130:	20002608 	.word	0x20002608

08002134 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002134:	e7fe      	b.n	8002134 <ADC_IRQHandler>

08002136 <DS18_Init>:
void DS18_WriteByte(uint8_t dt);
uint8_t DS18_ReadByte();


uint8_t DS18_Init(uint64_t id)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	e9c7 0100 	strd	r0, r1, [r7]
	DS18_USER_SysInit();
 8002140:	f000 f948 	bl	80023d4 <DS18_USER_SysInit>



	DS18_USER_GPIO_HIZ_IN();
 8002144:	f000 f910 	bl	8002368 <DS18_USER_GPIO_HIZ_IN>
	if(DS18_ResetPulse_sens_detect() == DS18_ERROR) return DS18_ERROR;
 8002148:	f000 f8eb 	bl	8002322 <DS18_ResetPulse_sens_detect>
 800214c:	4603      	mov	r3, r0
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <DS18_Init+0x20>
 8002152:	2301      	movs	r3, #1
 8002154:	e021      	b.n	800219a <DS18_Init+0x64>

	if(id == DS18_SKIP_ROM){
 8002156:	e9d7 2300 	ldrd	r2, r3, [r7]
 800215a:	4313      	orrs	r3, r2
 800215c:	d11c      	bne.n	8002198 <DS18_Init+0x62>

		DS18_WriteByte(DS18_SKIP_ROM_CMD);
 800215e:	20cc      	movs	r0, #204	; 0xcc
 8002160:	f000 f88c 	bl	800227c <DS18_WriteByte>
		DS18_USER_DelayMicroSec(1);
 8002164:	2001      	movs	r0, #1
 8002166:	f000 f91d 	bl	80023a4 <DS18_USER_DelayMicroSec>
		DS18_WriteByte(DS18_W_SCRATCHPAD_CMD);
 800216a:	204e      	movs	r0, #78	; 0x4e
 800216c:	f000 f886 	bl	800227c <DS18_WriteByte>
		DS18_USER_DelayMicroSec(1);
 8002170:	2001      	movs	r0, #1
 8002172:	f000 f917 	bl	80023a4 <DS18_USER_DelayMicroSec>
		DS18_WriteByte(0x64);
 8002176:	2064      	movs	r0, #100	; 0x64
 8002178:	f000 f880 	bl	800227c <DS18_WriteByte>
		DS18_USER_DelayMicroSec(1);
 800217c:	2001      	movs	r0, #1
 800217e:	f000 f911 	bl	80023a4 <DS18_USER_DelayMicroSec>
		DS18_WriteByte(0x9E);
 8002182:	209e      	movs	r0, #158	; 0x9e
 8002184:	f000 f87a 	bl	800227c <DS18_WriteByte>

		//Resolution 12 bit
		DS18_WriteByte(RESOLUTION_12BIT);
 8002188:	207f      	movs	r0, #127	; 0x7f
 800218a:	f000 f877 	bl	800227c <DS18_WriteByte>
		DS18_USER_DelayMicroSec(100);
 800218e:	2064      	movs	r0, #100	; 0x64
 8002190:	f000 f908 	bl	80023a4 <DS18_USER_DelayMicroSec>
		return DS18_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	e000      	b.n	800219a <DS18_Init+0x64>
	}

  return DS18_ERROR;
 8002198:	2301      	movs	r3, #1

}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <DS18_StartConv>:


uint8_t DS18_StartConv(uint64_t id){
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	e9c7 0100 	strd	r0, r1, [r7]
	DS18_ResetPulse_sens_detect();
 80021ac:	f000 f8b9 	bl	8002322 <DS18_ResetPulse_sens_detect>

	if(id == DS18_SKIP_ROM)
 80021b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	d107      	bne.n	80021c8 <DS18_StartConv+0x26>
	{
	//SKIP ROM
	DS18_WriteByte(DS18_SKIP_ROM_CMD);
 80021b8:	20cc      	movs	r0, #204	; 0xcc
 80021ba:	f000 f85f 	bl	800227c <DS18_WriteByte>

	}else return DS18_ERROR;

	//CONVERT T
	DS18_WriteByte(DS18_T_CONV_CMD);
 80021be:	2044      	movs	r0, #68	; 0x44
 80021c0:	f000 f85c 	bl	800227c <DS18_WriteByte>
	return DS18_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	e000      	b.n	80021ca <DS18_StartConv+0x28>
	}else return DS18_ERROR;
 80021c8:	2301      	movs	r3, #1
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <DS18_GetData>:

uint8_t DS18_GetData(uint64_t id, uint16_t* temp ){
 80021d2:	b590      	push	{r4, r7, lr}
 80021d4:	b089      	sub	sp, #36	; 0x24
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
	uint8_t Data[8];
	DS18_ResetPulse_sens_detect();
 80021de:	f000 f8a0 	bl	8002322 <DS18_ResetPulse_sens_detect>
	if(id == DS18_SKIP_ROM)
 80021e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	d108      	bne.n	80021fc <DS18_GetData+0x2a>
	{
		//SKIP ROM
		DS18_WriteByte(DS18_SKIP_ROM_CMD);
 80021ea:	20cc      	movs	r0, #204	; 0xcc
 80021ec:	f000 f846 	bl	800227c <DS18_WriteByte>

	}else return DS18_ERROR;


	DS18_WriteByte(DS18_R_SCRATCHPAD_CMD);
 80021f0:	20be      	movs	r0, #190	; 0xbe
 80021f2:	f000 f843 	bl	800227c <DS18_WriteByte>

	for(uint8_t i=0;i<8;i++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	77fb      	strb	r3, [r7, #31]
 80021fa:	e00e      	b.n	800221a <DS18_GetData+0x48>
	}else return DS18_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e01a      	b.n	8002236 <DS18_GetData+0x64>
	{
		Data[i] = DS18_ReadByte();
 8002200:	7ffc      	ldrb	r4, [r7, #31]
 8002202:	f000 f86d 	bl	80022e0 <DS18_ReadByte>
 8002206:	4603      	mov	r3, r0
 8002208:	461a      	mov	r2, r3
 800220a:	f104 0320 	add.w	r3, r4, #32
 800220e:	443b      	add	r3, r7
 8002210:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i=0;i<8;i++)
 8002214:	7ffb      	ldrb	r3, [r7, #31]
 8002216:	3301      	adds	r3, #1
 8002218:	77fb      	strb	r3, [r7, #31]
 800221a:	7ffb      	ldrb	r3, [r7, #31]
 800221c:	2b07      	cmp	r3, #7
 800221e:	d9ef      	bls.n	8002200 <DS18_GetData+0x2e>
	}

	*temp = Data[1] << 8 | Data[0];
 8002220:	7d7b      	ldrb	r3, [r7, #21]
 8002222:	021b      	lsls	r3, r3, #8
 8002224:	b21a      	sxth	r2, r3
 8002226:	7d3b      	ldrb	r3, [r7, #20]
 8002228:	b21b      	sxth	r3, r3
 800222a:	4313      	orrs	r3, r2
 800222c:	b21b      	sxth	r3, r3
 800222e:	b29a      	uxth	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	801a      	strh	r2, [r3, #0]
	return DS18_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3724      	adds	r7, #36	; 0x24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd90      	pop	{r4, r7, pc}

0800223e <DS18_WriteBit>:
}

/************************************************************************************************************/
/************************************************************************************************************/
/************************************************************************************************************/
void DS18_WriteBit(uint8_t bit){
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	4603      	mov	r3, r0
 8002246:	71fb      	strb	r3, [r7, #7]
	DS18_USER_GPIO_ToGround();
 8002248:	f000 f8a0 	bl	800238c <DS18_USER_GPIO_ToGround>

	DS18_USER_DelayMicroSec(bit ? 3 : 65);
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <DS18_WriteBit+0x18>
 8002252:	2303      	movs	r3, #3
 8002254:	e000      	b.n	8002258 <DS18_WriteBit+0x1a>
 8002256:	2341      	movs	r3, #65	; 0x41
 8002258:	4618      	mov	r0, r3
 800225a:	f000 f8a3 	bl	80023a4 <DS18_USER_DelayMicroSec>

	DS18_USER_GPIO_HIZ_IN();
 800225e:	f000 f883 	bl	8002368 <DS18_USER_GPIO_HIZ_IN>

	DS18_USER_DelayMicroSec(bit ? 65 : 3);
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <DS18_WriteBit+0x2e>
 8002268:	2341      	movs	r3, #65	; 0x41
 800226a:	e000      	b.n	800226e <DS18_WriteBit+0x30>
 800226c:	2303      	movs	r3, #3
 800226e:	4618      	mov	r0, r3
 8002270:	f000 f898 	bl	80023a4 <DS18_USER_DelayMicroSec>
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <DS18_WriteByte>:

void DS18_WriteByte(uint8_t dt){
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	71fb      	strb	r3, [r7, #7]
	  for (uint8_t i = 0; i < 8; i++)
 8002286:	2300      	movs	r3, #0
 8002288:	73fb      	strb	r3, [r7, #15]
 800228a:	e010      	b.n	80022ae <DS18_WriteByte+0x32>
	  {
		DS18_WriteBit((dt >> i) & 1);
 800228c:	79fa      	ldrb	r2, [r7, #7]
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	fa42 f303 	asr.w	r3, r2, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	b2db      	uxtb	r3, r3
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ffce 	bl	800223e <DS18_WriteBit>
	    //Delay Protection
		DS18_USER_DelayMicroSec(5);
 80022a2:	2005      	movs	r0, #5
 80022a4:	f000 f87e 	bl	80023a4 <DS18_USER_DelayMicroSec>
	  for (uint8_t i = 0; i < 8; i++)
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	3301      	adds	r3, #1
 80022ac:	73fb      	strb	r3, [r7, #15]
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	2b07      	cmp	r3, #7
 80022b2:	d9eb      	bls.n	800228c <DS18_WriteByte+0x10>
	  }
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <DS18_ReadBit>:
uint8_t DS18_ReadBit(){
 80022be:	b580      	push	{r7, lr}
 80022c0:	af00      	add	r7, sp, #0

	  DS18_USER_GPIO_ToGround();//низкий уровень
 80022c2:	f000 f863 	bl	800238c <DS18_USER_GPIO_ToGround>
	  DS18_USER_DelayMicroSec(2);
 80022c6:	2002      	movs	r0, #2
 80022c8:	f000 f86c 	bl	80023a4 <DS18_USER_DelayMicroSec>
	  DS18_USER_GPIO_HIZ_IN();//высокий уровень
 80022cc:	f000 f84c 	bl	8002368 <DS18_USER_GPIO_HIZ_IN>
	  DS18_USER_DelayMicroSec(13);
 80022d0:	200d      	movs	r0, #13
 80022d2:	f000 f867 	bl	80023a4 <DS18_USER_DelayMicroSec>

	  return DS18_USER_GPIO_HIZ_IN();
 80022d6:	f000 f847 	bl	8002368 <DS18_USER_GPIO_HIZ_IN>
 80022da:	4603      	mov	r3, r0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	bd80      	pop	{r7, pc}

080022e0 <DS18_ReadByte>:
uint8_t DS18_ReadByte(){
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
	  uint8_t data = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	71fb      	strb	r3, [r7, #7]

	  for (uint8_t i = 0; i <= 7; i++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	71bb      	strb	r3, [r7, #6]
 80022ee:	e010      	b.n	8002312 <DS18_ReadByte+0x32>
	  {
		  data += DS18_ReadBit() << i;
 80022f0:	f7ff ffe5 	bl	80022be <DS18_ReadBit>
 80022f4:	4603      	mov	r3, r0
 80022f6:	461a      	mov	r2, r3
 80022f8:	79bb      	ldrb	r3, [r7, #6]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	4413      	add	r3, r2
 8002304:	71fb      	strb	r3, [r7, #7]
		  DS18_USER_DelayMicroSec(45);
 8002306:	202d      	movs	r0, #45	; 0x2d
 8002308:	f000 f84c 	bl	80023a4 <DS18_USER_DelayMicroSec>
	  for (uint8_t i = 0; i <= 7; i++)
 800230c:	79bb      	ldrb	r3, [r7, #6]
 800230e:	3301      	adds	r3, #1
 8002310:	71bb      	strb	r3, [r7, #6]
 8002312:	79bb      	ldrb	r3, [r7, #6]
 8002314:	2b07      	cmp	r3, #7
 8002316:	d9eb      	bls.n	80022f0 <DS18_ReadByte+0x10>
	  }
	  return data;
 8002318:	79fb      	ldrb	r3, [r7, #7]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <DS18_ResetPulse_sens_detect>:



uint8_t DS18_ResetPulse_sens_detect(){
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
	uint8_t answer = 1;
 8002328:	2301      	movs	r3, #1
 800232a:	71fb      	strb	r3, [r7, #7]
	DS18_USER_GPIO_HIZ_IN();
 800232c:	f000 f81c 	bl	8002368 <DS18_USER_GPIO_HIZ_IN>

	DS18_USER_GPIO_ToGround();
 8002330:	f000 f82c 	bl	800238c <DS18_USER_GPIO_ToGround>
	DS18_USER_DelayMicroSec(480);
 8002334:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8002338:	f000 f834 	bl	80023a4 <DS18_USER_DelayMicroSec>
	DS18_USER_GPIO_HIZ_IN();
 800233c:	f000 f814 	bl	8002368 <DS18_USER_GPIO_HIZ_IN>

	DS18_USER_DelayMicroSec(65);
 8002340:	2041      	movs	r0, #65	; 0x41
 8002342:	f000 f82f 	bl	80023a4 <DS18_USER_DelayMicroSec>
	answer = DS18_USER_GPIO_HIZ_IN();
 8002346:	f000 f80f 	bl	8002368 <DS18_USER_GPIO_HIZ_IN>
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
	DS18_USER_DelayMicroSec(240);
 800234e:	20f0      	movs	r0, #240	; 0xf0
 8002350:	f000 f828 	bl	80023a4 <DS18_USER_DelayMicroSec>

	return answer ? DS18_ERROR : DS18_OK;
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	2b00      	cmp	r3, #0
 8002358:	bf14      	ite	ne
 800235a:	2301      	movne	r3, #1
 800235c:	2300      	moveq	r3, #0
 800235e:	b2db      	uxtb	r3, r3
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <DS18_USER_GPIO_HIZ_IN>:
#include "DS18B20_port.h"
#include "DS18B20_macro.h"

extern TIM_HandleTypeDef htim11;

uint8_t DS18_USER_GPIO_HIZ_IN() {
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DS18_DQ_GPIO_Port, DS18_DQ_Pin, SET);
 800236c:	2201      	movs	r2, #1
 800236e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002372:	4805      	ldr	r0, [pc, #20]	; (8002388 <DS18_USER_GPIO_HIZ_IN+0x20>)
 8002374:	f001 ff72 	bl	800425c <HAL_GPIO_WritePin>
	return (HAL_GPIO_ReadPin(DS18_DQ_GPIO_Port, DS18_DQ_Pin));
 8002378:	f44f 7180 	mov.w	r1, #256	; 0x100
 800237c:	4802      	ldr	r0, [pc, #8]	; (8002388 <DS18_USER_GPIO_HIZ_IN+0x20>)
 800237e:	f001 ff55 	bl	800422c <HAL_GPIO_ReadPin>
 8002382:	4603      	mov	r3, r0
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40020000 	.word	0x40020000

0800238c <DS18_USER_GPIO_ToGround>:
void DS18_USER_GPIO_ToGround() {
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DS18_DQ_GPIO_Port, DS18_DQ_Pin, RESET);
 8002390:	2200      	movs	r2, #0
 8002392:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002396:	4802      	ldr	r0, [pc, #8]	; (80023a0 <DS18_USER_GPIO_ToGround+0x14>)
 8002398:	f001 ff60 	bl	800425c <HAL_GPIO_WritePin>
}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40020000 	.word	0x40020000

080023a4 <DS18_USER_DelayMicroSec>:
void DS18_USER_DelayMicroSec(uint32_t micros) {
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11, 0);
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <DS18_USER_DelayMicroSec+0x2c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2200      	movs	r2, #0
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim11) < micros);
 80023b4:	bf00      	nop
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <DS18_USER_DelayMicroSec+0x2c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d8f9      	bhi.n	80023b6 <DS18_USER_DelayMicroSec+0x12>
}
 80023c2:	bf00      	nop
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	20000244 	.word	0x20000244

080023d4 <DS18_USER_SysInit>:
void DS18_USER_SysInit() {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80023da:	1d3b      	adds	r3, r7, #4
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]

	HAL_GPIO_WritePin(DS18_DQ_GPIO_Port, DS18_DQ_Pin, GPIO_PIN_SET);
 80023e8:	2201      	movs	r2, #1
 80023ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ee:	4819      	ldr	r0, [pc, #100]	; (8002454 <DS18_USER_SysInit+0x80>)
 80023f0:	f001 ff34 	bl	800425c <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = DS18_DQ_Pin;
 80023f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80023fa:	2311      	movs	r3, #17
 80023fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023fe:	2301      	movs	r3, #1
 8002400:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DS18_DQ_GPIO_Port, &GPIO_InitStruct);
 8002406:	1d3b      	adds	r3, r7, #4
 8002408:	4619      	mov	r1, r3
 800240a:	4812      	ldr	r0, [pc, #72]	; (8002454 <DS18_USER_SysInit+0x80>)
 800240c:	f001 fd8a 	bl	8003f24 <HAL_GPIO_Init>

	HAL_GPIO_Init(DS18_DQ_GPIO_Port, &GPIO_InitStruct);
 8002410:	1d3b      	adds	r3, r7, #4
 8002412:	4619      	mov	r1, r3
 8002414:	480f      	ldr	r0, [pc, #60]	; (8002454 <DS18_USER_SysInit+0x80>)
 8002416:	f001 fd85 	bl	8003f24 <HAL_GPIO_Init>

	htim11.Instance = TIM11;
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <DS18_USER_SysInit+0x84>)
 800241c:	4a0f      	ldr	r2, [pc, #60]	; (800245c <DS18_USER_SysInit+0x88>)
 800241e:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 84-1;
 8002420:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <DS18_USER_SysInit+0x84>)
 8002422:	2253      	movs	r2, #83	; 0x53
 8002424:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002426:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <DS18_USER_SysInit+0x84>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 65535;
 800242c:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <DS18_USER_SysInit+0x84>)
 800242e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002432:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <DS18_USER_SysInit+0x84>)
 8002436:	2200      	movs	r2, #0
 8002438:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243a:	4b07      	ldr	r3, [pc, #28]	; (8002458 <DS18_USER_SysInit+0x84>)
 800243c:	2200      	movs	r2, #0
 800243e:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&htim11);
 8002440:	4805      	ldr	r0, [pc, #20]	; (8002458 <DS18_USER_SysInit+0x84>)
 8002442:	f004 fbe3 	bl	8006c0c <HAL_TIM_Base_Init>

	HAL_TIM_Base_Start(&htim11);
 8002446:	4804      	ldr	r0, [pc, #16]	; (8002458 <DS18_USER_SysInit+0x84>)
 8002448:	f004 fc30 	bl	8006cac <HAL_TIM_Base_Start>

}
 800244c:	bf00      	nop
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40020000 	.word	0x40020000
 8002458:	20000244 	.word	0x20000244
 800245c:	40014800 	.word	0x40014800

08002460 <LSM6DS3_CS_Prepare>:

uint8_t 	LSM6DS3_ReadRegister(uint8_t regAddr);
void 		LSM6DS3_WriteRegister(uint8_t regAddr, uint8_t data);

void LSM6DS3_CS_Prepare()
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
	LSM6DS3_USER_CS_Deactivate();
 8002464:	f000 f90e 	bl	8002684 <LSM6DS3_USER_CS_Deactivate>
}
 8002468:	bf00      	nop
 800246a:	bd80      	pop	{r7, pc}

0800246c <LSM6DS3_Init>:
uint8_t LSM6DS3_Init()
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
	LSM6DS3_USER_CS_Activate();
 8002472:	f000 f8fb 	bl	800266c <LSM6DS3_USER_CS_Activate>
	uint8_t ID = LSM6DS3_ReadRegister(LSM6DS3_REG_ID);
 8002476:	200f      	movs	r0, #15
 8002478:	f000 f8cd 	bl	8002616 <LSM6DS3_ReadRegister>
 800247c:	4603      	mov	r3, r0
 800247e:	71fb      	strb	r3, [r7, #7]
	LSM6DS3_USER_CS_Deactivate();
 8002480:	f000 f900 	bl	8002684 <LSM6DS3_USER_CS_Deactivate>
	if((ID != 0x6A))
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	2b6a      	cmp	r3, #106	; 0x6a
 8002488:	d001      	beq.n	800248e <LSM6DS3_Init+0x22>
	{
		return LSM6DS3_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e010      	b.n	80024b0 <LSM6DS3_Init+0x44>
	}

	LSM6DS3_USER_CS_Activate();
 800248e:	f000 f8ed 	bl	800266c <LSM6DS3_USER_CS_Activate>
	LSM6DS3_WriteRegister(0x10, (1<<7)|(1<<2));
 8002492:	2184      	movs	r1, #132	; 0x84
 8002494:	2010      	movs	r0, #16
 8002496:	f000 f8d2 	bl	800263e <LSM6DS3_WriteRegister>
	LSM6DS3_USER_CS_Deactivate();
 800249a:	f000 f8f3 	bl	8002684 <LSM6DS3_USER_CS_Deactivate>

	LSM6DS3_USER_CS_Activate();
 800249e:	f000 f8e5 	bl	800266c <LSM6DS3_USER_CS_Activate>
	LSM6DS3_WriteRegister(0x11, (1<<7)|(1<<2)|(1<<3));
 80024a2:	218c      	movs	r1, #140	; 0x8c
 80024a4:	2011      	movs	r0, #17
 80024a6:	f000 f8ca 	bl	800263e <LSM6DS3_WriteRegister>
	LSM6DS3_USER_CS_Deactivate();
 80024aa:	f000 f8eb 	bl	8002684 <LSM6DS3_USER_CS_Deactivate>

	return LSM6DS3_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <LSM6DS3_GetData>:

void LSM6DS3_GetData(int16_t* AccelData, int16_t* GyroData)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]


	uint8_t tmpData[12];

	//Start ACCEL read
	LSM6DS3_USER_CS_Activate();
 80024c2:	f000 f8d3 	bl	800266c <LSM6DS3_USER_CS_Activate>
	tmpData[0] = LSM6DS3_ReadRegister(0x28);
 80024c6:	2028      	movs	r0, #40	; 0x28
 80024c8:	f000 f8a5 	bl	8002616 <LSM6DS3_ReadRegister>
 80024cc:	4603      	mov	r3, r0
 80024ce:	733b      	strb	r3, [r7, #12]
	LSM6DS3_USER_CS_Deactivate();
 80024d0:	f000 f8d8 	bl	8002684 <LSM6DS3_USER_CS_Deactivate>

	LSM6DS3_USER_CS_Activate();
 80024d4:	f000 f8ca 	bl	800266c <LSM6DS3_USER_CS_Activate>
	tmpData[1] = LSM6DS3_ReadRegister(0x29);
 80024d8:	2029      	movs	r0, #41	; 0x29
 80024da:	f000 f89c 	bl	8002616 <LSM6DS3_ReadRegister>
 80024de:	4603      	mov	r3, r0
 80024e0:	737b      	strb	r3, [r7, #13]
	LSM6DS3_USER_CS_Deactivate();
 80024e2:	f000 f8cf 	bl	8002684 <LSM6DS3_USER_CS_Deactivate>

	LSM6DS3_USER_CS_Activate();
 80024e6:	f000 f8c1 	bl	800266c <LSM6DS3_USER_CS_Activate>
	tmpData[2] = LSM6DS3_ReadRegister(0x2A);
 80024ea:	202a      	movs	r0, #42	; 0x2a
 80024ec:	f000 f893 	bl	8002616 <LSM6DS3_ReadRegister>
 80024f0:	4603      	mov	r3, r0
 80024f2:	73bb      	strb	r3, [r7, #14]
	LSM6DS3_USER_CS_Deactivate();
 80024f4:	f000 f8c6 	bl	8002684 <LSM6DS3_USER_CS_Deactivate>

	LSM6DS3_USER_CS_Activate();
 80024f8:	f000 f8b8 	bl	800266c <LSM6DS3_USER_CS_Activate>
	tmpData[3] = LSM6DS3_ReadRegister(0x2B);
 80024fc:	202b      	movs	r0, #43	; 0x2b
 80024fe:	f000 f88a 	bl	8002616 <LSM6DS3_ReadRegister>
 8002502:	4603      	mov	r3, r0
 8002504:	73fb      	strb	r3, [r7, #15]
	LSM6DS3_USER_CS_Deactivate();
 8002506:	f000 f8bd 	bl	8002684 <LSM6DS3_USER_CS_Deactivate>

	LSM6DS3_USER_CS_Activate();
 800250a:	f000 f8af 	bl	800266c <LSM6DS3_USER_CS_Activate>
	tmpData[4] = LSM6DS3_ReadRegister(0x2C);
 800250e:	202c      	movs	r0, #44	; 0x2c
 8002510:	f000 f881 	bl	8002616 <LSM6DS3_ReadRegister>
 8002514:	4603      	mov	r3, r0
 8002516:	743b      	strb	r3, [r7, #16]
	LSM6DS3_USER_CS_Deactivate();
 8002518:	f000 f8b4 	bl	8002684 <LSM6DS3_USER_CS_Deactivate>

	LSM6DS3_USER_CS_Activate();
 800251c:	f000 f8a6 	bl	800266c <LSM6DS3_USER_CS_Activate>
	tmpData[5] = LSM6DS3_ReadRegister(0x2D);
 8002520:	202d      	movs	r0, #45	; 0x2d
 8002522:	f000 f878 	bl	8002616 <LSM6DS3_ReadRegister>
 8002526:	4603      	mov	r3, r0
 8002528:	747b      	strb	r3, [r7, #17]
	LSM6DS3_USER_CS_Deactivate();
 800252a:	f000 f8ab 	bl	8002684 <LSM6DS3_USER_CS_Deactivate>


	//Start GYRO read
	LSM6DS3_USER_CS_Activate();
 800252e:	f000 f89d 	bl	800266c <LSM6DS3_USER_CS_Activate>
	tmpData[6] = LSM6DS3_ReadRegister(0x22);
 8002532:	2022      	movs	r0, #34	; 0x22
 8002534:	f000 f86f 	bl	8002616 <LSM6DS3_ReadRegister>
 8002538:	4603      	mov	r3, r0
 800253a:	74bb      	strb	r3, [r7, #18]
	LSM6DS3_USER_CS_Deactivate();
 800253c:	f000 f8a2 	bl	8002684 <LSM6DS3_USER_CS_Deactivate>

	LSM6DS3_USER_CS_Activate();
 8002540:	f000 f894 	bl	800266c <LSM6DS3_USER_CS_Activate>
	tmpData[7] = LSM6DS3_ReadRegister(0x23);
 8002544:	2023      	movs	r0, #35	; 0x23
 8002546:	f000 f866 	bl	8002616 <LSM6DS3_ReadRegister>
 800254a:	4603      	mov	r3, r0
 800254c:	74fb      	strb	r3, [r7, #19]
	LSM6DS3_USER_CS_Deactivate();
 800254e:	f000 f899 	bl	8002684 <LSM6DS3_USER_CS_Deactivate>

	LSM6DS3_USER_CS_Activate();
 8002552:	f000 f88b 	bl	800266c <LSM6DS3_USER_CS_Activate>
	tmpData[8] = LSM6DS3_ReadRegister(0x24);
 8002556:	2024      	movs	r0, #36	; 0x24
 8002558:	f000 f85d 	bl	8002616 <LSM6DS3_ReadRegister>
 800255c:	4603      	mov	r3, r0
 800255e:	753b      	strb	r3, [r7, #20]
	LSM6DS3_USER_CS_Deactivate();
 8002560:	f000 f890 	bl	8002684 <LSM6DS3_USER_CS_Deactivate>

	LSM6DS3_USER_CS_Activate();
 8002564:	f000 f882 	bl	800266c <LSM6DS3_USER_CS_Activate>
	tmpData[9] = LSM6DS3_ReadRegister(0x25);
 8002568:	2025      	movs	r0, #37	; 0x25
 800256a:	f000 f854 	bl	8002616 <LSM6DS3_ReadRegister>
 800256e:	4603      	mov	r3, r0
 8002570:	757b      	strb	r3, [r7, #21]
	LSM6DS3_USER_CS_Deactivate();
 8002572:	f000 f887 	bl	8002684 <LSM6DS3_USER_CS_Deactivate>

	LSM6DS3_USER_CS_Activate();
 8002576:	f000 f879 	bl	800266c <LSM6DS3_USER_CS_Activate>
	tmpData[10] = LSM6DS3_ReadRegister(0x26);
 800257a:	2026      	movs	r0, #38	; 0x26
 800257c:	f000 f84b 	bl	8002616 <LSM6DS3_ReadRegister>
 8002580:	4603      	mov	r3, r0
 8002582:	75bb      	strb	r3, [r7, #22]
	LSM6DS3_USER_CS_Deactivate();
 8002584:	f000 f87e 	bl	8002684 <LSM6DS3_USER_CS_Deactivate>

	LSM6DS3_USER_CS_Activate();
 8002588:	f000 f870 	bl	800266c <LSM6DS3_USER_CS_Activate>
	tmpData[11] = LSM6DS3_ReadRegister(0x27);
 800258c:	2027      	movs	r0, #39	; 0x27
 800258e:	f000 f842 	bl	8002616 <LSM6DS3_ReadRegister>
 8002592:	4603      	mov	r3, r0
 8002594:	75fb      	strb	r3, [r7, #23]
	LSM6DS3_USER_CS_Deactivate();
 8002596:	f000 f875 	bl	8002684 <LSM6DS3_USER_CS_Deactivate>


	//Write data
	AccelData[0] = (tmpData[1] << 8) | tmpData[0];	//ACCEL X
 800259a:	7b7b      	ldrb	r3, [r7, #13]
 800259c:	021b      	lsls	r3, r3, #8
 800259e:	b21a      	sxth	r2, r3
 80025a0:	7b3b      	ldrb	r3, [r7, #12]
 80025a2:	b21b      	sxth	r3, r3
 80025a4:	4313      	orrs	r3, r2
 80025a6:	b21a      	sxth	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	801a      	strh	r2, [r3, #0]
	AccelData[1] = (tmpData[3] << 8) | tmpData[2];	//ACCEL Y
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	b219      	sxth	r1, r3
 80025b2:	7bbb      	ldrb	r3, [r7, #14]
 80025b4:	b21a      	sxth	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3302      	adds	r3, #2
 80025ba:	430a      	orrs	r2, r1
 80025bc:	b212      	sxth	r2, r2
 80025be:	801a      	strh	r2, [r3, #0]
	AccelData[2] = (tmpData[5] << 8) | tmpData[4];	//ACCEL Z
 80025c0:	7c7b      	ldrb	r3, [r7, #17]
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	b219      	sxth	r1, r3
 80025c6:	7c3b      	ldrb	r3, [r7, #16]
 80025c8:	b21a      	sxth	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3304      	adds	r3, #4
 80025ce:	430a      	orrs	r2, r1
 80025d0:	b212      	sxth	r2, r2
 80025d2:	801a      	strh	r2, [r3, #0]

	GyroData[0] = (tmpData[7] << 8) | tmpData[6];	//GYRO X
 80025d4:	7cfb      	ldrb	r3, [r7, #19]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	b21a      	sxth	r2, r3
 80025da:	7cbb      	ldrb	r3, [r7, #18]
 80025dc:	b21b      	sxth	r3, r3
 80025de:	4313      	orrs	r3, r2
 80025e0:	b21a      	sxth	r2, r3
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (tmpData[9] << 8) | tmpData[8];	//GYRO Y
 80025e6:	7d7b      	ldrb	r3, [r7, #21]
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	b219      	sxth	r1, r3
 80025ec:	7d3b      	ldrb	r3, [r7, #20]
 80025ee:	b21a      	sxth	r2, r3
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	3302      	adds	r3, #2
 80025f4:	430a      	orrs	r2, r1
 80025f6:	b212      	sxth	r2, r2
 80025f8:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (tmpData[11] << 8) | tmpData[10];//GYRO Z
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
 80025fc:	021b      	lsls	r3, r3, #8
 80025fe:	b219      	sxth	r1, r3
 8002600:	7dbb      	ldrb	r3, [r7, #22]
 8002602:	b21a      	sxth	r2, r3
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	3304      	adds	r3, #4
 8002608:	430a      	orrs	r2, r1
 800260a:	b212      	sxth	r2, r2
 800260c:	801a      	strh	r2, [r3, #0]

}
 800260e:	bf00      	nop
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <LSM6DS3_ReadRegister>:





uint8_t LSM6DS3_ReadRegister(uint8_t regAddr){
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	71fb      	strb	r3, [r7, #7]

	LSM6DS3_USER_SPI_RxTx(regAddr | (1<<7));
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002626:	b2db      	uxtb	r3, r3
 8002628:	4618      	mov	r0, r3
 800262a:	f000 f837 	bl	800269c <LSM6DS3_USER_SPI_RxTx>
	return LSM6DS3_USER_SPI_RxTx(0xFF);
 800262e:	20ff      	movs	r0, #255	; 0xff
 8002630:	f000 f834 	bl	800269c <LSM6DS3_USER_SPI_RxTx>
 8002634:	4603      	mov	r3, r0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <LSM6DS3_WriteRegister>:
void LSM6DS3_WriteRegister(uint8_t regAddr, uint8_t data){
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	460a      	mov	r2, r1
 8002648:	71fb      	strb	r3, [r7, #7]
 800264a:	4613      	mov	r3, r2
 800264c:	71bb      	strb	r3, [r7, #6]
	LSM6DS3_USER_SPI_RxTx(regAddr & ~(1<<7));
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002654:	b2db      	uxtb	r3, r3
 8002656:	4618      	mov	r0, r3
 8002658:	f000 f820 	bl	800269c <LSM6DS3_USER_SPI_RxTx>
	LSM6DS3_USER_SPI_RxTx(data);
 800265c:	79bb      	ldrb	r3, [r7, #6]
 800265e:	4618      	mov	r0, r3
 8002660:	f000 f81c 	bl	800269c <LSM6DS3_USER_SPI_RxTx>
}
 8002664:	bf00      	nop
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <LSM6DS3_USER_CS_Activate>:
#include "LSM6DS3_port.h"
extern SPI_HandleTypeDef hspi1;

void LSM6DS3_USER_CS_Activate()
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LSM_CS_GPIO_Port, LSM_CS_Pin, GPIO_PIN_RESET);
 8002670:	2200      	movs	r2, #0
 8002672:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002676:	4802      	ldr	r0, [pc, #8]	; (8002680 <LSM6DS3_USER_CS_Activate+0x14>)
 8002678:	f001 fdf0 	bl	800425c <HAL_GPIO_WritePin>
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40020400 	.word	0x40020400

08002684 <LSM6DS3_USER_CS_Deactivate>:

void LSM6DS3_USER_CS_Deactivate()
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LSM_CS_GPIO_Port, LSM_CS_Pin, GPIO_PIN_SET);
 8002688:	2201      	movs	r2, #1
 800268a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800268e:	4802      	ldr	r0, [pc, #8]	; (8002698 <LSM6DS3_USER_CS_Deactivate+0x14>)
 8002690:	f001 fde4 	bl	800425c <HAL_GPIO_WritePin>
}
 8002694:	bf00      	nop
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40020400 	.word	0x40020400

0800269c <LSM6DS3_USER_SPI_RxTx>:
uint8_t LSM6DS3_USER_SPI_RxTx(uint8_t txData)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af02      	add	r7, sp, #8
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
	uint8_t rxData = 0xFF;
 80026a6:	23ff      	movs	r3, #255	; 0xff
 80026a8:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&hspi1, &txData, &rxData, 1, 2000);
 80026aa:	f107 020f 	add.w	r2, r7, #15
 80026ae:	1df9      	adds	r1, r7, #7
 80026b0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	2301      	movs	r3, #1
 80026b8:	4803      	ldr	r0, [pc, #12]	; (80026c8 <LSM6DS3_USER_SPI_RxTx+0x2c>)
 80026ba:	f004 f83a 	bl	8006732 <HAL_SPI_TransmitReceive>
	return rxData;
 80026be:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	200001a4 	.word	0x200001a4

080026cc <MS5607_Init>:


extern I2C_HandleTypeDef hi2c1;

uint8_t MS5607_Init()
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af02      	add	r7, sp, #8
	uint8_t txData =  0x1E ;
 80026d2:	231e      	movs	r3, #30
 80026d4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, MS5607_DEV_ADDR_7B, &txData, 1, 100); //Reset CMD
 80026d6:	1dfa      	adds	r2, r7, #7
 80026d8:	2364      	movs	r3, #100	; 0x64
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	2301      	movs	r3, #1
 80026de:	21ee      	movs	r1, #238	; 0xee
 80026e0:	480a      	ldr	r0, [pc, #40]	; (800270c <MS5607_Init+0x40>)
 80026e2:	f001 ff19 	bl	8004518 <HAL_I2C_Master_Transmit>

	MS5607_Delay(5);
 80026e6:	2005      	movs	r0, #5
 80026e8:	f000 f846 	bl	8002778 <MS5607_Delay>

	txData =  0x48;
 80026ec:	2348      	movs	r3, #72	; 0x48
 80026ee:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, MS5607_DEV_ADDR_7B, &txData, 1, 100); //Start pressure conv
 80026f0:	1dfa      	adds	r2, r7, #7
 80026f2:	2364      	movs	r3, #100	; 0x64
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	2301      	movs	r3, #1
 80026f8:	21ee      	movs	r1, #238	; 0xee
 80026fa:	4804      	ldr	r0, [pc, #16]	; (800270c <MS5607_Init+0x40>)
 80026fc:	f001 ff0c 	bl	8004518 <HAL_I2C_Master_Transmit>


	return MS5607_OK;
 8002700:	2300      	movs	r3, #0

}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000150 	.word	0x20000150

08002710 <MS5607_GetPres>:



}
void MS5607_GetPres(uint32_t* pres)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af02      	add	r7, sp, #8
 8002716:	6078      	str	r0, [r7, #4]

	uint8_t txData =  0x00;
 8002718:	2300      	movs	r3, #0
 800271a:	73fb      	strb	r3, [r7, #15]
	uint8_t rxData[3];
	HAL_I2C_Master_Transmit(&hi2c1, MS5607_DEV_ADDR_7B, &txData, 1, 100);
 800271c:	f107 020f 	add.w	r2, r7, #15
 8002720:	2364      	movs	r3, #100	; 0x64
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2301      	movs	r3, #1
 8002726:	21ee      	movs	r1, #238	; 0xee
 8002728:	4812      	ldr	r0, [pc, #72]	; (8002774 <MS5607_GetPres+0x64>)
 800272a:	f001 fef5 	bl	8004518 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, MS5607_DEV_ADDR_7B, rxData, 3, 100);
 800272e:	f107 020c 	add.w	r2, r7, #12
 8002732:	2364      	movs	r3, #100	; 0x64
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	2303      	movs	r3, #3
 8002738:	21ee      	movs	r1, #238	; 0xee
 800273a:	480e      	ldr	r0, [pc, #56]	; (8002774 <MS5607_GetPres+0x64>)
 800273c:	f001 ffea 	bl	8004714 <HAL_I2C_Master_Receive>
	*pres = rxData[0]<<16 | rxData[1]<<8 |  rxData[2];
 8002740:	7b3b      	ldrb	r3, [r7, #12]
 8002742:	041a      	lsls	r2, r3, #16
 8002744:	7b7b      	ldrb	r3, [r7, #13]
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	4313      	orrs	r3, r2
 800274a:	7bba      	ldrb	r2, [r7, #14]
 800274c:	4313      	orrs	r3, r2
 800274e:	461a      	mov	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	601a      	str	r2, [r3, #0]

	txData =  0x48;
 8002754:	2348      	movs	r3, #72	; 0x48
 8002756:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, MS5607_DEV_ADDR_7B, &txData, 1, 100); //Start pres conv
 8002758:	f107 020f 	add.w	r2, r7, #15
 800275c:	2364      	movs	r3, #100	; 0x64
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	2301      	movs	r3, #1
 8002762:	21ee      	movs	r1, #238	; 0xee
 8002764:	4803      	ldr	r0, [pc, #12]	; (8002774 <MS5607_GetPres+0x64>)
 8002766:	f001 fed7 	bl	8004518 <HAL_I2C_Master_Transmit>

}
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000150 	.word	0x20000150

08002778 <MS5607_Delay>:
#include "MS5607_port.h"
#include "main.h"


void MS5607_Delay(uint16_t Ms)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Ms);
 8002782:	88fb      	ldrh	r3, [r7, #6]
 8002784:	4618      	mov	r0, r3
 8002786:	f000 fb35 	bl	8002df4 <HAL_Delay>
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <QMC5883L_Init>:
#include "QMC5883L_port.h"
#include "QMC5883L_macro.h"


uint8_t QMC5883L_Init(uint8_t odr, uint8_t rng, uint8_t osr, uint8_t mode)
{
 8002792:	b590      	push	{r4, r7, lr}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	4604      	mov	r4, r0
 800279a:	4608      	mov	r0, r1
 800279c:	4611      	mov	r1, r2
 800279e:	461a      	mov	r2, r3
 80027a0:	4623      	mov	r3, r4
 80027a2:	71fb      	strb	r3, [r7, #7]
 80027a4:	4603      	mov	r3, r0
 80027a6:	71bb      	strb	r3, [r7, #6]
 80027a8:	460b      	mov	r3, r1
 80027aa:	717b      	strb	r3, [r7, #5]
 80027ac:	4613      	mov	r3, r2
 80027ae:	713b      	strb	r3, [r7, #4]
	if(data != 0xAA) return QMC5883L_ERROR;

	_QMC5883L_Reg_Write(QMC5883L_CTRL2, 1 << 7);
	_QMC5883L_Delay(5);*/

	_QMC5883L_Reg_Write(QMC5883L_CTRL1, osr << 6 | rng << 4 | odr << 2 |  mode << 0);
 80027b0:	797b      	ldrb	r3, [r7, #5]
 80027b2:	019b      	lsls	r3, r3, #6
 80027b4:	b25a      	sxtb	r2, r3
 80027b6:	79bb      	ldrb	r3, [r7, #6]
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	b25b      	sxtb	r3, r3
 80027bc:	4313      	orrs	r3, r2
 80027be:	b25a      	sxtb	r2, r3
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	b25b      	sxtb	r3, r3
 80027c6:	4313      	orrs	r3, r2
 80027c8:	b25a      	sxtb	r2, r3
 80027ca:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	b25b      	sxtb	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	4619      	mov	r1, r3
 80027d6:	2009      	movs	r0, #9
 80027d8:	f000 f840 	bl	800285c <_QMC5883L_Reg_Write>
	_QMC5883L_Reg_Write(QMC5883L_PSRR, 0x01);
 80027dc:	2101      	movs	r1, #1
 80027de:	200b      	movs	r0, #11
 80027e0:	f000 f83c 	bl	800285c <_QMC5883L_Reg_Write>

	return QMC5883L_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd90      	pop	{r4, r7, pc}

080027ee <QMC5883L_Read_Mag_Data>:


void QMC5883L_Read_Mag_Data(int16_t *MagX, int16_t *MagY, int16_t *MagZ)
{
 80027ee:	b590      	push	{r4, r7, lr}
 80027f0:	b085      	sub	sp, #20
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
	*MagX=((int16_t)_QMC5883L_Reg_Read(QMC5883L_DATA_READ_X_LSB) | (((int16_t)_QMC5883L_Reg_Read(QMC5883L_DATA_READ_X_MSB))<<8));
 80027fa:	2000      	movs	r0, #0
 80027fc:	f000 f84a 	bl	8002894 <_QMC5883L_Reg_Read>
 8002800:	4603      	mov	r3, r0
 8002802:	b21c      	sxth	r4, r3
 8002804:	2001      	movs	r0, #1
 8002806:	f000 f845 	bl	8002894 <_QMC5883L_Reg_Read>
 800280a:	4603      	mov	r3, r0
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	b21b      	sxth	r3, r3
 8002810:	4323      	orrs	r3, r4
 8002812:	b21a      	sxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	801a      	strh	r2, [r3, #0]
	*MagY=((int16_t)_QMC5883L_Reg_Read(QMC5883L_DATA_READ_Y_LSB) | (((int16_t)_QMC5883L_Reg_Read(QMC5883L_DATA_READ_Y_MSB))<<8));
 8002818:	2002      	movs	r0, #2
 800281a:	f000 f83b 	bl	8002894 <_QMC5883L_Reg_Read>
 800281e:	4603      	mov	r3, r0
 8002820:	b21c      	sxth	r4, r3
 8002822:	2003      	movs	r0, #3
 8002824:	f000 f836 	bl	8002894 <_QMC5883L_Reg_Read>
 8002828:	4603      	mov	r3, r0
 800282a:	021b      	lsls	r3, r3, #8
 800282c:	b21b      	sxth	r3, r3
 800282e:	4323      	orrs	r3, r4
 8002830:	b21a      	sxth	r2, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	801a      	strh	r2, [r3, #0]
	*MagZ=((int16_t)_QMC5883L_Reg_Read(QMC5883L_DATA_READ_Z_LSB) | (((int16_t)_QMC5883L_Reg_Read(QMC5883L_DATA_READ_Z_MSB))<<8));
 8002836:	2004      	movs	r0, #4
 8002838:	f000 f82c 	bl	8002894 <_QMC5883L_Reg_Read>
 800283c:	4603      	mov	r3, r0
 800283e:	b21c      	sxth	r4, r3
 8002840:	2005      	movs	r0, #5
 8002842:	f000 f827 	bl	8002894 <_QMC5883L_Reg_Read>
 8002846:	4603      	mov	r3, r0
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	b21b      	sxth	r3, r3
 800284c:	4323      	orrs	r3, r4
 800284e:	b21a      	sxth	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	801a      	strh	r2, [r3, #0]
}
 8002854:	bf00      	nop
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	bd90      	pop	{r4, r7, pc}

0800285c <_QMC5883L_Reg_Write>:
#include "QMC5883L_macro.h"
extern I2C_HandleTypeDef hi2c1;


void _QMC5883L_Reg_Write(uint8_t Addr, uint8_t Data)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af04      	add	r7, sp, #16
 8002862:	4603      	mov	r3, r0
 8002864:	460a      	mov	r2, r1
 8002866:	71fb      	strb	r3, [r7, #7]
 8002868:	4613      	mov	r3, r2
 800286a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, QMC5883L_I2C_ADDRESS, Addr, 1, &Data, 1, 1000);
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	b29a      	uxth	r2, r3
 8002870:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002874:	9302      	str	r3, [sp, #8]
 8002876:	2301      	movs	r3, #1
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	1dbb      	adds	r3, r7, #6
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	2301      	movs	r3, #1
 8002880:	211a      	movs	r1, #26
 8002882:	4803      	ldr	r0, [pc, #12]	; (8002890 <_QMC5883L_Reg_Write+0x34>)
 8002884:	f002 f96c 	bl	8004b60 <HAL_I2C_Mem_Write>
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000150 	.word	0x20000150

08002894 <_QMC5883L_Reg_Read>:

uint8_t _QMC5883L_Reg_Read(uint8_t Addr)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af04      	add	r7, sp, #16
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
	uint8_t Data;

	HAL_I2C_Mem_Read(&hi2c1, QMC5883L_I2C_ADDRESS, Addr, 1, &Data, 1, 1000);
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028a6:	9302      	str	r3, [sp, #8]
 80028a8:	2301      	movs	r3, #1
 80028aa:	9301      	str	r3, [sp, #4]
 80028ac:	f107 030f 	add.w	r3, r7, #15
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	2301      	movs	r3, #1
 80028b4:	211a      	movs	r1, #26
 80028b6:	4804      	ldr	r0, [pc, #16]	; (80028c8 <_QMC5883L_Reg_Read+0x34>)
 80028b8:	f002 fa4c 	bl	8004d54 <HAL_I2C_Mem_Read>

	return Data;
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000150 	.word	0x20000150

080028cc <FloatToBin>:
#include "Transmitter.h"


uint32_t FloatToBin(float A)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	ed87 0a01 	vstr	s0, [r7, #4]

	float* pA = &A;
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	617b      	str	r3, [r7, #20]
	uint32_t* pB = (uint32_t*)pA;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	613b      	str	r3, [r7, #16]
	uint32_t B = *pB;
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	60fb      	str	r3, [r7, #12]
	return B;
 80028e4:	68fb      	ldr	r3, [r7, #12]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	371c      	adds	r7, #28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <SetRadioData>:

void SetRadioData(Telemetry* Telemetry, uint8_t* data)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]

	data[0] = '$';
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2224      	movs	r2, #36	; 0x24
 8002902:	701a      	strb	r2, [r3, #0]
	data[1] = 'P';
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	3301      	adds	r3, #1
 8002908:	2250      	movs	r2, #80	; 0x50
 800290a:	701a      	strb	r2, [r3, #0]

	data[2] = (uint8_t)(Telemetry->Ticks>>24);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	0e1a      	lsrs	r2, r3, #24
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	3302      	adds	r3, #2
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]
	data[3] = (uint8_t)(Telemetry->Ticks>>16);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	0c1a      	lsrs	r2, r3, #16
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	3303      	adds	r3, #3
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	701a      	strb	r2, [r3, #0]
	data[4] = (uint8_t)(Telemetry->Ticks>>8);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	0a1a      	lsrs	r2, r3, #8
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	3304      	adds	r3, #4
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]
	data[5] = (uint8_t)(Telemetry->Ticks);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	3305      	adds	r3, #5
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]

	uint16_t IntTemp = FloatToBin(Telemetry->DS18_temp);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	895b      	ldrh	r3, [r3, #10]
 8002946:	ee07 3a90 	vmov	s15, r3
 800294a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800294e:	eeb0 0a67 	vmov.f32	s0, s15
 8002952:	f7ff ffbb 	bl	80028cc <FloatToBin>
 8002956:	4603      	mov	r3, r0
 8002958:	82fb      	strh	r3, [r7, #22]
	data[6] = (uint8_t)(IntTemp>>8);
 800295a:	8afb      	ldrh	r3, [r7, #22]
 800295c:	0a1b      	lsrs	r3, r3, #8
 800295e:	b29a      	uxth	r2, r3
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	3306      	adds	r3, #6
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	701a      	strb	r2, [r3, #0]
	data[7] = (uint8_t)(IntTemp);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	3307      	adds	r3, #7
 800296c:	8afa      	ldrh	r2, [r7, #22]
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]

	data[8] = (uint8_t)(Telemetry->MS5607_pres>>16);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	0c1a      	lsrs	r2, r3, #16
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	3308      	adds	r3, #8
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	701a      	strb	r2, [r3, #0]
	data[9] = (uint8_t)(Telemetry->MS5607_pres>>8);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	0a1a      	lsrs	r2, r3, #8
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	3309      	adds	r3, #9
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]
	data[10] = (uint8_t)(Telemetry->MS5607_pres);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1a      	ldr	r2, [r3, #32]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	330a      	adds	r3, #10
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]

	//uint32_t IntHeight = FloatToBin(Telemetry->Height);
	uint32_t IntHeight = 123435;
 800299a:	4b29      	ldr	r3, [pc, #164]	; (8002a40 <SetRadioData+0x14c>)
 800299c:	613b      	str	r3, [r7, #16]
	data[11] = (uint8_t)(IntHeight>>24);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	0e1a      	lsrs	r2, r3, #24
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	330b      	adds	r3, #11
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]
	data[12] = (uint8_t)(IntHeight>>16);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	0c1a      	lsrs	r2, r3, #16
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	330c      	adds	r3, #12
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	701a      	strb	r2, [r3, #0]
	data[13] = (uint8_t)(IntHeight>>8);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	0a1a      	lsrs	r2, r3, #8
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	330d      	adds	r3, #13
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]
	data[14] = (uint8_t)(IntHeight);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	330e      	adds	r3, #14
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	701a      	strb	r2, [r3, #0]

	//uint32_t IntLongitude = FloatToBin(Telemetry->Longtitude);
	uint32_t IntLongitude = 2334213;
 80029cc:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <SetRadioData+0x150>)
 80029ce:	60fb      	str	r3, [r7, #12]
	data[15] = (uint8_t)(IntLongitude>>24);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	0e1a      	lsrs	r2, r3, #24
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	330f      	adds	r3, #15
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	701a      	strb	r2, [r3, #0]
	data[16] = (uint8_t)(IntLongitude>>16);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	0c1a      	lsrs	r2, r3, #16
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	3310      	adds	r3, #16
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	701a      	strb	r2, [r3, #0]
	data[17] = (uint8_t)(IntLongitude>>8);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	0a1a      	lsrs	r2, r3, #8
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	3311      	adds	r3, #17
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	701a      	strb	r2, [r3, #0]
	data[18] = (uint8_t)(IntLongitude);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	3312      	adds	r3, #18
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	701a      	strb	r2, [r3, #0]

	//uint32_t IntAttitude = FloatToBin(Telemetry->Alttitude);
	uint32_t IntAttitude = 355435;
 80029fe:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <SetRadioData+0x154>)
 8002a00:	60bb      	str	r3, [r7, #8]
	data[19] = (uint8_t)(IntAttitude>>24);
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	0e1a      	lsrs	r2, r3, #24
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	3313      	adds	r3, #19
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]
	data[20] = (uint8_t)(IntAttitude>>16);
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	0c1a      	lsrs	r2, r3, #16
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	3314      	adds	r3, #20
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]
	data[21] = (uint8_t)(IntAttitude>>8);
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	0a1a      	lsrs	r2, r3, #8
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	3315      	adds	r3, #21
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]
	data[22] = (uint8_t)(IntAttitude);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	3316      	adds	r3, #22
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	701a      	strb	r2, [r3, #0]
	data[22] = 0x0A;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	3316      	adds	r3, #22
 8002a34:	220a      	movs	r2, #10
 8002a36:	701a      	strb	r2, [r3, #0]

}
 8002a38:	bf00      	nop
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	0001e22b 	.word	0x0001e22b
 8002a44:	00239e05 	.word	0x00239e05
 8002a48:	00056c6b 	.word	0x00056c6b

08002a4c <SetAllData>:

void SetAllData(Telemetry* Telemetry, uint8_t* data)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
	data[0] = 0x0D;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	220d      	movs	r2, #13
 8002a5a:	701a      	strb	r2, [r3, #0]
	data[1] = '$';
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	2224      	movs	r2, #36	; 0x24
 8002a62:	701a      	strb	r2, [r3, #0]

	data[2] = (uint8_t)(Telemetry->Ticks>>24);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	0e1a      	lsrs	r2, r3, #24
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]
	data[3] = (uint8_t)(Telemetry->Ticks>>16);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	0c1a      	lsrs	r2, r3, #16
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	3303      	adds	r3, #3
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	701a      	strb	r2, [r3, #0]
	data[4] = (uint8_t)(Telemetry->Ticks>>8);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	0a1a      	lsrs	r2, r3, #8
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	701a      	strb	r2, [r3, #0]
	data[5] = (uint8_t)(Telemetry->Ticks);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	3305      	adds	r3, #5
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]

	data[6] = (uint8_t)(Telemetry->Vbat>>8);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	889b      	ldrh	r3, [r3, #4]
 8002a9e:	0a1b      	lsrs	r3, r3, #8
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	3306      	adds	r3, #6
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]
	data[7] = (uint8_t)(Telemetry->Vbat);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	889a      	ldrh	r2, [r3, #4]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	3307      	adds	r3, #7
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]

	data[8] = (uint8_t)(Telemetry->I_DS>>8);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	88db      	ldrh	r3, [r3, #6]
 8002aba:	0a1b      	lsrs	r3, r3, #8
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	3308      	adds	r3, #8
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]
	data[9] = (uint8_t)(Telemetry->I_DS);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	88da      	ldrh	r2, [r3, #6]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	3309      	adds	r3, #9
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]

	data[10] = (uint8_t)(Telemetry->I_CH>>8);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	891b      	ldrh	r3, [r3, #8]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	330a      	adds	r3, #10
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	701a      	strb	r2, [r3, #0]
	data[11] = (uint8_t)(Telemetry->I_CH);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	891a      	ldrh	r2, [r3, #8]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	330b      	adds	r3, #11
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]

	data[12] = (uint8_t)(Telemetry->DS18_temp>>8);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	895b      	ldrh	r3, [r3, #10]
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	330c      	adds	r3, #12
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	701a      	strb	r2, [r3, #0]
	data[13] = (uint8_t)(Telemetry->DS18_temp);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	895a      	ldrh	r2, [r3, #10]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	330d      	adds	r3, #13
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]

	data[14] = (uint8_t)(Telemetry->AccX>>8);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002b10:	121b      	asrs	r3, r3, #8
 8002b12:	b21a      	sxth	r2, r3
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	330e      	adds	r3, #14
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	701a      	strb	r2, [r3, #0]
	data[15] = (uint8_t)(Telemetry->AccX);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	330f      	adds	r3, #15
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]

	data[16] = (uint8_t)(Telemetry->AccY>>8);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002b30:	121b      	asrs	r3, r3, #8
 8002b32:	b21a      	sxth	r2, r3
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	3310      	adds	r3, #16
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	701a      	strb	r2, [r3, #0]
	data[17] = (uint8_t)(Telemetry->AccY);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	3311      	adds	r3, #17
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	701a      	strb	r2, [r3, #0]

	data[18] = (uint8_t)(Telemetry->AccZ>>8);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002b50:	121b      	asrs	r3, r3, #8
 8002b52:	b21a      	sxth	r2, r3
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	3312      	adds	r3, #18
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	701a      	strb	r2, [r3, #0]
	data[19] = (uint8_t)(Telemetry->AccZ);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	3313      	adds	r3, #19
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	701a      	strb	r2, [r3, #0]

	data[20] = (uint8_t)(Telemetry->GyroX>>8);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002b70:	121b      	asrs	r3, r3, #8
 8002b72:	b21a      	sxth	r2, r3
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	3314      	adds	r3, #20
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	701a      	strb	r2, [r3, #0]
	data[21] = (uint8_t)(Telemetry->GyroX);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	3315      	adds	r3, #21
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	701a      	strb	r2, [r3, #0]

	data[22] = (uint8_t)(Telemetry->GyroY>>8);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002b90:	121b      	asrs	r3, r3, #8
 8002b92:	b21a      	sxth	r2, r3
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	3316      	adds	r3, #22
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	701a      	strb	r2, [r3, #0]
	data[23] = (uint8_t)(Telemetry->GyroY);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	3317      	adds	r3, #23
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	701a      	strb	r2, [r3, #0]

	data[24] = (uint8_t)(Telemetry->GyroZ>>8);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002bb0:	121b      	asrs	r3, r3, #8
 8002bb2:	b21a      	sxth	r2, r3
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	3318      	adds	r3, #24
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	701a      	strb	r2, [r3, #0]
	data[25] = (uint8_t)(Telemetry->GyroZ);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	3319      	adds	r3, #25
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]

	data[26] = (uint8_t)(Telemetry->MagX>>8);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002bd0:	121b      	asrs	r3, r3, #8
 8002bd2:	b21a      	sxth	r2, r3
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	331a      	adds	r3, #26
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	701a      	strb	r2, [r3, #0]
	data[27] = (uint8_t)(Telemetry->MagX);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	331b      	adds	r3, #27
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	701a      	strb	r2, [r3, #0]

	data[28] = (uint8_t)(Telemetry->MagY>>8);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002bf0:	121b      	asrs	r3, r3, #8
 8002bf2:	b21a      	sxth	r2, r3
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	331c      	adds	r3, #28
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	701a      	strb	r2, [r3, #0]
	data[29] = (uint8_t)(Telemetry->MagY);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	331d      	adds	r3, #29
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	701a      	strb	r2, [r3, #0]

	data[30] = (uint8_t)(Telemetry->MagZ>>8);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002c10:	121b      	asrs	r3, r3, #8
 8002c12:	b21a      	sxth	r2, r3
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	331e      	adds	r3, #30
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	701a      	strb	r2, [r3, #0]
	data[31] = (uint8_t)(Telemetry->MagZ);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	331f      	adds	r3, #31
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]

	data[32] = (uint8_t)(Telemetry->MS5607_pres>>24);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	0e1a      	lsrs	r2, r3, #24
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	3320      	adds	r3, #32
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	701a      	strb	r2, [r3, #0]
	data[33] = (uint8_t)(Telemetry->MS5607_pres>>16);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	0c1a      	lsrs	r2, r3, #16
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	3321      	adds	r3, #33	; 0x21
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]
	data[34] = (uint8_t)(Telemetry->MS5607_pres>>8);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	0a1a      	lsrs	r2, r3, #8
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	3322      	adds	r3, #34	; 0x22
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	701a      	strb	r2, [r3, #0]
	data[35] = (uint8_t)(Telemetry->MS5607_pres);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1a      	ldr	r2, [r3, #32]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	3323      	adds	r3, #35	; 0x23
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	701a      	strb	r2, [r3, #0]

	//uint32_t IntHeight = FloatToBin(Telemetry->Height);
	uint32_t IntHeight = 123435;
 8002c60:	4b28      	ldr	r3, [pc, #160]	; (8002d04 <SetAllData+0x2b8>)
 8002c62:	617b      	str	r3, [r7, #20]
	data[36] = (uint8_t)(IntHeight>>24);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	0e1a      	lsrs	r2, r3, #24
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	3324      	adds	r3, #36	; 0x24
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	701a      	strb	r2, [r3, #0]
	data[37] = (uint8_t)(IntHeight>>16);
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	0c1a      	lsrs	r2, r3, #16
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	3325      	adds	r3, #37	; 0x25
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	701a      	strb	r2, [r3, #0]
	data[38] = (uint8_t)(IntHeight>>8);
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	0a1a      	lsrs	r2, r3, #8
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	3326      	adds	r3, #38	; 0x26
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	701a      	strb	r2, [r3, #0]
	data[39] = (uint8_t)(IntHeight);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	3327      	adds	r3, #39	; 0x27
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]

	//uint32_t IntLongitude = FloatToBin(Telemetry->Longtitude);
	uint32_t IntLongitude = 2334213;
 8002c92:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <SetAllData+0x2bc>)
 8002c94:	613b      	str	r3, [r7, #16]
	data[40] = (uint8_t)(IntLongitude>>24);
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	0e1a      	lsrs	r2, r3, #24
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	3328      	adds	r3, #40	; 0x28
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	701a      	strb	r2, [r3, #0]
	data[41] = (uint8_t)(IntLongitude>>16);
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	0c1a      	lsrs	r2, r3, #16
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	3329      	adds	r3, #41	; 0x29
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]
	data[42] = (uint8_t)(IntLongitude>>8);
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	0a1a      	lsrs	r2, r3, #8
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	332a      	adds	r3, #42	; 0x2a
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	701a      	strb	r2, [r3, #0]
	data[43] = (uint8_t)(IntLongitude);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	332b      	adds	r3, #43	; 0x2b
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	701a      	strb	r2, [r3, #0]

	//uint32_t IntAttitude = FloatToBin(Telemetry->Alttitude);
	uint32_t IntAttitude = 355435;
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <SetAllData+0x2c0>)
 8002cc6:	60fb      	str	r3, [r7, #12]
	data[44] = (uint8_t)(IntAttitude>>24);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	0e1a      	lsrs	r2, r3, #24
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	332c      	adds	r3, #44	; 0x2c
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	701a      	strb	r2, [r3, #0]
	data[45] = (uint8_t)(IntAttitude>>16);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	0c1a      	lsrs	r2, r3, #16
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	332d      	adds	r3, #45	; 0x2d
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	701a      	strb	r2, [r3, #0]
	data[46] = (uint8_t)(IntAttitude>>8);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	0a1a      	lsrs	r2, r3, #8
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	332e      	adds	r3, #46	; 0x2e
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	701a      	strb	r2, [r3, #0]
	data[47] = (uint8_t)(IntAttitude);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	332f      	adds	r3, #47	; 0x2f
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]

}
 8002cf6:	bf00      	nop
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	0001e22b 	.word	0x0001e22b
 8002d08:	00239e05 	.word	0x00239e05
 8002d0c:	00056c6b 	.word	0x00056c6b

08002d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d14:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <HAL_Init+0x40>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a0d      	ldr	r2, [pc, #52]	; (8002d50 <HAL_Init+0x40>)
 8002d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_Init+0x40>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a0a      	ldr	r2, [pc, #40]	; (8002d50 <HAL_Init+0x40>)
 8002d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <HAL_Init+0x40>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a07      	ldr	r2, [pc, #28]	; (8002d50 <HAL_Init+0x40>)
 8002d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d38:	2003      	movs	r0, #3
 8002d3a:	f000 fd41 	bl	80037c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d3e:	200f      	movs	r0, #15
 8002d40:	f000 f808 	bl	8002d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d44:	f7fe ff4e 	bl	8001be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40023c00 	.word	0x40023c00

08002d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d5c:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <HAL_InitTick+0x54>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4b12      	ldr	r3, [pc, #72]	; (8002dac <HAL_InitTick+0x58>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	4619      	mov	r1, r3
 8002d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fd59 	bl	800382a <HAL_SYSTICK_Config>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e00e      	b.n	8002da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b0f      	cmp	r3, #15
 8002d86:	d80a      	bhi.n	8002d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d90:	f000 fd21 	bl	80037d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d94:	4a06      	ldr	r2, [pc, #24]	; (8002db0 <HAL_InitTick+0x5c>)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e000      	b.n	8002da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000004 	.word	0x20000004
 8002dac:	2000000c 	.word	0x2000000c
 8002db0:	20000008 	.word	0x20000008

08002db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002db8:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <HAL_IncTick+0x20>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_IncTick+0x24>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <HAL_IncTick+0x24>)
 8002dc6:	6013      	str	r3, [r2, #0]
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	2000000c 	.word	0x2000000c
 8002dd8:	200023b8 	.word	0x200023b8

08002ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return uwTick;
 8002de0:	4b03      	ldr	r3, [pc, #12]	; (8002df0 <HAL_GetTick+0x14>)
 8002de2:	681b      	ldr	r3, [r3, #0]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	200023b8 	.word	0x200023b8

08002df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dfc:	f7ff ffee 	bl	8002ddc <HAL_GetTick>
 8002e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0c:	d005      	beq.n	8002e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e0e:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <HAL_Delay+0x44>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4413      	add	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e1a:	bf00      	nop
 8002e1c:	f7ff ffde 	bl	8002ddc <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d8f7      	bhi.n	8002e1c <HAL_Delay+0x28>
  {
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	2000000c 	.word	0x2000000c

08002e3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e033      	b.n	8002eba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fe feea 	bl	8001c34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d118      	bne.n	8002eac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e82:	f023 0302 	bic.w	r3, r3, #2
 8002e86:	f043 0202 	orr.w	r2, r3, #2
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fa48 	bl	8003324 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f023 0303 	bic.w	r3, r3, #3
 8002ea2:	f043 0201 	orr.w	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40
 8002eaa:	e001      	b.n	8002eb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_ADC_Start_DMA+0x1e>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e0ce      	b.n	8003080 <HAL_ADC_Start_DMA+0x1bc>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d018      	beq.n	8002f2a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f08:	4b5f      	ldr	r3, [pc, #380]	; (8003088 <HAL_ADC_Start_DMA+0x1c4>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a5f      	ldr	r2, [pc, #380]	; (800308c <HAL_ADC_Start_DMA+0x1c8>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	0c9a      	lsrs	r2, r3, #18
 8002f14:	4613      	mov	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4413      	add	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f1c:	e002      	b.n	8002f24 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f9      	bne.n	8002f1e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f38:	d107      	bne.n	8002f4a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f48:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	f040 8086 	bne.w	8003066 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f62:	f023 0301 	bic.w	r3, r3, #1
 8002f66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d007      	beq.n	8002f8c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f98:	d106      	bne.n	8002fa8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	f023 0206 	bic.w	r2, r3, #6
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	645a      	str	r2, [r3, #68]	; 0x44
 8002fa6:	e002      	b.n	8002fae <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fb6:	4b36      	ldr	r3, [pc, #216]	; (8003090 <HAL_ADC_Start_DMA+0x1cc>)
 8002fb8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	4a35      	ldr	r2, [pc, #212]	; (8003094 <HAL_ADC_Start_DMA+0x1d0>)
 8002fc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc6:	4a34      	ldr	r2, [pc, #208]	; (8003098 <HAL_ADC_Start_DMA+0x1d4>)
 8002fc8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	4a33      	ldr	r2, [pc, #204]	; (800309c <HAL_ADC_Start_DMA+0x1d8>)
 8002fd0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002fda:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002fea:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ffa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	334c      	adds	r3, #76	; 0x4c
 8003006:	4619      	mov	r1, r3
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f000 fcc8 	bl	80039a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10f      	bne.n	800303c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d129      	bne.n	800307e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003038:	609a      	str	r2, [r3, #8]
 800303a:	e020      	b.n	800307e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a17      	ldr	r2, [pc, #92]	; (80030a0 <HAL_ADC_Start_DMA+0x1dc>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d11b      	bne.n	800307e <HAL_ADC_Start_DMA+0x1ba>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d114      	bne.n	800307e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	e00b      	b.n	800307e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f043 0210 	orr.w	r2, r3, #16
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	f043 0201 	orr.w	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20000004 	.word	0x20000004
 800308c:	431bde83 	.word	0x431bde83
 8003090:	40012300 	.word	0x40012300
 8003094:	0800351d 	.word	0x0800351d
 8003098:	080035d7 	.word	0x080035d7
 800309c:	080035f3 	.word	0x080035f3
 80030a0:	40012000 	.word	0x40012000

080030a4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x1c>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e105      	b.n	8003308 <HAL_ADC_ConfigChannel+0x228>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b09      	cmp	r3, #9
 800310a:	d925      	bls.n	8003158 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68d9      	ldr	r1, [r3, #12]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	b29b      	uxth	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	4613      	mov	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4413      	add	r3, r2
 8003120:	3b1e      	subs	r3, #30
 8003122:	2207      	movs	r2, #7
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43da      	mvns	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	400a      	ands	r2, r1
 8003130:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68d9      	ldr	r1, [r3, #12]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	b29b      	uxth	r3, r3
 8003142:	4618      	mov	r0, r3
 8003144:	4603      	mov	r3, r0
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	4403      	add	r3, r0
 800314a:	3b1e      	subs	r3, #30
 800314c:	409a      	lsls	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	60da      	str	r2, [r3, #12]
 8003156:	e022      	b.n	800319e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6919      	ldr	r1, [r3, #16]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	b29b      	uxth	r3, r3
 8003164:	461a      	mov	r2, r3
 8003166:	4613      	mov	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4413      	add	r3, r2
 800316c:	2207      	movs	r2, #7
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43da      	mvns	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	400a      	ands	r2, r1
 800317a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6919      	ldr	r1, [r3, #16]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	b29b      	uxth	r3, r3
 800318c:	4618      	mov	r0, r3
 800318e:	4603      	mov	r3, r0
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	4403      	add	r3, r0
 8003194:	409a      	lsls	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b06      	cmp	r3, #6
 80031a4:	d824      	bhi.n	80031f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	3b05      	subs	r3, #5
 80031b8:	221f      	movs	r2, #31
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43da      	mvns	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	400a      	ands	r2, r1
 80031c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	4618      	mov	r0, r3
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	3b05      	subs	r3, #5
 80031e2:	fa00 f203 	lsl.w	r2, r0, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	635a      	str	r2, [r3, #52]	; 0x34
 80031ee:	e04c      	b.n	800328a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b0c      	cmp	r3, #12
 80031f6:	d824      	bhi.n	8003242 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	3b23      	subs	r3, #35	; 0x23
 800320a:	221f      	movs	r2, #31
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43da      	mvns	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	400a      	ands	r2, r1
 8003218:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	b29b      	uxth	r3, r3
 8003226:	4618      	mov	r0, r3
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	3b23      	subs	r3, #35	; 0x23
 8003234:	fa00 f203 	lsl.w	r2, r0, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	631a      	str	r2, [r3, #48]	; 0x30
 8003240:	e023      	b.n	800328a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	3b41      	subs	r3, #65	; 0x41
 8003254:	221f      	movs	r2, #31
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43da      	mvns	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	400a      	ands	r2, r1
 8003262:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	b29b      	uxth	r3, r3
 8003270:	4618      	mov	r0, r3
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	3b41      	subs	r3, #65	; 0x41
 800327e:	fa00 f203 	lsl.w	r2, r0, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800328a:	4b22      	ldr	r3, [pc, #136]	; (8003314 <HAL_ADC_ConfigChannel+0x234>)
 800328c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a21      	ldr	r2, [pc, #132]	; (8003318 <HAL_ADC_ConfigChannel+0x238>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d109      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x1cc>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b12      	cmp	r3, #18
 800329e:	d105      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a19      	ldr	r2, [pc, #100]	; (8003318 <HAL_ADC_ConfigChannel+0x238>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d123      	bne.n	80032fe <HAL_ADC_ConfigChannel+0x21e>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b10      	cmp	r3, #16
 80032bc:	d003      	beq.n	80032c6 <HAL_ADC_ConfigChannel+0x1e6>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b11      	cmp	r3, #17
 80032c4:	d11b      	bne.n	80032fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b10      	cmp	r3, #16
 80032d8:	d111      	bne.n	80032fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032da:	4b10      	ldr	r3, [pc, #64]	; (800331c <HAL_ADC_ConfigChannel+0x23c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a10      	ldr	r2, [pc, #64]	; (8003320 <HAL_ADC_ConfigChannel+0x240>)
 80032e0:	fba2 2303 	umull	r2, r3, r2, r3
 80032e4:	0c9a      	lsrs	r2, r3, #18
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032f0:	e002      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	3b01      	subs	r3, #1
 80032f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f9      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	40012300 	.word	0x40012300
 8003318:	40012000 	.word	0x40012000
 800331c:	20000004 	.word	0x20000004
 8003320:	431bde83 	.word	0x431bde83

08003324 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800332c:	4b79      	ldr	r3, [pc, #484]	; (8003514 <ADC_Init+0x1f0>)
 800332e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	431a      	orrs	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003358:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6859      	ldr	r1, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	021a      	lsls	r2, r3, #8
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800337c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6859      	ldr	r1, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800339e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6899      	ldr	r1, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	4a58      	ldr	r2, [pc, #352]	; (8003518 <ADC_Init+0x1f4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d022      	beq.n	8003402 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6899      	ldr	r1, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6899      	ldr	r1, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	609a      	str	r2, [r3, #8]
 8003400:	e00f      	b.n	8003422 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003410:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003420:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0202 	bic.w	r2, r2, #2
 8003430:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6899      	ldr	r1, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	7e1b      	ldrb	r3, [r3, #24]
 800343c:	005a      	lsls	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3020 	ldrb.w	r3, [r3, #32]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01b      	beq.n	8003488 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800345e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800346e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6859      	ldr	r1, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	3b01      	subs	r3, #1
 800347c:	035a      	lsls	r2, r3, #13
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	e007      	b.n	8003498 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003496:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	051a      	lsls	r2, r3, #20
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6899      	ldr	r1, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034da:	025a      	lsls	r2, r3, #9
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6899      	ldr	r1, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	029a      	lsls	r2, r3, #10
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	609a      	str	r2, [r3, #8]
}
 8003508:	bf00      	nop
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	40012300 	.word	0x40012300
 8003518:	0f000001 	.word	0x0f000001

0800351c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003528:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003532:	2b00      	cmp	r3, #0
 8003534:	d13c      	bne.n	80035b0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d12b      	bne.n	80035a8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003554:	2b00      	cmp	r3, #0
 8003556:	d127      	bne.n	80035a8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003562:	2b00      	cmp	r3, #0
 8003564:	d006      	beq.n	8003574 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003570:	2b00      	cmp	r3, #0
 8003572:	d119      	bne.n	80035a8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0220 	bic.w	r2, r2, #32
 8003582:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d105      	bne.n	80035a8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	f043 0201 	orr.w	r2, r3, #1
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f7ff fd7b 	bl	80030a4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80035ae:	e00e      	b.n	80035ce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7ff fd85 	bl	80030cc <HAL_ADC_ErrorCallback>
}
 80035c2:	e004      	b.n	80035ce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	4798      	blx	r3
}
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f7ff fd67 	bl	80030b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2240      	movs	r2, #64	; 0x40
 8003604:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	f043 0204 	orr.w	r2, r3, #4
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f7ff fd5a 	bl	80030cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003618:	bf00      	nop
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003630:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <__NVIC_SetPriorityGrouping+0x44>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800363c:	4013      	ands	r3, r2
 800363e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800364c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003652:	4a04      	ldr	r2, [pc, #16]	; (8003664 <__NVIC_SetPriorityGrouping+0x44>)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	60d3      	str	r3, [r2, #12]
}
 8003658:	bf00      	nop
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800366c:	4b04      	ldr	r3, [pc, #16]	; (8003680 <__NVIC_GetPriorityGrouping+0x18>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	0a1b      	lsrs	r3, r3, #8
 8003672:	f003 0307 	and.w	r3, r3, #7
}
 8003676:	4618      	mov	r0, r3
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	e000ed00 	.word	0xe000ed00

08003684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800368e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003692:	2b00      	cmp	r3, #0
 8003694:	db0b      	blt.n	80036ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	f003 021f 	and.w	r2, r3, #31
 800369c:	4907      	ldr	r1, [pc, #28]	; (80036bc <__NVIC_EnableIRQ+0x38>)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	2001      	movs	r0, #1
 80036a6:	fa00 f202 	lsl.w	r2, r0, r2
 80036aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	e000e100 	.word	0xe000e100

080036c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4603      	mov	r3, r0
 80036c8:	6039      	str	r1, [r7, #0]
 80036ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	db0a      	blt.n	80036ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	490c      	ldr	r1, [pc, #48]	; (800370c <__NVIC_SetPriority+0x4c>)
 80036da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036de:	0112      	lsls	r2, r2, #4
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	440b      	add	r3, r1
 80036e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036e8:	e00a      	b.n	8003700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	4908      	ldr	r1, [pc, #32]	; (8003710 <__NVIC_SetPriority+0x50>)
 80036f0:	79fb      	ldrb	r3, [r7, #7]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	3b04      	subs	r3, #4
 80036f8:	0112      	lsls	r2, r2, #4
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	440b      	add	r3, r1
 80036fe:	761a      	strb	r2, [r3, #24]
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	e000e100 	.word	0xe000e100
 8003710:	e000ed00 	.word	0xe000ed00

08003714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003714:	b480      	push	{r7}
 8003716:	b089      	sub	sp, #36	; 0x24
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f1c3 0307 	rsb	r3, r3, #7
 800372e:	2b04      	cmp	r3, #4
 8003730:	bf28      	it	cs
 8003732:	2304      	movcs	r3, #4
 8003734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	3304      	adds	r3, #4
 800373a:	2b06      	cmp	r3, #6
 800373c:	d902      	bls.n	8003744 <NVIC_EncodePriority+0x30>
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	3b03      	subs	r3, #3
 8003742:	e000      	b.n	8003746 <NVIC_EncodePriority+0x32>
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003748:	f04f 32ff 	mov.w	r2, #4294967295
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43da      	mvns	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	401a      	ands	r2, r3
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800375c:	f04f 31ff 	mov.w	r1, #4294967295
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	fa01 f303 	lsl.w	r3, r1, r3
 8003766:	43d9      	mvns	r1, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800376c:	4313      	orrs	r3, r2
         );
}
 800376e:	4618      	mov	r0, r3
 8003770:	3724      	adds	r7, #36	; 0x24
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
	...

0800377c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3b01      	subs	r3, #1
 8003788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800378c:	d301      	bcc.n	8003792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800378e:	2301      	movs	r3, #1
 8003790:	e00f      	b.n	80037b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003792:	4a0a      	ldr	r2, [pc, #40]	; (80037bc <SysTick_Config+0x40>)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3b01      	subs	r3, #1
 8003798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800379a:	210f      	movs	r1, #15
 800379c:	f04f 30ff 	mov.w	r0, #4294967295
 80037a0:	f7ff ff8e 	bl	80036c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037a4:	4b05      	ldr	r3, [pc, #20]	; (80037bc <SysTick_Config+0x40>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037aa:	4b04      	ldr	r3, [pc, #16]	; (80037bc <SysTick_Config+0x40>)
 80037ac:	2207      	movs	r2, #7
 80037ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	e000e010 	.word	0xe000e010

080037c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff ff29 	bl	8003620 <__NVIC_SetPriorityGrouping>
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b086      	sub	sp, #24
 80037da:	af00      	add	r7, sp, #0
 80037dc:	4603      	mov	r3, r0
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037e8:	f7ff ff3e 	bl	8003668 <__NVIC_GetPriorityGrouping>
 80037ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	68b9      	ldr	r1, [r7, #8]
 80037f2:	6978      	ldr	r0, [r7, #20]
 80037f4:	f7ff ff8e 	bl	8003714 <NVIC_EncodePriority>
 80037f8:	4602      	mov	r2, r0
 80037fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037fe:	4611      	mov	r1, r2
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff ff5d 	bl	80036c0 <__NVIC_SetPriority>
}
 8003806:	bf00      	nop
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b082      	sub	sp, #8
 8003812:	af00      	add	r7, sp, #0
 8003814:	4603      	mov	r3, r0
 8003816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff ff31 	bl	8003684 <__NVIC_EnableIRQ>
}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b082      	sub	sp, #8
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff ffa2 	bl	800377c <SysTick_Config>
 8003838:	4603      	mov	r3, r0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003850:	f7ff fac4 	bl	8002ddc <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e099      	b.n	8003994 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0201 	bic.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003880:	e00f      	b.n	80038a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003882:	f7ff faab 	bl	8002ddc <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b05      	cmp	r3, #5
 800388e:	d908      	bls.n	80038a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2220      	movs	r2, #32
 8003894:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2203      	movs	r2, #3
 800389a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e078      	b.n	8003994 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1e8      	bne.n	8003882 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	4b38      	ldr	r3, [pc, #224]	; (800399c <HAL_DMA_Init+0x158>)
 80038bc:	4013      	ands	r3, r2
 80038be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d107      	bne.n	800390c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003904:	4313      	orrs	r3, r2
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4313      	orrs	r3, r2
 800390a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f023 0307 	bic.w	r3, r3, #7
 8003922:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	4313      	orrs	r3, r2
 800392c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	2b04      	cmp	r3, #4
 8003934:	d117      	bne.n	8003966 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00e      	beq.n	8003966 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 fa6f 	bl	8003e2c <DMA_CheckFifoParam>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2240      	movs	r2, #64	; 0x40
 8003958:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003962:	2301      	movs	r3, #1
 8003964:	e016      	b.n	8003994 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 fa26 	bl	8003dc0 <DMA_CalcBaseAndBitshift>
 8003974:	4603      	mov	r3, r0
 8003976:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397c:	223f      	movs	r2, #63	; 0x3f
 800397e:	409a      	lsls	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	f010803f 	.word	0xf010803f

080039a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
 80039ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_DMA_Start_IT+0x26>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e040      	b.n	8003a48 <HAL_DMA_Start_IT+0xa8>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d12f      	bne.n	8003a3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2202      	movs	r2, #2
 80039de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 f9b8 	bl	8003d64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f8:	223f      	movs	r2, #63	; 0x3f
 80039fa:	409a      	lsls	r2, r3
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0216 	orr.w	r2, r2, #22
 8003a0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0208 	orr.w	r2, r2, #8
 8003a26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	e005      	b.n	8003a46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a42:	2302      	movs	r3, #2
 8003a44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a5c:	4b8e      	ldr	r3, [pc, #568]	; (8003c98 <HAL_DMA_IRQHandler+0x248>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a8e      	ldr	r2, [pc, #568]	; (8003c9c <HAL_DMA_IRQHandler+0x24c>)
 8003a62:	fba2 2303 	umull	r2, r3, r2, r3
 8003a66:	0a9b      	lsrs	r3, r3, #10
 8003a68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7a:	2208      	movs	r2, #8
 8003a7c:	409a      	lsls	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d01a      	beq.n	8003abc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d013      	beq.n	8003abc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0204 	bic.w	r2, r2, #4
 8003aa2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa8:	2208      	movs	r2, #8
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab4:	f043 0201 	orr.w	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d012      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ade:	2201      	movs	r2, #1
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aea:	f043 0202 	orr.w	r2, r3, #2
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af6:	2204      	movs	r2, #4
 8003af8:	409a      	lsls	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4013      	ands	r3, r2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d012      	beq.n	8003b28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00b      	beq.n	8003b28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b14:	2204      	movs	r2, #4
 8003b16:	409a      	lsls	r2, r3
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b20:	f043 0204 	orr.w	r2, r3, #4
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2c:	2210      	movs	r2, #16
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d043      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d03c      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4a:	2210      	movs	r2, #16
 8003b4c:	409a      	lsls	r2, r3
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d018      	beq.n	8003b92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d108      	bne.n	8003b80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d024      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	4798      	blx	r3
 8003b7e:	e01f      	b.n	8003bc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d01b      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	4798      	blx	r3
 8003b90:	e016      	b.n	8003bc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d107      	bne.n	8003bb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0208 	bic.w	r2, r2, #8
 8003bae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 808f 	beq.w	8003cf0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8087 	beq.w	8003cf0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be6:	2220      	movs	r2, #32
 8003be8:	409a      	lsls	r2, r3
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b05      	cmp	r3, #5
 8003bf8:	d136      	bne.n	8003c68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0216 	bic.w	r2, r2, #22
 8003c08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d103      	bne.n	8003c2a <HAL_DMA_IRQHandler+0x1da>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d007      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0208 	bic.w	r2, r2, #8
 8003c38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3e:	223f      	movs	r2, #63	; 0x3f
 8003c40:	409a      	lsls	r2, r3
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d07e      	beq.n	8003d5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	4798      	blx	r3
        }
        return;
 8003c66:	e079      	b.n	8003d5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d01d      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10d      	bne.n	8003ca0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d031      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	4798      	blx	r3
 8003c94:	e02c      	b.n	8003cf0 <HAL_DMA_IRQHandler+0x2a0>
 8003c96:	bf00      	nop
 8003c98:	20000004 	.word	0x20000004
 8003c9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d023      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	4798      	blx	r3
 8003cb0:	e01e      	b.n	8003cf0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10f      	bne.n	8003ce0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0210 	bic.w	r2, r2, #16
 8003cce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d032      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d022      	beq.n	8003d4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2205      	movs	r2, #5
 8003d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0201 	bic.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d307      	bcc.n	8003d38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f2      	bne.n	8003d1c <HAL_DMA_IRQHandler+0x2cc>
 8003d36:	e000      	b.n	8003d3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d005      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	4798      	blx	r3
 8003d5a:	e000      	b.n	8003d5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d5c:	bf00      	nop
    }
  }
}
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b40      	cmp	r3, #64	; 0x40
 8003d90:	d108      	bne.n	8003da4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003da2:	e007      	b.n	8003db4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	60da      	str	r2, [r3, #12]
}
 8003db4:	bf00      	nop
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	3b10      	subs	r3, #16
 8003dd0:	4a14      	ldr	r2, [pc, #80]	; (8003e24 <DMA_CalcBaseAndBitshift+0x64>)
 8003dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd6:	091b      	lsrs	r3, r3, #4
 8003dd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003dda:	4a13      	ldr	r2, [pc, #76]	; (8003e28 <DMA_CalcBaseAndBitshift+0x68>)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d909      	bls.n	8003e02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003df6:	f023 0303 	bic.w	r3, r3, #3
 8003dfa:	1d1a      	adds	r2, r3, #4
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	659a      	str	r2, [r3, #88]	; 0x58
 8003e00:	e007      	b.n	8003e12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e0a:	f023 0303 	bic.w	r3, r3, #3
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	aaaaaaab 	.word	0xaaaaaaab
 8003e28:	0800bc08 	.word	0x0800bc08

08003e2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e34:	2300      	movs	r3, #0
 8003e36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d11f      	bne.n	8003e86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d856      	bhi.n	8003efa <DMA_CheckFifoParam+0xce>
 8003e4c:	a201      	add	r2, pc, #4	; (adr r2, 8003e54 <DMA_CheckFifoParam+0x28>)
 8003e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e52:	bf00      	nop
 8003e54:	08003e65 	.word	0x08003e65
 8003e58:	08003e77 	.word	0x08003e77
 8003e5c:	08003e65 	.word	0x08003e65
 8003e60:	08003efb 	.word	0x08003efb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d046      	beq.n	8003efe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e74:	e043      	b.n	8003efe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e7e:	d140      	bne.n	8003f02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e84:	e03d      	b.n	8003f02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e8e:	d121      	bne.n	8003ed4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d837      	bhi.n	8003f06 <DMA_CheckFifoParam+0xda>
 8003e96:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <DMA_CheckFifoParam+0x70>)
 8003e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9c:	08003ead 	.word	0x08003ead
 8003ea0:	08003eb3 	.word	0x08003eb3
 8003ea4:	08003ead 	.word	0x08003ead
 8003ea8:	08003ec5 	.word	0x08003ec5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb0:	e030      	b.n	8003f14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d025      	beq.n	8003f0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ec2:	e022      	b.n	8003f0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ecc:	d11f      	bne.n	8003f0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ed2:	e01c      	b.n	8003f0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d903      	bls.n	8003ee2 <DMA_CheckFifoParam+0xb6>
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d003      	beq.n	8003ee8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ee0:	e018      	b.n	8003f14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee6:	e015      	b.n	8003f14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00e      	beq.n	8003f12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ef8:	e00b      	b.n	8003f12 <DMA_CheckFifoParam+0xe6>
      break;
 8003efa:	bf00      	nop
 8003efc:	e00a      	b.n	8003f14 <DMA_CheckFifoParam+0xe8>
      break;
 8003efe:	bf00      	nop
 8003f00:	e008      	b.n	8003f14 <DMA_CheckFifoParam+0xe8>
      break;
 8003f02:	bf00      	nop
 8003f04:	e006      	b.n	8003f14 <DMA_CheckFifoParam+0xe8>
      break;
 8003f06:	bf00      	nop
 8003f08:	e004      	b.n	8003f14 <DMA_CheckFifoParam+0xe8>
      break;
 8003f0a:	bf00      	nop
 8003f0c:	e002      	b.n	8003f14 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f0e:	bf00      	nop
 8003f10:	e000      	b.n	8003f14 <DMA_CheckFifoParam+0xe8>
      break;
 8003f12:	bf00      	nop
    }
  } 
  
  return status; 
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop

08003f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b089      	sub	sp, #36	; 0x24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	e159      	b.n	80041f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f40:	2201      	movs	r2, #1
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4013      	ands	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	f040 8148 	bne.w	80041ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d005      	beq.n	8003f76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d130      	bne.n	8003fd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	2203      	movs	r2, #3
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43db      	mvns	r3, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fac:	2201      	movs	r2, #1
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	091b      	lsrs	r3, r3, #4
 8003fc2:	f003 0201 	and.w	r2, r3, #1
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f003 0303 	and.w	r3, r3, #3
 8003fe0:	2b03      	cmp	r3, #3
 8003fe2:	d017      	beq.n	8004014 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	2203      	movs	r2, #3
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4313      	orrs	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d123      	bne.n	8004068 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	08da      	lsrs	r2, r3, #3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3208      	adds	r2, #8
 8004028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800402c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	220f      	movs	r2, #15
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	43db      	mvns	r3, r3
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4013      	ands	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	4313      	orrs	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	08da      	lsrs	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3208      	adds	r2, #8
 8004062:	69b9      	ldr	r1, [r7, #24]
 8004064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	2203      	movs	r2, #3
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4013      	ands	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f003 0203 	and.w	r2, r3, #3
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4313      	orrs	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80a2 	beq.w	80041ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	4b57      	ldr	r3, [pc, #348]	; (800420c <HAL_GPIO_Init+0x2e8>)
 80040b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b2:	4a56      	ldr	r2, [pc, #344]	; (800420c <HAL_GPIO_Init+0x2e8>)
 80040b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040b8:	6453      	str	r3, [r2, #68]	; 0x44
 80040ba:	4b54      	ldr	r3, [pc, #336]	; (800420c <HAL_GPIO_Init+0x2e8>)
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040c6:	4a52      	ldr	r2, [pc, #328]	; (8004210 <HAL_GPIO_Init+0x2ec>)
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	089b      	lsrs	r3, r3, #2
 80040cc:	3302      	adds	r3, #2
 80040ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	220f      	movs	r2, #15
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	43db      	mvns	r3, r3
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4013      	ands	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a49      	ldr	r2, [pc, #292]	; (8004214 <HAL_GPIO_Init+0x2f0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d019      	beq.n	8004126 <HAL_GPIO_Init+0x202>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a48      	ldr	r2, [pc, #288]	; (8004218 <HAL_GPIO_Init+0x2f4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d013      	beq.n	8004122 <HAL_GPIO_Init+0x1fe>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a47      	ldr	r2, [pc, #284]	; (800421c <HAL_GPIO_Init+0x2f8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00d      	beq.n	800411e <HAL_GPIO_Init+0x1fa>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a46      	ldr	r2, [pc, #280]	; (8004220 <HAL_GPIO_Init+0x2fc>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d007      	beq.n	800411a <HAL_GPIO_Init+0x1f6>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a45      	ldr	r2, [pc, #276]	; (8004224 <HAL_GPIO_Init+0x300>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d101      	bne.n	8004116 <HAL_GPIO_Init+0x1f2>
 8004112:	2304      	movs	r3, #4
 8004114:	e008      	b.n	8004128 <HAL_GPIO_Init+0x204>
 8004116:	2307      	movs	r3, #7
 8004118:	e006      	b.n	8004128 <HAL_GPIO_Init+0x204>
 800411a:	2303      	movs	r3, #3
 800411c:	e004      	b.n	8004128 <HAL_GPIO_Init+0x204>
 800411e:	2302      	movs	r3, #2
 8004120:	e002      	b.n	8004128 <HAL_GPIO_Init+0x204>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <HAL_GPIO_Init+0x204>
 8004126:	2300      	movs	r3, #0
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	f002 0203 	and.w	r2, r2, #3
 800412e:	0092      	lsls	r2, r2, #2
 8004130:	4093      	lsls	r3, r2
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4313      	orrs	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004138:	4935      	ldr	r1, [pc, #212]	; (8004210 <HAL_GPIO_Init+0x2ec>)
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	089b      	lsrs	r3, r3, #2
 800413e:	3302      	adds	r3, #2
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004146:	4b38      	ldr	r3, [pc, #224]	; (8004228 <HAL_GPIO_Init+0x304>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	43db      	mvns	r3, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4013      	ands	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800416a:	4a2f      	ldr	r2, [pc, #188]	; (8004228 <HAL_GPIO_Init+0x304>)
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004170:	4b2d      	ldr	r3, [pc, #180]	; (8004228 <HAL_GPIO_Init+0x304>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	43db      	mvns	r3, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4013      	ands	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004194:	4a24      	ldr	r2, [pc, #144]	; (8004228 <HAL_GPIO_Init+0x304>)
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800419a:	4b23      	ldr	r3, [pc, #140]	; (8004228 <HAL_GPIO_Init+0x304>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	43db      	mvns	r3, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4013      	ands	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041be:	4a1a      	ldr	r2, [pc, #104]	; (8004228 <HAL_GPIO_Init+0x304>)
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041c4:	4b18      	ldr	r3, [pc, #96]	; (8004228 <HAL_GPIO_Init+0x304>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	43db      	mvns	r3, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4013      	ands	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041e8:	4a0f      	ldr	r2, [pc, #60]	; (8004228 <HAL_GPIO_Init+0x304>)
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	3301      	adds	r3, #1
 80041f2:	61fb      	str	r3, [r7, #28]
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	2b0f      	cmp	r3, #15
 80041f8:	f67f aea2 	bls.w	8003f40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041fc:	bf00      	nop
 80041fe:	bf00      	nop
 8004200:	3724      	adds	r7, #36	; 0x24
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40023800 	.word	0x40023800
 8004210:	40013800 	.word	0x40013800
 8004214:	40020000 	.word	0x40020000
 8004218:	40020400 	.word	0x40020400
 800421c:	40020800 	.word	0x40020800
 8004220:	40020c00 	.word	0x40020c00
 8004224:	40021000 	.word	0x40021000
 8004228:	40013c00 	.word	0x40013c00

0800422c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	887b      	ldrh	r3, [r7, #2]
 800423e:	4013      	ands	r3, r2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d002      	beq.n	800424a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004244:	2301      	movs	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
 8004248:	e001      	b.n	800424e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800424a:	2300      	movs	r3, #0
 800424c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800424e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	807b      	strh	r3, [r7, #2]
 8004268:	4613      	mov	r3, r2
 800426a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800426c:	787b      	ldrb	r3, [r7, #1]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004272:	887a      	ldrh	r2, [r7, #2]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004278:	e003      	b.n	8004282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800427a:	887b      	ldrh	r3, [r7, #2]
 800427c:	041a      	lsls	r2, r3, #16
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	619a      	str	r2, [r3, #24]
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e12b      	b.n	80044fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d106      	bne.n	80042bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7fd fd50 	bl	8001d5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2224      	movs	r2, #36	; 0x24
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0201 	bic.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042f4:	f002 f830 	bl	8006358 <HAL_RCC_GetPCLK1Freq>
 80042f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	4a81      	ldr	r2, [pc, #516]	; (8004504 <HAL_I2C_Init+0x274>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d807      	bhi.n	8004314 <HAL_I2C_Init+0x84>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4a80      	ldr	r2, [pc, #512]	; (8004508 <HAL_I2C_Init+0x278>)
 8004308:	4293      	cmp	r3, r2
 800430a:	bf94      	ite	ls
 800430c:	2301      	movls	r3, #1
 800430e:	2300      	movhi	r3, #0
 8004310:	b2db      	uxtb	r3, r3
 8004312:	e006      	b.n	8004322 <HAL_I2C_Init+0x92>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4a7d      	ldr	r2, [pc, #500]	; (800450c <HAL_I2C_Init+0x27c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	bf94      	ite	ls
 800431c:	2301      	movls	r3, #1
 800431e:	2300      	movhi	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e0e7      	b.n	80044fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4a78      	ldr	r2, [pc, #480]	; (8004510 <HAL_I2C_Init+0x280>)
 800432e:	fba2 2303 	umull	r2, r3, r2, r3
 8004332:	0c9b      	lsrs	r3, r3, #18
 8004334:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	430a      	orrs	r2, r1
 8004348:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4a6a      	ldr	r2, [pc, #424]	; (8004504 <HAL_I2C_Init+0x274>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d802      	bhi.n	8004364 <HAL_I2C_Init+0xd4>
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	3301      	adds	r3, #1
 8004362:	e009      	b.n	8004378 <HAL_I2C_Init+0xe8>
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800436a:	fb02 f303 	mul.w	r3, r2, r3
 800436e:	4a69      	ldr	r2, [pc, #420]	; (8004514 <HAL_I2C_Init+0x284>)
 8004370:	fba2 2303 	umull	r2, r3, r2, r3
 8004374:	099b      	lsrs	r3, r3, #6
 8004376:	3301      	adds	r3, #1
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6812      	ldr	r2, [r2, #0]
 800437c:	430b      	orrs	r3, r1
 800437e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800438a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	495c      	ldr	r1, [pc, #368]	; (8004504 <HAL_I2C_Init+0x274>)
 8004394:	428b      	cmp	r3, r1
 8004396:	d819      	bhi.n	80043cc <HAL_I2C_Init+0x13c>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	1e59      	subs	r1, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80043a6:	1c59      	adds	r1, r3, #1
 80043a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043ac:	400b      	ands	r3, r1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_I2C_Init+0x138>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	1e59      	subs	r1, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80043c0:	3301      	adds	r3, #1
 80043c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c6:	e051      	b.n	800446c <HAL_I2C_Init+0x1dc>
 80043c8:	2304      	movs	r3, #4
 80043ca:	e04f      	b.n	800446c <HAL_I2C_Init+0x1dc>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d111      	bne.n	80043f8 <HAL_I2C_Init+0x168>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1e58      	subs	r0, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6859      	ldr	r1, [r3, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	440b      	add	r3, r1
 80043e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043e6:	3301      	adds	r3, #1
 80043e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	bf0c      	ite	eq
 80043f0:	2301      	moveq	r3, #1
 80043f2:	2300      	movne	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	e012      	b.n	800441e <HAL_I2C_Init+0x18e>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	1e58      	subs	r0, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6859      	ldr	r1, [r3, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	440b      	add	r3, r1
 8004406:	0099      	lsls	r1, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	fbb0 f3f3 	udiv	r3, r0, r3
 800440e:	3301      	adds	r3, #1
 8004410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004414:	2b00      	cmp	r3, #0
 8004416:	bf0c      	ite	eq
 8004418:	2301      	moveq	r3, #1
 800441a:	2300      	movne	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <HAL_I2C_Init+0x196>
 8004422:	2301      	movs	r3, #1
 8004424:	e022      	b.n	800446c <HAL_I2C_Init+0x1dc>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10e      	bne.n	800444c <HAL_I2C_Init+0x1bc>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	1e58      	subs	r0, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6859      	ldr	r1, [r3, #4]
 8004436:	460b      	mov	r3, r1
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	440b      	add	r3, r1
 800443c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004440:	3301      	adds	r3, #1
 8004442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800444a:	e00f      	b.n	800446c <HAL_I2C_Init+0x1dc>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	1e58      	subs	r0, r3, #1
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6859      	ldr	r1, [r3, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	0099      	lsls	r1, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004462:	3301      	adds	r3, #1
 8004464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004468:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	6809      	ldr	r1, [r1, #0]
 8004470:	4313      	orrs	r3, r2
 8004472:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69da      	ldr	r2, [r3, #28]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800449a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6911      	ldr	r1, [r2, #16]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	68d2      	ldr	r2, [r2, #12]
 80044a6:	4311      	orrs	r1, r2
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	430b      	orrs	r3, r1
 80044ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	695a      	ldr	r2, [r3, #20]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0201 	orr.w	r2, r2, #1
 80044da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	000186a0 	.word	0x000186a0
 8004508:	001e847f 	.word	0x001e847f
 800450c:	003d08ff 	.word	0x003d08ff
 8004510:	431bde83 	.word	0x431bde83
 8004514:	10624dd3 	.word	0x10624dd3

08004518 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af02      	add	r7, sp, #8
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	607a      	str	r2, [r7, #4]
 8004522:	461a      	mov	r2, r3
 8004524:	460b      	mov	r3, r1
 8004526:	817b      	strh	r3, [r7, #10]
 8004528:	4613      	mov	r3, r2
 800452a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800452c:	f7fe fc56 	bl	8002ddc <HAL_GetTick>
 8004530:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b20      	cmp	r3, #32
 800453c:	f040 80e0 	bne.w	8004700 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	2319      	movs	r3, #25
 8004546:	2201      	movs	r2, #1
 8004548:	4970      	ldr	r1, [pc, #448]	; (800470c <HAL_I2C_Master_Transmit+0x1f4>)
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f001 f8f6 	bl	800573c <I2C_WaitOnFlagUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004556:	2302      	movs	r3, #2
 8004558:	e0d3      	b.n	8004702 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_I2C_Master_Transmit+0x50>
 8004564:	2302      	movs	r3, #2
 8004566:	e0cc      	b.n	8004702 <HAL_I2C_Master_Transmit+0x1ea>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b01      	cmp	r3, #1
 800457c:	d007      	beq.n	800458e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f042 0201 	orr.w	r2, r2, #1
 800458c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800459c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2221      	movs	r2, #33	; 0x21
 80045a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2210      	movs	r2, #16
 80045aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	893a      	ldrh	r2, [r7, #8]
 80045be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4a50      	ldr	r2, [pc, #320]	; (8004710 <HAL_I2C_Master_Transmit+0x1f8>)
 80045ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045d0:	8979      	ldrh	r1, [r7, #10]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	6a3a      	ldr	r2, [r7, #32]
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 fde2 	bl	80051a0 <I2C_MasterRequestWrite>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e08d      	b.n	8004702 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e6:	2300      	movs	r3, #0
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80045fc:	e066      	b.n	80046cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	6a39      	ldr	r1, [r7, #32]
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f001 f970 	bl	80058e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00d      	beq.n	800462a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	2b04      	cmp	r3, #4
 8004614:	d107      	bne.n	8004626 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004624:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e06b      	b.n	8004702 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	781a      	ldrb	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004644:	b29b      	uxth	r3, r3
 8004646:	3b01      	subs	r3, #1
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004652:	3b01      	subs	r3, #1
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b04      	cmp	r3, #4
 8004666:	d11b      	bne.n	80046a0 <HAL_I2C_Master_Transmit+0x188>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466c:	2b00      	cmp	r3, #0
 800466e:	d017      	beq.n	80046a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	781a      	ldrb	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	6a39      	ldr	r1, [r7, #32]
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f001 f960 	bl	800596a <I2C_WaitOnBTFFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00d      	beq.n	80046cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d107      	bne.n	80046c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e01a      	b.n	8004702 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d194      	bne.n	80045fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	e000      	b.n	8004702 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004700:	2302      	movs	r3, #2
  }
}
 8004702:	4618      	mov	r0, r3
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	00100002 	.word	0x00100002
 8004710:	ffff0000 	.word	0xffff0000

08004714 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b08c      	sub	sp, #48	; 0x30
 8004718:	af02      	add	r7, sp, #8
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	607a      	str	r2, [r7, #4]
 800471e:	461a      	mov	r2, r3
 8004720:	460b      	mov	r3, r1
 8004722:	817b      	strh	r3, [r7, #10]
 8004724:	4613      	mov	r3, r2
 8004726:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004728:	f7fe fb58 	bl	8002ddc <HAL_GetTick>
 800472c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b20      	cmp	r3, #32
 8004738:	f040 820b 	bne.w	8004b52 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	2319      	movs	r3, #25
 8004742:	2201      	movs	r2, #1
 8004744:	497c      	ldr	r1, [pc, #496]	; (8004938 <HAL_I2C_Master_Receive+0x224>)
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 fff8 	bl	800573c <I2C_WaitOnFlagUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004752:	2302      	movs	r3, #2
 8004754:	e1fe      	b.n	8004b54 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_I2C_Master_Receive+0x50>
 8004760:	2302      	movs	r3, #2
 8004762:	e1f7      	b.n	8004b54 <HAL_I2C_Master_Receive+0x440>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b01      	cmp	r3, #1
 8004778:	d007      	beq.n	800478a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0201 	orr.w	r2, r2, #1
 8004788:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004798:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2222      	movs	r2, #34	; 0x22
 800479e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2210      	movs	r2, #16
 80047a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	893a      	ldrh	r2, [r7, #8]
 80047ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4a5c      	ldr	r2, [pc, #368]	; (800493c <HAL_I2C_Master_Receive+0x228>)
 80047ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80047cc:	8979      	ldrh	r1, [r7, #10]
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 fd66 	bl	80052a4 <I2C_MasterRequestRead>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e1b8      	b.n	8004b54 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d113      	bne.n	8004812 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ea:	2300      	movs	r3, #0
 80047ec:	623b      	str	r3, [r7, #32]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	623b      	str	r3, [r7, #32]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	623b      	str	r3, [r7, #32]
 80047fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	e18c      	b.n	8004b2c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004816:	2b01      	cmp	r3, #1
 8004818:	d11b      	bne.n	8004852 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004828:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800482a:	2300      	movs	r3, #0
 800482c:	61fb      	str	r3, [r7, #28]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	61fb      	str	r3, [r7, #28]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	61fb      	str	r3, [r7, #28]
 800483e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	e16c      	b.n	8004b2c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004856:	2b02      	cmp	r3, #2
 8004858:	d11b      	bne.n	8004892 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004868:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004878:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800487a:	2300      	movs	r3, #0
 800487c:	61bb      	str	r3, [r7, #24]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	61bb      	str	r3, [r7, #24]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	e14c      	b.n	8004b2c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a2:	2300      	movs	r3, #0
 80048a4:	617b      	str	r3, [r7, #20]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	617b      	str	r3, [r7, #20]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80048b8:	e138      	b.n	8004b2c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048be:	2b03      	cmp	r3, #3
 80048c0:	f200 80f1 	bhi.w	8004aa6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d123      	bne.n	8004914 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f001 f88b 	bl	80059ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e139      	b.n	8004b54 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691a      	ldr	r2, [r3, #16]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004908:	b29b      	uxth	r3, r3
 800490a:	3b01      	subs	r3, #1
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004912:	e10b      	b.n	8004b2c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004918:	2b02      	cmp	r3, #2
 800491a:	d14e      	bne.n	80049ba <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004922:	2200      	movs	r2, #0
 8004924:	4906      	ldr	r1, [pc, #24]	; (8004940 <HAL_I2C_Master_Receive+0x22c>)
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 ff08 	bl	800573c <I2C_WaitOnFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d008      	beq.n	8004944 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e10e      	b.n	8004b54 <HAL_I2C_Master_Receive+0x440>
 8004936:	bf00      	nop
 8004938:	00100002 	.word	0x00100002
 800493c:	ffff0000 	.word	0xffff0000
 8004940:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004952:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691a      	ldr	r2, [r3, #16]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004970:	3b01      	subs	r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049b8:	e0b8      	b.n	8004b2c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c0:	2200      	movs	r2, #0
 80049c2:	4966      	ldr	r1, [pc, #408]	; (8004b5c <HAL_I2C_Master_Receive+0x448>)
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 feb9 	bl	800573c <I2C_WaitOnFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e0bf      	b.n	8004b54 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	494f      	ldr	r1, [pc, #316]	; (8004b5c <HAL_I2C_Master_Receive+0x448>)
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 fe8b 	bl	800573c <I2C_WaitOnFlagUntilTimeout>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e091      	b.n	8004b54 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691a      	ldr	r2, [r3, #16]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004aa4:	e042      	b.n	8004b2c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 ff9e 	bl	80059ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e04c      	b.n	8004b54 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691a      	ldr	r2, [r3, #16]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d118      	bne.n	8004b2c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	691a      	ldr	r2, [r3, #16]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f47f aec2 	bne.w	80048ba <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	e000      	b.n	8004b54 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004b52:	2302      	movs	r3, #2
  }
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3728      	adds	r7, #40	; 0x28
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	00010004 	.word	0x00010004

08004b60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	4608      	mov	r0, r1
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4603      	mov	r3, r0
 8004b70:	817b      	strh	r3, [r7, #10]
 8004b72:	460b      	mov	r3, r1
 8004b74:	813b      	strh	r3, [r7, #8]
 8004b76:	4613      	mov	r3, r2
 8004b78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b7a:	f7fe f92f 	bl	8002ddc <HAL_GetTick>
 8004b7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b20      	cmp	r3, #32
 8004b8a:	f040 80d9 	bne.w	8004d40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	2319      	movs	r3, #25
 8004b94:	2201      	movs	r2, #1
 8004b96:	496d      	ldr	r1, [pc, #436]	; (8004d4c <HAL_I2C_Mem_Write+0x1ec>)
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 fdcf 	bl	800573c <I2C_WaitOnFlagUntilTimeout>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e0cc      	b.n	8004d42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d101      	bne.n	8004bb6 <HAL_I2C_Mem_Write+0x56>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e0c5      	b.n	8004d42 <HAL_I2C_Mem_Write+0x1e2>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d007      	beq.n	8004bdc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f042 0201 	orr.w	r2, r2, #1
 8004bda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2221      	movs	r2, #33	; 0x21
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2240      	movs	r2, #64	; 0x40
 8004bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a3a      	ldr	r2, [r7, #32]
 8004c06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4a4d      	ldr	r2, [pc, #308]	; (8004d50 <HAL_I2C_Mem_Write+0x1f0>)
 8004c1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c1e:	88f8      	ldrh	r0, [r7, #6]
 8004c20:	893a      	ldrh	r2, [r7, #8]
 8004c22:	8979      	ldrh	r1, [r7, #10]
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	9301      	str	r3, [sp, #4]
 8004c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 fc06 	bl	8005440 <I2C_RequestMemoryWrite>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d052      	beq.n	8004ce0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e081      	b.n	8004d42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 fe50 	bl	80058e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00d      	beq.n	8004c6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	d107      	bne.n	8004c66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e06b      	b.n	8004d42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	781a      	ldrb	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d11b      	bne.n	8004ce0 <HAL_I2C_Mem_Write+0x180>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d017      	beq.n	8004ce0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	781a      	ldrb	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1aa      	bne.n	8004c3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 fe3c 	bl	800596a <I2C_WaitOnBTFFlagUntilTimeout>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00d      	beq.n	8004d14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d107      	bne.n	8004d10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e016      	b.n	8004d42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	e000      	b.n	8004d42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004d40:	2302      	movs	r3, #2
  }
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	00100002 	.word	0x00100002
 8004d50:	ffff0000 	.word	0xffff0000

08004d54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b08c      	sub	sp, #48	; 0x30
 8004d58:	af02      	add	r7, sp, #8
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	4608      	mov	r0, r1
 8004d5e:	4611      	mov	r1, r2
 8004d60:	461a      	mov	r2, r3
 8004d62:	4603      	mov	r3, r0
 8004d64:	817b      	strh	r3, [r7, #10]
 8004d66:	460b      	mov	r3, r1
 8004d68:	813b      	strh	r3, [r7, #8]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d6e:	f7fe f835 	bl	8002ddc <HAL_GetTick>
 8004d72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b20      	cmp	r3, #32
 8004d7e:	f040 8208 	bne.w	8005192 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	2319      	movs	r3, #25
 8004d88:	2201      	movs	r2, #1
 8004d8a:	497b      	ldr	r1, [pc, #492]	; (8004f78 <HAL_I2C_Mem_Read+0x224>)
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 fcd5 	bl	800573c <I2C_WaitOnFlagUntilTimeout>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e1fb      	b.n	8005194 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d101      	bne.n	8004daa <HAL_I2C_Mem_Read+0x56>
 8004da6:	2302      	movs	r3, #2
 8004da8:	e1f4      	b.n	8005194 <HAL_I2C_Mem_Read+0x440>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d007      	beq.n	8004dd0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0201 	orr.w	r2, r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2222      	movs	r2, #34	; 0x22
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2240      	movs	r2, #64	; 0x40
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004e00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4a5b      	ldr	r2, [pc, #364]	; (8004f7c <HAL_I2C_Mem_Read+0x228>)
 8004e10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e12:	88f8      	ldrh	r0, [r7, #6]
 8004e14:	893a      	ldrh	r2, [r7, #8]
 8004e16:	8979      	ldrh	r1, [r7, #10]
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	9301      	str	r3, [sp, #4]
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	4603      	mov	r3, r0
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 fba2 	bl	800556c <I2C_RequestMemoryRead>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e1b0      	b.n	8005194 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d113      	bne.n	8004e62 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	623b      	str	r3, [r7, #32]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	623b      	str	r3, [r7, #32]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	623b      	str	r3, [r7, #32]
 8004e4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	e184      	b.n	800516c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d11b      	bne.n	8004ea2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	61fb      	str	r3, [r7, #28]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	61fb      	str	r3, [r7, #28]
 8004e8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	e164      	b.n	800516c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d11b      	bne.n	8004ee2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eb8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ec8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eca:	2300      	movs	r3, #0
 8004ecc:	61bb      	str	r3, [r7, #24]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	e144      	b.n	800516c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ef8:	e138      	b.n	800516c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	f200 80f1 	bhi.w	80050e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d123      	bne.n	8004f54 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 fd6b 	bl	80059ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e139      	b.n	8005194 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	691a      	ldr	r2, [r3, #16]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f52:	e10b      	b.n	800516c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d14e      	bne.n	8004ffa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	2200      	movs	r2, #0
 8004f64:	4906      	ldr	r1, [pc, #24]	; (8004f80 <HAL_I2C_Mem_Read+0x22c>)
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fbe8 	bl	800573c <I2C_WaitOnFlagUntilTimeout>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d008      	beq.n	8004f84 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e10e      	b.n	8005194 <HAL_I2C_Mem_Read+0x440>
 8004f76:	bf00      	nop
 8004f78:	00100002 	.word	0x00100002
 8004f7c:	ffff0000 	.word	0xffff0000
 8004f80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	691a      	ldr	r2, [r3, #16]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ff8:	e0b8      	b.n	800516c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005000:	2200      	movs	r2, #0
 8005002:	4966      	ldr	r1, [pc, #408]	; (800519c <HAL_I2C_Mem_Read+0x448>)
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 fb99 	bl	800573c <I2C_WaitOnFlagUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e0bf      	b.n	8005194 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005022:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691a      	ldr	r2, [r3, #16]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505c:	2200      	movs	r2, #0
 800505e:	494f      	ldr	r1, [pc, #316]	; (800519c <HAL_I2C_Mem_Read+0x448>)
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 fb6b 	bl	800573c <I2C_WaitOnFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e091      	b.n	8005194 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800507e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691a      	ldr	r2, [r3, #16]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	3b01      	subs	r3, #1
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3b01      	subs	r3, #1
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050e4:	e042      	b.n	800516c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 fc7e 	bl	80059ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e04c      	b.n	8005194 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	691a      	ldr	r2, [r3, #16]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005116:	3b01      	subs	r3, #1
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005122:	b29b      	uxth	r3, r3
 8005124:	3b01      	subs	r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	f003 0304 	and.w	r3, r3, #4
 8005136:	2b04      	cmp	r3, #4
 8005138:	d118      	bne.n	800516c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	691a      	ldr	r2, [r3, #16]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005162:	b29b      	uxth	r3, r3
 8005164:	3b01      	subs	r3, #1
 8005166:	b29a      	uxth	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005170:	2b00      	cmp	r3, #0
 8005172:	f47f aec2 	bne.w	8004efa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2220      	movs	r2, #32
 800517a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	e000      	b.n	8005194 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005192:	2302      	movs	r3, #2
  }
}
 8005194:	4618      	mov	r0, r3
 8005196:	3728      	adds	r7, #40	; 0x28
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	00010004 	.word	0x00010004

080051a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	607a      	str	r2, [r7, #4]
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	460b      	mov	r3, r1
 80051ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d006      	beq.n	80051ca <I2C_MasterRequestWrite+0x2a>
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d003      	beq.n	80051ca <I2C_MasterRequestWrite+0x2a>
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051c8:	d108      	bne.n	80051dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	e00b      	b.n	80051f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e0:	2b12      	cmp	r3, #18
 80051e2:	d107      	bne.n	80051f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 fa9b 	bl	800573c <I2C_WaitOnFlagUntilTimeout>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00d      	beq.n	8005228 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800521a:	d103      	bne.n	8005224 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005222:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e035      	b.n	8005294 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005230:	d108      	bne.n	8005244 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005232:	897b      	ldrh	r3, [r7, #10]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	461a      	mov	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005240:	611a      	str	r2, [r3, #16]
 8005242:	e01b      	b.n	800527c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005244:	897b      	ldrh	r3, [r7, #10]
 8005246:	11db      	asrs	r3, r3, #7
 8005248:	b2db      	uxtb	r3, r3
 800524a:	f003 0306 	and.w	r3, r3, #6
 800524e:	b2db      	uxtb	r3, r3
 8005250:	f063 030f 	orn	r3, r3, #15
 8005254:	b2da      	uxtb	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	490e      	ldr	r1, [pc, #56]	; (800529c <I2C_MasterRequestWrite+0xfc>)
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 fac1 	bl	80057ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e010      	b.n	8005294 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005272:	897b      	ldrh	r3, [r7, #10]
 8005274:	b2da      	uxtb	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	4907      	ldr	r1, [pc, #28]	; (80052a0 <I2C_MasterRequestWrite+0x100>)
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 fab1 	bl	80057ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e000      	b.n	8005294 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	00010008 	.word	0x00010008
 80052a0:	00010002 	.word	0x00010002

080052a4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b088      	sub	sp, #32
 80052a8:	af02      	add	r7, sp, #8
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	607a      	str	r2, [r7, #4]
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	460b      	mov	r3, r1
 80052b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052c8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d006      	beq.n	80052de <I2C_MasterRequestRead+0x3a>
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d003      	beq.n	80052de <I2C_MasterRequestRead+0x3a>
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052dc:	d108      	bne.n	80052f0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	e00b      	b.n	8005308 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	2b11      	cmp	r3, #17
 80052f6:	d107      	bne.n	8005308 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005306:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 fa11 	bl	800573c <I2C_WaitOnFlagUntilTimeout>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00d      	beq.n	800533c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800532e:	d103      	bne.n	8005338 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005336:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e079      	b.n	8005430 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005344:	d108      	bne.n	8005358 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005346:	897b      	ldrh	r3, [r7, #10]
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f043 0301 	orr.w	r3, r3, #1
 800534e:	b2da      	uxtb	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	611a      	str	r2, [r3, #16]
 8005356:	e05f      	b.n	8005418 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005358:	897b      	ldrh	r3, [r7, #10]
 800535a:	11db      	asrs	r3, r3, #7
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f003 0306 	and.w	r3, r3, #6
 8005362:	b2db      	uxtb	r3, r3
 8005364:	f063 030f 	orn	r3, r3, #15
 8005368:	b2da      	uxtb	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	4930      	ldr	r1, [pc, #192]	; (8005438 <I2C_MasterRequestRead+0x194>)
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 fa37 	bl	80057ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e054      	b.n	8005430 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005386:	897b      	ldrh	r3, [r7, #10]
 8005388:	b2da      	uxtb	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	4929      	ldr	r1, [pc, #164]	; (800543c <I2C_MasterRequestRead+0x198>)
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 fa27 	bl	80057ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e044      	b.n	8005430 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a6:	2300      	movs	r3, #0
 80053a8:	613b      	str	r3, [r7, #16]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 f9af 	bl	800573c <I2C_WaitOnFlagUntilTimeout>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00d      	beq.n	8005400 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f2:	d103      	bne.n	80053fc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053fa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e017      	b.n	8005430 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005400:	897b      	ldrh	r3, [r7, #10]
 8005402:	11db      	asrs	r3, r3, #7
 8005404:	b2db      	uxtb	r3, r3
 8005406:	f003 0306 	and.w	r3, r3, #6
 800540a:	b2db      	uxtb	r3, r3
 800540c:	f063 030e 	orn	r3, r3, #14
 8005410:	b2da      	uxtb	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	4907      	ldr	r1, [pc, #28]	; (800543c <I2C_MasterRequestRead+0x198>)
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 f9e3 	bl	80057ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e000      	b.n	8005430 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3718      	adds	r7, #24
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	00010008 	.word	0x00010008
 800543c:	00010002 	.word	0x00010002

08005440 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af02      	add	r7, sp, #8
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	4608      	mov	r0, r1
 800544a:	4611      	mov	r1, r2
 800544c:	461a      	mov	r2, r3
 800544e:	4603      	mov	r3, r0
 8005450:	817b      	strh	r3, [r7, #10]
 8005452:	460b      	mov	r3, r1
 8005454:	813b      	strh	r3, [r7, #8]
 8005456:	4613      	mov	r3, r2
 8005458:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005468:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	2200      	movs	r2, #0
 8005472:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 f960 	bl	800573c <I2C_WaitOnFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00d      	beq.n	800549e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005490:	d103      	bne.n	800549a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005498:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e05f      	b.n	800555e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800549e:	897b      	ldrh	r3, [r7, #10]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	461a      	mov	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	6a3a      	ldr	r2, [r7, #32]
 80054b2:	492d      	ldr	r1, [pc, #180]	; (8005568 <I2C_RequestMemoryWrite+0x128>)
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 f998 	bl	80057ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e04c      	b.n	800555e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c4:	2300      	movs	r3, #0
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054dc:	6a39      	ldr	r1, [r7, #32]
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f000 fa02 	bl	80058e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00d      	beq.n	8005506 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d107      	bne.n	8005502 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005500:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e02b      	b.n	800555e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005506:	88fb      	ldrh	r3, [r7, #6]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d105      	bne.n	8005518 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800550c:	893b      	ldrh	r3, [r7, #8]
 800550e:	b2da      	uxtb	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	611a      	str	r2, [r3, #16]
 8005516:	e021      	b.n	800555c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005518:	893b      	ldrh	r3, [r7, #8]
 800551a:	0a1b      	lsrs	r3, r3, #8
 800551c:	b29b      	uxth	r3, r3
 800551e:	b2da      	uxtb	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005528:	6a39      	ldr	r1, [r7, #32]
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 f9dc 	bl	80058e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00d      	beq.n	8005552 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	2b04      	cmp	r3, #4
 800553c:	d107      	bne.n	800554e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800554c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e005      	b.n	800555e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005552:	893b      	ldrh	r3, [r7, #8]
 8005554:	b2da      	uxtb	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	00010002 	.word	0x00010002

0800556c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af02      	add	r7, sp, #8
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	4608      	mov	r0, r1
 8005576:	4611      	mov	r1, r2
 8005578:	461a      	mov	r2, r3
 800557a:	4603      	mov	r3, r0
 800557c:	817b      	strh	r3, [r7, #10]
 800557e:	460b      	mov	r3, r1
 8005580:	813b      	strh	r3, [r7, #8]
 8005582:	4613      	mov	r3, r2
 8005584:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005594:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	6a3b      	ldr	r3, [r7, #32]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 f8c2 	bl	800573c <I2C_WaitOnFlagUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00d      	beq.n	80055da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055cc:	d103      	bne.n	80055d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e0aa      	b.n	8005730 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055da:	897b      	ldrh	r3, [r7, #10]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	461a      	mov	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	6a3a      	ldr	r2, [r7, #32]
 80055ee:	4952      	ldr	r1, [pc, #328]	; (8005738 <I2C_RequestMemoryRead+0x1cc>)
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 f8fa 	bl	80057ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e097      	b.n	8005730 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005600:	2300      	movs	r3, #0
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005618:	6a39      	ldr	r1, [r7, #32]
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 f964 	bl	80058e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00d      	beq.n	8005642 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	2b04      	cmp	r3, #4
 800562c:	d107      	bne.n	800563e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800563c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e076      	b.n	8005730 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005642:	88fb      	ldrh	r3, [r7, #6]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d105      	bne.n	8005654 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005648:	893b      	ldrh	r3, [r7, #8]
 800564a:	b2da      	uxtb	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	611a      	str	r2, [r3, #16]
 8005652:	e021      	b.n	8005698 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005654:	893b      	ldrh	r3, [r7, #8]
 8005656:	0a1b      	lsrs	r3, r3, #8
 8005658:	b29b      	uxth	r3, r3
 800565a:	b2da      	uxtb	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005664:	6a39      	ldr	r1, [r7, #32]
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 f93e 	bl	80058e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00d      	beq.n	800568e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	2b04      	cmp	r3, #4
 8005678:	d107      	bne.n	800568a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005688:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e050      	b.n	8005730 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800568e:	893b      	ldrh	r3, [r7, #8]
 8005690:	b2da      	uxtb	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569a:	6a39      	ldr	r1, [r7, #32]
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 f923 	bl	80058e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00d      	beq.n	80056c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d107      	bne.n	80056c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e035      	b.n	8005730 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	2200      	movs	r2, #0
 80056dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 f82b 	bl	800573c <I2C_WaitOnFlagUntilTimeout>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00d      	beq.n	8005708 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056fa:	d103      	bne.n	8005704 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005702:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e013      	b.n	8005730 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005708:	897b      	ldrh	r3, [r7, #10]
 800570a:	b2db      	uxtb	r3, r3
 800570c:	f043 0301 	orr.w	r3, r3, #1
 8005710:	b2da      	uxtb	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	6a3a      	ldr	r2, [r7, #32]
 800571c:	4906      	ldr	r1, [pc, #24]	; (8005738 <I2C_RequestMemoryRead+0x1cc>)
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 f863 	bl	80057ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3718      	adds	r7, #24
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	00010002 	.word	0x00010002

0800573c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	603b      	str	r3, [r7, #0]
 8005748:	4613      	mov	r3, r2
 800574a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800574c:	e025      	b.n	800579a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005754:	d021      	beq.n	800579a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005756:	f7fd fb41 	bl	8002ddc <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d302      	bcc.n	800576c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d116      	bne.n	800579a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2220      	movs	r2, #32
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	f043 0220 	orr.w	r2, r3, #32
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e023      	b.n	80057e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	0c1b      	lsrs	r3, r3, #16
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d10d      	bne.n	80057c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	43da      	mvns	r2, r3
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	4013      	ands	r3, r2
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	bf0c      	ite	eq
 80057b6:	2301      	moveq	r3, #1
 80057b8:	2300      	movne	r3, #0
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	461a      	mov	r2, r3
 80057be:	e00c      	b.n	80057da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	43da      	mvns	r2, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4013      	ands	r3, r2
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	bf0c      	ite	eq
 80057d2:	2301      	moveq	r3, #1
 80057d4:	2300      	movne	r3, #0
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	461a      	mov	r2, r3
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d0b6      	beq.n	800574e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
 80057f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057f8:	e051      	b.n	800589e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005808:	d123      	bne.n	8005852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005818:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005822:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2220      	movs	r2, #32
 800582e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	f043 0204 	orr.w	r2, r3, #4
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e046      	b.n	80058e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005858:	d021      	beq.n	800589e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800585a:	f7fd fabf 	bl	8002ddc <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	429a      	cmp	r2, r3
 8005868:	d302      	bcc.n	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d116      	bne.n	800589e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2220      	movs	r2, #32
 800587a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	f043 0220 	orr.w	r2, r3, #32
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e020      	b.n	80058e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	0c1b      	lsrs	r3, r3, #16
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d10c      	bne.n	80058c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	43da      	mvns	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	4013      	ands	r3, r2
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	bf14      	ite	ne
 80058ba:	2301      	movne	r3, #1
 80058bc:	2300      	moveq	r3, #0
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	e00b      	b.n	80058da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	43da      	mvns	r2, r3
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	4013      	ands	r3, r2
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	bf14      	ite	ne
 80058d4:	2301      	movne	r3, #1
 80058d6:	2300      	moveq	r3, #0
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d18d      	bne.n	80057fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058f4:	e02d      	b.n	8005952 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 f8ce 	bl	8005a98 <I2C_IsAcknowledgeFailed>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e02d      	b.n	8005962 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590c:	d021      	beq.n	8005952 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590e:	f7fd fa65 	bl	8002ddc <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	429a      	cmp	r2, r3
 800591c:	d302      	bcc.n	8005924 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d116      	bne.n	8005952 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2220      	movs	r2, #32
 800592e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	f043 0220 	orr.w	r2, r3, #32
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e007      	b.n	8005962 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595c:	2b80      	cmp	r3, #128	; 0x80
 800595e:	d1ca      	bne.n	80058f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b084      	sub	sp, #16
 800596e:	af00      	add	r7, sp, #0
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005976:	e02d      	b.n	80059d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 f88d 	bl	8005a98 <I2C_IsAcknowledgeFailed>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e02d      	b.n	80059e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598e:	d021      	beq.n	80059d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005990:	f7fd fa24 	bl	8002ddc <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	429a      	cmp	r2, r3
 800599e:	d302      	bcc.n	80059a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d116      	bne.n	80059d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2220      	movs	r2, #32
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	f043 0220 	orr.w	r2, r3, #32
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e007      	b.n	80059e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	f003 0304 	and.w	r3, r3, #4
 80059de:	2b04      	cmp	r3, #4
 80059e0:	d1ca      	bne.n	8005978 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059f8:	e042      	b.n	8005a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b10      	cmp	r3, #16
 8005a06:	d119      	bne.n	8005a3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f06f 0210 	mvn.w	r2, #16
 8005a10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e029      	b.n	8005a90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a3c:	f7fd f9ce 	bl	8002ddc <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d302      	bcc.n	8005a52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d116      	bne.n	8005a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6c:	f043 0220 	orr.w	r2, r3, #32
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e007      	b.n	8005a90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8a:	2b40      	cmp	r3, #64	; 0x40
 8005a8c:	d1b5      	bne.n	80059fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aae:	d11b      	bne.n	8005ae8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ab8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	f043 0204 	orr.w	r2, r3, #4
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e000      	b.n	8005aea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
	...

08005af8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e267      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d075      	beq.n	8005c02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b16:	4b88      	ldr	r3, [pc, #544]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 030c 	and.w	r3, r3, #12
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d00c      	beq.n	8005b3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b22:	4b85      	ldr	r3, [pc, #532]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b2a:	2b08      	cmp	r3, #8
 8005b2c:	d112      	bne.n	8005b54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b2e:	4b82      	ldr	r3, [pc, #520]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b3a:	d10b      	bne.n	8005b54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b3c:	4b7e      	ldr	r3, [pc, #504]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d05b      	beq.n	8005c00 <HAL_RCC_OscConfig+0x108>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d157      	bne.n	8005c00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e242      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b5c:	d106      	bne.n	8005b6c <HAL_RCC_OscConfig+0x74>
 8005b5e:	4b76      	ldr	r3, [pc, #472]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a75      	ldr	r2, [pc, #468]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	e01d      	b.n	8005ba8 <HAL_RCC_OscConfig+0xb0>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b74:	d10c      	bne.n	8005b90 <HAL_RCC_OscConfig+0x98>
 8005b76:	4b70      	ldr	r3, [pc, #448]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a6f      	ldr	r2, [pc, #444]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	4b6d      	ldr	r3, [pc, #436]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a6c      	ldr	r2, [pc, #432]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	e00b      	b.n	8005ba8 <HAL_RCC_OscConfig+0xb0>
 8005b90:	4b69      	ldr	r3, [pc, #420]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a68      	ldr	r2, [pc, #416]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	4b66      	ldr	r3, [pc, #408]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a65      	ldr	r2, [pc, #404]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d013      	beq.n	8005bd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb0:	f7fd f914 	bl	8002ddc <HAL_GetTick>
 8005bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bb6:	e008      	b.n	8005bca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bb8:	f7fd f910 	bl	8002ddc <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	2b64      	cmp	r3, #100	; 0x64
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e207      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bca:	4b5b      	ldr	r3, [pc, #364]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d0f0      	beq.n	8005bb8 <HAL_RCC_OscConfig+0xc0>
 8005bd6:	e014      	b.n	8005c02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd8:	f7fd f900 	bl	8002ddc <HAL_GetTick>
 8005bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bde:	e008      	b.n	8005bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005be0:	f7fd f8fc 	bl	8002ddc <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	2b64      	cmp	r3, #100	; 0x64
 8005bec:	d901      	bls.n	8005bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e1f3      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bf2:	4b51      	ldr	r3, [pc, #324]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1f0      	bne.n	8005be0 <HAL_RCC_OscConfig+0xe8>
 8005bfe:	e000      	b.n	8005c02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d063      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c0e:	4b4a      	ldr	r3, [pc, #296]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f003 030c 	and.w	r3, r3, #12
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00b      	beq.n	8005c32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c1a:	4b47      	ldr	r3, [pc, #284]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c22:	2b08      	cmp	r3, #8
 8005c24:	d11c      	bne.n	8005c60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c26:	4b44      	ldr	r3, [pc, #272]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d116      	bne.n	8005c60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c32:	4b41      	ldr	r3, [pc, #260]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d005      	beq.n	8005c4a <HAL_RCC_OscConfig+0x152>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d001      	beq.n	8005c4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e1c7      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c4a:	4b3b      	ldr	r3, [pc, #236]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	4937      	ldr	r1, [pc, #220]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c5e:	e03a      	b.n	8005cd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d020      	beq.n	8005caa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c68:	4b34      	ldr	r3, [pc, #208]	; (8005d3c <HAL_RCC_OscConfig+0x244>)
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c6e:	f7fd f8b5 	bl	8002ddc <HAL_GetTick>
 8005c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c74:	e008      	b.n	8005c88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c76:	f7fd f8b1 	bl	8002ddc <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d901      	bls.n	8005c88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e1a8      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c88:	4b2b      	ldr	r3, [pc, #172]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d0f0      	beq.n	8005c76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c94:	4b28      	ldr	r3, [pc, #160]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	00db      	lsls	r3, r3, #3
 8005ca2:	4925      	ldr	r1, [pc, #148]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	600b      	str	r3, [r1, #0]
 8005ca8:	e015      	b.n	8005cd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005caa:	4b24      	ldr	r3, [pc, #144]	; (8005d3c <HAL_RCC_OscConfig+0x244>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb0:	f7fd f894 	bl	8002ddc <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cb6:	e008      	b.n	8005cca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cb8:	f7fd f890 	bl	8002ddc <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e187      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cca:	4b1b      	ldr	r3, [pc, #108]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1f0      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0308 	and.w	r3, r3, #8
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d036      	beq.n	8005d50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d016      	beq.n	8005d18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cea:	4b15      	ldr	r3, [pc, #84]	; (8005d40 <HAL_RCC_OscConfig+0x248>)
 8005cec:	2201      	movs	r2, #1
 8005cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf0:	f7fd f874 	bl	8002ddc <HAL_GetTick>
 8005cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cf6:	e008      	b.n	8005d0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cf8:	f7fd f870 	bl	8002ddc <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e167      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d0a:	4b0b      	ldr	r3, [pc, #44]	; (8005d38 <HAL_RCC_OscConfig+0x240>)
 8005d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0f0      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x200>
 8005d16:	e01b      	b.n	8005d50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d18:	4b09      	ldr	r3, [pc, #36]	; (8005d40 <HAL_RCC_OscConfig+0x248>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d1e:	f7fd f85d 	bl	8002ddc <HAL_GetTick>
 8005d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d24:	e00e      	b.n	8005d44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d26:	f7fd f859 	bl	8002ddc <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d907      	bls.n	8005d44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e150      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	42470000 	.word	0x42470000
 8005d40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d44:	4b88      	ldr	r3, [pc, #544]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1ea      	bne.n	8005d26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0304 	and.w	r3, r3, #4
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 8097 	beq.w	8005e8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d62:	4b81      	ldr	r3, [pc, #516]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10f      	bne.n	8005d8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60bb      	str	r3, [r7, #8]
 8005d72:	4b7d      	ldr	r3, [pc, #500]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	4a7c      	ldr	r2, [pc, #496]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d7e:	4b7a      	ldr	r3, [pc, #488]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d86:	60bb      	str	r3, [r7, #8]
 8005d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d8e:	4b77      	ldr	r3, [pc, #476]	; (8005f6c <HAL_RCC_OscConfig+0x474>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d118      	bne.n	8005dcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d9a:	4b74      	ldr	r3, [pc, #464]	; (8005f6c <HAL_RCC_OscConfig+0x474>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a73      	ldr	r2, [pc, #460]	; (8005f6c <HAL_RCC_OscConfig+0x474>)
 8005da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005da6:	f7fd f819 	bl	8002ddc <HAL_GetTick>
 8005daa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dac:	e008      	b.n	8005dc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dae:	f7fd f815 	bl	8002ddc <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e10c      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc0:	4b6a      	ldr	r3, [pc, #424]	; (8005f6c <HAL_RCC_OscConfig+0x474>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0f0      	beq.n	8005dae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d106      	bne.n	8005de2 <HAL_RCC_OscConfig+0x2ea>
 8005dd4:	4b64      	ldr	r3, [pc, #400]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd8:	4a63      	ldr	r2, [pc, #396]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005dda:	f043 0301 	orr.w	r3, r3, #1
 8005dde:	6713      	str	r3, [r2, #112]	; 0x70
 8005de0:	e01c      	b.n	8005e1c <HAL_RCC_OscConfig+0x324>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b05      	cmp	r3, #5
 8005de8:	d10c      	bne.n	8005e04 <HAL_RCC_OscConfig+0x30c>
 8005dea:	4b5f      	ldr	r3, [pc, #380]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dee:	4a5e      	ldr	r2, [pc, #376]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005df0:	f043 0304 	orr.w	r3, r3, #4
 8005df4:	6713      	str	r3, [r2, #112]	; 0x70
 8005df6:	4b5c      	ldr	r3, [pc, #368]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfa:	4a5b      	ldr	r2, [pc, #364]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005dfc:	f043 0301 	orr.w	r3, r3, #1
 8005e00:	6713      	str	r3, [r2, #112]	; 0x70
 8005e02:	e00b      	b.n	8005e1c <HAL_RCC_OscConfig+0x324>
 8005e04:	4b58      	ldr	r3, [pc, #352]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e08:	4a57      	ldr	r2, [pc, #348]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005e0a:	f023 0301 	bic.w	r3, r3, #1
 8005e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e10:	4b55      	ldr	r3, [pc, #340]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e14:	4a54      	ldr	r2, [pc, #336]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005e16:	f023 0304 	bic.w	r3, r3, #4
 8005e1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d015      	beq.n	8005e50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e24:	f7fc ffda 	bl	8002ddc <HAL_GetTick>
 8005e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e2a:	e00a      	b.n	8005e42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e2c:	f7fc ffd6 	bl	8002ddc <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e0cb      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e42:	4b49      	ldr	r3, [pc, #292]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d0ee      	beq.n	8005e2c <HAL_RCC_OscConfig+0x334>
 8005e4e:	e014      	b.n	8005e7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e50:	f7fc ffc4 	bl	8002ddc <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e56:	e00a      	b.n	8005e6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e58:	f7fc ffc0 	bl	8002ddc <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d901      	bls.n	8005e6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e0b5      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e6e:	4b3e      	ldr	r3, [pc, #248]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1ee      	bne.n	8005e58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e7a:	7dfb      	ldrb	r3, [r7, #23]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d105      	bne.n	8005e8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e80:	4b39      	ldr	r3, [pc, #228]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e84:	4a38      	ldr	r2, [pc, #224]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 80a1 	beq.w	8005fd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e96:	4b34      	ldr	r3, [pc, #208]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	f003 030c 	and.w	r3, r3, #12
 8005e9e:	2b08      	cmp	r3, #8
 8005ea0:	d05c      	beq.n	8005f5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d141      	bne.n	8005f2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eaa:	4b31      	ldr	r3, [pc, #196]	; (8005f70 <HAL_RCC_OscConfig+0x478>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb0:	f7fc ff94 	bl	8002ddc <HAL_GetTick>
 8005eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eb6:	e008      	b.n	8005eca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eb8:	f7fc ff90 	bl	8002ddc <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e087      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eca:	4b27      	ldr	r3, [pc, #156]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1f0      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69da      	ldr	r2, [r3, #28]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	019b      	lsls	r3, r3, #6
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eec:	085b      	lsrs	r3, r3, #1
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	041b      	lsls	r3, r3, #16
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef8:	061b      	lsls	r3, r3, #24
 8005efa:	491b      	ldr	r1, [pc, #108]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f00:	4b1b      	ldr	r3, [pc, #108]	; (8005f70 <HAL_RCC_OscConfig+0x478>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f06:	f7fc ff69 	bl	8002ddc <HAL_GetTick>
 8005f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f0c:	e008      	b.n	8005f20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f0e:	f7fc ff65 	bl	8002ddc <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e05c      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f20:	4b11      	ldr	r3, [pc, #68]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0f0      	beq.n	8005f0e <HAL_RCC_OscConfig+0x416>
 8005f2c:	e054      	b.n	8005fd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f2e:	4b10      	ldr	r3, [pc, #64]	; (8005f70 <HAL_RCC_OscConfig+0x478>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f34:	f7fc ff52 	bl	8002ddc <HAL_GetTick>
 8005f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f3c:	f7fc ff4e 	bl	8002ddc <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e045      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f4e:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <HAL_RCC_OscConfig+0x470>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1f0      	bne.n	8005f3c <HAL_RCC_OscConfig+0x444>
 8005f5a:	e03d      	b.n	8005fd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d107      	bne.n	8005f74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e038      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
 8005f68:	40023800 	.word	0x40023800
 8005f6c:	40007000 	.word	0x40007000
 8005f70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f74:	4b1b      	ldr	r3, [pc, #108]	; (8005fe4 <HAL_RCC_OscConfig+0x4ec>)
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d028      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d121      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d11a      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005faa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d111      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fba:	085b      	lsrs	r3, r3, #1
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d107      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d001      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e000      	b.n	8005fda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	40023800 	.word	0x40023800

08005fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e0cc      	b.n	8006196 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ffc:	4b68      	ldr	r3, [pc, #416]	; (80061a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0307 	and.w	r3, r3, #7
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d90c      	bls.n	8006024 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800600a:	4b65      	ldr	r3, [pc, #404]	; (80061a0 <HAL_RCC_ClockConfig+0x1b8>)
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006012:	4b63      	ldr	r3, [pc, #396]	; (80061a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	429a      	cmp	r2, r3
 800601e:	d001      	beq.n	8006024 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e0b8      	b.n	8006196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d020      	beq.n	8006072 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0304 	and.w	r3, r3, #4
 8006038:	2b00      	cmp	r3, #0
 800603a:	d005      	beq.n	8006048 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800603c:	4b59      	ldr	r3, [pc, #356]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	4a58      	ldr	r2, [pc, #352]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006042:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006046:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0308 	and.w	r3, r3, #8
 8006050:	2b00      	cmp	r3, #0
 8006052:	d005      	beq.n	8006060 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006054:	4b53      	ldr	r3, [pc, #332]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	4a52      	ldr	r2, [pc, #328]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 800605a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800605e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006060:	4b50      	ldr	r3, [pc, #320]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	494d      	ldr	r1, [pc, #308]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 800606e:	4313      	orrs	r3, r2
 8006070:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	2b00      	cmp	r3, #0
 800607c:	d044      	beq.n	8006108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d107      	bne.n	8006096 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006086:	4b47      	ldr	r3, [pc, #284]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d119      	bne.n	80060c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e07f      	b.n	8006196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2b02      	cmp	r3, #2
 800609c:	d003      	beq.n	80060a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060a2:	2b03      	cmp	r3, #3
 80060a4:	d107      	bne.n	80060b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060a6:	4b3f      	ldr	r3, [pc, #252]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d109      	bne.n	80060c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e06f      	b.n	8006196 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060b6:	4b3b      	ldr	r3, [pc, #236]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e067      	b.n	8006196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060c6:	4b37      	ldr	r3, [pc, #220]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f023 0203 	bic.w	r2, r3, #3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	4934      	ldr	r1, [pc, #208]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060d8:	f7fc fe80 	bl	8002ddc <HAL_GetTick>
 80060dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060de:	e00a      	b.n	80060f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060e0:	f7fc fe7c 	bl	8002ddc <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e04f      	b.n	8006196 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060f6:	4b2b      	ldr	r3, [pc, #172]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 020c 	and.w	r2, r3, #12
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	429a      	cmp	r2, r3
 8006106:	d1eb      	bne.n	80060e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006108:	4b25      	ldr	r3, [pc, #148]	; (80061a0 <HAL_RCC_ClockConfig+0x1b8>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0307 	and.w	r3, r3, #7
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	429a      	cmp	r2, r3
 8006114:	d20c      	bcs.n	8006130 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006116:	4b22      	ldr	r3, [pc, #136]	; (80061a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	b2d2      	uxtb	r2, r2
 800611c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800611e:	4b20      	ldr	r3, [pc, #128]	; (80061a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	429a      	cmp	r2, r3
 800612a:	d001      	beq.n	8006130 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e032      	b.n	8006196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0304 	and.w	r3, r3, #4
 8006138:	2b00      	cmp	r3, #0
 800613a:	d008      	beq.n	800614e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800613c:	4b19      	ldr	r3, [pc, #100]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	4916      	ldr	r1, [pc, #88]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 800614a:	4313      	orrs	r3, r2
 800614c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	2b00      	cmp	r3, #0
 8006158:	d009      	beq.n	800616e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800615a:	4b12      	ldr	r3, [pc, #72]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	00db      	lsls	r3, r3, #3
 8006168:	490e      	ldr	r1, [pc, #56]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 800616a:	4313      	orrs	r3, r2
 800616c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800616e:	f000 f821 	bl	80061b4 <HAL_RCC_GetSysClockFreq>
 8006172:	4602      	mov	r2, r0
 8006174:	4b0b      	ldr	r3, [pc, #44]	; (80061a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	091b      	lsrs	r3, r3, #4
 800617a:	f003 030f 	and.w	r3, r3, #15
 800617e:	490a      	ldr	r1, [pc, #40]	; (80061a8 <HAL_RCC_ClockConfig+0x1c0>)
 8006180:	5ccb      	ldrb	r3, [r1, r3]
 8006182:	fa22 f303 	lsr.w	r3, r2, r3
 8006186:	4a09      	ldr	r2, [pc, #36]	; (80061ac <HAL_RCC_ClockConfig+0x1c4>)
 8006188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800618a:	4b09      	ldr	r3, [pc, #36]	; (80061b0 <HAL_RCC_ClockConfig+0x1c8>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4618      	mov	r0, r3
 8006190:	f7fc fde0 	bl	8002d54 <HAL_InitTick>

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	40023c00 	.word	0x40023c00
 80061a4:	40023800 	.word	0x40023800
 80061a8:	0800bbf0 	.word	0x0800bbf0
 80061ac:	20000004 	.word	0x20000004
 80061b0:	20000008 	.word	0x20000008

080061b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061b8:	b090      	sub	sp, #64	; 0x40
 80061ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80061bc:	2300      	movs	r3, #0
 80061be:	637b      	str	r3, [r7, #52]	; 0x34
 80061c0:	2300      	movs	r3, #0
 80061c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061c4:	2300      	movs	r3, #0
 80061c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061cc:	4b59      	ldr	r3, [pc, #356]	; (8006334 <HAL_RCC_GetSysClockFreq+0x180>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f003 030c 	and.w	r3, r3, #12
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d00d      	beq.n	80061f4 <HAL_RCC_GetSysClockFreq+0x40>
 80061d8:	2b08      	cmp	r3, #8
 80061da:	f200 80a1 	bhi.w	8006320 <HAL_RCC_GetSysClockFreq+0x16c>
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d002      	beq.n	80061e8 <HAL_RCC_GetSysClockFreq+0x34>
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d003      	beq.n	80061ee <HAL_RCC_GetSysClockFreq+0x3a>
 80061e6:	e09b      	b.n	8006320 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061e8:	4b53      	ldr	r3, [pc, #332]	; (8006338 <HAL_RCC_GetSysClockFreq+0x184>)
 80061ea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80061ec:	e09b      	b.n	8006326 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061ee:	4b53      	ldr	r3, [pc, #332]	; (800633c <HAL_RCC_GetSysClockFreq+0x188>)
 80061f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80061f2:	e098      	b.n	8006326 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061f4:	4b4f      	ldr	r3, [pc, #316]	; (8006334 <HAL_RCC_GetSysClockFreq+0x180>)
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061fe:	4b4d      	ldr	r3, [pc, #308]	; (8006334 <HAL_RCC_GetSysClockFreq+0x180>)
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d028      	beq.n	800625c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800620a:	4b4a      	ldr	r3, [pc, #296]	; (8006334 <HAL_RCC_GetSysClockFreq+0x180>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	099b      	lsrs	r3, r3, #6
 8006210:	2200      	movs	r2, #0
 8006212:	623b      	str	r3, [r7, #32]
 8006214:	627a      	str	r2, [r7, #36]	; 0x24
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800621c:	2100      	movs	r1, #0
 800621e:	4b47      	ldr	r3, [pc, #284]	; (800633c <HAL_RCC_GetSysClockFreq+0x188>)
 8006220:	fb03 f201 	mul.w	r2, r3, r1
 8006224:	2300      	movs	r3, #0
 8006226:	fb00 f303 	mul.w	r3, r0, r3
 800622a:	4413      	add	r3, r2
 800622c:	4a43      	ldr	r2, [pc, #268]	; (800633c <HAL_RCC_GetSysClockFreq+0x188>)
 800622e:	fba0 1202 	umull	r1, r2, r0, r2
 8006232:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006234:	460a      	mov	r2, r1
 8006236:	62ba      	str	r2, [r7, #40]	; 0x28
 8006238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800623a:	4413      	add	r3, r2
 800623c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800623e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006240:	2200      	movs	r2, #0
 8006242:	61bb      	str	r3, [r7, #24]
 8006244:	61fa      	str	r2, [r7, #28]
 8006246:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800624a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800624e:	f7fa f817 	bl	8000280 <__aeabi_uldivmod>
 8006252:	4602      	mov	r2, r0
 8006254:	460b      	mov	r3, r1
 8006256:	4613      	mov	r3, r2
 8006258:	63fb      	str	r3, [r7, #60]	; 0x3c
 800625a:	e053      	b.n	8006304 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800625c:	4b35      	ldr	r3, [pc, #212]	; (8006334 <HAL_RCC_GetSysClockFreq+0x180>)
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	099b      	lsrs	r3, r3, #6
 8006262:	2200      	movs	r2, #0
 8006264:	613b      	str	r3, [r7, #16]
 8006266:	617a      	str	r2, [r7, #20]
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800626e:	f04f 0b00 	mov.w	fp, #0
 8006272:	4652      	mov	r2, sl
 8006274:	465b      	mov	r3, fp
 8006276:	f04f 0000 	mov.w	r0, #0
 800627a:	f04f 0100 	mov.w	r1, #0
 800627e:	0159      	lsls	r1, r3, #5
 8006280:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006284:	0150      	lsls	r0, r2, #5
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	ebb2 080a 	subs.w	r8, r2, sl
 800628e:	eb63 090b 	sbc.w	r9, r3, fp
 8006292:	f04f 0200 	mov.w	r2, #0
 8006296:	f04f 0300 	mov.w	r3, #0
 800629a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800629e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80062a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80062a6:	ebb2 0408 	subs.w	r4, r2, r8
 80062aa:	eb63 0509 	sbc.w	r5, r3, r9
 80062ae:	f04f 0200 	mov.w	r2, #0
 80062b2:	f04f 0300 	mov.w	r3, #0
 80062b6:	00eb      	lsls	r3, r5, #3
 80062b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062bc:	00e2      	lsls	r2, r4, #3
 80062be:	4614      	mov	r4, r2
 80062c0:	461d      	mov	r5, r3
 80062c2:	eb14 030a 	adds.w	r3, r4, sl
 80062c6:	603b      	str	r3, [r7, #0]
 80062c8:	eb45 030b 	adc.w	r3, r5, fp
 80062cc:	607b      	str	r3, [r7, #4]
 80062ce:	f04f 0200 	mov.w	r2, #0
 80062d2:	f04f 0300 	mov.w	r3, #0
 80062d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062da:	4629      	mov	r1, r5
 80062dc:	028b      	lsls	r3, r1, #10
 80062de:	4621      	mov	r1, r4
 80062e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062e4:	4621      	mov	r1, r4
 80062e6:	028a      	lsls	r2, r1, #10
 80062e8:	4610      	mov	r0, r2
 80062ea:	4619      	mov	r1, r3
 80062ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ee:	2200      	movs	r2, #0
 80062f0:	60bb      	str	r3, [r7, #8]
 80062f2:	60fa      	str	r2, [r7, #12]
 80062f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062f8:	f7f9 ffc2 	bl	8000280 <__aeabi_uldivmod>
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	4613      	mov	r3, r2
 8006302:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006304:	4b0b      	ldr	r3, [pc, #44]	; (8006334 <HAL_RCC_GetSysClockFreq+0x180>)
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	0c1b      	lsrs	r3, r3, #16
 800630a:	f003 0303 	and.w	r3, r3, #3
 800630e:	3301      	adds	r3, #1
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006314:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	fbb2 f3f3 	udiv	r3, r2, r3
 800631c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800631e:	e002      	b.n	8006326 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006320:	4b05      	ldr	r3, [pc, #20]	; (8006338 <HAL_RCC_GetSysClockFreq+0x184>)
 8006322:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006324:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006328:	4618      	mov	r0, r3
 800632a:	3740      	adds	r7, #64	; 0x40
 800632c:	46bd      	mov	sp, r7
 800632e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006332:	bf00      	nop
 8006334:	40023800 	.word	0x40023800
 8006338:	00f42400 	.word	0x00f42400
 800633c:	00b71b00 	.word	0x00b71b00

08006340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006344:	4b03      	ldr	r3, [pc, #12]	; (8006354 <HAL_RCC_GetHCLKFreq+0x14>)
 8006346:	681b      	ldr	r3, [r3, #0]
}
 8006348:	4618      	mov	r0, r3
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	20000004 	.word	0x20000004

08006358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800635c:	f7ff fff0 	bl	8006340 <HAL_RCC_GetHCLKFreq>
 8006360:	4602      	mov	r2, r0
 8006362:	4b05      	ldr	r3, [pc, #20]	; (8006378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	0a9b      	lsrs	r3, r3, #10
 8006368:	f003 0307 	and.w	r3, r3, #7
 800636c:	4903      	ldr	r1, [pc, #12]	; (800637c <HAL_RCC_GetPCLK1Freq+0x24>)
 800636e:	5ccb      	ldrb	r3, [r1, r3]
 8006370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006374:	4618      	mov	r0, r3
 8006376:	bd80      	pop	{r7, pc}
 8006378:	40023800 	.word	0x40023800
 800637c:	0800bc00 	.word	0x0800bc00

08006380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006384:	f7ff ffdc 	bl	8006340 <HAL_RCC_GetHCLKFreq>
 8006388:	4602      	mov	r2, r0
 800638a:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	0b5b      	lsrs	r3, r3, #13
 8006390:	f003 0307 	and.w	r3, r3, #7
 8006394:	4903      	ldr	r1, [pc, #12]	; (80063a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006396:	5ccb      	ldrb	r3, [r1, r3]
 8006398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800639c:	4618      	mov	r0, r3
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	40023800 	.word	0x40023800
 80063a4:	0800bc00 	.word	0x0800bc00

080063a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e07b      	b.n	80064b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d108      	bne.n	80063d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063ca:	d009      	beq.n	80063e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	61da      	str	r2, [r3, #28]
 80063d2:	e005      	b.n	80063e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d106      	bne.n	8006400 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7fb fcf6 	bl	8001dec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2202      	movs	r2, #2
 8006404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006416:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006428:	431a      	orrs	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	431a      	orrs	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	431a      	orrs	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006450:	431a      	orrs	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800645a:	431a      	orrs	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006464:	ea42 0103 	orr.w	r1, r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	0c1b      	lsrs	r3, r3, #16
 800647e:	f003 0104 	and.w	r1, r3, #4
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006486:	f003 0210 	and.w	r2, r3, #16
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	69da      	ldr	r2, [r3, #28]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b088      	sub	sp, #32
 80064be:	af00      	add	r7, sp, #0
 80064c0:	60f8      	str	r0, [r7, #12]
 80064c2:	60b9      	str	r1, [r7, #8]
 80064c4:	603b      	str	r3, [r7, #0]
 80064c6:	4613      	mov	r3, r2
 80064c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d101      	bne.n	80064dc <HAL_SPI_Transmit+0x22>
 80064d8:	2302      	movs	r3, #2
 80064da:	e126      	b.n	800672a <HAL_SPI_Transmit+0x270>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064e4:	f7fc fc7a 	bl	8002ddc <HAL_GetTick>
 80064e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80064ea:	88fb      	ldrh	r3, [r7, #6]
 80064ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d002      	beq.n	8006500 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80064fa:	2302      	movs	r3, #2
 80064fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064fe:	e10b      	b.n	8006718 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d002      	beq.n	800650c <HAL_SPI_Transmit+0x52>
 8006506:	88fb      	ldrh	r3, [r7, #6]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d102      	bne.n	8006512 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006510:	e102      	b.n	8006718 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2203      	movs	r2, #3
 8006516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	88fa      	ldrh	r2, [r7, #6]
 800652a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	88fa      	ldrh	r2, [r7, #6]
 8006530:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006558:	d10f      	bne.n	800657a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006568:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006578:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006584:	2b40      	cmp	r3, #64	; 0x40
 8006586:	d007      	beq.n	8006598 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006596:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065a0:	d14b      	bne.n	800663a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d002      	beq.n	80065b0 <HAL_SPI_Transmit+0xf6>
 80065aa:	8afb      	ldrh	r3, [r7, #22]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d13e      	bne.n	800662e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b4:	881a      	ldrh	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c0:	1c9a      	adds	r2, r3, #2
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	3b01      	subs	r3, #1
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80065d4:	e02b      	b.n	800662e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d112      	bne.n	800660a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e8:	881a      	ldrh	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f4:	1c9a      	adds	r2, r3, #2
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065fe:	b29b      	uxth	r3, r3
 8006600:	3b01      	subs	r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	86da      	strh	r2, [r3, #54]	; 0x36
 8006608:	e011      	b.n	800662e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800660a:	f7fc fbe7 	bl	8002ddc <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	429a      	cmp	r2, r3
 8006618:	d803      	bhi.n	8006622 <HAL_SPI_Transmit+0x168>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006620:	d102      	bne.n	8006628 <HAL_SPI_Transmit+0x16e>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d102      	bne.n	800662e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800662c:	e074      	b.n	8006718 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006632:	b29b      	uxth	r3, r3
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1ce      	bne.n	80065d6 <HAL_SPI_Transmit+0x11c>
 8006638:	e04c      	b.n	80066d4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <HAL_SPI_Transmit+0x18e>
 8006642:	8afb      	ldrh	r3, [r7, #22]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d140      	bne.n	80066ca <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	330c      	adds	r3, #12
 8006652:	7812      	ldrb	r2, [r2, #0]
 8006654:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665a:	1c5a      	adds	r2, r3, #1
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006664:	b29b      	uxth	r3, r3
 8006666:	3b01      	subs	r3, #1
 8006668:	b29a      	uxth	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800666e:	e02c      	b.n	80066ca <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b02      	cmp	r3, #2
 800667c:	d113      	bne.n	80066a6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	330c      	adds	r3, #12
 8006688:	7812      	ldrb	r2, [r2, #0]
 800668a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006690:	1c5a      	adds	r2, r3, #1
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800669a:	b29b      	uxth	r3, r3
 800669c:	3b01      	subs	r3, #1
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80066a4:	e011      	b.n	80066ca <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066a6:	f7fc fb99 	bl	8002ddc <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d803      	bhi.n	80066be <HAL_SPI_Transmit+0x204>
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066bc:	d102      	bne.n	80066c4 <HAL_SPI_Transmit+0x20a>
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d102      	bne.n	80066ca <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80066c8:	e026      	b.n	8006718 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1cd      	bne.n	8006670 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 fa55 	bl	8006b88 <SPI_EndRxTxTransaction>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2220      	movs	r2, #32
 80066e8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10a      	bne.n	8006708 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066f2:	2300      	movs	r3, #0
 80066f4:	613b      	str	r3, [r7, #16]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	613b      	str	r3, [r7, #16]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	613b      	str	r3, [r7, #16]
 8006706:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670c:	2b00      	cmp	r3, #0
 800670e:	d002      	beq.n	8006716 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	77fb      	strb	r3, [r7, #31]
 8006714:	e000      	b.n	8006718 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006716:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006728:	7ffb      	ldrb	r3, [r7, #31]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3720      	adds	r7, #32
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b08c      	sub	sp, #48	; 0x30
 8006736:	af00      	add	r7, sp, #0
 8006738:	60f8      	str	r0, [r7, #12]
 800673a:	60b9      	str	r1, [r7, #8]
 800673c:	607a      	str	r2, [r7, #4]
 800673e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006740:	2301      	movs	r3, #1
 8006742:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006750:	2b01      	cmp	r3, #1
 8006752:	d101      	bne.n	8006758 <HAL_SPI_TransmitReceive+0x26>
 8006754:	2302      	movs	r3, #2
 8006756:	e18a      	b.n	8006a6e <HAL_SPI_TransmitReceive+0x33c>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006760:	f7fc fb3c 	bl	8002ddc <HAL_GetTick>
 8006764:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800676c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006776:	887b      	ldrh	r3, [r7, #2]
 8006778:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800677a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800677e:	2b01      	cmp	r3, #1
 8006780:	d00f      	beq.n	80067a2 <HAL_SPI_TransmitReceive+0x70>
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006788:	d107      	bne.n	800679a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d103      	bne.n	800679a <HAL_SPI_TransmitReceive+0x68>
 8006792:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006796:	2b04      	cmp	r3, #4
 8006798:	d003      	beq.n	80067a2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800679a:	2302      	movs	r3, #2
 800679c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80067a0:	e15b      	b.n	8006a5a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d005      	beq.n	80067b4 <HAL_SPI_TransmitReceive+0x82>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d002      	beq.n	80067b4 <HAL_SPI_TransmitReceive+0x82>
 80067ae:	887b      	ldrh	r3, [r7, #2]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d103      	bne.n	80067bc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80067ba:	e14e      	b.n	8006a5a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b04      	cmp	r3, #4
 80067c6:	d003      	beq.n	80067d0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2205      	movs	r2, #5
 80067cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	887a      	ldrh	r2, [r7, #2]
 80067e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	887a      	ldrh	r2, [r7, #2]
 80067e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	887a      	ldrh	r2, [r7, #2]
 80067f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	887a      	ldrh	r2, [r7, #2]
 80067f8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006810:	2b40      	cmp	r3, #64	; 0x40
 8006812:	d007      	beq.n	8006824 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006822:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800682c:	d178      	bne.n	8006920 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d002      	beq.n	800683c <HAL_SPI_TransmitReceive+0x10a>
 8006836:	8b7b      	ldrh	r3, [r7, #26]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d166      	bne.n	800690a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006840:	881a      	ldrh	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684c:	1c9a      	adds	r2, r3, #2
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006856:	b29b      	uxth	r3, r3
 8006858:	3b01      	subs	r3, #1
 800685a:	b29a      	uxth	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006860:	e053      	b.n	800690a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 0302 	and.w	r3, r3, #2
 800686c:	2b02      	cmp	r3, #2
 800686e:	d11b      	bne.n	80068a8 <HAL_SPI_TransmitReceive+0x176>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006874:	b29b      	uxth	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d016      	beq.n	80068a8 <HAL_SPI_TransmitReceive+0x176>
 800687a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687c:	2b01      	cmp	r3, #1
 800687e:	d113      	bne.n	80068a8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006884:	881a      	ldrh	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006890:	1c9a      	adds	r2, r3, #2
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800689a:	b29b      	uxth	r3, r3
 800689c:	3b01      	subs	r3, #1
 800689e:	b29a      	uxth	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d119      	bne.n	80068ea <HAL_SPI_TransmitReceive+0x1b8>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d014      	beq.n	80068ea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ca:	b292      	uxth	r2, r2
 80068cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	1c9a      	adds	r2, r3, #2
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068dc:	b29b      	uxth	r3, r3
 80068de:	3b01      	subs	r3, #1
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068e6:	2301      	movs	r3, #1
 80068e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80068ea:	f7fc fa77 	bl	8002ddc <HAL_GetTick>
 80068ee:	4602      	mov	r2, r0
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d807      	bhi.n	800690a <HAL_SPI_TransmitReceive+0x1d8>
 80068fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006900:	d003      	beq.n	800690a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006908:	e0a7      	b.n	8006a5a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800690e:	b29b      	uxth	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1a6      	bne.n	8006862 <HAL_SPI_TransmitReceive+0x130>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006918:	b29b      	uxth	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1a1      	bne.n	8006862 <HAL_SPI_TransmitReceive+0x130>
 800691e:	e07c      	b.n	8006a1a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <HAL_SPI_TransmitReceive+0x1fc>
 8006928:	8b7b      	ldrh	r3, [r7, #26]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d16b      	bne.n	8006a06 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	330c      	adds	r3, #12
 8006938:	7812      	ldrb	r2, [r2, #0]
 800693a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800694a:	b29b      	uxth	r3, r3
 800694c:	3b01      	subs	r3, #1
 800694e:	b29a      	uxth	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006954:	e057      	b.n	8006a06 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b02      	cmp	r3, #2
 8006962:	d11c      	bne.n	800699e <HAL_SPI_TransmitReceive+0x26c>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d017      	beq.n	800699e <HAL_SPI_TransmitReceive+0x26c>
 800696e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006970:	2b01      	cmp	r3, #1
 8006972:	d114      	bne.n	800699e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	330c      	adds	r3, #12
 800697e:	7812      	ldrb	r2, [r2, #0]
 8006980:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006990:	b29b      	uxth	r3, r3
 8006992:	3b01      	subs	r3, #1
 8006994:	b29a      	uxth	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d119      	bne.n	80069e0 <HAL_SPI_TransmitReceive+0x2ae>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d014      	beq.n	80069e0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68da      	ldr	r2, [r3, #12]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c0:	b2d2      	uxtb	r2, r2
 80069c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	3b01      	subs	r3, #1
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069dc:	2301      	movs	r3, #1
 80069de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80069e0:	f7fc f9fc 	bl	8002ddc <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d803      	bhi.n	80069f8 <HAL_SPI_TransmitReceive+0x2c6>
 80069f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f6:	d102      	bne.n	80069fe <HAL_SPI_TransmitReceive+0x2cc>
 80069f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d103      	bne.n	8006a06 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006a04:	e029      	b.n	8006a5a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1a2      	bne.n	8006956 <HAL_SPI_TransmitReceive+0x224>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d19d      	bne.n	8006956 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f000 f8b2 	bl	8006b88 <SPI_EndRxTxTransaction>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d006      	beq.n	8006a38 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2220      	movs	r2, #32
 8006a34:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006a36:	e010      	b.n	8006a5a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10b      	bne.n	8006a58 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a40:	2300      	movs	r3, #0
 8006a42:	617b      	str	r3, [r7, #20]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	617b      	str	r3, [r7, #20]
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	e000      	b.n	8006a5a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006a58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3730      	adds	r7, #48	; 0x30
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	603b      	str	r3, [r7, #0]
 8006a84:	4613      	mov	r3, r2
 8006a86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a88:	f7fc f9a8 	bl	8002ddc <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a90:	1a9b      	subs	r3, r3, r2
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	4413      	add	r3, r2
 8006a96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a98:	f7fc f9a0 	bl	8002ddc <HAL_GetTick>
 8006a9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a9e:	4b39      	ldr	r3, [pc, #228]	; (8006b84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	015b      	lsls	r3, r3, #5
 8006aa4:	0d1b      	lsrs	r3, r3, #20
 8006aa6:	69fa      	ldr	r2, [r7, #28]
 8006aa8:	fb02 f303 	mul.w	r3, r2, r3
 8006aac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006aae:	e054      	b.n	8006b5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab6:	d050      	beq.n	8006b5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ab8:	f7fc f990 	bl	8002ddc <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	69fa      	ldr	r2, [r7, #28]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d902      	bls.n	8006ace <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d13d      	bne.n	8006b4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006adc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ae6:	d111      	bne.n	8006b0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006af0:	d004      	beq.n	8006afc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006afa:	d107      	bne.n	8006b0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b14:	d10f      	bne.n	8006b36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e017      	b.n	8006b7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b50:	2300      	movs	r3, #0
 8006b52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	4013      	ands	r3, r2
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	bf0c      	ite	eq
 8006b6a:	2301      	moveq	r3, #1
 8006b6c:	2300      	movne	r3, #0
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	461a      	mov	r2, r3
 8006b72:	79fb      	ldrb	r3, [r7, #7]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d19b      	bne.n	8006ab0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3720      	adds	r7, #32
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	20000004 	.word	0x20000004

08006b88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af02      	add	r7, sp, #8
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b94:	4b1b      	ldr	r3, [pc, #108]	; (8006c04 <SPI_EndRxTxTransaction+0x7c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a1b      	ldr	r2, [pc, #108]	; (8006c08 <SPI_EndRxTxTransaction+0x80>)
 8006b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b9e:	0d5b      	lsrs	r3, r3, #21
 8006ba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ba4:	fb02 f303 	mul.w	r3, r2, r3
 8006ba8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bb2:	d112      	bne.n	8006bda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	2180      	movs	r1, #128	; 0x80
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f7ff ff5a 	bl	8006a78 <SPI_WaitFlagStateUntilTimeout>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d016      	beq.n	8006bf8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bce:	f043 0220 	orr.w	r2, r3, #32
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e00f      	b.n	8006bfa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00a      	beq.n	8006bf6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf0:	2b80      	cmp	r3, #128	; 0x80
 8006bf2:	d0f2      	beq.n	8006bda <SPI_EndRxTxTransaction+0x52>
 8006bf4:	e000      	b.n	8006bf8 <SPI_EndRxTxTransaction+0x70>
        break;
 8006bf6:	bf00      	nop
  }

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000004 	.word	0x20000004
 8006c08:	165e9f81 	.word	0x165e9f81

08006c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e041      	b.n	8006ca2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d106      	bne.n	8006c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7fb f922 	bl	8001e7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	3304      	adds	r3, #4
 8006c48:	4619      	mov	r1, r3
 8006c4a:	4610      	mov	r0, r2
 8006c4c:	f000 f950 	bl	8006ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
	...

08006cac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d001      	beq.n	8006cc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e03c      	b.n	8006d3e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a1e      	ldr	r2, [pc, #120]	; (8006d4c <HAL_TIM_Base_Start+0xa0>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d018      	beq.n	8006d08 <HAL_TIM_Base_Start+0x5c>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cde:	d013      	beq.n	8006d08 <HAL_TIM_Base_Start+0x5c>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a1a      	ldr	r2, [pc, #104]	; (8006d50 <HAL_TIM_Base_Start+0xa4>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d00e      	beq.n	8006d08 <HAL_TIM_Base_Start+0x5c>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a19      	ldr	r2, [pc, #100]	; (8006d54 <HAL_TIM_Base_Start+0xa8>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d009      	beq.n	8006d08 <HAL_TIM_Base_Start+0x5c>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a17      	ldr	r2, [pc, #92]	; (8006d58 <HAL_TIM_Base_Start+0xac>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d004      	beq.n	8006d08 <HAL_TIM_Base_Start+0x5c>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a16      	ldr	r2, [pc, #88]	; (8006d5c <HAL_TIM_Base_Start+0xb0>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d111      	bne.n	8006d2c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f003 0307 	and.w	r3, r3, #7
 8006d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2b06      	cmp	r3, #6
 8006d18:	d010      	beq.n	8006d3c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f042 0201 	orr.w	r2, r2, #1
 8006d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d2a:	e007      	b.n	8006d3c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f042 0201 	orr.w	r2, r2, #1
 8006d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	40010000 	.word	0x40010000
 8006d50:	40000400 	.word	0x40000400
 8006d54:	40000800 	.word	0x40000800
 8006d58:	40000c00 	.word	0x40000c00
 8006d5c:	40014000 	.word	0x40014000

08006d60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_TIM_ConfigClockSource+0x1c>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e0b4      	b.n	8006ee6 <HAL_TIM_ConfigClockSource+0x186>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006da2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006db4:	d03e      	beq.n	8006e34 <HAL_TIM_ConfigClockSource+0xd4>
 8006db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dba:	f200 8087 	bhi.w	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc2:	f000 8086 	beq.w	8006ed2 <HAL_TIM_ConfigClockSource+0x172>
 8006dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dca:	d87f      	bhi.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006dcc:	2b70      	cmp	r3, #112	; 0x70
 8006dce:	d01a      	beq.n	8006e06 <HAL_TIM_ConfigClockSource+0xa6>
 8006dd0:	2b70      	cmp	r3, #112	; 0x70
 8006dd2:	d87b      	bhi.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006dd4:	2b60      	cmp	r3, #96	; 0x60
 8006dd6:	d050      	beq.n	8006e7a <HAL_TIM_ConfigClockSource+0x11a>
 8006dd8:	2b60      	cmp	r3, #96	; 0x60
 8006dda:	d877      	bhi.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006ddc:	2b50      	cmp	r3, #80	; 0x50
 8006dde:	d03c      	beq.n	8006e5a <HAL_TIM_ConfigClockSource+0xfa>
 8006de0:	2b50      	cmp	r3, #80	; 0x50
 8006de2:	d873      	bhi.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006de4:	2b40      	cmp	r3, #64	; 0x40
 8006de6:	d058      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0x13a>
 8006de8:	2b40      	cmp	r3, #64	; 0x40
 8006dea:	d86f      	bhi.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006dec:	2b30      	cmp	r3, #48	; 0x30
 8006dee:	d064      	beq.n	8006eba <HAL_TIM_ConfigClockSource+0x15a>
 8006df0:	2b30      	cmp	r3, #48	; 0x30
 8006df2:	d86b      	bhi.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006df4:	2b20      	cmp	r3, #32
 8006df6:	d060      	beq.n	8006eba <HAL_TIM_ConfigClockSource+0x15a>
 8006df8:	2b20      	cmp	r3, #32
 8006dfa:	d867      	bhi.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d05c      	beq.n	8006eba <HAL_TIM_ConfigClockSource+0x15a>
 8006e00:	2b10      	cmp	r3, #16
 8006e02:	d05a      	beq.n	8006eba <HAL_TIM_ConfigClockSource+0x15a>
 8006e04:	e062      	b.n	8006ecc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6818      	ldr	r0, [r3, #0]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	6899      	ldr	r1, [r3, #8]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	f000 f965 	bl	80070e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	609a      	str	r2, [r3, #8]
      break;
 8006e32:	e04f      	b.n	8006ed4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6818      	ldr	r0, [r3, #0]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	6899      	ldr	r1, [r3, #8]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f000 f94e 	bl	80070e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689a      	ldr	r2, [r3, #8]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e56:	609a      	str	r2, [r3, #8]
      break;
 8006e58:	e03c      	b.n	8006ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6818      	ldr	r0, [r3, #0]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	6859      	ldr	r1, [r3, #4]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	461a      	mov	r2, r3
 8006e68:	f000 f8c2 	bl	8006ff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2150      	movs	r1, #80	; 0x50
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 f91b 	bl	80070ae <TIM_ITRx_SetConfig>
      break;
 8006e78:	e02c      	b.n	8006ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6818      	ldr	r0, [r3, #0]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	6859      	ldr	r1, [r3, #4]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	461a      	mov	r2, r3
 8006e88:	f000 f8e1 	bl	800704e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2160      	movs	r1, #96	; 0x60
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 f90b 	bl	80070ae <TIM_ITRx_SetConfig>
      break;
 8006e98:	e01c      	b.n	8006ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6818      	ldr	r0, [r3, #0]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	6859      	ldr	r1, [r3, #4]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	f000 f8a2 	bl	8006ff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2140      	movs	r1, #64	; 0x40
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 f8fb 	bl	80070ae <TIM_ITRx_SetConfig>
      break;
 8006eb8:	e00c      	b.n	8006ed4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	f000 f8f2 	bl	80070ae <TIM_ITRx_SetConfig>
      break;
 8006eca:	e003      	b.n	8006ed4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	73fb      	strb	r3, [r7, #15]
      break;
 8006ed0:	e000      	b.n	8006ed4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ed2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
	...

08006ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a34      	ldr	r2, [pc, #208]	; (8006fd4 <TIM_Base_SetConfig+0xe4>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d00f      	beq.n	8006f28 <TIM_Base_SetConfig+0x38>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f0e:	d00b      	beq.n	8006f28 <TIM_Base_SetConfig+0x38>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a31      	ldr	r2, [pc, #196]	; (8006fd8 <TIM_Base_SetConfig+0xe8>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d007      	beq.n	8006f28 <TIM_Base_SetConfig+0x38>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a30      	ldr	r2, [pc, #192]	; (8006fdc <TIM_Base_SetConfig+0xec>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d003      	beq.n	8006f28 <TIM_Base_SetConfig+0x38>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a2f      	ldr	r2, [pc, #188]	; (8006fe0 <TIM_Base_SetConfig+0xf0>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d108      	bne.n	8006f3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a25      	ldr	r2, [pc, #148]	; (8006fd4 <TIM_Base_SetConfig+0xe4>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d01b      	beq.n	8006f7a <TIM_Base_SetConfig+0x8a>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f48:	d017      	beq.n	8006f7a <TIM_Base_SetConfig+0x8a>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a22      	ldr	r2, [pc, #136]	; (8006fd8 <TIM_Base_SetConfig+0xe8>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d013      	beq.n	8006f7a <TIM_Base_SetConfig+0x8a>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a21      	ldr	r2, [pc, #132]	; (8006fdc <TIM_Base_SetConfig+0xec>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d00f      	beq.n	8006f7a <TIM_Base_SetConfig+0x8a>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a20      	ldr	r2, [pc, #128]	; (8006fe0 <TIM_Base_SetConfig+0xf0>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d00b      	beq.n	8006f7a <TIM_Base_SetConfig+0x8a>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a1f      	ldr	r2, [pc, #124]	; (8006fe4 <TIM_Base_SetConfig+0xf4>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d007      	beq.n	8006f7a <TIM_Base_SetConfig+0x8a>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a1e      	ldr	r2, [pc, #120]	; (8006fe8 <TIM_Base_SetConfig+0xf8>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d003      	beq.n	8006f7a <TIM_Base_SetConfig+0x8a>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a1d      	ldr	r2, [pc, #116]	; (8006fec <TIM_Base_SetConfig+0xfc>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d108      	bne.n	8006f8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	689a      	ldr	r2, [r3, #8]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a08      	ldr	r2, [pc, #32]	; (8006fd4 <TIM_Base_SetConfig+0xe4>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d103      	bne.n	8006fc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	691a      	ldr	r2, [r3, #16]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	615a      	str	r2, [r3, #20]
}
 8006fc6:	bf00      	nop
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	40010000 	.word	0x40010000
 8006fd8:	40000400 	.word	0x40000400
 8006fdc:	40000800 	.word	0x40000800
 8006fe0:	40000c00 	.word	0x40000c00
 8006fe4:	40014000 	.word	0x40014000
 8006fe8:	40014400 	.word	0x40014400
 8006fec:	40014800 	.word	0x40014800

08006ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b087      	sub	sp, #28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f023 0201 	bic.w	r2, r3, #1
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800701a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	011b      	lsls	r3, r3, #4
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	4313      	orrs	r3, r2
 8007024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f023 030a 	bic.w	r3, r3, #10
 800702c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	4313      	orrs	r3, r2
 8007034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	621a      	str	r2, [r3, #32]
}
 8007042:	bf00      	nop
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800704e:	b480      	push	{r7}
 8007050:	b087      	sub	sp, #28
 8007052:	af00      	add	r7, sp, #0
 8007054:	60f8      	str	r0, [r7, #12]
 8007056:	60b9      	str	r1, [r7, #8]
 8007058:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	f023 0210 	bic.w	r2, r3, #16
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007078:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	031b      	lsls	r3, r3, #12
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	4313      	orrs	r3, r2
 8007082:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800708a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	011b      	lsls	r3, r3, #4
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	4313      	orrs	r3, r2
 8007094:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	621a      	str	r2, [r3, #32]
}
 80070a2:	bf00      	nop
 80070a4:	371c      	adds	r7, #28
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b085      	sub	sp, #20
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
 80070b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	f043 0307 	orr.w	r3, r3, #7
 80070d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	609a      	str	r2, [r3, #8]
}
 80070d8:	bf00      	nop
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
 80070f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	021a      	lsls	r2, r3, #8
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	431a      	orrs	r2, r3
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	4313      	orrs	r3, r2
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	4313      	orrs	r3, r2
 8007110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	609a      	str	r2, [r3, #8]
}
 8007118:	bf00      	nop
 800711a:	371c      	adds	r7, #28
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007134:	2b01      	cmp	r3, #1
 8007136:	d101      	bne.n	800713c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007138:	2302      	movs	r3, #2
 800713a:	e050      	b.n	80071de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007162:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	4313      	orrs	r3, r2
 800716c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a1c      	ldr	r2, [pc, #112]	; (80071ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d018      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007188:	d013      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a18      	ldr	r2, [pc, #96]	; (80071f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d00e      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a16      	ldr	r2, [pc, #88]	; (80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d009      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a15      	ldr	r2, [pc, #84]	; (80071f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d004      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a13      	ldr	r2, [pc, #76]	; (80071fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d10c      	bne.n	80071cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	40010000 	.word	0x40010000
 80071f0:	40000400 	.word	0x40000400
 80071f4:	40000800 	.word	0x40000800
 80071f8:	40000c00 	.word	0x40000c00
 80071fc:	40014000 	.word	0x40014000

08007200 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e03f      	b.n	8007292 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d106      	bne.n	800722c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7fa fe5e 	bl	8001ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2224      	movs	r2, #36	; 0x24
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007242:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f9cb 	bl	80075e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	691a      	ldr	r2, [r3, #16]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007258:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	695a      	ldr	r2, [r3, #20]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007268:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68da      	ldr	r2, [r3, #12]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007278:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2220      	movs	r2, #32
 8007284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2220      	movs	r2, #32
 800728c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b08a      	sub	sp, #40	; 0x28
 800729e:	af02      	add	r7, sp, #8
 80072a0:	60f8      	str	r0, [r7, #12]
 80072a2:	60b9      	str	r1, [r7, #8]
 80072a4:	603b      	str	r3, [r7, #0]
 80072a6:	4613      	mov	r3, r2
 80072a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80072aa:	2300      	movs	r3, #0
 80072ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b20      	cmp	r3, #32
 80072b8:	d17c      	bne.n	80073b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <HAL_UART_Transmit+0x2c>
 80072c0:	88fb      	ldrh	r3, [r7, #6]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e075      	b.n	80073b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d101      	bne.n	80072d8 <HAL_UART_Transmit+0x3e>
 80072d4:	2302      	movs	r3, #2
 80072d6:	e06e      	b.n	80073b6 <HAL_UART_Transmit+0x11c>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2221      	movs	r2, #33	; 0x21
 80072ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072ee:	f7fb fd75 	bl	8002ddc <HAL_GetTick>
 80072f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	88fa      	ldrh	r2, [r7, #6]
 80072f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	88fa      	ldrh	r2, [r7, #6]
 80072fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007308:	d108      	bne.n	800731c <HAL_UART_Transmit+0x82>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d104      	bne.n	800731c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007312:	2300      	movs	r3, #0
 8007314:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	61bb      	str	r3, [r7, #24]
 800731a:	e003      	b.n	8007324 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007320:	2300      	movs	r3, #0
 8007322:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800732c:	e02a      	b.n	8007384 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	2200      	movs	r2, #0
 8007336:	2180      	movs	r1, #128	; 0x80
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f000 f8e2 	bl	8007502 <UART_WaitOnFlagUntilTimeout>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d001      	beq.n	8007348 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e036      	b.n	80073b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10b      	bne.n	8007366 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	881b      	ldrh	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800735c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	3302      	adds	r3, #2
 8007362:	61bb      	str	r3, [r7, #24]
 8007364:	e007      	b.n	8007376 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	781a      	ldrb	r2, [r3, #0]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	3301      	adds	r3, #1
 8007374:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800737a:	b29b      	uxth	r3, r3
 800737c:	3b01      	subs	r3, #1
 800737e:	b29a      	uxth	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007388:	b29b      	uxth	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1cf      	bne.n	800732e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2200      	movs	r2, #0
 8007396:	2140      	movs	r1, #64	; 0x40
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 f8b2 	bl	8007502 <UART_WaitOnFlagUntilTimeout>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e006      	b.n	80073b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2220      	movs	r2, #32
 80073ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	e000      	b.n	80073b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80073b4:	2302      	movs	r3, #2
  }
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3720      	adds	r7, #32
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b08a      	sub	sp, #40	; 0x28
 80073c2:	af02      	add	r7, sp, #8
 80073c4:	60f8      	str	r0, [r7, #12]
 80073c6:	60b9      	str	r1, [r7, #8]
 80073c8:	603b      	str	r3, [r7, #0]
 80073ca:	4613      	mov	r3, r2
 80073cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b20      	cmp	r3, #32
 80073dc:	f040 808c 	bne.w	80074f8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <HAL_UART_Receive+0x2e>
 80073e6:	88fb      	ldrh	r3, [r7, #6]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d101      	bne.n	80073f0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e084      	b.n	80074fa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d101      	bne.n	80073fe <HAL_UART_Receive+0x40>
 80073fa:	2302      	movs	r3, #2
 80073fc:	e07d      	b.n	80074fa <HAL_UART_Receive+0x13c>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2222      	movs	r2, #34	; 0x22
 8007410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800741a:	f7fb fcdf 	bl	8002ddc <HAL_GetTick>
 800741e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	88fa      	ldrh	r2, [r7, #6]
 8007424:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	88fa      	ldrh	r2, [r7, #6]
 800742a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007434:	d108      	bne.n	8007448 <HAL_UART_Receive+0x8a>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d104      	bne.n	8007448 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800743e:	2300      	movs	r3, #0
 8007440:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	61bb      	str	r3, [r7, #24]
 8007446:	e003      	b.n	8007450 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800744c:	2300      	movs	r3, #0
 800744e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007458:	e043      	b.n	80074e2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2200      	movs	r2, #0
 8007462:	2120      	movs	r1, #32
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 f84c 	bl	8007502 <UART_WaitOnFlagUntilTimeout>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d001      	beq.n	8007474 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e042      	b.n	80074fa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10c      	bne.n	8007494 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	b29b      	uxth	r3, r3
 8007482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007486:	b29a      	uxth	r2, r3
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	3302      	adds	r3, #2
 8007490:	61bb      	str	r3, [r7, #24]
 8007492:	e01f      	b.n	80074d4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800749c:	d007      	beq.n	80074ae <HAL_UART_Receive+0xf0>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10a      	bne.n	80074bc <HAL_UART_Receive+0xfe>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d106      	bne.n	80074bc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	701a      	strb	r2, [r3, #0]
 80074ba:	e008      	b.n	80074ce <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	3301      	adds	r3, #1
 80074d2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074d8:	b29b      	uxth	r3, r3
 80074da:	3b01      	subs	r3, #1
 80074dc:	b29a      	uxth	r2, r3
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1b6      	bne.n	800745a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2220      	movs	r2, #32
 80074f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	e000      	b.n	80074fa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80074f8:	2302      	movs	r3, #2
  }
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3720      	adds	r7, #32
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b090      	sub	sp, #64	; 0x40
 8007506:	af00      	add	r7, sp, #0
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	60b9      	str	r1, [r7, #8]
 800750c:	603b      	str	r3, [r7, #0]
 800750e:	4613      	mov	r3, r2
 8007510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007512:	e050      	b.n	80075b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751a:	d04c      	beq.n	80075b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800751c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800751e:	2b00      	cmp	r3, #0
 8007520:	d007      	beq.n	8007532 <UART_WaitOnFlagUntilTimeout+0x30>
 8007522:	f7fb fc5b 	bl	8002ddc <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800752e:	429a      	cmp	r2, r3
 8007530:	d241      	bcs.n	80075b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	330c      	adds	r3, #12
 8007538:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753c:	e853 3f00 	ldrex	r3, [r3]
 8007540:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007544:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	330c      	adds	r3, #12
 8007550:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007552:	637a      	str	r2, [r7, #52]	; 0x34
 8007554:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007556:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007558:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800755a:	e841 2300 	strex	r3, r2, [r1]
 800755e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1e5      	bne.n	8007532 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3314      	adds	r3, #20
 800756c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	e853 3f00 	ldrex	r3, [r3]
 8007574:	613b      	str	r3, [r7, #16]
   return(result);
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f023 0301 	bic.w	r3, r3, #1
 800757c:	63bb      	str	r3, [r7, #56]	; 0x38
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3314      	adds	r3, #20
 8007584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007586:	623a      	str	r2, [r7, #32]
 8007588:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758a:	69f9      	ldr	r1, [r7, #28]
 800758c:	6a3a      	ldr	r2, [r7, #32]
 800758e:	e841 2300 	strex	r3, r2, [r1]
 8007592:	61bb      	str	r3, [r7, #24]
   return(result);
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1e5      	bne.n	8007566 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2220      	movs	r2, #32
 800759e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e00f      	b.n	80075d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	4013      	ands	r3, r2
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	bf0c      	ite	eq
 80075c6:	2301      	moveq	r3, #1
 80075c8:	2300      	movne	r3, #0
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	461a      	mov	r2, r3
 80075ce:	79fb      	ldrb	r3, [r7, #7]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d09f      	beq.n	8007514 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3740      	adds	r7, #64	; 0x40
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
	...

080075e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075e4:	b0c0      	sub	sp, #256	; 0x100
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80075f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075fc:	68d9      	ldr	r1, [r3, #12]
 80075fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	ea40 0301 	orr.w	r3, r0, r1
 8007608:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800760a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800760e:	689a      	ldr	r2, [r3, #8]
 8007610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	431a      	orrs	r2, r3
 8007618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	431a      	orrs	r2, r3
 8007620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	4313      	orrs	r3, r2
 8007628:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800762c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007638:	f021 010c 	bic.w	r1, r1, #12
 800763c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007646:	430b      	orrs	r3, r1
 8007648:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800764a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800765a:	6999      	ldr	r1, [r3, #24]
 800765c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	ea40 0301 	orr.w	r3, r0, r1
 8007666:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	4b8f      	ldr	r3, [pc, #572]	; (80078ac <UART_SetConfig+0x2cc>)
 8007670:	429a      	cmp	r2, r3
 8007672:	d005      	beq.n	8007680 <UART_SetConfig+0xa0>
 8007674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	4b8d      	ldr	r3, [pc, #564]	; (80078b0 <UART_SetConfig+0x2d0>)
 800767c:	429a      	cmp	r2, r3
 800767e:	d104      	bne.n	800768a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007680:	f7fe fe7e 	bl	8006380 <HAL_RCC_GetPCLK2Freq>
 8007684:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007688:	e003      	b.n	8007692 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800768a:	f7fe fe65 	bl	8006358 <HAL_RCC_GetPCLK1Freq>
 800768e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007696:	69db      	ldr	r3, [r3, #28]
 8007698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800769c:	f040 810c 	bne.w	80078b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076a4:	2200      	movs	r2, #0
 80076a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80076ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80076b2:	4622      	mov	r2, r4
 80076b4:	462b      	mov	r3, r5
 80076b6:	1891      	adds	r1, r2, r2
 80076b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80076ba:	415b      	adcs	r3, r3
 80076bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80076c2:	4621      	mov	r1, r4
 80076c4:	eb12 0801 	adds.w	r8, r2, r1
 80076c8:	4629      	mov	r1, r5
 80076ca:	eb43 0901 	adc.w	r9, r3, r1
 80076ce:	f04f 0200 	mov.w	r2, #0
 80076d2:	f04f 0300 	mov.w	r3, #0
 80076d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076e2:	4690      	mov	r8, r2
 80076e4:	4699      	mov	r9, r3
 80076e6:	4623      	mov	r3, r4
 80076e8:	eb18 0303 	adds.w	r3, r8, r3
 80076ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076f0:	462b      	mov	r3, r5
 80076f2:	eb49 0303 	adc.w	r3, r9, r3
 80076f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80076fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007706:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800770a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800770e:	460b      	mov	r3, r1
 8007710:	18db      	adds	r3, r3, r3
 8007712:	653b      	str	r3, [r7, #80]	; 0x50
 8007714:	4613      	mov	r3, r2
 8007716:	eb42 0303 	adc.w	r3, r2, r3
 800771a:	657b      	str	r3, [r7, #84]	; 0x54
 800771c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007720:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007724:	f7f8 fdac 	bl	8000280 <__aeabi_uldivmod>
 8007728:	4602      	mov	r2, r0
 800772a:	460b      	mov	r3, r1
 800772c:	4b61      	ldr	r3, [pc, #388]	; (80078b4 <UART_SetConfig+0x2d4>)
 800772e:	fba3 2302 	umull	r2, r3, r3, r2
 8007732:	095b      	lsrs	r3, r3, #5
 8007734:	011c      	lsls	r4, r3, #4
 8007736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800773a:	2200      	movs	r2, #0
 800773c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007740:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007744:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007748:	4642      	mov	r2, r8
 800774a:	464b      	mov	r3, r9
 800774c:	1891      	adds	r1, r2, r2
 800774e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007750:	415b      	adcs	r3, r3
 8007752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007754:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007758:	4641      	mov	r1, r8
 800775a:	eb12 0a01 	adds.w	sl, r2, r1
 800775e:	4649      	mov	r1, r9
 8007760:	eb43 0b01 	adc.w	fp, r3, r1
 8007764:	f04f 0200 	mov.w	r2, #0
 8007768:	f04f 0300 	mov.w	r3, #0
 800776c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007770:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007774:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007778:	4692      	mov	sl, r2
 800777a:	469b      	mov	fp, r3
 800777c:	4643      	mov	r3, r8
 800777e:	eb1a 0303 	adds.w	r3, sl, r3
 8007782:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007786:	464b      	mov	r3, r9
 8007788:	eb4b 0303 	adc.w	r3, fp, r3
 800778c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800779c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80077a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80077a4:	460b      	mov	r3, r1
 80077a6:	18db      	adds	r3, r3, r3
 80077a8:	643b      	str	r3, [r7, #64]	; 0x40
 80077aa:	4613      	mov	r3, r2
 80077ac:	eb42 0303 	adc.w	r3, r2, r3
 80077b0:	647b      	str	r3, [r7, #68]	; 0x44
 80077b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80077b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80077ba:	f7f8 fd61 	bl	8000280 <__aeabi_uldivmod>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	4611      	mov	r1, r2
 80077c4:	4b3b      	ldr	r3, [pc, #236]	; (80078b4 <UART_SetConfig+0x2d4>)
 80077c6:	fba3 2301 	umull	r2, r3, r3, r1
 80077ca:	095b      	lsrs	r3, r3, #5
 80077cc:	2264      	movs	r2, #100	; 0x64
 80077ce:	fb02 f303 	mul.w	r3, r2, r3
 80077d2:	1acb      	subs	r3, r1, r3
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80077da:	4b36      	ldr	r3, [pc, #216]	; (80078b4 <UART_SetConfig+0x2d4>)
 80077dc:	fba3 2302 	umull	r2, r3, r3, r2
 80077e0:	095b      	lsrs	r3, r3, #5
 80077e2:	005b      	lsls	r3, r3, #1
 80077e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80077e8:	441c      	add	r4, r3
 80077ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077ee:	2200      	movs	r2, #0
 80077f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80077f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80077fc:	4642      	mov	r2, r8
 80077fe:	464b      	mov	r3, r9
 8007800:	1891      	adds	r1, r2, r2
 8007802:	63b9      	str	r1, [r7, #56]	; 0x38
 8007804:	415b      	adcs	r3, r3
 8007806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007808:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800780c:	4641      	mov	r1, r8
 800780e:	1851      	adds	r1, r2, r1
 8007810:	6339      	str	r1, [r7, #48]	; 0x30
 8007812:	4649      	mov	r1, r9
 8007814:	414b      	adcs	r3, r1
 8007816:	637b      	str	r3, [r7, #52]	; 0x34
 8007818:	f04f 0200 	mov.w	r2, #0
 800781c:	f04f 0300 	mov.w	r3, #0
 8007820:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007824:	4659      	mov	r1, fp
 8007826:	00cb      	lsls	r3, r1, #3
 8007828:	4651      	mov	r1, sl
 800782a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800782e:	4651      	mov	r1, sl
 8007830:	00ca      	lsls	r2, r1, #3
 8007832:	4610      	mov	r0, r2
 8007834:	4619      	mov	r1, r3
 8007836:	4603      	mov	r3, r0
 8007838:	4642      	mov	r2, r8
 800783a:	189b      	adds	r3, r3, r2
 800783c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007840:	464b      	mov	r3, r9
 8007842:	460a      	mov	r2, r1
 8007844:	eb42 0303 	adc.w	r3, r2, r3
 8007848:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800784c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007858:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800785c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007860:	460b      	mov	r3, r1
 8007862:	18db      	adds	r3, r3, r3
 8007864:	62bb      	str	r3, [r7, #40]	; 0x28
 8007866:	4613      	mov	r3, r2
 8007868:	eb42 0303 	adc.w	r3, r2, r3
 800786c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800786e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007872:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007876:	f7f8 fd03 	bl	8000280 <__aeabi_uldivmod>
 800787a:	4602      	mov	r2, r0
 800787c:	460b      	mov	r3, r1
 800787e:	4b0d      	ldr	r3, [pc, #52]	; (80078b4 <UART_SetConfig+0x2d4>)
 8007880:	fba3 1302 	umull	r1, r3, r3, r2
 8007884:	095b      	lsrs	r3, r3, #5
 8007886:	2164      	movs	r1, #100	; 0x64
 8007888:	fb01 f303 	mul.w	r3, r1, r3
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	00db      	lsls	r3, r3, #3
 8007890:	3332      	adds	r3, #50	; 0x32
 8007892:	4a08      	ldr	r2, [pc, #32]	; (80078b4 <UART_SetConfig+0x2d4>)
 8007894:	fba2 2303 	umull	r2, r3, r2, r3
 8007898:	095b      	lsrs	r3, r3, #5
 800789a:	f003 0207 	and.w	r2, r3, #7
 800789e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4422      	add	r2, r4
 80078a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80078a8:	e105      	b.n	8007ab6 <UART_SetConfig+0x4d6>
 80078aa:	bf00      	nop
 80078ac:	40011000 	.word	0x40011000
 80078b0:	40011400 	.word	0x40011400
 80078b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078bc:	2200      	movs	r2, #0
 80078be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80078c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80078ca:	4642      	mov	r2, r8
 80078cc:	464b      	mov	r3, r9
 80078ce:	1891      	adds	r1, r2, r2
 80078d0:	6239      	str	r1, [r7, #32]
 80078d2:	415b      	adcs	r3, r3
 80078d4:	627b      	str	r3, [r7, #36]	; 0x24
 80078d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078da:	4641      	mov	r1, r8
 80078dc:	1854      	adds	r4, r2, r1
 80078de:	4649      	mov	r1, r9
 80078e0:	eb43 0501 	adc.w	r5, r3, r1
 80078e4:	f04f 0200 	mov.w	r2, #0
 80078e8:	f04f 0300 	mov.w	r3, #0
 80078ec:	00eb      	lsls	r3, r5, #3
 80078ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078f2:	00e2      	lsls	r2, r4, #3
 80078f4:	4614      	mov	r4, r2
 80078f6:	461d      	mov	r5, r3
 80078f8:	4643      	mov	r3, r8
 80078fa:	18e3      	adds	r3, r4, r3
 80078fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007900:	464b      	mov	r3, r9
 8007902:	eb45 0303 	adc.w	r3, r5, r3
 8007906:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800790a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007916:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800791a:	f04f 0200 	mov.w	r2, #0
 800791e:	f04f 0300 	mov.w	r3, #0
 8007922:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007926:	4629      	mov	r1, r5
 8007928:	008b      	lsls	r3, r1, #2
 800792a:	4621      	mov	r1, r4
 800792c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007930:	4621      	mov	r1, r4
 8007932:	008a      	lsls	r2, r1, #2
 8007934:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007938:	f7f8 fca2 	bl	8000280 <__aeabi_uldivmod>
 800793c:	4602      	mov	r2, r0
 800793e:	460b      	mov	r3, r1
 8007940:	4b60      	ldr	r3, [pc, #384]	; (8007ac4 <UART_SetConfig+0x4e4>)
 8007942:	fba3 2302 	umull	r2, r3, r3, r2
 8007946:	095b      	lsrs	r3, r3, #5
 8007948:	011c      	lsls	r4, r3, #4
 800794a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800794e:	2200      	movs	r2, #0
 8007950:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007954:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007958:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800795c:	4642      	mov	r2, r8
 800795e:	464b      	mov	r3, r9
 8007960:	1891      	adds	r1, r2, r2
 8007962:	61b9      	str	r1, [r7, #24]
 8007964:	415b      	adcs	r3, r3
 8007966:	61fb      	str	r3, [r7, #28]
 8007968:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800796c:	4641      	mov	r1, r8
 800796e:	1851      	adds	r1, r2, r1
 8007970:	6139      	str	r1, [r7, #16]
 8007972:	4649      	mov	r1, r9
 8007974:	414b      	adcs	r3, r1
 8007976:	617b      	str	r3, [r7, #20]
 8007978:	f04f 0200 	mov.w	r2, #0
 800797c:	f04f 0300 	mov.w	r3, #0
 8007980:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007984:	4659      	mov	r1, fp
 8007986:	00cb      	lsls	r3, r1, #3
 8007988:	4651      	mov	r1, sl
 800798a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800798e:	4651      	mov	r1, sl
 8007990:	00ca      	lsls	r2, r1, #3
 8007992:	4610      	mov	r0, r2
 8007994:	4619      	mov	r1, r3
 8007996:	4603      	mov	r3, r0
 8007998:	4642      	mov	r2, r8
 800799a:	189b      	adds	r3, r3, r2
 800799c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079a0:	464b      	mov	r3, r9
 80079a2:	460a      	mov	r2, r1
 80079a4:	eb42 0303 	adc.w	r3, r2, r3
 80079a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80079ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80079b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80079b8:	f04f 0200 	mov.w	r2, #0
 80079bc:	f04f 0300 	mov.w	r3, #0
 80079c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80079c4:	4649      	mov	r1, r9
 80079c6:	008b      	lsls	r3, r1, #2
 80079c8:	4641      	mov	r1, r8
 80079ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079ce:	4641      	mov	r1, r8
 80079d0:	008a      	lsls	r2, r1, #2
 80079d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80079d6:	f7f8 fc53 	bl	8000280 <__aeabi_uldivmod>
 80079da:	4602      	mov	r2, r0
 80079dc:	460b      	mov	r3, r1
 80079de:	4b39      	ldr	r3, [pc, #228]	; (8007ac4 <UART_SetConfig+0x4e4>)
 80079e0:	fba3 1302 	umull	r1, r3, r3, r2
 80079e4:	095b      	lsrs	r3, r3, #5
 80079e6:	2164      	movs	r1, #100	; 0x64
 80079e8:	fb01 f303 	mul.w	r3, r1, r3
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	011b      	lsls	r3, r3, #4
 80079f0:	3332      	adds	r3, #50	; 0x32
 80079f2:	4a34      	ldr	r2, [pc, #208]	; (8007ac4 <UART_SetConfig+0x4e4>)
 80079f4:	fba2 2303 	umull	r2, r3, r2, r3
 80079f8:	095b      	lsrs	r3, r3, #5
 80079fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079fe:	441c      	add	r4, r3
 8007a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a04:	2200      	movs	r2, #0
 8007a06:	673b      	str	r3, [r7, #112]	; 0x70
 8007a08:	677a      	str	r2, [r7, #116]	; 0x74
 8007a0a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007a0e:	4642      	mov	r2, r8
 8007a10:	464b      	mov	r3, r9
 8007a12:	1891      	adds	r1, r2, r2
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	415b      	adcs	r3, r3
 8007a18:	60fb      	str	r3, [r7, #12]
 8007a1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a1e:	4641      	mov	r1, r8
 8007a20:	1851      	adds	r1, r2, r1
 8007a22:	6039      	str	r1, [r7, #0]
 8007a24:	4649      	mov	r1, r9
 8007a26:	414b      	adcs	r3, r1
 8007a28:	607b      	str	r3, [r7, #4]
 8007a2a:	f04f 0200 	mov.w	r2, #0
 8007a2e:	f04f 0300 	mov.w	r3, #0
 8007a32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a36:	4659      	mov	r1, fp
 8007a38:	00cb      	lsls	r3, r1, #3
 8007a3a:	4651      	mov	r1, sl
 8007a3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a40:	4651      	mov	r1, sl
 8007a42:	00ca      	lsls	r2, r1, #3
 8007a44:	4610      	mov	r0, r2
 8007a46:	4619      	mov	r1, r3
 8007a48:	4603      	mov	r3, r0
 8007a4a:	4642      	mov	r2, r8
 8007a4c:	189b      	adds	r3, r3, r2
 8007a4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a50:	464b      	mov	r3, r9
 8007a52:	460a      	mov	r2, r1
 8007a54:	eb42 0303 	adc.w	r3, r2, r3
 8007a58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	663b      	str	r3, [r7, #96]	; 0x60
 8007a64:	667a      	str	r2, [r7, #100]	; 0x64
 8007a66:	f04f 0200 	mov.w	r2, #0
 8007a6a:	f04f 0300 	mov.w	r3, #0
 8007a6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007a72:	4649      	mov	r1, r9
 8007a74:	008b      	lsls	r3, r1, #2
 8007a76:	4641      	mov	r1, r8
 8007a78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a7c:	4641      	mov	r1, r8
 8007a7e:	008a      	lsls	r2, r1, #2
 8007a80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007a84:	f7f8 fbfc 	bl	8000280 <__aeabi_uldivmod>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	4b0d      	ldr	r3, [pc, #52]	; (8007ac4 <UART_SetConfig+0x4e4>)
 8007a8e:	fba3 1302 	umull	r1, r3, r3, r2
 8007a92:	095b      	lsrs	r3, r3, #5
 8007a94:	2164      	movs	r1, #100	; 0x64
 8007a96:	fb01 f303 	mul.w	r3, r1, r3
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	011b      	lsls	r3, r3, #4
 8007a9e:	3332      	adds	r3, #50	; 0x32
 8007aa0:	4a08      	ldr	r2, [pc, #32]	; (8007ac4 <UART_SetConfig+0x4e4>)
 8007aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa6:	095b      	lsrs	r3, r3, #5
 8007aa8:	f003 020f 	and.w	r2, r3, #15
 8007aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4422      	add	r2, r4
 8007ab4:	609a      	str	r2, [r3, #8]
}
 8007ab6:	bf00      	nop
 8007ab8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007abc:	46bd      	mov	sp, r7
 8007abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ac2:	bf00      	nop
 8007ac4:	51eb851f 	.word	0x51eb851f

08007ac8 <UCAM3_Init>:
#include "UCAM3.h"
#include "UCAM3_port.h"

uint16_t FirstPos = 0;

uint8_t UCAM3_Init() {
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
	FirstPos = CheckForFiles();
 8007ace:	f7f9 fc49 	bl	8001364 <CheckForFiles>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	4b0e      	ldr	r3, [pc, #56]	; (8007b10 <UCAM3_Init+0x48>)
 8007ad8:	801a      	strh	r2, [r3, #0]

	ResetCam();
 8007ada:	f000 f81b 	bl	8007b14 <ResetCam>

	UCAM3_Delay(1500);
 8007ade:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007ae2:	f000 fa91 	bl	8008008 <UCAM3_Delay>

	uint8_t SyncStatus = UCAM3_Sync();
 8007ae6:	f000 f85b 	bl	8007ba0 <UCAM3_Sync>
 8007aea:	4603      	mov	r3, r0
 8007aec:	71fb      	strb	r3, [r7, #7]
	uint8_t InitStatus = UCAM3_InitPort();
 8007aee:	f000 f825 	bl	8007b3c <UCAM3_InitPort>
 8007af2:	4603      	mov	r3, r0
 8007af4:	71bb      	strb	r3, [r7, #6]

	if(SyncStatus == UCAM3_ERROR || InitStatus == UCAM3_ERROR)
 8007af6:	79fb      	ldrb	r3, [r7, #7]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d002      	beq.n	8007b02 <UCAM3_Init+0x3a>
 8007afc:	79bb      	ldrb	r3, [r7, #6]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d101      	bne.n	8007b06 <UCAM3_Init+0x3e>
	{
		return UCAM3_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e000      	b.n	8007b08 <UCAM3_Init+0x40>
	}

	return UCAM3_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	200023bc 	.word	0x200023bc

08007b14 <ResetCam>:

void ResetCam() {
 8007b14:	b580      	push	{r7, lr}
 8007b16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CAM_RESET_GPIO_Port, CAM_RESET_Pin, RESET);
 8007b18:	2200      	movs	r2, #0
 8007b1a:	2110      	movs	r1, #16
 8007b1c:	4806      	ldr	r0, [pc, #24]	; (8007b38 <ResetCam+0x24>)
 8007b1e:	f7fc fb9d 	bl	800425c <HAL_GPIO_WritePin>

	UCAM3_Delay(10);
 8007b22:	200a      	movs	r0, #10
 8007b24:	f000 fa70 	bl	8008008 <UCAM3_Delay>

	HAL_GPIO_WritePin(CAM_RESET_GPIO_Port, CAM_RESET_Pin, SET);
 8007b28:	2201      	movs	r2, #1
 8007b2a:	2110      	movs	r1, #16
 8007b2c:	4802      	ldr	r0, [pc, #8]	; (8007b38 <ResetCam+0x24>)
 8007b2e:	f7fc fb95 	bl	800425c <HAL_GPIO_WritePin>

}
 8007b32:	bf00      	nop
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	40020000 	.word	0x40020000

08007b3c <UCAM3_InitPort>:

uint8_t UCAM3_InitPort() {
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
	uint8_t k = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	73fb      	strb	r3, [r7, #15]
	uint8_t InitCmd[6] = { 0xAA, 0x01, 0x00, UCAM3_ImageFormat_JPEG,
 8007b46:	4a15      	ldr	r2, [pc, #84]	; (8007b9c <UCAM3_InitPort+0x60>)
 8007b48:	f107 0308 	add.w	r3, r7, #8
 8007b4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b50:	6018      	str	r0, [r3, #0]
 8007b52:	3304      	adds	r3, #4
 8007b54:	8019      	strh	r1, [r3, #0]
			UCAM3_RAWResolution_JPEG, UCAM3_JPEGResolution_640x480 };
	uint8_t Buff[6];

	do {
		UCAM3_Transmit(InitCmd, 6);
 8007b56:	f107 0308 	add.w	r3, r7, #8
 8007b5a:	2106      	movs	r1, #6
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f000 fa3f 	bl	8007fe0 <UCAM3_Transmit>
		UCAM3_Receive(Buff, 6, 50);
 8007b62:	463b      	mov	r3, r7
 8007b64:	2232      	movs	r2, #50	; 0x32
 8007b66:	2106      	movs	r1, #6
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 fa5b 	bl	8008024 <UCAM3_Receive>
		k++;
 8007b6e:	7bfb      	ldrb	r3, [r7, #15]
 8007b70:	3301      	adds	r3, #1
 8007b72:	73fb      	strb	r3, [r7, #15]
	} while (Buff[0] != UCAM3_ACKh && Buff[1] != UCAM3_ACKl && k < 10);
 8007b74:	783b      	ldrb	r3, [r7, #0]
 8007b76:	2baa      	cmp	r3, #170	; 0xaa
 8007b78:	d005      	beq.n	8007b86 <UCAM3_InitPort+0x4a>
 8007b7a:	787b      	ldrb	r3, [r7, #1]
 8007b7c:	2b0e      	cmp	r3, #14
 8007b7e:	d002      	beq.n	8007b86 <UCAM3_InitPort+0x4a>
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
 8007b82:	2b09      	cmp	r3, #9
 8007b84:	d9e7      	bls.n	8007b56 <UCAM3_InitPort+0x1a>

	if (k >= 10) {
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
 8007b88:	2b09      	cmp	r3, #9
 8007b8a:	d901      	bls.n	8007b90 <UCAM3_InitPort+0x54>
		return UCAM3_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e000      	b.n	8007b92 <UCAM3_InitPort+0x56>
	}

	return UCAM3_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	0800bb78 	.word	0x0800bb78

08007ba0 <UCAM3_Sync>:

uint8_t UCAM3_Sync() {
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b088      	sub	sp, #32
 8007ba4:	af00      	add	r7, sp, #0
	uint8_t k = 0;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	77fb      	strb	r3, [r7, #31]
	uint8_t SyncCmd[6] = { 0xAA, 0x0D, 0x00, 0x00, 0x00, 0x00 };
 8007baa:	4a1e      	ldr	r2, [pc, #120]	; (8007c24 <UCAM3_Sync+0x84>)
 8007bac:	f107 0318 	add.w	r3, r7, #24
 8007bb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007bb4:	6018      	str	r0, [r3, #0]
 8007bb6:	3304      	adds	r3, #4
 8007bb8:	8019      	strh	r1, [r3, #0]
	uint8_t Buff[12];

	do {
		UCAM3_Transmit(SyncCmd, 6);
 8007bba:	f107 0318 	add.w	r3, r7, #24
 8007bbe:	2106      	movs	r1, #6
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 fa0d 	bl	8007fe0 <UCAM3_Transmit>
		UCAM3_Receive(Buff, 12, 50);
 8007bc6:	f107 030c 	add.w	r3, r7, #12
 8007bca:	2232      	movs	r2, #50	; 0x32
 8007bcc:	210c      	movs	r1, #12
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f000 fa28 	bl	8008024 <UCAM3_Receive>
		k++;
 8007bd4:	7ffb      	ldrb	r3, [r7, #31]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	77fb      	strb	r3, [r7, #31]
	} while (Buff[0] != UCAM3_ACKh && Buff[1] != UCAM3_ACKl && k < 40);
 8007bda:	7b3b      	ldrb	r3, [r7, #12]
 8007bdc:	2baa      	cmp	r3, #170	; 0xaa
 8007bde:	d005      	beq.n	8007bec <UCAM3_Sync+0x4c>
 8007be0:	7b7b      	ldrb	r3, [r7, #13]
 8007be2:	2b0e      	cmp	r3, #14
 8007be4:	d002      	beq.n	8007bec <UCAM3_Sync+0x4c>
 8007be6:	7ffb      	ldrb	r3, [r7, #31]
 8007be8:	2b27      	cmp	r3, #39	; 0x27
 8007bea:	d9e6      	bls.n	8007bba <UCAM3_Sync+0x1a>

	if (k >= 40) {
 8007bec:	7ffb      	ldrb	r3, [r7, #31]
 8007bee:	2b27      	cmp	r3, #39	; 0x27
 8007bf0:	d901      	bls.n	8007bf6 <UCAM3_Sync+0x56>
		return UCAM3_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e012      	b.n	8007c1c <UCAM3_Sync+0x7c>
	}
	else {
		if (Buff[5] == 0xAA && Buff[6] == 0x0D) //проверка: правильно ли камера отправила запрос синхронизации?
 8007bf6:	7c7b      	ldrb	r3, [r7, #17]
 8007bf8:	2baa      	cmp	r3, #170	; 0xaa
 8007bfa:	d10e      	bne.n	8007c1a <UCAM3_Sync+0x7a>
 8007bfc:	7cbb      	ldrb	r3, [r7, #18]
 8007bfe:	2b0d      	cmp	r3, #13
 8007c00:	d10b      	bne.n	8007c1a <UCAM3_Sync+0x7a>
				{
			uint8_t ACKCmd[6] =
 8007c02:	4a09      	ldr	r2, [pc, #36]	; (8007c28 <UCAM3_Sync+0x88>)
 8007c04:	1d3b      	adds	r3, r7, #4
 8007c06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c0a:	6018      	str	r0, [r3, #0]
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	8019      	strh	r1, [r3, #0]
					{ UCAM3_ACKh, UCAM3_ACKl, 0x00, 0x00, 0x44, 0x00 };
			UCAM3_Transmit(ACKCmd, 6);
 8007c10:	1d3b      	adds	r3, r7, #4
 8007c12:	2106      	movs	r1, #6
 8007c14:	4618      	mov	r0, r3
 8007c16:	f000 f9e3 	bl	8007fe0 <UCAM3_Transmit>
		}
	}

	return UCAM3_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3720      	adds	r7, #32
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	0800bb80 	.word	0x0800bb80
 8007c28:	0800bb88 	.word	0x0800bb88

08007c2c <UCAM3_GetPucture>:

uint8_t UCAM3_GetPucture(uint16_t n) // n - номер фотографии
{
 8007c2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c30:	b0c7      	sub	sp, #284	; 0x11c
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	4602      	mov	r2, r0
 8007c36:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007c3a:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8007c3e:	801a      	strh	r2, [r3, #0]
	uint32_t Size = 0, PackNum = 0, k = 0;
 8007c40:	2300      	movs	r3, #0
 8007c42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c46:	2300      	movs	r3, #0
 8007c48:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint8_t IsOk = 1;
 8007c52:	2301      	movs	r3, #1
 8007c54:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
	uint8_t GetPicStatus=UCAM3_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint8_t SetPackSizeCmd[6] = { 0xAA, 0x06, 0x08, 0xC8, 0x00, 0x00 };
 8007c5e:	4adb      	ldr	r2, [pc, #876]	; (8007fcc <UCAM3_GetPucture+0x3a0>)
 8007c60:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8007c64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c68:	6018      	str	r0, [r3, #0]
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	8019      	strh	r1, [r3, #0]
	uint8_t GetPictureCmd[6] = { 0xAA, 0x04, UCAM3_PictureType_JPEG, 0x00, 0x00,
 8007c6e:	4ad8      	ldr	r2, [pc, #864]	; (8007fd0 <UCAM3_GetPucture+0x3a4>)
 8007c70:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007c74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c78:	6018      	str	r0, [r3, #0]
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	8019      	strh	r1, [r3, #0]
			0x00 };
	uint8_t Buff[6];

	do {
		UCAM3_Transmit(SetPackSizeCmd, 6);
 8007c7e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8007c82:	2106      	movs	r1, #6
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 f9ab 	bl	8007fe0 <UCAM3_Transmit>
		UCAM3_Receive(Buff, 6, 10);
 8007c8a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007c8e:	220a      	movs	r2, #10
 8007c90:	2106      	movs	r1, #6
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 f9c6 	bl	8008024 <UCAM3_Receive>
		k++;
 8007c98:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	} while (Buff[0] != UCAM3_ACKh && Buff[1] != UCAM3_ACKl && k < 20);
 8007ca2:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8007ca6:	2baa      	cmp	r3, #170	; 0xaa
 8007ca8:	d007      	beq.n	8007cba <UCAM3_GetPucture+0x8e>
 8007caa:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8007cae:	2b0e      	cmp	r3, #14
 8007cb0:	d003      	beq.n	8007cba <UCAM3_GetPucture+0x8e>
 8007cb2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007cb6:	2b13      	cmp	r3, #19
 8007cb8:	d9e1      	bls.n	8007c7e <UCAM3_GetPucture+0x52>

	if (k >= 20) {
 8007cba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007cbe:	2b13      	cmp	r3, #19
 8007cc0:	d903      	bls.n	8007cca <UCAM3_GetPucture+0x9e>
		IsOk = 0;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
 8007cc8:	e178      	b.n	8007fbc <UCAM3_GetPucture+0x390>
	} else {
		for (uint8_t i = 0; i < 6; i++) //сбрасываем буфер
 8007cca:	2300      	movs	r3, #0
 8007ccc:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 8007cd0:	e00c      	b.n	8007cec <UCAM3_GetPucture+0xc0>
				{
			Buff[i] = 0x00;
 8007cd2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8007cd6:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8007cda:	443b      	add	r3, r7
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f803 2c38 	strb.w	r2, [r3, #-56]
		for (uint8_t i = 0; i < 6; i++) //сбрасываем буфер
 8007ce2:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
 8007cec:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8007cf0:	2b05      	cmp	r3, #5
 8007cf2:	d9ee      	bls.n	8007cd2 <UCAM3_GetPucture+0xa6>
		}
		k = 0;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

		do {
			UCAM3_Transmit(GetPictureCmd, 6);
 8007cfa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007cfe:	2106      	movs	r1, #6
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 f96d 	bl	8007fe0 <UCAM3_Transmit>
			UCAM3_Receive(Buff, 6, 5);
 8007d06:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007d0a:	2205      	movs	r2, #5
 8007d0c:	2106      	movs	r1, #6
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f000 f988 	bl	8008024 <UCAM3_Receive>
			k++;
 8007d14:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007d18:	3301      	adds	r3, #1
 8007d1a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		} while (Buff[0] != UCAM3_ACKh && Buff[1] != UCAM3_ACKl && k < 20);
 8007d1e:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8007d22:	2baa      	cmp	r3, #170	; 0xaa
 8007d24:	d007      	beq.n	8007d36 <UCAM3_GetPucture+0x10a>
 8007d26:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8007d2a:	2b0e      	cmp	r3, #14
 8007d2c:	d003      	beq.n	8007d36 <UCAM3_GetPucture+0x10a>
 8007d2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007d32:	2b13      	cmp	r3, #19
 8007d34:	d9e1      	bls.n	8007cfa <UCAM3_GetPucture+0xce>

		if (k >= 20) {
 8007d36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007d3a:	2b13      	cmp	r3, #19
 8007d3c:	d903      	bls.n	8007d46 <UCAM3_GetPucture+0x11a>
			IsOk = 0;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
 8007d44:	e13a      	b.n	8007fbc <UCAM3_GetPucture+0x390>
		} else {
			for (uint8_t i = 0; i < 6; i++) //сбрасываем буфер
 8007d46:	2300      	movs	r3, #0
 8007d48:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 8007d4c:	e00c      	b.n	8007d68 <UCAM3_GetPucture+0x13c>
					{
				Buff[i] = 0x00;
 8007d4e:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8007d52:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8007d56:	443b      	add	r3, r7
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f803 2c38 	strb.w	r2, [r3, #-56]
			for (uint8_t i = 0; i < 6; i++) //сбрасываем буфер
 8007d5e:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8007d62:	3301      	adds	r3, #1
 8007d64:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
 8007d68:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8007d6c:	2b05      	cmp	r3, #5
 8007d6e:	d9ee      	bls.n	8007d4e <UCAM3_GetPucture+0x122>
			}
			k = 0;
 8007d70:	2300      	movs	r3, #0
 8007d72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

			do {
				UCAM3_Receive(Buff, 6, 500);
 8007d76:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007d7a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007d7e:	2106      	movs	r1, #6
 8007d80:	4618      	mov	r0, r3
 8007d82:	f000 f94f 	bl	8008024 <UCAM3_Receive>
				k++;
 8007d86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			} while (Buff[0] != 0xAA && Buff[1] != 0x0A && Buff[2] != 0x01
 8007d90:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
					&& k < 20);
 8007d94:	2baa      	cmp	r3, #170	; 0xaa
 8007d96:	d00b      	beq.n	8007db0 <UCAM3_GetPucture+0x184>
			} while (Buff[0] != 0xAA && Buff[1] != 0x0A && Buff[2] != 0x01
 8007d98:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8007d9c:	2b0a      	cmp	r3, #10
 8007d9e:	d007      	beq.n	8007db0 <UCAM3_GetPucture+0x184>
 8007da0:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d003      	beq.n	8007db0 <UCAM3_GetPucture+0x184>
					&& k < 20);
 8007da8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007dac:	2b13      	cmp	r3, #19
 8007dae:	d9e2      	bls.n	8007d76 <UCAM3_GetPucture+0x14a>

			if (k >= 20) {
 8007db0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007db4:	2b13      	cmp	r3, #19
 8007db6:	d903      	bls.n	8007dc0 <UCAM3_GetPucture+0x194>
				IsOk = 0;
 8007db8:	2300      	movs	r3, #0
 8007dba:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
 8007dbe:	e0fd      	b.n	8007fbc <UCAM3_GetPucture+0x390>
			} else {
				if (IsOk == 1) {
 8007dc0:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	f040 80f7 	bne.w	8007fb8 <UCAM3_GetPucture+0x38c>

					Size = (Buff[3] << 0) | (Buff[4] << 8) | (Buff[5] << 16);
 8007dca:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007dce:	461a      	mov	r2, r3
 8007dd0:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8007dd4:	021b      	lsls	r3, r3, #8
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8007ddc:	041b      	lsls	r3, r3, #16
 8007dde:	4313      	orrs	r3, r2
 8007de0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
					PackNum = Size / 194;
 8007de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007de8:	085b      	lsrs	r3, r3, #1
 8007dea:	4a7a      	ldr	r2, [pc, #488]	; (8007fd4 <UCAM3_GetPucture+0x3a8>)
 8007dec:	fba2 2303 	umull	r2, r3, r2, r3
 8007df0:	08db      	lsrs	r3, r3, #3
 8007df2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
					if (Size % 194 != 0) {
 8007df6:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8007dfa:	0853      	lsrs	r3, r2, #1
 8007dfc:	4975      	ldr	r1, [pc, #468]	; (8007fd4 <UCAM3_GetPucture+0x3a8>)
 8007dfe:	fba1 1303 	umull	r1, r3, r1, r3
 8007e02:	08db      	lsrs	r3, r3, #3
 8007e04:	21c2      	movs	r1, #194	; 0xc2
 8007e06:	fb01 f303 	mul.w	r3, r1, r3
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d004      	beq.n	8007e1a <UCAM3_GetPucture+0x1ee>
						PackNum++;
 8007e10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e14:	3301      	adds	r3, #1
 8007e16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
					}

					uint16_t i = 0;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
					while (i <= PackNum) {
 8007e20:	e0ac      	b.n	8007f7c <UCAM3_GetPucture+0x350>
						uint8_t
						First = (uint8_t)(i << 8);
 8007e22:	2300      	movs	r3, #0
 8007e24:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
						uint8_t Last = (uint8_t) (i & 0xFF);
 8007e28:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8007e2c:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
						uint8_t PictureCmd[6] = { UCAM3_ACKh, UCAM3_ACKl, 0x00,
 8007e30:	23aa      	movs	r3, #170	; 0xaa
 8007e32:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
 8007e36:	230e      	movs	r3, #14
 8007e38:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 8007e42:	2300      	movs	r3, #0
 8007e44:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 8007e48:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8007e4c:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 8007e50:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8007e54:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
								0x00, Last, First };
						k = 0;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

						if (i != PackNum) {
 8007e5e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8007e62:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d021      	beq.n	8007eae <UCAM3_GetPucture+0x282>
							uint8_t ImageBuff[200];
							UCAM3_Transmit(PictureCmd, 6);
 8007e6a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007e6e:	2106      	movs	r1, #6
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 f8b5 	bl	8007fe0 <UCAM3_Transmit>
							UCAM3_Receive(ImageBuff, 200, 50);
 8007e76:	f107 0308 	add.w	r3, r7, #8
 8007e7a:	2232      	movs	r2, #50	; 0x32
 8007e7c:	21c8      	movs	r1, #200	; 0xc8
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 f8d0 	bl	8008024 <UCAM3_Receive>
							k++;
 8007e84:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e88:	3301      	adds	r3, #1
 8007e8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

							WriteOnSD(n + FirstPos, &ImageBuff[4], 194);
 8007e8e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007e92:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8007e96:	881b      	ldrh	r3, [r3, #0]
 8007e98:	4a4f      	ldr	r2, [pc, #316]	; (8007fd8 <UCAM3_GetPucture+0x3ac>)
 8007e9a:	8812      	ldrh	r2, [r2, #0]
 8007e9c:	1898      	adds	r0, r3, r2
 8007e9e:	f107 0308 	add.w	r3, r7, #8
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	22c2      	movs	r2, #194	; 0xc2
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	f7f9 fafe 	bl	80014a8 <WriteOnSD>
 8007eac:	e061      	b.n	8007f72 <UCAM3_GetPucture+0x346>

						}

						else {
 8007eae:	466b      	mov	r3, sp
 8007eb0:	461e      	mov	r6, r3
							uint8_t PackSize = Size - PackNum * 200 + 6; // +6 это +6 байт информации, т.к.
 8007eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	00db      	lsls	r3, r3, #3
 8007ec2:	1acb      	subs	r3, r1, r3
 8007ec4:	00db      	lsls	r3, r3, #3
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	3306      	adds	r3, #6
 8007ece:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
							uint8_t ImageBuff[PackSize]; // в Size только размер картинки
 8007ed2:	f897 1100 	ldrb.w	r1, [r7, #256]	; 0x100
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007ede:	b2cb      	uxtb	r3, r1
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	461c      	mov	r4, r3
 8007ee4:	4615      	mov	r5, r2
 8007ee6:	f04f 0200 	mov.w	r2, #0
 8007eea:	f04f 0300 	mov.w	r3, #0
 8007eee:	00eb      	lsls	r3, r5, #3
 8007ef0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ef4:	00e2      	lsls	r2, r4, #3
 8007ef6:	b2cb      	uxtb	r3, r1
 8007ef8:	2200      	movs	r2, #0
 8007efa:	4698      	mov	r8, r3
 8007efc:	4691      	mov	r9, r2
 8007efe:	f04f 0200 	mov.w	r2, #0
 8007f02:	f04f 0300 	mov.w	r3, #0
 8007f06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f12:	460b      	mov	r3, r1
 8007f14:	3307      	adds	r3, #7
 8007f16:	08db      	lsrs	r3, r3, #3
 8007f18:	00db      	lsls	r3, r3, #3
 8007f1a:	ebad 0d03 	sub.w	sp, sp, r3
 8007f1e:	466b      	mov	r3, sp
 8007f20:	3300      	adds	r3, #0
 8007f22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

							UCAM3_Transmit(PictureCmd, 6);
 8007f26:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007f2a:	2106      	movs	r1, #6
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f000 f857 	bl	8007fe0 <UCAM3_Transmit>
							UCAM3_Receive(ImageBuff, PackSize, 50);
 8007f32:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8007f36:	2232      	movs	r2, #50	; 0x32
 8007f38:	4619      	mov	r1, r3
 8007f3a:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8007f3e:	f000 f871 	bl	8008024 <UCAM3_Receive>
							k++;
 8007f42:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f46:	3301      	adds	r3, #1
 8007f48:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

							WriteOnSD(n + FirstPos, &ImageBuff[4],
 8007f4c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007f50:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8007f54:	881b      	ldrh	r3, [r3, #0]
 8007f56:	4a20      	ldr	r2, [pc, #128]	; (8007fd8 <UCAM3_GetPucture+0x3ac>)
 8007f58:	8812      	ldrh	r2, [r2, #0]
 8007f5a:	1898      	adds	r0, r3, r2
 8007f5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f60:	1d19      	adds	r1, r3, #4
 8007f62:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8007f66:	3b06      	subs	r3, #6
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	f7f9 fa9c 	bl	80014a8 <WriteOnSD>
 8007f70:	46b5      	mov	sp, r6
									PackSize - 6);
						}

						i++;
 8007f72:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8007f76:	3301      	adds	r3, #1
 8007f78:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
					while (i <= PackNum) {
 8007f7c:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8007f80:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8007f84:	429a      	cmp	r2, r3
 8007f86:	f4bf af4c 	bcs.w	8007e22 <UCAM3_GetPucture+0x1f6>
					} // конец while

					uint8_t ACKEndCmd[6] = { UCAM3_ACKh, UCAM3_ACKl, 0x00, 0x00, 0xF0, 0xF0 };
 8007f8a:	4a14      	ldr	r2, [pc, #80]	; (8007fdc <UCAM3_GetPucture+0x3b0>)
 8007f8c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8007f90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007f94:	6018      	str	r0, [r3, #0]
 8007f96:	3304      	adds	r3, #4
 8007f98:	8019      	strh	r1, [r3, #0]
					UCAM3_Transmit(ACKEndCmd, 6);
 8007f9a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8007f9e:	2106      	movs	r1, #6
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f000 f81d 	bl	8007fe0 <UCAM3_Transmit>

					UCAM3_Delay(50);
 8007fa6:	2032      	movs	r0, #50	; 0x32
 8007fa8:	f000 f82e 	bl	8008008 <UCAM3_Delay>
					GetPicStatus = UCAM3_InitPort();
 8007fac:	f7ff fdc6 	bl	8007b3c <UCAM3_InitPort>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8007fb6:	e001      	b.n	8007fbc <UCAM3_GetPucture+0x390>
				}
				else {
					return UCAM3_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e001      	b.n	8007fc0 <UCAM3_GetPucture+0x394>
				}
			}
		}
	}

	return GetPicStatus;
 8007fbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fcc:	0800bb90 	.word	0x0800bb90
 8007fd0:	0800bb98 	.word	0x0800bb98
 8007fd4:	151d07eb 	.word	0x151d07eb
 8007fd8:	200023bc 	.word	0x200023bc
 8007fdc:	0800bba0 	.word	0x0800bba0

08007fe0 <UCAM3_Transmit>:


extern UART_HandleTypeDef huart2;

void UCAM3_Transmit(uint8_t* Data, uint8_t Length)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart2, Data, Length, 10000);
 8007fec:	78fb      	ldrb	r3, [r7, #3]
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	f242 7310 	movw	r3, #10000	; 0x2710
 8007ff4:	6879      	ldr	r1, [r7, #4]
 8007ff6:	4803      	ldr	r0, [pc, #12]	; (8008004 <UCAM3_Transmit+0x24>)
 8007ff8:	f7ff f94f 	bl	800729a <HAL_UART_Transmit>
}
 8007ffc:	bf00      	nop
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	2000028c 	.word	0x2000028c

08008008 <UCAM3_Delay>:

void UCAM3_Delay(uint16_t Ms)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	4603      	mov	r3, r0
 8008010:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Ms);
 8008012:	88fb      	ldrh	r3, [r7, #6]
 8008014:	4618      	mov	r0, r3
 8008016:	f7fa feed 	bl	8002df4 <HAL_Delay>
}
 800801a:	bf00      	nop
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
	...

08008024 <UCAM3_Receive>:

uint8_t UCAM3_Receive(uint8_t* Data, uint8_t Length, uint32_t TimeOut)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	460b      	mov	r3, r1
 800802e:	607a      	str	r2, [r7, #4]
 8008030:	72fb      	strb	r3, [r7, #11]
	return HAL_UART_Receive(&huart2, Data, Length, TimeOut);
 8008032:	7afb      	ldrb	r3, [r7, #11]
 8008034:	b29a      	uxth	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	68f9      	ldr	r1, [r7, #12]
 800803a:	4804      	ldr	r0, [pc, #16]	; (800804c <UCAM3_Receive+0x28>)
 800803c:	f7ff f9bf 	bl	80073be <HAL_UART_Receive>
 8008040:	4603      	mov	r3, r0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	2000028c 	.word	0x2000028c

08008050 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008054:	4904      	ldr	r1, [pc, #16]	; (8008068 <MX_FATFS_Init+0x18>)
 8008056:	4805      	ldr	r0, [pc, #20]	; (800806c <MX_FATFS_Init+0x1c>)
 8008058:	f002 fff6 	bl	800b048 <FATFS_LinkDriver>
 800805c:	4603      	mov	r3, r0
 800805e:	461a      	mov	r2, r3
 8008060:	4b03      	ldr	r3, [pc, #12]	; (8008070 <MX_FATFS_Init+0x20>)
 8008062:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008064:	bf00      	nop
 8008066:	bd80      	pop	{r7, pc}
 8008068:	200023c0 	.word	0x200023c0
 800806c:	20000010 	.word	0x20000010
 8008070:	200023be 	.word	0x200023be

08008074 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008074:	b480      	push	{r7}
 8008076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008078:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800807a:	4618      	mov	r0, r3
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	4603      	mov	r3, r0
 800808c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800808e:	79fb      	ldrb	r3, [r7, #7]
 8008090:	4618      	mov	r0, r3
 8008092:	f7f8 fc31 	bl	80008f8 <SD_disk_initialize>
 8008096:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008098:	4618      	mov	r0, r3
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	4603      	mov	r3, r0
 80080a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 80080aa:	79fb      	ldrb	r3, [r7, #7]
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7f8 fd0f 	bl	8000ad0 <SD_disk_status>
 80080b2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60b9      	str	r1, [r7, #8]
 80080c4:	607a      	str	r2, [r7, #4]
 80080c6:	603b      	str	r3, [r7, #0]
 80080c8:	4603      	mov	r3, r0
 80080ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80080cc:	7bf8      	ldrb	r0, [r7, #15]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	68b9      	ldr	r1, [r7, #8]
 80080d4:	f7f8 fd12 	bl	8000afc <SD_disk_read>
 80080d8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
 80080ec:	603b      	str	r3, [r7, #0]
 80080ee:	4603      	mov	r3, r0
 80080f0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80080f2:	7bf8      	ldrb	r0, [r7, #15]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	68b9      	ldr	r1, [r7, #8]
 80080fa:	f7f8 fd69 	bl	8000bd0 <SD_disk_write>
 80080fe:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	4603      	mov	r3, r0
 8008110:	603a      	str	r2, [r7, #0]
 8008112:	71fb      	strb	r3, [r7, #7]
 8008114:	460b      	mov	r3, r1
 8008116:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 8008118:	79b9      	ldrb	r1, [r7, #6]
 800811a:	79fb      	ldrb	r3, [r7, #7]
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	4618      	mov	r0, r3
 8008120:	f7f8 fdda 	bl	8000cd8 <SD_disk_ioctl>
 8008124:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008126:	4618      	mov	r0, r3
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
	...

08008130 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	4603      	mov	r3, r0
 8008138:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800813a:	79fb      	ldrb	r3, [r7, #7]
 800813c:	4a08      	ldr	r2, [pc, #32]	; (8008160 <disk_status+0x30>)
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	79fa      	ldrb	r2, [r7, #7]
 8008148:	4905      	ldr	r1, [pc, #20]	; (8008160 <disk_status+0x30>)
 800814a:	440a      	add	r2, r1
 800814c:	7a12      	ldrb	r2, [r2, #8]
 800814e:	4610      	mov	r0, r2
 8008150:	4798      	blx	r3
 8008152:	4603      	mov	r3, r0
 8008154:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008156:	7bfb      	ldrb	r3, [r7, #15]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	200025ec 	.word	0x200025ec

08008164 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	4603      	mov	r3, r0
 800816c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008172:	79fb      	ldrb	r3, [r7, #7]
 8008174:	4a0d      	ldr	r2, [pc, #52]	; (80081ac <disk_initialize+0x48>)
 8008176:	5cd3      	ldrb	r3, [r2, r3]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d111      	bne.n	80081a0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800817c:	79fb      	ldrb	r3, [r7, #7]
 800817e:	4a0b      	ldr	r2, [pc, #44]	; (80081ac <disk_initialize+0x48>)
 8008180:	2101      	movs	r1, #1
 8008182:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008184:	79fb      	ldrb	r3, [r7, #7]
 8008186:	4a09      	ldr	r2, [pc, #36]	; (80081ac <disk_initialize+0x48>)
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4413      	add	r3, r2
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	79fa      	ldrb	r2, [r7, #7]
 8008192:	4906      	ldr	r1, [pc, #24]	; (80081ac <disk_initialize+0x48>)
 8008194:	440a      	add	r2, r1
 8008196:	7a12      	ldrb	r2, [r2, #8]
 8008198:	4610      	mov	r0, r2
 800819a:	4798      	blx	r3
 800819c:	4603      	mov	r3, r0
 800819e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	200025ec 	.word	0x200025ec

080081b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80081b0:	b590      	push	{r4, r7, lr}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60b9      	str	r1, [r7, #8]
 80081b8:	607a      	str	r2, [r7, #4]
 80081ba:	603b      	str	r3, [r7, #0]
 80081bc:	4603      	mov	r3, r0
 80081be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
 80081c2:	4a0a      	ldr	r2, [pc, #40]	; (80081ec <disk_read+0x3c>)
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	689c      	ldr	r4, [r3, #8]
 80081cc:	7bfb      	ldrb	r3, [r7, #15]
 80081ce:	4a07      	ldr	r2, [pc, #28]	; (80081ec <disk_read+0x3c>)
 80081d0:	4413      	add	r3, r2
 80081d2:	7a18      	ldrb	r0, [r3, #8]
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	68b9      	ldr	r1, [r7, #8]
 80081da:	47a0      	blx	r4
 80081dc:	4603      	mov	r3, r0
 80081de:	75fb      	strb	r3, [r7, #23]
  return res;
 80081e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	371c      	adds	r7, #28
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd90      	pop	{r4, r7, pc}
 80081ea:	bf00      	nop
 80081ec:	200025ec 	.word	0x200025ec

080081f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80081f0:	b590      	push	{r4, r7, lr}
 80081f2:	b087      	sub	sp, #28
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60b9      	str	r1, [r7, #8]
 80081f8:	607a      	str	r2, [r7, #4]
 80081fa:	603b      	str	r3, [r7, #0]
 80081fc:	4603      	mov	r3, r0
 80081fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008200:	7bfb      	ldrb	r3, [r7, #15]
 8008202:	4a0a      	ldr	r2, [pc, #40]	; (800822c <disk_write+0x3c>)
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	4413      	add	r3, r2
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	68dc      	ldr	r4, [r3, #12]
 800820c:	7bfb      	ldrb	r3, [r7, #15]
 800820e:	4a07      	ldr	r2, [pc, #28]	; (800822c <disk_write+0x3c>)
 8008210:	4413      	add	r3, r2
 8008212:	7a18      	ldrb	r0, [r3, #8]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	68b9      	ldr	r1, [r7, #8]
 800821a:	47a0      	blx	r4
 800821c:	4603      	mov	r3, r0
 800821e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008220:	7dfb      	ldrb	r3, [r7, #23]
}
 8008222:	4618      	mov	r0, r3
 8008224:	371c      	adds	r7, #28
 8008226:	46bd      	mov	sp, r7
 8008228:	bd90      	pop	{r4, r7, pc}
 800822a:	bf00      	nop
 800822c:	200025ec 	.word	0x200025ec

08008230 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	4603      	mov	r3, r0
 8008238:	603a      	str	r2, [r7, #0]
 800823a:	71fb      	strb	r3, [r7, #7]
 800823c:	460b      	mov	r3, r1
 800823e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008240:	79fb      	ldrb	r3, [r7, #7]
 8008242:	4a09      	ldr	r2, [pc, #36]	; (8008268 <disk_ioctl+0x38>)
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4413      	add	r3, r2
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	79fa      	ldrb	r2, [r7, #7]
 800824e:	4906      	ldr	r1, [pc, #24]	; (8008268 <disk_ioctl+0x38>)
 8008250:	440a      	add	r2, r1
 8008252:	7a10      	ldrb	r0, [r2, #8]
 8008254:	79b9      	ldrb	r1, [r7, #6]
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	4798      	blx	r3
 800825a:	4603      	mov	r3, r0
 800825c:	73fb      	strb	r3, [r7, #15]
  return res;
 800825e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	200025ec 	.word	0x200025ec

0800826c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	3301      	adds	r3, #1
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800827c:	89fb      	ldrh	r3, [r7, #14]
 800827e:	021b      	lsls	r3, r3, #8
 8008280:	b21a      	sxth	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	b21b      	sxth	r3, r3
 8008288:	4313      	orrs	r3, r2
 800828a:	b21b      	sxth	r3, r3
 800828c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800828e:	89fb      	ldrh	r3, [r7, #14]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	3303      	adds	r3, #3
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	021b      	lsls	r3, r3, #8
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	3202      	adds	r2, #2
 80082b4:	7812      	ldrb	r2, [r2, #0]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	021b      	lsls	r3, r3, #8
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	3201      	adds	r2, #1
 80082c2:	7812      	ldrb	r2, [r2, #0]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	021b      	lsls	r3, r3, #8
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	7812      	ldrb	r2, [r2, #0]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	60fb      	str	r3, [r7, #12]
	return rv;
 80082d4:	68fb      	ldr	r3, [r7, #12]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3714      	adds	r7, #20
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	460b      	mov	r3, r1
 80082ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	1c5a      	adds	r2, r3, #1
 80082f2:	607a      	str	r2, [r7, #4]
 80082f4:	887a      	ldrh	r2, [r7, #2]
 80082f6:	b2d2      	uxtb	r2, r2
 80082f8:	701a      	strb	r2, [r3, #0]
 80082fa:	887b      	ldrh	r3, [r7, #2]
 80082fc:	0a1b      	lsrs	r3, r3, #8
 80082fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	1c5a      	adds	r2, r3, #1
 8008304:	607a      	str	r2, [r7, #4]
 8008306:	887a      	ldrh	r2, [r7, #2]
 8008308:	b2d2      	uxtb	r2, r2
 800830a:	701a      	strb	r2, [r3, #0]
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	1c5a      	adds	r2, r3, #1
 8008326:	607a      	str	r2, [r7, #4]
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	b2d2      	uxtb	r2, r2
 800832c:	701a      	strb	r2, [r3, #0]
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	0a1b      	lsrs	r3, r3, #8
 8008332:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	1c5a      	adds	r2, r3, #1
 8008338:	607a      	str	r2, [r7, #4]
 800833a:	683a      	ldr	r2, [r7, #0]
 800833c:	b2d2      	uxtb	r2, r2
 800833e:	701a      	strb	r2, [r3, #0]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	0a1b      	lsrs	r3, r3, #8
 8008344:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	1c5a      	adds	r2, r3, #1
 800834a:	607a      	str	r2, [r7, #4]
 800834c:	683a      	ldr	r2, [r7, #0]
 800834e:	b2d2      	uxtb	r2, r2
 8008350:	701a      	strb	r2, [r3, #0]
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	0a1b      	lsrs	r3, r3, #8
 8008356:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	1c5a      	adds	r2, r3, #1
 800835c:	607a      	str	r2, [r7, #4]
 800835e:	683a      	ldr	r2, [r7, #0]
 8008360:	b2d2      	uxtb	r2, r2
 8008362:	701a      	strb	r2, [r3, #0]
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008370:	b480      	push	{r7}
 8008372:	b087      	sub	sp, #28
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00d      	beq.n	80083a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	1c53      	adds	r3, r2, #1
 800838e:	613b      	str	r3, [r7, #16]
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	1c59      	adds	r1, r3, #1
 8008394:	6179      	str	r1, [r7, #20]
 8008396:	7812      	ldrb	r2, [r2, #0]
 8008398:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	3b01      	subs	r3, #1
 800839e:	607b      	str	r3, [r7, #4]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1f1      	bne.n	800838a <mem_cpy+0x1a>
	}
}
 80083a6:	bf00      	nop
 80083a8:	371c      	adds	r7, #28
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80083b2:	b480      	push	{r7}
 80083b4:	b087      	sub	sp, #28
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	60f8      	str	r0, [r7, #12]
 80083ba:	60b9      	str	r1, [r7, #8]
 80083bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	1c5a      	adds	r2, r3, #1
 80083c6:	617a      	str	r2, [r7, #20]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	b2d2      	uxtb	r2, r2
 80083cc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	3b01      	subs	r3, #1
 80083d2:	607b      	str	r3, [r7, #4]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1f3      	bne.n	80083c2 <mem_set+0x10>
}
 80083da:	bf00      	nop
 80083dc:	bf00      	nop
 80083de:	371c      	adds	r7, #28
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80083e8:	b480      	push	{r7}
 80083ea:	b089      	sub	sp, #36	; 0x24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	61fb      	str	r3, [r7, #28]
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80083fc:	2300      	movs	r3, #0
 80083fe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	1c5a      	adds	r2, r3, #1
 8008404:	61fa      	str	r2, [r7, #28]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	4619      	mov	r1, r3
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	1c5a      	adds	r2, r3, #1
 800840e:	61ba      	str	r2, [r7, #24]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	1acb      	subs	r3, r1, r3
 8008414:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	3b01      	subs	r3, #1
 800841a:	607b      	str	r3, [r7, #4]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d002      	beq.n	8008428 <mem_cmp+0x40>
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d0eb      	beq.n	8008400 <mem_cmp+0x18>

	return r;
 8008428:	697b      	ldr	r3, [r7, #20]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3724      	adds	r7, #36	; 0x24
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr

08008436 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008440:	e002      	b.n	8008448 <chk_chr+0x12>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	3301      	adds	r3, #1
 8008446:	607b      	str	r3, [r7, #4]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d005      	beq.n	800845c <chk_chr+0x26>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	461a      	mov	r2, r3
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	4293      	cmp	r3, r2
 800845a:	d1f2      	bne.n	8008442 <chk_chr+0xc>
	return *str;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	781b      	ldrb	r3, [r3, #0]
}
 8008460:	4618      	mov	r0, r3
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008476:	2300      	movs	r3, #0
 8008478:	60bb      	str	r3, [r7, #8]
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	60fb      	str	r3, [r7, #12]
 800847e:	e029      	b.n	80084d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008480:	4a27      	ldr	r2, [pc, #156]	; (8008520 <chk_lock+0xb4>)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	011b      	lsls	r3, r3, #4
 8008486:	4413      	add	r3, r2
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d01d      	beq.n	80084ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800848e:	4a24      	ldr	r2, [pc, #144]	; (8008520 <chk_lock+0xb4>)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	011b      	lsls	r3, r3, #4
 8008494:	4413      	add	r3, r2
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	429a      	cmp	r2, r3
 800849e:	d116      	bne.n	80084ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80084a0:	4a1f      	ldr	r2, [pc, #124]	; (8008520 <chk_lock+0xb4>)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	011b      	lsls	r3, r3, #4
 80084a6:	4413      	add	r3, r2
 80084a8:	3304      	adds	r3, #4
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d10c      	bne.n	80084ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80084b4:	4a1a      	ldr	r2, [pc, #104]	; (8008520 <chk_lock+0xb4>)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	011b      	lsls	r3, r3, #4
 80084ba:	4413      	add	r3, r2
 80084bc:	3308      	adds	r3, #8
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d102      	bne.n	80084ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80084c8:	e007      	b.n	80084da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80084ca:	2301      	movs	r3, #1
 80084cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	3301      	adds	r3, #1
 80084d2:	60fb      	str	r3, [r7, #12]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d9d2      	bls.n	8008480 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d109      	bne.n	80084f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d102      	bne.n	80084ec <chk_lock+0x80>
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d101      	bne.n	80084f0 <chk_lock+0x84>
 80084ec:	2300      	movs	r3, #0
 80084ee:	e010      	b.n	8008512 <chk_lock+0xa6>
 80084f0:	2312      	movs	r3, #18
 80084f2:	e00e      	b.n	8008512 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d108      	bne.n	800850c <chk_lock+0xa0>
 80084fa:	4a09      	ldr	r2, [pc, #36]	; (8008520 <chk_lock+0xb4>)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	011b      	lsls	r3, r3, #4
 8008500:	4413      	add	r3, r2
 8008502:	330c      	adds	r3, #12
 8008504:	881b      	ldrh	r3, [r3, #0]
 8008506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800850a:	d101      	bne.n	8008510 <chk_lock+0xa4>
 800850c:	2310      	movs	r3, #16
 800850e:	e000      	b.n	8008512 <chk_lock+0xa6>
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3714      	adds	r7, #20
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	200023cc 	.word	0x200023cc

08008524 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800852a:	2300      	movs	r3, #0
 800852c:	607b      	str	r3, [r7, #4]
 800852e:	e002      	b.n	8008536 <enq_lock+0x12>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	3301      	adds	r3, #1
 8008534:	607b      	str	r3, [r7, #4]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2b01      	cmp	r3, #1
 800853a:	d806      	bhi.n	800854a <enq_lock+0x26>
 800853c:	4a09      	ldr	r2, [pc, #36]	; (8008564 <enq_lock+0x40>)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	011b      	lsls	r3, r3, #4
 8008542:	4413      	add	r3, r2
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1f2      	bne.n	8008530 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2b02      	cmp	r3, #2
 800854e:	bf14      	ite	ne
 8008550:	2301      	movne	r3, #1
 8008552:	2300      	moveq	r3, #0
 8008554:	b2db      	uxtb	r3, r3
}
 8008556:	4618      	mov	r0, r3
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	200023cc 	.word	0x200023cc

08008568 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008572:	2300      	movs	r3, #0
 8008574:	60fb      	str	r3, [r7, #12]
 8008576:	e01f      	b.n	80085b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008578:	4a41      	ldr	r2, [pc, #260]	; (8008680 <inc_lock+0x118>)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	011b      	lsls	r3, r3, #4
 800857e:	4413      	add	r3, r2
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	429a      	cmp	r2, r3
 8008588:	d113      	bne.n	80085b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800858a:	4a3d      	ldr	r2, [pc, #244]	; (8008680 <inc_lock+0x118>)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	011b      	lsls	r3, r3, #4
 8008590:	4413      	add	r3, r2
 8008592:	3304      	adds	r3, #4
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800859a:	429a      	cmp	r2, r3
 800859c:	d109      	bne.n	80085b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800859e:	4a38      	ldr	r2, [pc, #224]	; (8008680 <inc_lock+0x118>)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	011b      	lsls	r3, r3, #4
 80085a4:	4413      	add	r3, r2
 80085a6:	3308      	adds	r3, #8
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d006      	beq.n	80085c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3301      	adds	r3, #1
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d9dc      	bls.n	8008578 <inc_lock+0x10>
 80085be:	e000      	b.n	80085c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80085c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d132      	bne.n	800862e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80085c8:	2300      	movs	r3, #0
 80085ca:	60fb      	str	r3, [r7, #12]
 80085cc:	e002      	b.n	80085d4 <inc_lock+0x6c>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	3301      	adds	r3, #1
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d806      	bhi.n	80085e8 <inc_lock+0x80>
 80085da:	4a29      	ldr	r2, [pc, #164]	; (8008680 <inc_lock+0x118>)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	011b      	lsls	r3, r3, #4
 80085e0:	4413      	add	r3, r2
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1f2      	bne.n	80085ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d101      	bne.n	80085f2 <inc_lock+0x8a>
 80085ee:	2300      	movs	r3, #0
 80085f0:	e040      	b.n	8008674 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	4922      	ldr	r1, [pc, #136]	; (8008680 <inc_lock+0x118>)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	011b      	lsls	r3, r3, #4
 80085fc:	440b      	add	r3, r1
 80085fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	689a      	ldr	r2, [r3, #8]
 8008604:	491e      	ldr	r1, [pc, #120]	; (8008680 <inc_lock+0x118>)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	011b      	lsls	r3, r3, #4
 800860a:	440b      	add	r3, r1
 800860c:	3304      	adds	r3, #4
 800860e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	695a      	ldr	r2, [r3, #20]
 8008614:	491a      	ldr	r1, [pc, #104]	; (8008680 <inc_lock+0x118>)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	011b      	lsls	r3, r3, #4
 800861a:	440b      	add	r3, r1
 800861c:	3308      	adds	r3, #8
 800861e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008620:	4a17      	ldr	r2, [pc, #92]	; (8008680 <inc_lock+0x118>)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	011b      	lsls	r3, r3, #4
 8008626:	4413      	add	r3, r2
 8008628:	330c      	adds	r3, #12
 800862a:	2200      	movs	r2, #0
 800862c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d009      	beq.n	8008648 <inc_lock+0xe0>
 8008634:	4a12      	ldr	r2, [pc, #72]	; (8008680 <inc_lock+0x118>)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	011b      	lsls	r3, r3, #4
 800863a:	4413      	add	r3, r2
 800863c:	330c      	adds	r3, #12
 800863e:	881b      	ldrh	r3, [r3, #0]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <inc_lock+0xe0>
 8008644:	2300      	movs	r3, #0
 8008646:	e015      	b.n	8008674 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d108      	bne.n	8008660 <inc_lock+0xf8>
 800864e:	4a0c      	ldr	r2, [pc, #48]	; (8008680 <inc_lock+0x118>)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	011b      	lsls	r3, r3, #4
 8008654:	4413      	add	r3, r2
 8008656:	330c      	adds	r3, #12
 8008658:	881b      	ldrh	r3, [r3, #0]
 800865a:	3301      	adds	r3, #1
 800865c:	b29a      	uxth	r2, r3
 800865e:	e001      	b.n	8008664 <inc_lock+0xfc>
 8008660:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008664:	4906      	ldr	r1, [pc, #24]	; (8008680 <inc_lock+0x118>)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	011b      	lsls	r3, r3, #4
 800866a:	440b      	add	r3, r1
 800866c:	330c      	adds	r3, #12
 800866e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	3301      	adds	r3, #1
}
 8008674:	4618      	mov	r0, r3
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	200023cc 	.word	0x200023cc

08008684 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3b01      	subs	r3, #1
 8008690:	607b      	str	r3, [r7, #4]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d825      	bhi.n	80086e4 <dec_lock+0x60>
		n = Files[i].ctr;
 8008698:	4a17      	ldr	r2, [pc, #92]	; (80086f8 <dec_lock+0x74>)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	011b      	lsls	r3, r3, #4
 800869e:	4413      	add	r3, r2
 80086a0:	330c      	adds	r3, #12
 80086a2:	881b      	ldrh	r3, [r3, #0]
 80086a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80086a6:	89fb      	ldrh	r3, [r7, #14]
 80086a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086ac:	d101      	bne.n	80086b2 <dec_lock+0x2e>
 80086ae:	2300      	movs	r3, #0
 80086b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80086b2:	89fb      	ldrh	r3, [r7, #14]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d002      	beq.n	80086be <dec_lock+0x3a>
 80086b8:	89fb      	ldrh	r3, [r7, #14]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80086be:	4a0e      	ldr	r2, [pc, #56]	; (80086f8 <dec_lock+0x74>)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	011b      	lsls	r3, r3, #4
 80086c4:	4413      	add	r3, r2
 80086c6:	330c      	adds	r3, #12
 80086c8:	89fa      	ldrh	r2, [r7, #14]
 80086ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80086cc:	89fb      	ldrh	r3, [r7, #14]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d105      	bne.n	80086de <dec_lock+0x5a>
 80086d2:	4a09      	ldr	r2, [pc, #36]	; (80086f8 <dec_lock+0x74>)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	011b      	lsls	r3, r3, #4
 80086d8:	4413      	add	r3, r2
 80086da:	2200      	movs	r2, #0
 80086dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	737b      	strb	r3, [r7, #13]
 80086e2:	e001      	b.n	80086e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80086e4:	2302      	movs	r3, #2
 80086e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80086e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3714      	adds	r7, #20
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	200023cc 	.word	0x200023cc

080086fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008704:	2300      	movs	r3, #0
 8008706:	60fb      	str	r3, [r7, #12]
 8008708:	e010      	b.n	800872c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800870a:	4a0d      	ldr	r2, [pc, #52]	; (8008740 <clear_lock+0x44>)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	011b      	lsls	r3, r3, #4
 8008710:	4413      	add	r3, r2
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	429a      	cmp	r2, r3
 8008718:	d105      	bne.n	8008726 <clear_lock+0x2a>
 800871a:	4a09      	ldr	r2, [pc, #36]	; (8008740 <clear_lock+0x44>)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	011b      	lsls	r3, r3, #4
 8008720:	4413      	add	r3, r2
 8008722:	2200      	movs	r2, #0
 8008724:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	3301      	adds	r3, #1
 800872a:	60fb      	str	r3, [r7, #12]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d9eb      	bls.n	800870a <clear_lock+0xe>
	}
}
 8008732:	bf00      	nop
 8008734:	bf00      	nop
 8008736:	3714      	adds	r7, #20
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr
 8008740:	200023cc 	.word	0x200023cc

08008744 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b086      	sub	sp, #24
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	78db      	ldrb	r3, [r3, #3]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d034      	beq.n	80087c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	7858      	ldrb	r0, [r3, #1]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008768:	2301      	movs	r3, #1
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	f7ff fd40 	bl	80081f0 <disk_write>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d002      	beq.n	800877c <sync_window+0x38>
			res = FR_DISK_ERR;
 8008776:	2301      	movs	r3, #1
 8008778:	73fb      	strb	r3, [r7, #15]
 800877a:	e022      	b.n	80087c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	1ad2      	subs	r2, r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a1b      	ldr	r3, [r3, #32]
 800878e:	429a      	cmp	r2, r3
 8008790:	d217      	bcs.n	80087c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	789b      	ldrb	r3, [r3, #2]
 8008796:	613b      	str	r3, [r7, #16]
 8008798:	e010      	b.n	80087bc <sync_window+0x78>
					wsect += fs->fsize;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a1b      	ldr	r3, [r3, #32]
 800879e:	697a      	ldr	r2, [r7, #20]
 80087a0:	4413      	add	r3, r2
 80087a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	7858      	ldrb	r0, [r3, #1]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80087ae:	2301      	movs	r3, #1
 80087b0:	697a      	ldr	r2, [r7, #20]
 80087b2:	f7ff fd1d 	bl	80081f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	3b01      	subs	r3, #1
 80087ba:	613b      	str	r3, [r7, #16]
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d8eb      	bhi.n	800879a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3718      	adds	r7, #24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087de:	683a      	ldr	r2, [r7, #0]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d01b      	beq.n	800881c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f7ff ffad 	bl	8008744 <sync_window>
 80087ea:	4603      	mov	r3, r0
 80087ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80087ee:	7bfb      	ldrb	r3, [r7, #15]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d113      	bne.n	800881c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	7858      	ldrb	r0, [r3, #1]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80087fe:	2301      	movs	r3, #1
 8008800:	683a      	ldr	r2, [r7, #0]
 8008802:	f7ff fcd5 	bl	80081b0 <disk_read>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d004      	beq.n	8008816 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800880c:	f04f 33ff 	mov.w	r3, #4294967295
 8008810:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008812:	2301      	movs	r3, #1
 8008814:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	683a      	ldr	r2, [r7, #0]
 800881a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800881c:	7bfb      	ldrb	r3, [r7, #15]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f7ff ff87 	bl	8008744 <sync_window>
 8008836:	4603      	mov	r3, r0
 8008838:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800883a:	7bfb      	ldrb	r3, [r7, #15]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d159      	bne.n	80088f4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	2b03      	cmp	r3, #3
 8008846:	d149      	bne.n	80088dc <sync_fs+0xb4>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	791b      	ldrb	r3, [r3, #4]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d145      	bne.n	80088dc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	899b      	ldrh	r3, [r3, #12]
 800885a:	461a      	mov	r2, r3
 800885c:	2100      	movs	r1, #0
 800885e:	f7ff fda8 	bl	80083b2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	3338      	adds	r3, #56	; 0x38
 8008866:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800886a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800886e:	4618      	mov	r0, r3
 8008870:	f7ff fd37 	bl	80082e2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	3338      	adds	r3, #56	; 0x38
 8008878:	4921      	ldr	r1, [pc, #132]	; (8008900 <sync_fs+0xd8>)
 800887a:	4618      	mov	r0, r3
 800887c:	f7ff fd4c 	bl	8008318 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	3338      	adds	r3, #56	; 0x38
 8008884:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008888:	491e      	ldr	r1, [pc, #120]	; (8008904 <sync_fs+0xdc>)
 800888a:	4618      	mov	r0, r3
 800888c:	f7ff fd44 	bl	8008318 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	3338      	adds	r3, #56	; 0x38
 8008894:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	4619      	mov	r1, r3
 800889e:	4610      	mov	r0, r2
 80088a0:	f7ff fd3a 	bl	8008318 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3338      	adds	r3, #56	; 0x38
 80088a8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	695b      	ldr	r3, [r3, #20]
 80088b0:	4619      	mov	r1, r3
 80088b2:	4610      	mov	r0, r2
 80088b4:	f7ff fd30 	bl	8008318 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088bc:	1c5a      	adds	r2, r3, #1
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	7858      	ldrb	r0, [r3, #1]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088d0:	2301      	movs	r3, #1
 80088d2:	f7ff fc8d 	bl	80081f0 <disk_write>
			fs->fsi_flag = 0;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	785b      	ldrb	r3, [r3, #1]
 80088e0:	2200      	movs	r2, #0
 80088e2:	2100      	movs	r1, #0
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7ff fca3 	bl	8008230 <disk_ioctl>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <sync_fs+0xcc>
 80088f0:	2301      	movs	r3, #1
 80088f2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	41615252 	.word	0x41615252
 8008904:	61417272 	.word	0x61417272

08008908 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	3b02      	subs	r3, #2
 8008916:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	69db      	ldr	r3, [r3, #28]
 800891c:	3b02      	subs	r3, #2
 800891e:	683a      	ldr	r2, [r7, #0]
 8008920:	429a      	cmp	r2, r3
 8008922:	d301      	bcc.n	8008928 <clust2sect+0x20>
 8008924:	2300      	movs	r3, #0
 8008926:	e008      	b.n	800893a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	895b      	ldrh	r3, [r3, #10]
 800892c:	461a      	mov	r2, r3
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	fb03 f202 	mul.w	r2, r3, r2
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008938:	4413      	add	r3, r2
}
 800893a:	4618      	mov	r0, r3
 800893c:	370c      	adds	r7, #12
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b086      	sub	sp, #24
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	2b01      	cmp	r3, #1
 800895a:	d904      	bls.n	8008966 <get_fat+0x20>
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	69db      	ldr	r3, [r3, #28]
 8008960:	683a      	ldr	r2, [r7, #0]
 8008962:	429a      	cmp	r2, r3
 8008964:	d302      	bcc.n	800896c <get_fat+0x26>
		val = 1;	/* Internal error */
 8008966:	2301      	movs	r3, #1
 8008968:	617b      	str	r3, [r7, #20]
 800896a:	e0bb      	b.n	8008ae4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800896c:	f04f 33ff 	mov.w	r3, #4294967295
 8008970:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	2b03      	cmp	r3, #3
 8008978:	f000 8083 	beq.w	8008a82 <get_fat+0x13c>
 800897c:	2b03      	cmp	r3, #3
 800897e:	f300 80a7 	bgt.w	8008ad0 <get_fat+0x18a>
 8008982:	2b01      	cmp	r3, #1
 8008984:	d002      	beq.n	800898c <get_fat+0x46>
 8008986:	2b02      	cmp	r3, #2
 8008988:	d056      	beq.n	8008a38 <get_fat+0xf2>
 800898a:	e0a1      	b.n	8008ad0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	60fb      	str	r3, [r7, #12]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	085b      	lsrs	r3, r3, #1
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	4413      	add	r3, r2
 8008998:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	899b      	ldrh	r3, [r3, #12]
 80089a2:	4619      	mov	r1, r3
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80089aa:	4413      	add	r3, r2
 80089ac:	4619      	mov	r1, r3
 80089ae:	6938      	ldr	r0, [r7, #16]
 80089b0:	f7ff ff0c 	bl	80087cc <move_window>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f040 808d 	bne.w	8008ad6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	1c5a      	adds	r2, r3, #1
 80089c0:	60fa      	str	r2, [r7, #12]
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	8992      	ldrh	r2, [r2, #12]
 80089c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80089ca:	fb01 f202 	mul.w	r2, r1, r2
 80089ce:	1a9b      	subs	r3, r3, r2
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	4413      	add	r3, r2
 80089d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80089d8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	899b      	ldrh	r3, [r3, #12]
 80089e2:	4619      	mov	r1, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80089ea:	4413      	add	r3, r2
 80089ec:	4619      	mov	r1, r3
 80089ee:	6938      	ldr	r0, [r7, #16]
 80089f0:	f7ff feec 	bl	80087cc <move_window>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d16f      	bne.n	8008ada <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	899b      	ldrh	r3, [r3, #12]
 80089fe:	461a      	mov	r2, r3
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a06:	fb01 f202 	mul.w	r2, r1, r2
 8008a0a:	1a9b      	subs	r3, r3, r2
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	4413      	add	r3, r2
 8008a10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a14:	021b      	lsls	r3, r3, #8
 8008a16:	461a      	mov	r2, r3
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d002      	beq.n	8008a2e <get_fat+0xe8>
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	091b      	lsrs	r3, r3, #4
 8008a2c:	e002      	b.n	8008a34 <get_fat+0xee>
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a34:	617b      	str	r3, [r7, #20]
			break;
 8008a36:	e055      	b.n	8008ae4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	899b      	ldrh	r3, [r3, #12]
 8008a40:	085b      	lsrs	r3, r3, #1
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	4619      	mov	r1, r3
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a4c:	4413      	add	r3, r2
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6938      	ldr	r0, [r7, #16]
 8008a52:	f7ff febb 	bl	80087cc <move_window>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d140      	bne.n	8008ade <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	005b      	lsls	r3, r3, #1
 8008a66:	693a      	ldr	r2, [r7, #16]
 8008a68:	8992      	ldrh	r2, [r2, #12]
 8008a6a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a6e:	fb00 f202 	mul.w	r2, r0, r2
 8008a72:	1a9b      	subs	r3, r3, r2
 8008a74:	440b      	add	r3, r1
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7ff fbf8 	bl	800826c <ld_word>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	617b      	str	r3, [r7, #20]
			break;
 8008a80:	e030      	b.n	8008ae4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	899b      	ldrh	r3, [r3, #12]
 8008a8a:	089b      	lsrs	r3, r3, #2
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	4619      	mov	r1, r3
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a96:	4413      	add	r3, r2
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6938      	ldr	r0, [r7, #16]
 8008a9c:	f7ff fe96 	bl	80087cc <move_window>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d11d      	bne.n	8008ae2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	8992      	ldrh	r2, [r2, #12]
 8008ab4:	fbb3 f0f2 	udiv	r0, r3, r2
 8008ab8:	fb00 f202 	mul.w	r2, r0, r2
 8008abc:	1a9b      	subs	r3, r3, r2
 8008abe:	440b      	add	r3, r1
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7ff fbeb 	bl	800829c <ld_dword>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008acc:	617b      	str	r3, [r7, #20]
			break;
 8008ace:	e009      	b.n	8008ae4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	617b      	str	r3, [r7, #20]
 8008ad4:	e006      	b.n	8008ae4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008ad6:	bf00      	nop
 8008ad8:	e004      	b.n	8008ae4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008ada:	bf00      	nop
 8008adc:	e002      	b.n	8008ae4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008ade:	bf00      	nop
 8008ae0:	e000      	b.n	8008ae4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008ae2:	bf00      	nop
		}
	}

	return val;
 8008ae4:	697b      	ldr	r3, [r7, #20]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3718      	adds	r7, #24
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008aee:	b590      	push	{r4, r7, lr}
 8008af0:	b089      	sub	sp, #36	; 0x24
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	60f8      	str	r0, [r7, #12]
 8008af6:	60b9      	str	r1, [r7, #8]
 8008af8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008afa:	2302      	movs	r3, #2
 8008afc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	f240 8102 	bls.w	8008d0a <put_fat+0x21c>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	f080 80fc 	bcs.w	8008d0a <put_fat+0x21c>
		switch (fs->fs_type) {
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	2b03      	cmp	r3, #3
 8008b18:	f000 80b6 	beq.w	8008c88 <put_fat+0x19a>
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	f300 80fd 	bgt.w	8008d1c <put_fat+0x22e>
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d003      	beq.n	8008b2e <put_fat+0x40>
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	f000 8083 	beq.w	8008c32 <put_fat+0x144>
 8008b2c:	e0f6      	b.n	8008d1c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	61bb      	str	r3, [r7, #24]
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	085b      	lsrs	r3, r3, #1
 8008b36:	69ba      	ldr	r2, [r7, #24]
 8008b38:	4413      	add	r3, r2
 8008b3a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	899b      	ldrh	r3, [r3, #12]
 8008b44:	4619      	mov	r1, r3
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b4c:	4413      	add	r3, r2
 8008b4e:	4619      	mov	r1, r3
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f7ff fe3b 	bl	80087cc <move_window>
 8008b56:	4603      	mov	r3, r0
 8008b58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b5a:	7ffb      	ldrb	r3, [r7, #31]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f040 80d6 	bne.w	8008d0e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	1c5a      	adds	r2, r3, #1
 8008b6c:	61ba      	str	r2, [r7, #24]
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	8992      	ldrh	r2, [r2, #12]
 8008b72:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b76:	fb00 f202 	mul.w	r2, r0, r2
 8008b7a:	1a9b      	subs	r3, r3, r2
 8008b7c:	440b      	add	r3, r1
 8008b7e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	f003 0301 	and.w	r3, r3, #1
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00d      	beq.n	8008ba6 <put_fat+0xb8>
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	b25b      	sxtb	r3, r3
 8008b90:	f003 030f 	and.w	r3, r3, #15
 8008b94:	b25a      	sxtb	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	011b      	lsls	r3, r3, #4
 8008b9c:	b25b      	sxtb	r3, r3
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	b25b      	sxtb	r3, r3
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	e001      	b.n	8008baa <put_fat+0xbc>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	697a      	ldr	r2, [r7, #20]
 8008bac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	899b      	ldrh	r3, [r3, #12]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8008bc4:	4413      	add	r3, r2
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f7ff fdff 	bl	80087cc <move_window>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008bd2:	7ffb      	ldrb	r3, [r7, #31]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f040 809c 	bne.w	8008d12 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	899b      	ldrh	r3, [r3, #12]
 8008be4:	461a      	mov	r2, r3
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	fbb3 f0f2 	udiv	r0, r3, r2
 8008bec:	fb00 f202 	mul.w	r2, r0, r2
 8008bf0:	1a9b      	subs	r3, r3, r2
 8008bf2:	440b      	add	r3, r1
 8008bf4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	f003 0301 	and.w	r3, r3, #1
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d003      	beq.n	8008c08 <put_fat+0x11a>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	091b      	lsrs	r3, r3, #4
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	e00e      	b.n	8008c26 <put_fat+0x138>
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	b25b      	sxtb	r3, r3
 8008c0e:	f023 030f 	bic.w	r3, r3, #15
 8008c12:	b25a      	sxtb	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	0a1b      	lsrs	r3, r3, #8
 8008c18:	b25b      	sxtb	r3, r3
 8008c1a:	f003 030f 	and.w	r3, r3, #15
 8008c1e:	b25b      	sxtb	r3, r3
 8008c20:	4313      	orrs	r3, r2
 8008c22:	b25b      	sxtb	r3, r3
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	70da      	strb	r2, [r3, #3]
			break;
 8008c30:	e074      	b.n	8008d1c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	899b      	ldrh	r3, [r3, #12]
 8008c3a:	085b      	lsrs	r3, r3, #1
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	4619      	mov	r1, r3
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c46:	4413      	add	r3, r2
 8008c48:	4619      	mov	r1, r3
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f7ff fdbe 	bl	80087cc <move_window>
 8008c50:	4603      	mov	r3, r0
 8008c52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008c54:	7ffb      	ldrb	r3, [r7, #31]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d15d      	bne.n	8008d16 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	005b      	lsls	r3, r3, #1
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	8992      	ldrh	r2, [r2, #12]
 8008c68:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c6c:	fb00 f202 	mul.w	r2, r0, r2
 8008c70:	1a9b      	subs	r3, r3, r2
 8008c72:	440b      	add	r3, r1
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	b292      	uxth	r2, r2
 8008c78:	4611      	mov	r1, r2
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7ff fb31 	bl	80082e2 <st_word>
			fs->wflag = 1;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2201      	movs	r2, #1
 8008c84:	70da      	strb	r2, [r3, #3]
			break;
 8008c86:	e049      	b.n	8008d1c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	899b      	ldrh	r3, [r3, #12]
 8008c90:	089b      	lsrs	r3, r3, #2
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	4619      	mov	r1, r3
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c9c:	4413      	add	r3, r2
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f7ff fd93 	bl	80087cc <move_window>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008caa:	7ffb      	ldrb	r3, [r7, #31]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d134      	bne.n	8008d1a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	8992      	ldrh	r2, [r2, #12]
 8008cc4:	fbb3 f0f2 	udiv	r0, r3, r2
 8008cc8:	fb00 f202 	mul.w	r2, r0, r2
 8008ccc:	1a9b      	subs	r3, r3, r2
 8008cce:	440b      	add	r3, r1
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7ff fae3 	bl	800829c <ld_dword>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008cdc:	4323      	orrs	r3, r4
 8008cde:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	8992      	ldrh	r2, [r2, #12]
 8008cee:	fbb3 f0f2 	udiv	r0, r3, r2
 8008cf2:	fb00 f202 	mul.w	r2, r0, r2
 8008cf6:	1a9b      	subs	r3, r3, r2
 8008cf8:	440b      	add	r3, r1
 8008cfa:	6879      	ldr	r1, [r7, #4]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7ff fb0b 	bl	8008318 <st_dword>
			fs->wflag = 1;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2201      	movs	r2, #1
 8008d06:	70da      	strb	r2, [r3, #3]
			break;
 8008d08:	e008      	b.n	8008d1c <put_fat+0x22e>
		}
	}
 8008d0a:	bf00      	nop
 8008d0c:	e006      	b.n	8008d1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8008d0e:	bf00      	nop
 8008d10:	e004      	b.n	8008d1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8008d12:	bf00      	nop
 8008d14:	e002      	b.n	8008d1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8008d16:	bf00      	nop
 8008d18:	e000      	b.n	8008d1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8008d1a:	bf00      	nop
	return res;
 8008d1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3724      	adds	r7, #36	; 0x24
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd90      	pop	{r4, r7, pc}

08008d26 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b088      	sub	sp, #32
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	60f8      	str	r0, [r7, #12]
 8008d2e:	60b9      	str	r1, [r7, #8]
 8008d30:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d904      	bls.n	8008d4c <remove_chain+0x26>
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	69db      	ldr	r3, [r3, #28]
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d301      	bcc.n	8008d50 <remove_chain+0x2a>
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	e04b      	b.n	8008de8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00c      	beq.n	8008d70 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008d56:	f04f 32ff 	mov.w	r2, #4294967295
 8008d5a:	6879      	ldr	r1, [r7, #4]
 8008d5c:	69b8      	ldr	r0, [r7, #24]
 8008d5e:	f7ff fec6 	bl	8008aee <put_fat>
 8008d62:	4603      	mov	r3, r0
 8008d64:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008d66:	7ffb      	ldrb	r3, [r7, #31]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d001      	beq.n	8008d70 <remove_chain+0x4a>
 8008d6c:	7ffb      	ldrb	r3, [r7, #31]
 8008d6e:	e03b      	b.n	8008de8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008d70:	68b9      	ldr	r1, [r7, #8]
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f7ff fde7 	bl	8008946 <get_fat>
 8008d78:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d031      	beq.n	8008de4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d101      	bne.n	8008d8a <remove_chain+0x64>
 8008d86:	2302      	movs	r3, #2
 8008d88:	e02e      	b.n	8008de8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d90:	d101      	bne.n	8008d96 <remove_chain+0x70>
 8008d92:	2301      	movs	r3, #1
 8008d94:	e028      	b.n	8008de8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008d96:	2200      	movs	r2, #0
 8008d98:	68b9      	ldr	r1, [r7, #8]
 8008d9a:	69b8      	ldr	r0, [r7, #24]
 8008d9c:	f7ff fea7 	bl	8008aee <put_fat>
 8008da0:	4603      	mov	r3, r0
 8008da2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008da4:	7ffb      	ldrb	r3, [r7, #31]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d001      	beq.n	8008dae <remove_chain+0x88>
 8008daa:	7ffb      	ldrb	r3, [r7, #31]
 8008dac:	e01c      	b.n	8008de8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	699a      	ldr	r2, [r3, #24]
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	3b02      	subs	r3, #2
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d20b      	bcs.n	8008dd4 <remove_chain+0xae>
			fs->free_clst++;
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	699b      	ldr	r3, [r3, #24]
 8008dc0:	1c5a      	adds	r2, r3, #1
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	791b      	ldrb	r3, [r3, #4]
 8008dca:	f043 0301 	orr.w	r3, r3, #1
 8008dce:	b2da      	uxtb	r2, r3
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	69db      	ldr	r3, [r3, #28]
 8008ddc:	68ba      	ldr	r2, [r7, #8]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d3c6      	bcc.n	8008d70 <remove_chain+0x4a>
 8008de2:	e000      	b.n	8008de6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008de4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3720      	adds	r7, #32
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b088      	sub	sp, #32
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d10d      	bne.n	8008e22 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d004      	beq.n	8008e1c <create_chain+0x2c>
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	69db      	ldr	r3, [r3, #28]
 8008e16:	69ba      	ldr	r2, [r7, #24]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d31b      	bcc.n	8008e54 <create_chain+0x64>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	61bb      	str	r3, [r7, #24]
 8008e20:	e018      	b.n	8008e54 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008e22:	6839      	ldr	r1, [r7, #0]
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f7ff fd8e 	bl	8008946 <get_fat>
 8008e2a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d801      	bhi.n	8008e36 <create_chain+0x46>
 8008e32:	2301      	movs	r3, #1
 8008e34:	e070      	b.n	8008f18 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e3c:	d101      	bne.n	8008e42 <create_chain+0x52>
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	e06a      	b.n	8008f18 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	69db      	ldr	r3, [r3, #28]
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d201      	bcs.n	8008e50 <create_chain+0x60>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	e063      	b.n	8008f18 <create_chain+0x128>
		scl = clst;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	69db      	ldr	r3, [r3, #28]
 8008e62:	69fa      	ldr	r2, [r7, #28]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d307      	bcc.n	8008e78 <create_chain+0x88>
				ncl = 2;
 8008e68:	2302      	movs	r3, #2
 8008e6a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008e6c:	69fa      	ldr	r2, [r7, #28]
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d901      	bls.n	8008e78 <create_chain+0x88>
 8008e74:	2300      	movs	r3, #0
 8008e76:	e04f      	b.n	8008f18 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008e78:	69f9      	ldr	r1, [r7, #28]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f7ff fd63 	bl	8008946 <get_fat>
 8008e80:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00e      	beq.n	8008ea6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d003      	beq.n	8008e96 <create_chain+0xa6>
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e94:	d101      	bne.n	8008e9a <create_chain+0xaa>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	e03e      	b.n	8008f18 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008e9a:	69fa      	ldr	r2, [r7, #28]
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d1da      	bne.n	8008e58 <create_chain+0x68>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	e038      	b.n	8008f18 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008ea6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8008eac:	69f9      	ldr	r1, [r7, #28]
 8008eae:	6938      	ldr	r0, [r7, #16]
 8008eb0:	f7ff fe1d 	bl	8008aee <put_fat>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008eb8:	7dfb      	ldrb	r3, [r7, #23]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d109      	bne.n	8008ed2 <create_chain+0xe2>
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d006      	beq.n	8008ed2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008ec4:	69fa      	ldr	r2, [r7, #28]
 8008ec6:	6839      	ldr	r1, [r7, #0]
 8008ec8:	6938      	ldr	r0, [r7, #16]
 8008eca:	f7ff fe10 	bl	8008aee <put_fat>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008ed2:	7dfb      	ldrb	r3, [r7, #23]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d116      	bne.n	8008f06 <create_chain+0x116>
		fs->last_clst = ncl;
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	69fa      	ldr	r2, [r7, #28]
 8008edc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	699a      	ldr	r2, [r3, #24]
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	69db      	ldr	r3, [r3, #28]
 8008ee6:	3b02      	subs	r3, #2
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d804      	bhi.n	8008ef6 <create_chain+0x106>
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	1e5a      	subs	r2, r3, #1
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	791b      	ldrb	r3, [r3, #4]
 8008efa:	f043 0301 	orr.w	r3, r3, #1
 8008efe:	b2da      	uxtb	r2, r3
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	711a      	strb	r2, [r3, #4]
 8008f04:	e007      	b.n	8008f16 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008f06:	7dfb      	ldrb	r3, [r7, #23]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d102      	bne.n	8008f12 <create_chain+0x122>
 8008f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f10:	e000      	b.n	8008f14 <create_chain+0x124>
 8008f12:	2301      	movs	r3, #1
 8008f14:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008f16:	69fb      	ldr	r3, [r7, #28]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3720      	adds	r7, #32
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b087      	sub	sp, #28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f34:	3304      	adds	r3, #4
 8008f36:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	899b      	ldrh	r3, [r3, #12]
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	8952      	ldrh	r2, [r2, #10]
 8008f48:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f4c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	1d1a      	adds	r2, r3, #4
 8008f52:	613a      	str	r2, [r7, #16]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <clmt_clust+0x42>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	e010      	b.n	8008f84 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008f62:	697a      	ldr	r2, [r7, #20]
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d307      	bcc.n	8008f7a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	1ad3      	subs	r3, r2, r3
 8008f70:	617b      	str	r3, [r7, #20]
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	3304      	adds	r3, #4
 8008f76:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008f78:	e7e9      	b.n	8008f4e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008f7a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	4413      	add	r3, r2
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	371c      	adds	r7, #28
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b086      	sub	sp, #24
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fa6:	d204      	bcs.n	8008fb2 <dir_sdi+0x22>
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	f003 031f 	and.w	r3, r3, #31
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008fb2:	2302      	movs	r3, #2
 8008fb4:	e071      	b.n	800909a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	683a      	ldr	r2, [r7, #0]
 8008fba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d106      	bne.n	8008fd6 <dir_sdi+0x46>
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d902      	bls.n	8008fd6 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10c      	bne.n	8008ff6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	095b      	lsrs	r3, r3, #5
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	8912      	ldrh	r2, [r2, #8]
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d301      	bcc.n	8008fec <dir_sdi+0x5c>
 8008fe8:	2302      	movs	r3, #2
 8008fea:	e056      	b.n	800909a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	61da      	str	r2, [r3, #28]
 8008ff4:	e02d      	b.n	8009052 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	895b      	ldrh	r3, [r3, #10]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	899b      	ldrh	r3, [r3, #12]
 8009000:	fb02 f303 	mul.w	r3, r2, r3
 8009004:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009006:	e019      	b.n	800903c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6979      	ldr	r1, [r7, #20]
 800900c:	4618      	mov	r0, r3
 800900e:	f7ff fc9a 	bl	8008946 <get_fat>
 8009012:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800901a:	d101      	bne.n	8009020 <dir_sdi+0x90>
 800901c:	2301      	movs	r3, #1
 800901e:	e03c      	b.n	800909a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	2b01      	cmp	r3, #1
 8009024:	d904      	bls.n	8009030 <dir_sdi+0xa0>
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	69db      	ldr	r3, [r3, #28]
 800902a:	697a      	ldr	r2, [r7, #20]
 800902c:	429a      	cmp	r2, r3
 800902e:	d301      	bcc.n	8009034 <dir_sdi+0xa4>
 8009030:	2302      	movs	r3, #2
 8009032:	e032      	b.n	800909a <dir_sdi+0x10a>
			ofs -= csz;
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	429a      	cmp	r2, r3
 8009042:	d2e1      	bcs.n	8009008 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009044:	6979      	ldr	r1, [r7, #20]
 8009046:	6938      	ldr	r0, [r7, #16]
 8009048:	f7ff fc5e 	bl	8008908 <clust2sect>
 800904c:	4602      	mov	r2, r0
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	697a      	ldr	r2, [r7, #20]
 8009056:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	69db      	ldr	r3, [r3, #28]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d101      	bne.n	8009064 <dir_sdi+0xd4>
 8009060:	2302      	movs	r3, #2
 8009062:	e01a      	b.n	800909a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	69da      	ldr	r2, [r3, #28]
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	899b      	ldrh	r3, [r3, #12]
 800906c:	4619      	mov	r1, r3
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	fbb3 f3f1 	udiv	r3, r3, r1
 8009074:	441a      	add	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	899b      	ldrh	r3, [r3, #12]
 8009084:	461a      	mov	r2, r3
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	fbb3 f0f2 	udiv	r0, r3, r2
 800908c:	fb00 f202 	mul.w	r2, r0, r2
 8009090:	1a9b      	subs	r3, r3, r2
 8009092:	18ca      	adds	r2, r1, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3718      	adds	r7, #24
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b086      	sub	sp, #24
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	695b      	ldr	r3, [r3, #20]
 80090b6:	3320      	adds	r3, #32
 80090b8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	69db      	ldr	r3, [r3, #28]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <dir_next+0x28>
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090c8:	d301      	bcc.n	80090ce <dir_next+0x2c>
 80090ca:	2304      	movs	r3, #4
 80090cc:	e0bb      	b.n	8009246 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	899b      	ldrh	r3, [r3, #12]
 80090d2:	461a      	mov	r2, r3
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80090da:	fb01 f202 	mul.w	r2, r1, r2
 80090de:	1a9b      	subs	r3, r3, r2
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f040 809d 	bne.w	8009220 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	69db      	ldr	r3, [r3, #28]
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	699b      	ldr	r3, [r3, #24]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10b      	bne.n	8009110 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	095b      	lsrs	r3, r3, #5
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	8912      	ldrh	r2, [r2, #8]
 8009100:	4293      	cmp	r3, r2
 8009102:	f0c0 808d 	bcc.w	8009220 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	61da      	str	r2, [r3, #28]
 800910c:	2304      	movs	r3, #4
 800910e:	e09a      	b.n	8009246 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	899b      	ldrh	r3, [r3, #12]
 8009114:	461a      	mov	r2, r3
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	fbb3 f3f2 	udiv	r3, r3, r2
 800911c:	68fa      	ldr	r2, [r7, #12]
 800911e:	8952      	ldrh	r2, [r2, #10]
 8009120:	3a01      	subs	r2, #1
 8009122:	4013      	ands	r3, r2
 8009124:	2b00      	cmp	r3, #0
 8009126:	d17b      	bne.n	8009220 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	699b      	ldr	r3, [r3, #24]
 800912e:	4619      	mov	r1, r3
 8009130:	4610      	mov	r0, r2
 8009132:	f7ff fc08 	bl	8008946 <get_fat>
 8009136:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	2b01      	cmp	r3, #1
 800913c:	d801      	bhi.n	8009142 <dir_next+0xa0>
 800913e:	2302      	movs	r3, #2
 8009140:	e081      	b.n	8009246 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009148:	d101      	bne.n	800914e <dir_next+0xac>
 800914a:	2301      	movs	r3, #1
 800914c:	e07b      	b.n	8009246 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	69db      	ldr	r3, [r3, #28]
 8009152:	697a      	ldr	r2, [r7, #20]
 8009154:	429a      	cmp	r2, r3
 8009156:	d359      	bcc.n	800920c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d104      	bne.n	8009168 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	61da      	str	r2, [r3, #28]
 8009164:	2304      	movs	r3, #4
 8009166:	e06e      	b.n	8009246 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	699b      	ldr	r3, [r3, #24]
 800916e:	4619      	mov	r1, r3
 8009170:	4610      	mov	r0, r2
 8009172:	f7ff fe3d 	bl	8008df0 <create_chain>
 8009176:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d101      	bne.n	8009182 <dir_next+0xe0>
 800917e:	2307      	movs	r3, #7
 8009180:	e061      	b.n	8009246 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d101      	bne.n	800918c <dir_next+0xea>
 8009188:	2302      	movs	r3, #2
 800918a:	e05c      	b.n	8009246 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009192:	d101      	bne.n	8009198 <dir_next+0xf6>
 8009194:	2301      	movs	r3, #1
 8009196:	e056      	b.n	8009246 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f7ff fad3 	bl	8008744 <sync_window>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <dir_next+0x106>
 80091a4:	2301      	movs	r3, #1
 80091a6:	e04e      	b.n	8009246 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	899b      	ldrh	r3, [r3, #12]
 80091b2:	461a      	mov	r2, r3
 80091b4:	2100      	movs	r1, #0
 80091b6:	f7ff f8fc 	bl	80083b2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80091ba:	2300      	movs	r3, #0
 80091bc:	613b      	str	r3, [r7, #16]
 80091be:	6979      	ldr	r1, [r7, #20]
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f7ff fba1 	bl	8008908 <clust2sect>
 80091c6:	4602      	mov	r2, r0
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	635a      	str	r2, [r3, #52]	; 0x34
 80091cc:	e012      	b.n	80091f4 <dir_next+0x152>
						fs->wflag = 1;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2201      	movs	r2, #1
 80091d2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f7ff fab5 	bl	8008744 <sync_window>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d001      	beq.n	80091e4 <dir_next+0x142>
 80091e0:	2301      	movs	r3, #1
 80091e2:	e030      	b.n	8009246 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	3301      	adds	r3, #1
 80091e8:	613b      	str	r3, [r7, #16]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ee:	1c5a      	adds	r2, r3, #1
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	635a      	str	r2, [r3, #52]	; 0x34
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	895b      	ldrh	r3, [r3, #10]
 80091f8:	461a      	mov	r2, r3
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d3e6      	bcc.n	80091ce <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	1ad2      	subs	r2, r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009212:	6979      	ldr	r1, [r7, #20]
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f7ff fb77 	bl	8008908 <clust2sect>
 800921a:	4602      	mov	r2, r0
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	899b      	ldrh	r3, [r3, #12]
 8009230:	461a      	mov	r2, r3
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	fbb3 f0f2 	udiv	r0, r3, r2
 8009238:	fb00 f202 	mul.w	r2, r0, r2
 800923c:	1a9b      	subs	r3, r3, r2
 800923e:	18ca      	adds	r2, r1, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3718      	adds	r7, #24
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b086      	sub	sp, #24
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800925e:	2100      	movs	r1, #0
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f7ff fe95 	bl	8008f90 <dir_sdi>
 8009266:	4603      	mov	r3, r0
 8009268:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800926a:	7dfb      	ldrb	r3, [r7, #23]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d12b      	bne.n	80092c8 <dir_alloc+0x7a>
		n = 0;
 8009270:	2300      	movs	r3, #0
 8009272:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	69db      	ldr	r3, [r3, #28]
 8009278:	4619      	mov	r1, r3
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f7ff faa6 	bl	80087cc <move_window>
 8009280:	4603      	mov	r3, r0
 8009282:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009284:	7dfb      	ldrb	r3, [r7, #23]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d11d      	bne.n	80092c6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a1b      	ldr	r3, [r3, #32]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	2be5      	cmp	r3, #229	; 0xe5
 8009292:	d004      	beq.n	800929e <dir_alloc+0x50>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a1b      	ldr	r3, [r3, #32]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d107      	bne.n	80092ae <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	3301      	adds	r3, #1
 80092a2:	613b      	str	r3, [r7, #16]
 80092a4:	693a      	ldr	r2, [r7, #16]
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d102      	bne.n	80092b2 <dir_alloc+0x64>
 80092ac:	e00c      	b.n	80092c8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80092ae:	2300      	movs	r3, #0
 80092b0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80092b2:	2101      	movs	r1, #1
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f7ff fef4 	bl	80090a2 <dir_next>
 80092ba:	4603      	mov	r3, r0
 80092bc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80092be:	7dfb      	ldrb	r3, [r7, #23]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d0d7      	beq.n	8009274 <dir_alloc+0x26>
 80092c4:	e000      	b.n	80092c8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80092c6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80092c8:	7dfb      	ldrb	r3, [r7, #23]
 80092ca:	2b04      	cmp	r3, #4
 80092cc:	d101      	bne.n	80092d2 <dir_alloc+0x84>
 80092ce:	2307      	movs	r3, #7
 80092d0:	75fb      	strb	r3, [r7, #23]
	return res;
 80092d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3718      	adds	r7, #24
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	331a      	adds	r3, #26
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fe ffbe 	bl	800826c <ld_word>
 80092f0:	4603      	mov	r3, r0
 80092f2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	2b03      	cmp	r3, #3
 80092fa:	d109      	bne.n	8009310 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	3314      	adds	r3, #20
 8009300:	4618      	mov	r0, r3
 8009302:	f7fe ffb3 	bl	800826c <ld_word>
 8009306:	4603      	mov	r3, r0
 8009308:	041b      	lsls	r3, r3, #16
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	4313      	orrs	r3, r2
 800930e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009310:	68fb      	ldr	r3, [r7, #12]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b084      	sub	sp, #16
 800931e:	af00      	add	r7, sp, #0
 8009320:	60f8      	str	r0, [r7, #12]
 8009322:	60b9      	str	r1, [r7, #8]
 8009324:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	331a      	adds	r3, #26
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	b292      	uxth	r2, r2
 800932e:	4611      	mov	r1, r2
 8009330:	4618      	mov	r0, r3
 8009332:	f7fe ffd6 	bl	80082e2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	2b03      	cmp	r3, #3
 800933c:	d109      	bne.n	8009352 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f103 0214 	add.w	r2, r3, #20
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	0c1b      	lsrs	r3, r3, #16
 8009348:	b29b      	uxth	r3, r3
 800934a:	4619      	mov	r1, r3
 800934c:	4610      	mov	r0, r2
 800934e:	f7fe ffc8 	bl	80082e2 <st_word>
	}
}
 8009352:	bf00      	nop
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
	...

0800935c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800935c:	b590      	push	{r4, r7, lr}
 800935e:	b087      	sub	sp, #28
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	331a      	adds	r3, #26
 800936a:	4618      	mov	r0, r3
 800936c:	f7fe ff7e 	bl	800826c <ld_word>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d001      	beq.n	800937a <cmp_lfn+0x1e>
 8009376:	2300      	movs	r3, #0
 8009378:	e059      	b.n	800942e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009382:	1e5a      	subs	r2, r3, #1
 8009384:	4613      	mov	r3, r2
 8009386:	005b      	lsls	r3, r3, #1
 8009388:	4413      	add	r3, r2
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	4413      	add	r3, r2
 800938e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009390:	2301      	movs	r3, #1
 8009392:	81fb      	strh	r3, [r7, #14]
 8009394:	2300      	movs	r3, #0
 8009396:	613b      	str	r3, [r7, #16]
 8009398:	e033      	b.n	8009402 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800939a:	4a27      	ldr	r2, [pc, #156]	; (8009438 <cmp_lfn+0xdc>)
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	4413      	add	r3, r2
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	461a      	mov	r2, r3
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	4413      	add	r3, r2
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fe ff5f 	bl	800826c <ld_word>
 80093ae:	4603      	mov	r3, r0
 80093b0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80093b2:	89fb      	ldrh	r3, [r7, #14]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d01a      	beq.n	80093ee <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	2bfe      	cmp	r3, #254	; 0xfe
 80093bc:	d812      	bhi.n	80093e4 <cmp_lfn+0x88>
 80093be:	89bb      	ldrh	r3, [r7, #12]
 80093c0:	4618      	mov	r0, r3
 80093c2:	f001 fe8d 	bl	800b0e0 <ff_wtoupper>
 80093c6:	4603      	mov	r3, r0
 80093c8:	461c      	mov	r4, r3
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	1c5a      	adds	r2, r3, #1
 80093ce:	617a      	str	r2, [r7, #20]
 80093d0:	005b      	lsls	r3, r3, #1
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	4413      	add	r3, r2
 80093d6:	881b      	ldrh	r3, [r3, #0]
 80093d8:	4618      	mov	r0, r3
 80093da:	f001 fe81 	bl	800b0e0 <ff_wtoupper>
 80093de:	4603      	mov	r3, r0
 80093e0:	429c      	cmp	r4, r3
 80093e2:	d001      	beq.n	80093e8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80093e4:	2300      	movs	r3, #0
 80093e6:	e022      	b.n	800942e <cmp_lfn+0xd2>
			}
			wc = uc;
 80093e8:	89bb      	ldrh	r3, [r7, #12]
 80093ea:	81fb      	strh	r3, [r7, #14]
 80093ec:	e006      	b.n	80093fc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80093ee:	89bb      	ldrh	r3, [r7, #12]
 80093f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d001      	beq.n	80093fc <cmp_lfn+0xa0>
 80093f8:	2300      	movs	r3, #0
 80093fa:	e018      	b.n	800942e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	3301      	adds	r3, #1
 8009400:	613b      	str	r3, [r7, #16]
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	2b0c      	cmp	r3, #12
 8009406:	d9c8      	bls.n	800939a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00b      	beq.n	800942c <cmp_lfn+0xd0>
 8009414:	89fb      	ldrh	r3, [r7, #14]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d008      	beq.n	800942c <cmp_lfn+0xd0>
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	005b      	lsls	r3, r3, #1
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	4413      	add	r3, r2
 8009422:	881b      	ldrh	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d001      	beq.n	800942c <cmp_lfn+0xd0>
 8009428:	2300      	movs	r3, #0
 800942a:	e000      	b.n	800942e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800942c:	2301      	movs	r3, #1
}
 800942e:	4618      	mov	r0, r3
 8009430:	371c      	adds	r7, #28
 8009432:	46bd      	mov	sp, r7
 8009434:	bd90      	pop	{r4, r7, pc}
 8009436:	bf00      	nop
 8009438:	0800bc90 	.word	0x0800bc90

0800943c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b088      	sub	sp, #32
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	4611      	mov	r1, r2
 8009448:	461a      	mov	r2, r3
 800944a:	460b      	mov	r3, r1
 800944c:	71fb      	strb	r3, [r7, #7]
 800944e:	4613      	mov	r3, r2
 8009450:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	330d      	adds	r3, #13
 8009456:	79ba      	ldrb	r2, [r7, #6]
 8009458:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	330b      	adds	r3, #11
 800945e:	220f      	movs	r2, #15
 8009460:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	330c      	adds	r3, #12
 8009466:	2200      	movs	r2, #0
 8009468:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	331a      	adds	r3, #26
 800946e:	2100      	movs	r1, #0
 8009470:	4618      	mov	r0, r3
 8009472:	f7fe ff36 	bl	80082e2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009476:	79fb      	ldrb	r3, [r7, #7]
 8009478:	1e5a      	subs	r2, r3, #1
 800947a:	4613      	mov	r3, r2
 800947c:	005b      	lsls	r3, r3, #1
 800947e:	4413      	add	r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4413      	add	r3, r2
 8009484:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009486:	2300      	movs	r3, #0
 8009488:	82fb      	strh	r3, [r7, #22]
 800948a:	2300      	movs	r3, #0
 800948c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800948e:	8afb      	ldrh	r3, [r7, #22]
 8009490:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009494:	4293      	cmp	r3, r2
 8009496:	d007      	beq.n	80094a8 <put_lfn+0x6c>
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	1c5a      	adds	r2, r3, #1
 800949c:	61fa      	str	r2, [r7, #28]
 800949e:	005b      	lsls	r3, r3, #1
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	4413      	add	r3, r2
 80094a4:	881b      	ldrh	r3, [r3, #0]
 80094a6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80094a8:	4a17      	ldr	r2, [pc, #92]	; (8009508 <put_lfn+0xcc>)
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	4413      	add	r3, r2
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	461a      	mov	r2, r3
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	4413      	add	r3, r2
 80094b6:	8afa      	ldrh	r2, [r7, #22]
 80094b8:	4611      	mov	r1, r2
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7fe ff11 	bl	80082e2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80094c0:	8afb      	ldrh	r3, [r7, #22]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d102      	bne.n	80094cc <put_lfn+0x90>
 80094c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80094ca:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	3301      	adds	r3, #1
 80094d0:	61bb      	str	r3, [r7, #24]
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	2b0c      	cmp	r3, #12
 80094d6:	d9da      	bls.n	800948e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80094d8:	8afb      	ldrh	r3, [r7, #22]
 80094da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094de:	4293      	cmp	r3, r2
 80094e0:	d006      	beq.n	80094f0 <put_lfn+0xb4>
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	005b      	lsls	r3, r3, #1
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	4413      	add	r3, r2
 80094ea:	881b      	ldrh	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d103      	bne.n	80094f8 <put_lfn+0xbc>
 80094f0:	79fb      	ldrb	r3, [r7, #7]
 80094f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094f6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	79fa      	ldrb	r2, [r7, #7]
 80094fc:	701a      	strb	r2, [r3, #0]
}
 80094fe:	bf00      	nop
 8009500:	3720      	adds	r7, #32
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	0800bc90 	.word	0x0800bc90

0800950c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b08c      	sub	sp, #48	; 0x30
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
 8009518:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800951a:	220b      	movs	r2, #11
 800951c:	68b9      	ldr	r1, [r7, #8]
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f7fe ff26 	bl	8008370 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	2b05      	cmp	r3, #5
 8009528:	d92b      	bls.n	8009582 <gen_numname+0x76>
		sr = seq;
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800952e:	e022      	b.n	8009576 <gen_numname+0x6a>
			wc = *lfn++;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	1c9a      	adds	r2, r3, #2
 8009534:	607a      	str	r2, [r7, #4]
 8009536:	881b      	ldrh	r3, [r3, #0]
 8009538:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800953a:	2300      	movs	r3, #0
 800953c:	62bb      	str	r3, [r7, #40]	; 0x28
 800953e:	e017      	b.n	8009570 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	005a      	lsls	r2, r3, #1
 8009544:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009546:	f003 0301 	and.w	r3, r3, #1
 800954a:	4413      	add	r3, r2
 800954c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800954e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009550:	085b      	lsrs	r3, r3, #1
 8009552:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800955a:	2b00      	cmp	r3, #0
 800955c:	d005      	beq.n	800956a <gen_numname+0x5e>
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009564:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8009568:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800956a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956c:	3301      	adds	r3, #1
 800956e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009572:	2b0f      	cmp	r3, #15
 8009574:	d9e4      	bls.n	8009540 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	881b      	ldrh	r3, [r3, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1d8      	bne.n	8009530 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009582:	2307      	movs	r3, #7
 8009584:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	b2db      	uxtb	r3, r3
 800958a:	f003 030f 	and.w	r3, r3, #15
 800958e:	b2db      	uxtb	r3, r3
 8009590:	3330      	adds	r3, #48	; 0x30
 8009592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8009596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800959a:	2b39      	cmp	r3, #57	; 0x39
 800959c:	d904      	bls.n	80095a8 <gen_numname+0x9c>
 800959e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80095a2:	3307      	adds	r3, #7
 80095a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80095a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095aa:	1e5a      	subs	r2, r3, #1
 80095ac:	62ba      	str	r2, [r7, #40]	; 0x28
 80095ae:	3330      	adds	r3, #48	; 0x30
 80095b0:	443b      	add	r3, r7
 80095b2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80095b6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	091b      	lsrs	r3, r3, #4
 80095be:	603b      	str	r3, [r7, #0]
	} while (seq);
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d1df      	bne.n	8009586 <gen_numname+0x7a>
	ns[i] = '~';
 80095c6:	f107 0214 	add.w	r2, r7, #20
 80095ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095cc:	4413      	add	r3, r2
 80095ce:	227e      	movs	r2, #126	; 0x7e
 80095d0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80095d2:	2300      	movs	r3, #0
 80095d4:	627b      	str	r3, [r7, #36]	; 0x24
 80095d6:	e002      	b.n	80095de <gen_numname+0xd2>
 80095d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095da:	3301      	adds	r3, #1
 80095dc:	627b      	str	r3, [r7, #36]	; 0x24
 80095de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d205      	bcs.n	80095f2 <gen_numname+0xe6>
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ea:	4413      	add	r3, r2
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	2b20      	cmp	r3, #32
 80095f0:	d1f2      	bne.n	80095d8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80095f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f4:	2b07      	cmp	r3, #7
 80095f6:	d807      	bhi.n	8009608 <gen_numname+0xfc>
 80095f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fa:	1c5a      	adds	r2, r3, #1
 80095fc:	62ba      	str	r2, [r7, #40]	; 0x28
 80095fe:	3330      	adds	r3, #48	; 0x30
 8009600:	443b      	add	r3, r7
 8009602:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009606:	e000      	b.n	800960a <gen_numname+0xfe>
 8009608:	2120      	movs	r1, #32
 800960a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960c:	1c5a      	adds	r2, r3, #1
 800960e:	627a      	str	r2, [r7, #36]	; 0x24
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	4413      	add	r3, r2
 8009614:	460a      	mov	r2, r1
 8009616:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	2b07      	cmp	r3, #7
 800961c:	d9e9      	bls.n	80095f2 <gen_numname+0xe6>
}
 800961e:	bf00      	nop
 8009620:	bf00      	nop
 8009622:	3730      	adds	r7, #48	; 0x30
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009630:	2300      	movs	r3, #0
 8009632:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009634:	230b      	movs	r3, #11
 8009636:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009638:	7bfb      	ldrb	r3, [r7, #15]
 800963a:	b2da      	uxtb	r2, r3
 800963c:	0852      	lsrs	r2, r2, #1
 800963e:	01db      	lsls	r3, r3, #7
 8009640:	4313      	orrs	r3, r2
 8009642:	b2da      	uxtb	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	1c59      	adds	r1, r3, #1
 8009648:	6079      	str	r1, [r7, #4]
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	4413      	add	r3, r2
 800964e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	3b01      	subs	r3, #1
 8009654:	60bb      	str	r3, [r7, #8]
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1ed      	bne.n	8009638 <sum_sfn+0x10>
	return sum;
 800965c:	7bfb      	ldrb	r3, [r7, #15]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3714      	adds	r7, #20
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr

0800966a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b086      	sub	sp, #24
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009678:	2100      	movs	r1, #0
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f7ff fc88 	bl	8008f90 <dir_sdi>
 8009680:	4603      	mov	r3, r0
 8009682:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009684:	7dfb      	ldrb	r3, [r7, #23]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d001      	beq.n	800968e <dir_find+0x24>
 800968a:	7dfb      	ldrb	r3, [r7, #23]
 800968c:	e0a9      	b.n	80097e2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800968e:	23ff      	movs	r3, #255	; 0xff
 8009690:	753b      	strb	r3, [r7, #20]
 8009692:	7d3b      	ldrb	r3, [r7, #20]
 8009694:	757b      	strb	r3, [r7, #21]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f04f 32ff 	mov.w	r2, #4294967295
 800969c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	69db      	ldr	r3, [r3, #28]
 80096a2:	4619      	mov	r1, r3
 80096a4:	6938      	ldr	r0, [r7, #16]
 80096a6:	f7ff f891 	bl	80087cc <move_window>
 80096aa:	4603      	mov	r3, r0
 80096ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80096ae:	7dfb      	ldrb	r3, [r7, #23]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f040 8090 	bne.w	80097d6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80096be:	7dbb      	ldrb	r3, [r7, #22]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d102      	bne.n	80096ca <dir_find+0x60>
 80096c4:	2304      	movs	r3, #4
 80096c6:	75fb      	strb	r3, [r7, #23]
 80096c8:	e08a      	b.n	80097e0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a1b      	ldr	r3, [r3, #32]
 80096ce:	330b      	adds	r3, #11
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096d6:	73fb      	strb	r3, [r7, #15]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	7bfa      	ldrb	r2, [r7, #15]
 80096dc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80096de:	7dbb      	ldrb	r3, [r7, #22]
 80096e0:	2be5      	cmp	r3, #229	; 0xe5
 80096e2:	d007      	beq.n	80096f4 <dir_find+0x8a>
 80096e4:	7bfb      	ldrb	r3, [r7, #15]
 80096e6:	f003 0308 	and.w	r3, r3, #8
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d009      	beq.n	8009702 <dir_find+0x98>
 80096ee:	7bfb      	ldrb	r3, [r7, #15]
 80096f0:	2b0f      	cmp	r3, #15
 80096f2:	d006      	beq.n	8009702 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80096f4:	23ff      	movs	r3, #255	; 0xff
 80096f6:	757b      	strb	r3, [r7, #21]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f04f 32ff 	mov.w	r2, #4294967295
 80096fe:	631a      	str	r2, [r3, #48]	; 0x30
 8009700:	e05e      	b.n	80097c0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009702:	7bfb      	ldrb	r3, [r7, #15]
 8009704:	2b0f      	cmp	r3, #15
 8009706:	d136      	bne.n	8009776 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800970e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009712:	2b00      	cmp	r3, #0
 8009714:	d154      	bne.n	80097c0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009716:	7dbb      	ldrb	r3, [r7, #22]
 8009718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00d      	beq.n	800973c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6a1b      	ldr	r3, [r3, #32]
 8009724:	7b5b      	ldrb	r3, [r3, #13]
 8009726:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009728:	7dbb      	ldrb	r3, [r7, #22]
 800972a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800972e:	75bb      	strb	r3, [r7, #22]
 8009730:	7dbb      	ldrb	r3, [r7, #22]
 8009732:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	695a      	ldr	r2, [r3, #20]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800973c:	7dba      	ldrb	r2, [r7, #22]
 800973e:	7d7b      	ldrb	r3, [r7, #21]
 8009740:	429a      	cmp	r2, r3
 8009742:	d115      	bne.n	8009770 <dir_find+0x106>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6a1b      	ldr	r3, [r3, #32]
 8009748:	330d      	adds	r3, #13
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	7d3a      	ldrb	r2, [r7, #20]
 800974e:	429a      	cmp	r2, r3
 8009750:	d10e      	bne.n	8009770 <dir_find+0x106>
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	691a      	ldr	r2, [r3, #16]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6a1b      	ldr	r3, [r3, #32]
 800975a:	4619      	mov	r1, r3
 800975c:	4610      	mov	r0, r2
 800975e:	f7ff fdfd 	bl	800935c <cmp_lfn>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d003      	beq.n	8009770 <dir_find+0x106>
 8009768:	7d7b      	ldrb	r3, [r7, #21]
 800976a:	3b01      	subs	r3, #1
 800976c:	b2db      	uxtb	r3, r3
 800976e:	e000      	b.n	8009772 <dir_find+0x108>
 8009770:	23ff      	movs	r3, #255	; 0xff
 8009772:	757b      	strb	r3, [r7, #21]
 8009774:	e024      	b.n	80097c0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009776:	7d7b      	ldrb	r3, [r7, #21]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d109      	bne.n	8009790 <dir_find+0x126>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6a1b      	ldr	r3, [r3, #32]
 8009780:	4618      	mov	r0, r3
 8009782:	f7ff ff51 	bl	8009628 <sum_sfn>
 8009786:	4603      	mov	r3, r0
 8009788:	461a      	mov	r2, r3
 800978a:	7d3b      	ldrb	r3, [r7, #20]
 800978c:	4293      	cmp	r3, r2
 800978e:	d024      	beq.n	80097da <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	2b00      	cmp	r3, #0
 800979c:	d10a      	bne.n	80097b4 <dir_find+0x14a>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a18      	ldr	r0, [r3, #32]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	3324      	adds	r3, #36	; 0x24
 80097a6:	220b      	movs	r2, #11
 80097a8:	4619      	mov	r1, r3
 80097aa:	f7fe fe1d 	bl	80083e8 <mem_cmp>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d014      	beq.n	80097de <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80097b4:	23ff      	movs	r3, #255	; 0xff
 80097b6:	757b      	strb	r3, [r7, #21]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f04f 32ff 	mov.w	r2, #4294967295
 80097be:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80097c0:	2100      	movs	r1, #0
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7ff fc6d 	bl	80090a2 <dir_next>
 80097c8:	4603      	mov	r3, r0
 80097ca:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80097cc:	7dfb      	ldrb	r3, [r7, #23]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	f43f af65 	beq.w	800969e <dir_find+0x34>
 80097d4:	e004      	b.n	80097e0 <dir_find+0x176>
		if (res != FR_OK) break;
 80097d6:	bf00      	nop
 80097d8:	e002      	b.n	80097e0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80097da:	bf00      	nop
 80097dc:	e000      	b.n	80097e0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80097de:	bf00      	nop

	return res;
 80097e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3718      	adds	r7, #24
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
	...

080097ec <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b08c      	sub	sp, #48	; 0x30
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009800:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <dir_register+0x20>
 8009808:	2306      	movs	r3, #6
 800980a:	e0e0      	b.n	80099ce <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800980c:	2300      	movs	r3, #0
 800980e:	627b      	str	r3, [r7, #36]	; 0x24
 8009810:	e002      	b.n	8009818 <dir_register+0x2c>
 8009812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009814:	3301      	adds	r3, #1
 8009816:	627b      	str	r3, [r7, #36]	; 0x24
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	691a      	ldr	r2, [r3, #16]
 800981c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981e:	005b      	lsls	r3, r3, #1
 8009820:	4413      	add	r3, r2
 8009822:	881b      	ldrh	r3, [r3, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d1f4      	bne.n	8009812 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800982e:	f107 030c 	add.w	r3, r7, #12
 8009832:	220c      	movs	r2, #12
 8009834:	4618      	mov	r0, r3
 8009836:	f7fe fd9b 	bl	8008370 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800983a:	7dfb      	ldrb	r3, [r7, #23]
 800983c:	f003 0301 	and.w	r3, r3, #1
 8009840:	2b00      	cmp	r3, #0
 8009842:	d032      	beq.n	80098aa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2240      	movs	r2, #64	; 0x40
 8009848:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800984c:	2301      	movs	r3, #1
 800984e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009850:	e016      	b.n	8009880 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	691a      	ldr	r2, [r3, #16]
 800985c:	f107 010c 	add.w	r1, r7, #12
 8009860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009862:	f7ff fe53 	bl	800950c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f7ff feff 	bl	800966a <dir_find>
 800986c:	4603      	mov	r3, r0
 800986e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009872:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009876:	2b00      	cmp	r3, #0
 8009878:	d106      	bne.n	8009888 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800987a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987c:	3301      	adds	r3, #1
 800987e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009882:	2b63      	cmp	r3, #99	; 0x63
 8009884:	d9e5      	bls.n	8009852 <dir_register+0x66>
 8009886:	e000      	b.n	800988a <dir_register+0x9e>
			if (res != FR_OK) break;
 8009888:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800988a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988c:	2b64      	cmp	r3, #100	; 0x64
 800988e:	d101      	bne.n	8009894 <dir_register+0xa8>
 8009890:	2307      	movs	r3, #7
 8009892:	e09c      	b.n	80099ce <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009894:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009898:	2b04      	cmp	r3, #4
 800989a:	d002      	beq.n	80098a2 <dir_register+0xb6>
 800989c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098a0:	e095      	b.n	80099ce <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80098a2:	7dfa      	ldrb	r2, [r7, #23]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80098aa:	7dfb      	ldrb	r3, [r7, #23]
 80098ac:	f003 0302 	and.w	r3, r3, #2
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d007      	beq.n	80098c4 <dir_register+0xd8>
 80098b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b6:	330c      	adds	r3, #12
 80098b8:	4a47      	ldr	r2, [pc, #284]	; (80099d8 <dir_register+0x1ec>)
 80098ba:	fba2 2303 	umull	r2, r3, r2, r3
 80098be:	089b      	lsrs	r3, r3, #2
 80098c0:	3301      	adds	r3, #1
 80098c2:	e000      	b.n	80098c6 <dir_register+0xda>
 80098c4:	2301      	movs	r3, #1
 80098c6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80098c8:	6a39      	ldr	r1, [r7, #32]
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f7ff fcbf 	bl	800924e <dir_alloc>
 80098d0:	4603      	mov	r3, r0
 80098d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80098d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d148      	bne.n	8009970 <dir_register+0x184>
 80098de:	6a3b      	ldr	r3, [r7, #32]
 80098e0:	3b01      	subs	r3, #1
 80098e2:	623b      	str	r3, [r7, #32]
 80098e4:	6a3b      	ldr	r3, [r7, #32]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d042      	beq.n	8009970 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	695a      	ldr	r2, [r3, #20]
 80098ee:	6a3b      	ldr	r3, [r7, #32]
 80098f0:	015b      	lsls	r3, r3, #5
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	4619      	mov	r1, r3
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f7ff fb4a 	bl	8008f90 <dir_sdi>
 80098fc:	4603      	mov	r3, r0
 80098fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009902:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009906:	2b00      	cmp	r3, #0
 8009908:	d132      	bne.n	8009970 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	3324      	adds	r3, #36	; 0x24
 800990e:	4618      	mov	r0, r3
 8009910:	f7ff fe8a 	bl	8009628 <sum_sfn>
 8009914:	4603      	mov	r3, r0
 8009916:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	69db      	ldr	r3, [r3, #28]
 800991c:	4619      	mov	r1, r3
 800991e:	69f8      	ldr	r0, [r7, #28]
 8009920:	f7fe ff54 	bl	80087cc <move_window>
 8009924:	4603      	mov	r3, r0
 8009926:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800992a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800992e:	2b00      	cmp	r3, #0
 8009930:	d11d      	bne.n	800996e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	6918      	ldr	r0, [r3, #16]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a19      	ldr	r1, [r3, #32]
 800993a:	6a3b      	ldr	r3, [r7, #32]
 800993c:	b2da      	uxtb	r2, r3
 800993e:	7efb      	ldrb	r3, [r7, #27]
 8009940:	f7ff fd7c 	bl	800943c <put_lfn>
				fs->wflag = 1;
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	2201      	movs	r2, #1
 8009948:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800994a:	2100      	movs	r1, #0
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f7ff fba8 	bl	80090a2 <dir_next>
 8009952:	4603      	mov	r3, r0
 8009954:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009958:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800995c:	2b00      	cmp	r3, #0
 800995e:	d107      	bne.n	8009970 <dir_register+0x184>
 8009960:	6a3b      	ldr	r3, [r7, #32]
 8009962:	3b01      	subs	r3, #1
 8009964:	623b      	str	r3, [r7, #32]
 8009966:	6a3b      	ldr	r3, [r7, #32]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1d5      	bne.n	8009918 <dir_register+0x12c>
 800996c:	e000      	b.n	8009970 <dir_register+0x184>
				if (res != FR_OK) break;
 800996e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009970:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009974:	2b00      	cmp	r3, #0
 8009976:	d128      	bne.n	80099ca <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	69db      	ldr	r3, [r3, #28]
 800997c:	4619      	mov	r1, r3
 800997e:	69f8      	ldr	r0, [r7, #28]
 8009980:	f7fe ff24 	bl	80087cc <move_window>
 8009984:	4603      	mov	r3, r0
 8009986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800998a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800998e:	2b00      	cmp	r3, #0
 8009990:	d11b      	bne.n	80099ca <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a1b      	ldr	r3, [r3, #32]
 8009996:	2220      	movs	r2, #32
 8009998:	2100      	movs	r1, #0
 800999a:	4618      	mov	r0, r3
 800999c:	f7fe fd09 	bl	80083b2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a18      	ldr	r0, [r3, #32]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	3324      	adds	r3, #36	; 0x24
 80099a8:	220b      	movs	r2, #11
 80099aa:	4619      	mov	r1, r3
 80099ac:	f7fe fce0 	bl	8008370 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	330c      	adds	r3, #12
 80099bc:	f002 0218 	and.w	r2, r2, #24
 80099c0:	b2d2      	uxtb	r2, r2
 80099c2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	2201      	movs	r2, #1
 80099c8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80099ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3730      	adds	r7, #48	; 0x30
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	4ec4ec4f 	.word	0x4ec4ec4f

080099dc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b088      	sub	sp, #32
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	2200      	movs	r2, #0
 80099f0:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	69db      	ldr	r3, [r3, #28]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	f000 80c9 	beq.w	8009b8e <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a04:	d032      	beq.n	8009a6c <get_fileinfo+0x90>
			i = j = 0;
 8009a06:	2300      	movs	r3, #0
 8009a08:	61bb      	str	r3, [r7, #24]
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8009a0e:	e01b      	b.n	8009a48 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8009a10:	89fb      	ldrh	r3, [r7, #14]
 8009a12:	2100      	movs	r1, #0
 8009a14:	4618      	mov	r0, r3
 8009a16:	f001 fb27 	bl	800b068 <ff_convert>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8009a1e:	89fb      	ldrh	r3, [r7, #14]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d102      	bne.n	8009a2a <get_fileinfo+0x4e>
 8009a24:	2300      	movs	r3, #0
 8009a26:	61fb      	str	r3, [r7, #28]
 8009a28:	e01a      	b.n	8009a60 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	2bfe      	cmp	r3, #254	; 0xfe
 8009a2e:	d902      	bls.n	8009a36 <get_fileinfo+0x5a>
 8009a30:	2300      	movs	r3, #0
 8009a32:	61fb      	str	r3, [r7, #28]
 8009a34:	e014      	b.n	8009a60 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8009a36:	69fb      	ldr	r3, [r7, #28]
 8009a38:	1c5a      	adds	r2, r3, #1
 8009a3a:	61fa      	str	r2, [r7, #28]
 8009a3c:	89fa      	ldrh	r2, [r7, #14]
 8009a3e:	b2d1      	uxtb	r1, r2
 8009a40:	683a      	ldr	r2, [r7, #0]
 8009a42:	4413      	add	r3, r2
 8009a44:	460a      	mov	r2, r1
 8009a46:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	691a      	ldr	r2, [r3, #16]
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	1c59      	adds	r1, r3, #1
 8009a50:	61b9      	str	r1, [r7, #24]
 8009a52:	005b      	lsls	r3, r3, #1
 8009a54:	4413      	add	r3, r2
 8009a56:	881b      	ldrh	r3, [r3, #0]
 8009a58:	81fb      	strh	r3, [r7, #14]
 8009a5a:	89fb      	ldrh	r3, [r7, #14]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1d7      	bne.n	8009a10 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8009a60:	683a      	ldr	r2, [r7, #0]
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	4413      	add	r3, r2
 8009a66:	3316      	adds	r3, #22
 8009a68:	2200      	movs	r2, #0
 8009a6a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	61bb      	str	r3, [r7, #24]
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8009a74:	683a      	ldr	r2, [r7, #0]
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	4413      	add	r3, r2
 8009a7a:	3316      	adds	r3, #22
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8009a80:	e04c      	b.n	8009b1c <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a1a      	ldr	r2, [r3, #32]
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	1c59      	adds	r1, r3, #1
 8009a8a:	61f9      	str	r1, [r7, #28]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8009a92:	7dfb      	ldrb	r3, [r7, #23]
 8009a94:	2b20      	cmp	r3, #32
 8009a96:	d100      	bne.n	8009a9a <get_fileinfo+0xbe>
 8009a98:	e040      	b.n	8009b1c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
 8009a9c:	2b05      	cmp	r3, #5
 8009a9e:	d101      	bne.n	8009aa4 <get_fileinfo+0xc8>
 8009aa0:	23e5      	movs	r3, #229	; 0xe5
 8009aa2:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	2b09      	cmp	r3, #9
 8009aa8:	d10f      	bne.n	8009aca <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8009aaa:	89bb      	ldrh	r3, [r7, #12]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d105      	bne.n	8009abc <get_fileinfo+0xe0>
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	3316      	adds	r3, #22
 8009ab8:	222e      	movs	r2, #46	; 0x2e
 8009aba:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	1c5a      	adds	r2, r3, #1
 8009ac0:	61ba      	str	r2, [r7, #24]
 8009ac2:	683a      	ldr	r2, [r7, #0]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	222e      	movs	r2, #46	; 0x2e
 8009ac8:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	4413      	add	r3, r2
 8009ad0:	3309      	adds	r3, #9
 8009ad2:	7dfa      	ldrb	r2, [r7, #23]
 8009ad4:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8009ad6:	89bb      	ldrh	r3, [r7, #12]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d11c      	bne.n	8009b16 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8009adc:	7dfb      	ldrb	r3, [r7, #23]
 8009ade:	2b40      	cmp	r3, #64	; 0x40
 8009ae0:	d913      	bls.n	8009b0a <get_fileinfo+0x12e>
 8009ae2:	7dfb      	ldrb	r3, [r7, #23]
 8009ae4:	2b5a      	cmp	r3, #90	; 0x5a
 8009ae6:	d810      	bhi.n	8009b0a <get_fileinfo+0x12e>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6a1b      	ldr	r3, [r3, #32]
 8009aec:	330c      	adds	r3, #12
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	461a      	mov	r2, r3
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	2b08      	cmp	r3, #8
 8009af6:	d901      	bls.n	8009afc <get_fileinfo+0x120>
 8009af8:	2310      	movs	r3, #16
 8009afa:	e000      	b.n	8009afe <get_fileinfo+0x122>
 8009afc:	2308      	movs	r3, #8
 8009afe:	4013      	ands	r3, r2
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d002      	beq.n	8009b0a <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8009b04:	7dfb      	ldrb	r3, [r7, #23]
 8009b06:	3320      	adds	r3, #32
 8009b08:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	4413      	add	r3, r2
 8009b10:	3316      	adds	r3, #22
 8009b12:	7dfa      	ldrb	r2, [r7, #23]
 8009b14:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	2b0a      	cmp	r3, #10
 8009b20:	d9af      	bls.n	8009a82 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8009b22:	89bb      	ldrh	r3, [r7, #12]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d10d      	bne.n	8009b44 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8009b28:	683a      	ldr	r2, [r7, #0]
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	3316      	adds	r3, #22
 8009b30:	2200      	movs	r2, #0
 8009b32:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6a1b      	ldr	r3, [r3, #32]
 8009b38:	330c      	adds	r3, #12
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d101      	bne.n	8009b44 <get_fileinfo+0x168>
 8009b40:	2300      	movs	r3, #0
 8009b42:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8009b44:	683a      	ldr	r2, [r7, #0]
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	4413      	add	r3, r2
 8009b4a:	3309      	adds	r3, #9
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6a1b      	ldr	r3, [r3, #32]
 8009b54:	7ada      	ldrb	r2, [r3, #11]
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	331c      	adds	r3, #28
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7fe fb9b 	bl	800829c <ld_dword>
 8009b66:	4602      	mov	r2, r0
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a1b      	ldr	r3, [r3, #32]
 8009b70:	3316      	adds	r3, #22
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7fe fb92 	bl	800829c <ld_dword>
 8009b78:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	80da      	strh	r2, [r3, #6]
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	0c1b      	lsrs	r3, r3, #16
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	809a      	strh	r2, [r3, #4]
 8009b8c:	e000      	b.n	8009b90 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009b8e:	bf00      	nop
}
 8009b90:	3720      	adds	r7, #32
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
	...

08009b98 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08a      	sub	sp, #40	; 0x28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	613b      	str	r3, [r7, #16]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	691b      	ldr	r3, [r3, #16]
 8009bae:	60fb      	str	r3, [r7, #12]
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	617b      	str	r3, [r7, #20]
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	1c5a      	adds	r2, r3, #1
 8009bbc:	61ba      	str	r2, [r7, #24]
 8009bbe:	693a      	ldr	r2, [r7, #16]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009bc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bc8:	2b1f      	cmp	r3, #31
 8009bca:	d940      	bls.n	8009c4e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009bcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bce:	2b2f      	cmp	r3, #47	; 0x2f
 8009bd0:	d006      	beq.n	8009be0 <create_name+0x48>
 8009bd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bd4:	2b5c      	cmp	r3, #92	; 0x5c
 8009bd6:	d110      	bne.n	8009bfa <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009bd8:	e002      	b.n	8009be0 <create_name+0x48>
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	61bb      	str	r3, [r7, #24]
 8009be0:	693a      	ldr	r2, [r7, #16]
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	4413      	add	r3, r2
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	2b2f      	cmp	r3, #47	; 0x2f
 8009bea:	d0f6      	beq.n	8009bda <create_name+0x42>
 8009bec:	693a      	ldr	r2, [r7, #16]
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	2b5c      	cmp	r3, #92	; 0x5c
 8009bf6:	d0f0      	beq.n	8009bda <create_name+0x42>
			break;
 8009bf8:	e02a      	b.n	8009c50 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	2bfe      	cmp	r3, #254	; 0xfe
 8009bfe:	d901      	bls.n	8009c04 <create_name+0x6c>
 8009c00:	2306      	movs	r3, #6
 8009c02:	e17d      	b.n	8009f00 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009c04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009c0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c0c:	2101      	movs	r1, #1
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f001 fa2a 	bl	800b068 <ff_convert>
 8009c14:	4603      	mov	r3, r0
 8009c16:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009c18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d101      	bne.n	8009c22 <create_name+0x8a>
 8009c1e:	2306      	movs	r3, #6
 8009c20:	e16e      	b.n	8009f00 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8009c22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c24:	2b7f      	cmp	r3, #127	; 0x7f
 8009c26:	d809      	bhi.n	8009c3c <create_name+0xa4>
 8009c28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	488d      	ldr	r0, [pc, #564]	; (8009e64 <create_name+0x2cc>)
 8009c2e:	f7fe fc02 	bl	8008436 <chk_chr>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d001      	beq.n	8009c3c <create_name+0xa4>
 8009c38:	2306      	movs	r3, #6
 8009c3a:	e161      	b.n	8009f00 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	1c5a      	adds	r2, r3, #1
 8009c40:	617a      	str	r2, [r7, #20]
 8009c42:	005b      	lsls	r3, r3, #1
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	4413      	add	r3, r2
 8009c48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009c4a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009c4c:	e7b4      	b.n	8009bb8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009c4e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009c50:	693a      	ldr	r2, [r7, #16]
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	441a      	add	r2, r3
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009c5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c5c:	2b1f      	cmp	r3, #31
 8009c5e:	d801      	bhi.n	8009c64 <create_name+0xcc>
 8009c60:	2304      	movs	r3, #4
 8009c62:	e000      	b.n	8009c66 <create_name+0xce>
 8009c64:	2300      	movs	r3, #0
 8009c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009c6a:	e011      	b.n	8009c90 <create_name+0xf8>
		w = lfn[di - 1];
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009c72:	3b01      	subs	r3, #1
 8009c74:	005b      	lsls	r3, r3, #1
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	4413      	add	r3, r2
 8009c7a:	881b      	ldrh	r3, [r3, #0]
 8009c7c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009c7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c80:	2b20      	cmp	r3, #32
 8009c82:	d002      	beq.n	8009c8a <create_name+0xf2>
 8009c84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c86:	2b2e      	cmp	r3, #46	; 0x2e
 8009c88:	d106      	bne.n	8009c98 <create_name+0x100>
		di--;
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1ea      	bne.n	8009c6c <create_name+0xd4>
 8009c96:	e000      	b.n	8009c9a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009c98:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	005b      	lsls	r3, r3, #1
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d101      	bne.n	8009cb0 <create_name+0x118>
 8009cac:	2306      	movs	r3, #6
 8009cae:	e127      	b.n	8009f00 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	3324      	adds	r3, #36	; 0x24
 8009cb4:	220b      	movs	r2, #11
 8009cb6:	2120      	movs	r1, #32
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fe fb7a 	bl	80083b2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	61bb      	str	r3, [r7, #24]
 8009cc2:	e002      	b.n	8009cca <create_name+0x132>
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	61bb      	str	r3, [r7, #24]
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	005b      	lsls	r3, r3, #1
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	881b      	ldrh	r3, [r3, #0]
 8009cd4:	2b20      	cmp	r3, #32
 8009cd6:	d0f5      	beq.n	8009cc4 <create_name+0x12c>
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	005b      	lsls	r3, r3, #1
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	4413      	add	r3, r2
 8009ce0:	881b      	ldrh	r3, [r3, #0]
 8009ce2:	2b2e      	cmp	r3, #46	; 0x2e
 8009ce4:	d0ee      	beq.n	8009cc4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d009      	beq.n	8009d00 <create_name+0x168>
 8009cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cf0:	f043 0303 	orr.w	r3, r3, #3
 8009cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009cf8:	e002      	b.n	8009d00 <create_name+0x168>
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	617b      	str	r3, [r7, #20]
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d009      	beq.n	8009d1a <create_name+0x182>
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	005b      	lsls	r3, r3, #1
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	4413      	add	r3, r2
 8009d14:	881b      	ldrh	r3, [r3, #0]
 8009d16:	2b2e      	cmp	r3, #46	; 0x2e
 8009d18:	d1ef      	bne.n	8009cfa <create_name+0x162>

	i = b = 0; ni = 8;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009d20:	2300      	movs	r3, #0
 8009d22:	623b      	str	r3, [r7, #32]
 8009d24:	2308      	movs	r3, #8
 8009d26:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009d28:	69bb      	ldr	r3, [r7, #24]
 8009d2a:	1c5a      	adds	r2, r3, #1
 8009d2c:	61ba      	str	r2, [r7, #24]
 8009d2e:	005b      	lsls	r3, r3, #1
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	4413      	add	r3, r2
 8009d34:	881b      	ldrh	r3, [r3, #0]
 8009d36:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009d38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f000 8090 	beq.w	8009e60 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009d40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d42:	2b20      	cmp	r3, #32
 8009d44:	d006      	beq.n	8009d54 <create_name+0x1bc>
 8009d46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009d48:	2b2e      	cmp	r3, #46	; 0x2e
 8009d4a:	d10a      	bne.n	8009d62 <create_name+0x1ca>
 8009d4c:	69ba      	ldr	r2, [r7, #24]
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d006      	beq.n	8009d62 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009d54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d58:	f043 0303 	orr.w	r3, r3, #3
 8009d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d60:	e07d      	b.n	8009e5e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009d62:	6a3a      	ldr	r2, [r7, #32]
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d203      	bcs.n	8009d72 <create_name+0x1da>
 8009d6a:	69ba      	ldr	r2, [r7, #24]
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d123      	bne.n	8009dba <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	2b0b      	cmp	r3, #11
 8009d76:	d106      	bne.n	8009d86 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d7c:	f043 0303 	orr.w	r3, r3, #3
 8009d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d84:	e075      	b.n	8009e72 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009d86:	69ba      	ldr	r2, [r7, #24]
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d005      	beq.n	8009d9a <create_name+0x202>
 8009d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d92:	f043 0303 	orr.w	r3, r3, #3
 8009d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009d9a:	69ba      	ldr	r2, [r7, #24]
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d866      	bhi.n	8009e70 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	61bb      	str	r3, [r7, #24]
 8009da6:	2308      	movs	r3, #8
 8009da8:	623b      	str	r3, [r7, #32]
 8009daa:	230b      	movs	r3, #11
 8009dac:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009dae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009db8:	e051      	b.n	8009e5e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009dba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8009dbe:	d914      	bls.n	8009dea <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009dc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f001 f94f 	bl	800b068 <ff_convert>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009dce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d004      	beq.n	8009dde <create_name+0x246>
 8009dd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dd6:	3b80      	subs	r3, #128	; 0x80
 8009dd8:	4a23      	ldr	r2, [pc, #140]	; (8009e68 <create_name+0x2d0>)
 8009dda:	5cd3      	ldrb	r3, [r2, r3]
 8009ddc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009de2:	f043 0302 	orr.w	r3, r3, #2
 8009de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009dea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d007      	beq.n	8009e00 <create_name+0x268>
 8009df0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009df2:	4619      	mov	r1, r3
 8009df4:	481d      	ldr	r0, [pc, #116]	; (8009e6c <create_name+0x2d4>)
 8009df6:	f7fe fb1e 	bl	8008436 <chk_chr>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d008      	beq.n	8009e12 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009e00:	235f      	movs	r3, #95	; 0x5f
 8009e02:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e08:	f043 0303 	orr.w	r3, r3, #3
 8009e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e10:	e01b      	b.n	8009e4a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009e12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e14:	2b40      	cmp	r3, #64	; 0x40
 8009e16:	d909      	bls.n	8009e2c <create_name+0x294>
 8009e18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e1a:	2b5a      	cmp	r3, #90	; 0x5a
 8009e1c:	d806      	bhi.n	8009e2c <create_name+0x294>
					b |= 2;
 8009e1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e22:	f043 0302 	orr.w	r3, r3, #2
 8009e26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009e2a:	e00e      	b.n	8009e4a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009e2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e2e:	2b60      	cmp	r3, #96	; 0x60
 8009e30:	d90b      	bls.n	8009e4a <create_name+0x2b2>
 8009e32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e34:	2b7a      	cmp	r3, #122	; 0x7a
 8009e36:	d808      	bhi.n	8009e4a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009e38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e3c:	f043 0301 	orr.w	r3, r3, #1
 8009e40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009e44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e46:	3b20      	subs	r3, #32
 8009e48:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009e4a:	6a3b      	ldr	r3, [r7, #32]
 8009e4c:	1c5a      	adds	r2, r3, #1
 8009e4e:	623a      	str	r2, [r7, #32]
 8009e50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009e52:	b2d1      	uxtb	r1, r2
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	4413      	add	r3, r2
 8009e58:	460a      	mov	r2, r1
 8009e5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009e5e:	e763      	b.n	8009d28 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009e60:	bf00      	nop
 8009e62:	e006      	b.n	8009e72 <create_name+0x2da>
 8009e64:	0800bba8 	.word	0x0800bba8
 8009e68:	0800bc10 	.word	0x0800bc10
 8009e6c:	0800bbb4 	.word	0x0800bbb4
			if (si > di) break;			/* No extension */
 8009e70:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e78:	2be5      	cmp	r3, #229	; 0xe5
 8009e7a:	d103      	bne.n	8009e84 <create_name+0x2ec>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2205      	movs	r2, #5
 8009e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	2b08      	cmp	r3, #8
 8009e88:	d104      	bne.n	8009e94 <create_name+0x2fc>
 8009e8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009e94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e98:	f003 030c 	and.w	r3, r3, #12
 8009e9c:	2b0c      	cmp	r3, #12
 8009e9e:	d005      	beq.n	8009eac <create_name+0x314>
 8009ea0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ea4:	f003 0303 	and.w	r3, r3, #3
 8009ea8:	2b03      	cmp	r3, #3
 8009eaa:	d105      	bne.n	8009eb8 <create_name+0x320>
 8009eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009eb0:	f043 0302 	orr.w	r3, r3, #2
 8009eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ebc:	f003 0302 	and.w	r3, r3, #2
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d117      	bne.n	8009ef4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009ec4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ec8:	f003 0303 	and.w	r3, r3, #3
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d105      	bne.n	8009edc <create_name+0x344>
 8009ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ed4:	f043 0310 	orr.w	r3, r3, #16
 8009ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009edc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009ee0:	f003 030c 	and.w	r3, r3, #12
 8009ee4:	2b04      	cmp	r3, #4
 8009ee6:	d105      	bne.n	8009ef4 <create_name+0x35c>
 8009ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009eec:	f043 0308 	orr.w	r3, r3, #8
 8009ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009efa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8009efe:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3728      	adds	r7, #40	; 0x28
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009f1c:	e002      	b.n	8009f24 <follow_path+0x1c>
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	3301      	adds	r3, #1
 8009f22:	603b      	str	r3, [r7, #0]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	2b2f      	cmp	r3, #47	; 0x2f
 8009f2a:	d0f8      	beq.n	8009f1e <follow_path+0x16>
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	2b5c      	cmp	r3, #92	; 0x5c
 8009f32:	d0f4      	beq.n	8009f1e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	2200      	movs	r2, #0
 8009f38:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	2b1f      	cmp	r3, #31
 8009f40:	d80a      	bhi.n	8009f58 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2280      	movs	r2, #128	; 0x80
 8009f46:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7ff f81f 	bl	8008f90 <dir_sdi>
 8009f52:	4603      	mov	r3, r0
 8009f54:	75fb      	strb	r3, [r7, #23]
 8009f56:	e048      	b.n	8009fea <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009f58:	463b      	mov	r3, r7
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f7ff fe1b 	bl	8009b98 <create_name>
 8009f62:	4603      	mov	r3, r0
 8009f64:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009f66:	7dfb      	ldrb	r3, [r7, #23]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d139      	bne.n	8009fe0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f7ff fb7c 	bl	800966a <dir_find>
 8009f72:	4603      	mov	r3, r0
 8009f74:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009f7c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009f7e:	7dfb      	ldrb	r3, [r7, #23]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00a      	beq.n	8009f9a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009f84:	7dfb      	ldrb	r3, [r7, #23]
 8009f86:	2b04      	cmp	r3, #4
 8009f88:	d12c      	bne.n	8009fe4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009f8a:	7afb      	ldrb	r3, [r7, #11]
 8009f8c:	f003 0304 	and.w	r3, r3, #4
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d127      	bne.n	8009fe4 <follow_path+0xdc>
 8009f94:	2305      	movs	r3, #5
 8009f96:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009f98:	e024      	b.n	8009fe4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009f9a:	7afb      	ldrb	r3, [r7, #11]
 8009f9c:	f003 0304 	and.w	r3, r3, #4
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d121      	bne.n	8009fe8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	799b      	ldrb	r3, [r3, #6]
 8009fa8:	f003 0310 	and.w	r3, r3, #16
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d102      	bne.n	8009fb6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009fb0:	2305      	movs	r3, #5
 8009fb2:	75fb      	strb	r3, [r7, #23]
 8009fb4:	e019      	b.n	8009fea <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	695b      	ldr	r3, [r3, #20]
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	8992      	ldrh	r2, [r2, #12]
 8009fc4:	fbb3 f0f2 	udiv	r0, r3, r2
 8009fc8:	fb00 f202 	mul.w	r2, r0, r2
 8009fcc:	1a9b      	subs	r3, r3, r2
 8009fce:	440b      	add	r3, r1
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f7ff f982 	bl	80092dc <ld_clust>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009fde:	e7bb      	b.n	8009f58 <follow_path+0x50>
			if (res != FR_OK) break;
 8009fe0:	bf00      	nop
 8009fe2:	e002      	b.n	8009fea <follow_path+0xe2>
				break;
 8009fe4:	bf00      	nop
 8009fe6:	e000      	b.n	8009fea <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009fe8:	bf00      	nop
			}
		}
	}

	return res;
 8009fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3718      	adds	r7, #24
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b087      	sub	sp, #28
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009ffc:	f04f 33ff 	mov.w	r3, #4294967295
 800a000:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d031      	beq.n	800a06e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	617b      	str	r3, [r7, #20]
 800a010:	e002      	b.n	800a018 <get_ldnumber+0x24>
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	3301      	adds	r3, #1
 800a016:	617b      	str	r3, [r7, #20]
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	2b1f      	cmp	r3, #31
 800a01e:	d903      	bls.n	800a028 <get_ldnumber+0x34>
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	2b3a      	cmp	r3, #58	; 0x3a
 800a026:	d1f4      	bne.n	800a012 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	2b3a      	cmp	r3, #58	; 0x3a
 800a02e:	d11c      	bne.n	800a06a <get_ldnumber+0x76>
			tp = *path;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	1c5a      	adds	r2, r3, #1
 800a03a:	60fa      	str	r2, [r7, #12]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	3b30      	subs	r3, #48	; 0x30
 800a040:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	2b09      	cmp	r3, #9
 800a046:	d80e      	bhi.n	800a066 <get_ldnumber+0x72>
 800a048:	68fa      	ldr	r2, [r7, #12]
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d10a      	bne.n	800a066 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d107      	bne.n	800a066 <get_ldnumber+0x72>
					vol = (int)i;
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	3301      	adds	r3, #1
 800a05e:	617b      	str	r3, [r7, #20]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	697a      	ldr	r2, [r7, #20]
 800a064:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	e002      	b.n	800a070 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a06a:	2300      	movs	r3, #0
 800a06c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a06e:	693b      	ldr	r3, [r7, #16]
}
 800a070:	4618      	mov	r0, r3
 800a072:	371c      	adds	r7, #28
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	70da      	strb	r2, [r3, #3]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f04f 32ff 	mov.w	r2, #4294967295
 800a092:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f7fe fb98 	bl	80087cc <move_window>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d001      	beq.n	800a0a6 <check_fs+0x2a>
 800a0a2:	2304      	movs	r3, #4
 800a0a4:	e038      	b.n	800a118 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	3338      	adds	r3, #56	; 0x38
 800a0aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fe f8dc 	bl	800826c <ld_word>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d001      	beq.n	800a0c4 <check_fs+0x48>
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	e029      	b.n	800a118 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a0ca:	2be9      	cmp	r3, #233	; 0xe9
 800a0cc:	d009      	beq.n	800a0e2 <check_fs+0x66>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a0d4:	2beb      	cmp	r3, #235	; 0xeb
 800a0d6:	d11e      	bne.n	800a116 <check_fs+0x9a>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a0de:	2b90      	cmp	r3, #144	; 0x90
 800a0e0:	d119      	bne.n	800a116 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	3338      	adds	r3, #56	; 0x38
 800a0e6:	3336      	adds	r3, #54	; 0x36
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7fe f8d7 	bl	800829c <ld_dword>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a0f4:	4a0a      	ldr	r2, [pc, #40]	; (800a120 <check_fs+0xa4>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d101      	bne.n	800a0fe <check_fs+0x82>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	e00c      	b.n	800a118 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	3338      	adds	r3, #56	; 0x38
 800a102:	3352      	adds	r3, #82	; 0x52
 800a104:	4618      	mov	r0, r3
 800a106:	f7fe f8c9 	bl	800829c <ld_dword>
 800a10a:	4603      	mov	r3, r0
 800a10c:	4a05      	ldr	r2, [pc, #20]	; (800a124 <check_fs+0xa8>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d101      	bne.n	800a116 <check_fs+0x9a>
 800a112:	2300      	movs	r3, #0
 800a114:	e000      	b.n	800a118 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a116:	2302      	movs	r3, #2
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	00544146 	.word	0x00544146
 800a124:	33544146 	.word	0x33544146

0800a128 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b096      	sub	sp, #88	; 0x58
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	4613      	mov	r3, r2
 800a134:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	2200      	movs	r2, #0
 800a13a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f7ff ff59 	bl	8009ff4 <get_ldnumber>
 800a142:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a146:	2b00      	cmp	r3, #0
 800a148:	da01      	bge.n	800a14e <find_volume+0x26>
 800a14a:	230b      	movs	r3, #11
 800a14c:	e265      	b.n	800a61a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a14e:	4a9f      	ldr	r2, [pc, #636]	; (800a3cc <find_volume+0x2a4>)
 800a150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a156:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d101      	bne.n	800a162 <find_volume+0x3a>
 800a15e:	230c      	movs	r3, #12
 800a160:	e25b      	b.n	800a61a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a166:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a168:	79fb      	ldrb	r3, [r7, #7]
 800a16a:	f023 0301 	bic.w	r3, r3, #1
 800a16e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d01a      	beq.n	800a1ae <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17a:	785b      	ldrb	r3, [r3, #1]
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7fd ffd7 	bl	8008130 <disk_status>
 800a182:	4603      	mov	r3, r0
 800a184:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a188:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a18c:	f003 0301 	and.w	r3, r3, #1
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10c      	bne.n	800a1ae <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a194:	79fb      	ldrb	r3, [r7, #7]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d007      	beq.n	800a1aa <find_volume+0x82>
 800a19a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a19e:	f003 0304 	and.w	r3, r3, #4
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d001      	beq.n	800a1aa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a1a6:	230a      	movs	r3, #10
 800a1a8:	e237      	b.n	800a61a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	e235      	b.n	800a61a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a1b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1b6:	b2da      	uxtb	r2, r3
 800a1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1be:	785b      	ldrb	r3, [r3, #1]
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7fd ffcf 	bl	8008164 <disk_initialize>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a1cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1d0:	f003 0301 	and.w	r3, r3, #1
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d001      	beq.n	800a1dc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a1d8:	2303      	movs	r3, #3
 800a1da:	e21e      	b.n	800a61a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a1dc:	79fb      	ldrb	r3, [r7, #7]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d007      	beq.n	800a1f2 <find_volume+0xca>
 800a1e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1e6:	f003 0304 	and.w	r3, r3, #4
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d001      	beq.n	800a1f2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a1ee:	230a      	movs	r3, #10
 800a1f0:	e213      	b.n	800a61a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f4:	7858      	ldrb	r0, [r3, #1]
 800a1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f8:	330c      	adds	r3, #12
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	2102      	movs	r1, #2
 800a1fe:	f7fe f817 	bl	8008230 <disk_ioctl>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <find_volume+0xe4>
 800a208:	2301      	movs	r3, #1
 800a20a:	e206      	b.n	800a61a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20e:	899b      	ldrh	r3, [r3, #12]
 800a210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a214:	d80d      	bhi.n	800a232 <find_volume+0x10a>
 800a216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a218:	899b      	ldrh	r3, [r3, #12]
 800a21a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a21e:	d308      	bcc.n	800a232 <find_volume+0x10a>
 800a220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a222:	899b      	ldrh	r3, [r3, #12]
 800a224:	461a      	mov	r2, r3
 800a226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a228:	899b      	ldrh	r3, [r3, #12]
 800a22a:	3b01      	subs	r3, #1
 800a22c:	4013      	ands	r3, r2
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d001      	beq.n	800a236 <find_volume+0x10e>
 800a232:	2301      	movs	r3, #1
 800a234:	e1f1      	b.n	800a61a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a236:	2300      	movs	r3, #0
 800a238:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a23a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a23c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a23e:	f7ff ff1d 	bl	800a07c <check_fs>
 800a242:	4603      	mov	r3, r0
 800a244:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a248:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d149      	bne.n	800a2e4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a250:	2300      	movs	r3, #0
 800a252:	643b      	str	r3, [r7, #64]	; 0x40
 800a254:	e01e      	b.n	800a294 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a258:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a25c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a25e:	011b      	lsls	r3, r3, #4
 800a260:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a264:	4413      	add	r3, r2
 800a266:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26a:	3304      	adds	r3, #4
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d006      	beq.n	800a280 <find_volume+0x158>
 800a272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a274:	3308      	adds	r3, #8
 800a276:	4618      	mov	r0, r3
 800a278:	f7fe f810 	bl	800829c <ld_dword>
 800a27c:	4602      	mov	r2, r0
 800a27e:	e000      	b.n	800a282 <find_volume+0x15a>
 800a280:	2200      	movs	r2, #0
 800a282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	3358      	adds	r3, #88	; 0x58
 800a288:	443b      	add	r3, r7
 800a28a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a28e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a290:	3301      	adds	r3, #1
 800a292:	643b      	str	r3, [r7, #64]	; 0x40
 800a294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a296:	2b03      	cmp	r3, #3
 800a298:	d9dd      	bls.n	800a256 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a29a:	2300      	movs	r3, #0
 800a29c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a29e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d002      	beq.n	800a2aa <find_volume+0x182>
 800a2a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2a6:	3b01      	subs	r3, #1
 800a2a8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a2aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	3358      	adds	r3, #88	; 0x58
 800a2b0:	443b      	add	r3, r7
 800a2b2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a2b6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a2b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d005      	beq.n	800a2ca <find_volume+0x1a2>
 800a2be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a2c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a2c2:	f7ff fedb 	bl	800a07c <check_fs>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	e000      	b.n	800a2cc <find_volume+0x1a4>
 800a2ca:	2303      	movs	r3, #3
 800a2cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a2d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d905      	bls.n	800a2e4 <find_volume+0x1bc>
 800a2d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2da:	3301      	adds	r3, #1
 800a2dc:	643b      	str	r3, [r7, #64]	; 0x40
 800a2de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2e0:	2b03      	cmp	r3, #3
 800a2e2:	d9e2      	bls.n	800a2aa <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a2e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2e8:	2b04      	cmp	r3, #4
 800a2ea:	d101      	bne.n	800a2f0 <find_volume+0x1c8>
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e194      	b.n	800a61a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a2f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d901      	bls.n	800a2fc <find_volume+0x1d4>
 800a2f8:	230d      	movs	r3, #13
 800a2fa:	e18e      	b.n	800a61a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fe:	3338      	adds	r3, #56	; 0x38
 800a300:	330b      	adds	r3, #11
 800a302:	4618      	mov	r0, r3
 800a304:	f7fd ffb2 	bl	800826c <ld_word>
 800a308:	4603      	mov	r3, r0
 800a30a:	461a      	mov	r2, r3
 800a30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30e:	899b      	ldrh	r3, [r3, #12]
 800a310:	429a      	cmp	r2, r3
 800a312:	d001      	beq.n	800a318 <find_volume+0x1f0>
 800a314:	230d      	movs	r3, #13
 800a316:	e180      	b.n	800a61a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31a:	3338      	adds	r3, #56	; 0x38
 800a31c:	3316      	adds	r3, #22
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fd ffa4 	bl	800826c <ld_word>
 800a324:	4603      	mov	r3, r0
 800a326:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d106      	bne.n	800a33c <find_volume+0x214>
 800a32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a330:	3338      	adds	r3, #56	; 0x38
 800a332:	3324      	adds	r3, #36	; 0x24
 800a334:	4618      	mov	r0, r3
 800a336:	f7fd ffb1 	bl	800829c <ld_dword>
 800a33a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a340:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a344:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34e:	789b      	ldrb	r3, [r3, #2]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d005      	beq.n	800a360 <find_volume+0x238>
 800a354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a356:	789b      	ldrb	r3, [r3, #2]
 800a358:	2b02      	cmp	r3, #2
 800a35a:	d001      	beq.n	800a360 <find_volume+0x238>
 800a35c:	230d      	movs	r3, #13
 800a35e:	e15c      	b.n	800a61a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a362:	789b      	ldrb	r3, [r3, #2]
 800a364:	461a      	mov	r2, r3
 800a366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a368:	fb02 f303 	mul.w	r3, r2, r3
 800a36c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a374:	b29a      	uxth	r2, r3
 800a376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a378:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37c:	895b      	ldrh	r3, [r3, #10]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d008      	beq.n	800a394 <find_volume+0x26c>
 800a382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a384:	895b      	ldrh	r3, [r3, #10]
 800a386:	461a      	mov	r2, r3
 800a388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38a:	895b      	ldrh	r3, [r3, #10]
 800a38c:	3b01      	subs	r3, #1
 800a38e:	4013      	ands	r3, r2
 800a390:	2b00      	cmp	r3, #0
 800a392:	d001      	beq.n	800a398 <find_volume+0x270>
 800a394:	230d      	movs	r3, #13
 800a396:	e140      	b.n	800a61a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a39a:	3338      	adds	r3, #56	; 0x38
 800a39c:	3311      	adds	r3, #17
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7fd ff64 	bl	800826c <ld_word>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3aa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ae:	891b      	ldrh	r3, [r3, #8]
 800a3b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3b2:	8992      	ldrh	r2, [r2, #12]
 800a3b4:	0952      	lsrs	r2, r2, #5
 800a3b6:	b292      	uxth	r2, r2
 800a3b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3bc:	fb01 f202 	mul.w	r2, r1, r2
 800a3c0:	1a9b      	subs	r3, r3, r2
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d003      	beq.n	800a3d0 <find_volume+0x2a8>
 800a3c8:	230d      	movs	r3, #13
 800a3ca:	e126      	b.n	800a61a <find_volume+0x4f2>
 800a3cc:	200023c4 	.word	0x200023c4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d2:	3338      	adds	r3, #56	; 0x38
 800a3d4:	3313      	adds	r3, #19
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fd ff48 	bl	800826c <ld_word>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a3e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d106      	bne.n	800a3f4 <find_volume+0x2cc>
 800a3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e8:	3338      	adds	r3, #56	; 0x38
 800a3ea:	3320      	adds	r3, #32
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7fd ff55 	bl	800829c <ld_dword>
 800a3f2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f6:	3338      	adds	r3, #56	; 0x38
 800a3f8:	330e      	adds	r3, #14
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7fd ff36 	bl	800826c <ld_word>
 800a400:	4603      	mov	r3, r0
 800a402:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a404:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a406:	2b00      	cmp	r3, #0
 800a408:	d101      	bne.n	800a40e <find_volume+0x2e6>
 800a40a:	230d      	movs	r3, #13
 800a40c:	e105      	b.n	800a61a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a40e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a412:	4413      	add	r3, r2
 800a414:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a416:	8911      	ldrh	r1, [r2, #8]
 800a418:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a41a:	8992      	ldrh	r2, [r2, #12]
 800a41c:	0952      	lsrs	r2, r2, #5
 800a41e:	b292      	uxth	r2, r2
 800a420:	fbb1 f2f2 	udiv	r2, r1, r2
 800a424:	b292      	uxth	r2, r2
 800a426:	4413      	add	r3, r2
 800a428:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a42a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42e:	429a      	cmp	r2, r3
 800a430:	d201      	bcs.n	800a436 <find_volume+0x30e>
 800a432:	230d      	movs	r3, #13
 800a434:	e0f1      	b.n	800a61a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a436:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a43e:	8952      	ldrh	r2, [r2, #10]
 800a440:	fbb3 f3f2 	udiv	r3, r3, r2
 800a444:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d101      	bne.n	800a450 <find_volume+0x328>
 800a44c:	230d      	movs	r3, #13
 800a44e:	e0e4      	b.n	800a61a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800a450:	2303      	movs	r3, #3
 800a452:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a458:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d802      	bhi.n	800a466 <find_volume+0x33e>
 800a460:	2302      	movs	r3, #2
 800a462:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a468:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d802      	bhi.n	800a476 <find_volume+0x34e>
 800a470:	2301      	movs	r3, #1
 800a472:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a478:	1c9a      	adds	r2, r3, #2
 800a47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a480:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a482:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a484:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a488:	441a      	add	r2, r3
 800a48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a48e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a492:	441a      	add	r2, r3
 800a494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a496:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a498:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a49c:	2b03      	cmp	r3, #3
 800a49e:	d11e      	bne.n	800a4de <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a2:	3338      	adds	r3, #56	; 0x38
 800a4a4:	332a      	adds	r3, #42	; 0x2a
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7fd fee0 	bl	800826c <ld_word>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d001      	beq.n	800a4b6 <find_volume+0x38e>
 800a4b2:	230d      	movs	r3, #13
 800a4b4:	e0b1      	b.n	800a61a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b8:	891b      	ldrh	r3, [r3, #8]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d001      	beq.n	800a4c2 <find_volume+0x39a>
 800a4be:	230d      	movs	r3, #13
 800a4c0:	e0ab      	b.n	800a61a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c4:	3338      	adds	r3, #56	; 0x38
 800a4c6:	332c      	adds	r3, #44	; 0x2c
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f7fd fee7 	bl	800829c <ld_dword>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d6:	69db      	ldr	r3, [r3, #28]
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	647b      	str	r3, [r7, #68]	; 0x44
 800a4dc:	e01f      	b.n	800a51e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e0:	891b      	ldrh	r3, [r3, #8]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d101      	bne.n	800a4ea <find_volume+0x3c2>
 800a4e6:	230d      	movs	r3, #13
 800a4e8:	e097      	b.n	800a61a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4f0:	441a      	add	r2, r3
 800a4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a4f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4fa:	2b02      	cmp	r3, #2
 800a4fc:	d103      	bne.n	800a506 <find_volume+0x3de>
 800a4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a500:	69db      	ldr	r3, [r3, #28]
 800a502:	005b      	lsls	r3, r3, #1
 800a504:	e00a      	b.n	800a51c <find_volume+0x3f4>
 800a506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a508:	69da      	ldr	r2, [r3, #28]
 800a50a:	4613      	mov	r3, r2
 800a50c:	005b      	lsls	r3, r3, #1
 800a50e:	4413      	add	r3, r2
 800a510:	085a      	lsrs	r2, r3, #1
 800a512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a514:	69db      	ldr	r3, [r3, #28]
 800a516:	f003 0301 	and.w	r3, r3, #1
 800a51a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a51c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a520:	6a1a      	ldr	r2, [r3, #32]
 800a522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a524:	899b      	ldrh	r3, [r3, #12]
 800a526:	4619      	mov	r1, r3
 800a528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a52a:	440b      	add	r3, r1
 800a52c:	3b01      	subs	r3, #1
 800a52e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a530:	8989      	ldrh	r1, [r1, #12]
 800a532:	fbb3 f3f1 	udiv	r3, r3, r1
 800a536:	429a      	cmp	r2, r3
 800a538:	d201      	bcs.n	800a53e <find_volume+0x416>
 800a53a:	230d      	movs	r3, #13
 800a53c:	e06d      	b.n	800a61a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a540:	f04f 32ff 	mov.w	r2, #4294967295
 800a544:	619a      	str	r2, [r3, #24]
 800a546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a548:	699a      	ldr	r2, [r3, #24]
 800a54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a550:	2280      	movs	r2, #128	; 0x80
 800a552:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a554:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a558:	2b03      	cmp	r3, #3
 800a55a:	d149      	bne.n	800a5f0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55e:	3338      	adds	r3, #56	; 0x38
 800a560:	3330      	adds	r3, #48	; 0x30
 800a562:	4618      	mov	r0, r3
 800a564:	f7fd fe82 	bl	800826c <ld_word>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d140      	bne.n	800a5f0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a56e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a570:	3301      	adds	r3, #1
 800a572:	4619      	mov	r1, r3
 800a574:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a576:	f7fe f929 	bl	80087cc <move_window>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d137      	bne.n	800a5f0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a582:	2200      	movs	r2, #0
 800a584:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a588:	3338      	adds	r3, #56	; 0x38
 800a58a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a58e:	4618      	mov	r0, r3
 800a590:	f7fd fe6c 	bl	800826c <ld_word>
 800a594:	4603      	mov	r3, r0
 800a596:	461a      	mov	r2, r3
 800a598:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d127      	bne.n	800a5f0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a2:	3338      	adds	r3, #56	; 0x38
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7fd fe79 	bl	800829c <ld_dword>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	4a1d      	ldr	r2, [pc, #116]	; (800a624 <find_volume+0x4fc>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d11e      	bne.n	800a5f0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b4:	3338      	adds	r3, #56	; 0x38
 800a5b6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fd fe6e 	bl	800829c <ld_dword>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	4a19      	ldr	r2, [pc, #100]	; (800a628 <find_volume+0x500>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d113      	bne.n	800a5f0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ca:	3338      	adds	r3, #56	; 0x38
 800a5cc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7fd fe63 	bl	800829c <ld_dword>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5da:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5de:	3338      	adds	r3, #56	; 0x38
 800a5e0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7fd fe59 	bl	800829c <ld_dword>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ee:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a5f6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a5f8:	4b0c      	ldr	r3, [pc, #48]	; (800a62c <find_volume+0x504>)
 800a5fa:	881b      	ldrh	r3, [r3, #0]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	b29a      	uxth	r2, r3
 800a600:	4b0a      	ldr	r3, [pc, #40]	; (800a62c <find_volume+0x504>)
 800a602:	801a      	strh	r2, [r3, #0]
 800a604:	4b09      	ldr	r3, [pc, #36]	; (800a62c <find_volume+0x504>)
 800a606:	881a      	ldrh	r2, [r3, #0]
 800a608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60e:	4a08      	ldr	r2, [pc, #32]	; (800a630 <find_volume+0x508>)
 800a610:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a612:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a614:	f7fe f872 	bl	80086fc <clear_lock>
#endif
	return FR_OK;
 800a618:	2300      	movs	r3, #0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3758      	adds	r7, #88	; 0x58
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	41615252 	.word	0x41615252
 800a628:	61417272 	.word	0x61417272
 800a62c:	200023c8 	.word	0x200023c8
 800a630:	200023ec 	.word	0x200023ec

0800a634 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a63e:	2309      	movs	r3, #9
 800a640:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d01c      	beq.n	800a682 <validate+0x4e>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d018      	beq.n	800a682 <validate+0x4e>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d013      	beq.n	800a682 <validate+0x4e>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	889a      	ldrh	r2, [r3, #4]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	88db      	ldrh	r3, [r3, #6]
 800a664:	429a      	cmp	r2, r3
 800a666:	d10c      	bne.n	800a682 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	785b      	ldrb	r3, [r3, #1]
 800a66e:	4618      	mov	r0, r3
 800a670:	f7fd fd5e 	bl	8008130 <disk_status>
 800a674:	4603      	mov	r3, r0
 800a676:	f003 0301 	and.w	r3, r3, #1
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <validate+0x4e>
			res = FR_OK;
 800a67e:	2300      	movs	r3, #0
 800a680:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a682:	7bfb      	ldrb	r3, [r7, #15]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d102      	bne.n	800a68e <validate+0x5a>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	e000      	b.n	800a690 <validate+0x5c>
 800a68e:	2300      	movs	r3, #0
 800a690:	683a      	ldr	r2, [r7, #0]
 800a692:	6013      	str	r3, [r2, #0]
	return res;
 800a694:	7bfb      	ldrb	r3, [r7, #15]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
	...

0800a6a0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b088      	sub	sp, #32
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a6b2:	f107 0310 	add.w	r3, r7, #16
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7ff fc9c 	bl	8009ff4 <get_ldnumber>
 800a6bc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	da01      	bge.n	800a6c8 <f_mount+0x28>
 800a6c4:	230b      	movs	r3, #11
 800a6c6:	e02b      	b.n	800a720 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a6c8:	4a17      	ldr	r2, [pc, #92]	; (800a728 <f_mount+0x88>)
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6d0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d005      	beq.n	800a6e4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a6d8:	69b8      	ldr	r0, [r7, #24]
 800a6da:	f7fe f80f 	bl	80086fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d002      	beq.n	800a6f0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	490d      	ldr	r1, [pc, #52]	; (800a728 <f_mount+0x88>)
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d002      	beq.n	800a706 <f_mount+0x66>
 800a700:	79fb      	ldrb	r3, [r7, #7]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d001      	beq.n	800a70a <f_mount+0x6a>
 800a706:	2300      	movs	r3, #0
 800a708:	e00a      	b.n	800a720 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a70a:	f107 010c 	add.w	r1, r7, #12
 800a70e:	f107 0308 	add.w	r3, r7, #8
 800a712:	2200      	movs	r2, #0
 800a714:	4618      	mov	r0, r3
 800a716:	f7ff fd07 	bl	800a128 <find_volume>
 800a71a:	4603      	mov	r3, r0
 800a71c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a71e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a720:	4618      	mov	r0, r3
 800a722:	3720      	adds	r7, #32
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	200023c4 	.word	0x200023c4

0800a72c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b09a      	sub	sp, #104	; 0x68
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	4613      	mov	r3, r2
 800a738:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d101      	bne.n	800a744 <f_open+0x18>
 800a740:	2309      	movs	r3, #9
 800a742:	e1bb      	b.n	800aabc <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a744:	79fb      	ldrb	r3, [r7, #7]
 800a746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a74a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a74c:	79fa      	ldrb	r2, [r7, #7]
 800a74e:	f107 0114 	add.w	r1, r7, #20
 800a752:	f107 0308 	add.w	r3, r7, #8
 800a756:	4618      	mov	r0, r3
 800a758:	f7ff fce6 	bl	800a128 <find_volume>
 800a75c:	4603      	mov	r3, r0
 800a75e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a762:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a766:	2b00      	cmp	r3, #0
 800a768:	f040 819f 	bne.w	800aaaa <f_open+0x37e>
		dj.obj.fs = fs;
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a770:	68ba      	ldr	r2, [r7, #8]
 800a772:	f107 0318 	add.w	r3, r7, #24
 800a776:	4611      	mov	r1, r2
 800a778:	4618      	mov	r0, r3
 800a77a:	f7ff fbc5 	bl	8009f08 <follow_path>
 800a77e:	4603      	mov	r3, r0
 800a780:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a784:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d11a      	bne.n	800a7c2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a78c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a790:	b25b      	sxtb	r3, r3
 800a792:	2b00      	cmp	r3, #0
 800a794:	da03      	bge.n	800a79e <f_open+0x72>
				res = FR_INVALID_NAME;
 800a796:	2306      	movs	r3, #6
 800a798:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a79c:	e011      	b.n	800a7c2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a79e:	79fb      	ldrb	r3, [r7, #7]
 800a7a0:	f023 0301 	bic.w	r3, r3, #1
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	bf14      	ite	ne
 800a7a8:	2301      	movne	r3, #1
 800a7aa:	2300      	moveq	r3, #0
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	f107 0318 	add.w	r3, r7, #24
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7fd fe58 	bl	800846c <chk_lock>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a7c2:	79fb      	ldrb	r3, [r7, #7]
 800a7c4:	f003 031c 	and.w	r3, r3, #28
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d07f      	beq.n	800a8cc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a7cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d017      	beq.n	800a804 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a7d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a7d8:	2b04      	cmp	r3, #4
 800a7da:	d10e      	bne.n	800a7fa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a7dc:	f7fd fea2 	bl	8008524 <enq_lock>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d006      	beq.n	800a7f4 <f_open+0xc8>
 800a7e6:	f107 0318 	add.w	r3, r7, #24
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7fe fffe 	bl	80097ec <dir_register>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	e000      	b.n	800a7f6 <f_open+0xca>
 800a7f4:	2312      	movs	r3, #18
 800a7f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a7fa:	79fb      	ldrb	r3, [r7, #7]
 800a7fc:	f043 0308 	orr.w	r3, r3, #8
 800a800:	71fb      	strb	r3, [r7, #7]
 800a802:	e010      	b.n	800a826 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a804:	7fbb      	ldrb	r3, [r7, #30]
 800a806:	f003 0311 	and.w	r3, r3, #17
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d003      	beq.n	800a816 <f_open+0xea>
					res = FR_DENIED;
 800a80e:	2307      	movs	r3, #7
 800a810:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a814:	e007      	b.n	800a826 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a816:	79fb      	ldrb	r3, [r7, #7]
 800a818:	f003 0304 	and.w	r3, r3, #4
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d002      	beq.n	800a826 <f_open+0xfa>
 800a820:	2308      	movs	r3, #8
 800a822:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a826:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d168      	bne.n	800a900 <f_open+0x1d4>
 800a82e:	79fb      	ldrb	r3, [r7, #7]
 800a830:	f003 0308 	and.w	r3, r3, #8
 800a834:	2b00      	cmp	r3, #0
 800a836:	d063      	beq.n	800a900 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a838:	f7fd fc1c 	bl	8008074 <get_fattime>
 800a83c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a840:	330e      	adds	r3, #14
 800a842:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a844:	4618      	mov	r0, r3
 800a846:	f7fd fd67 	bl	8008318 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84c:	3316      	adds	r3, #22
 800a84e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a850:	4618      	mov	r0, r3
 800a852:	f7fd fd61 	bl	8008318 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a858:	330b      	adds	r3, #11
 800a85a:	2220      	movs	r2, #32
 800a85c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a862:	4611      	mov	r1, r2
 800a864:	4618      	mov	r0, r3
 800a866:	f7fe fd39 	bl	80092dc <ld_clust>
 800a86a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a870:	2200      	movs	r2, #0
 800a872:	4618      	mov	r0, r3
 800a874:	f7fe fd51 	bl	800931a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87a:	331c      	adds	r3, #28
 800a87c:	2100      	movs	r1, #0
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fd fd4a 	bl	8008318 <st_dword>
					fs->wflag = 1;
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	2201      	movs	r2, #1
 800a888:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a88a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d037      	beq.n	800a900 <f_open+0x1d4>
						dw = fs->winsect;
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a894:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a896:	f107 0318 	add.w	r3, r7, #24
 800a89a:	2200      	movs	r2, #0
 800a89c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7fe fa41 	bl	8008d26 <remove_chain>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a8aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d126      	bne.n	800a900 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fd ff88 	bl	80087cc <move_window>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a8c6:	3a01      	subs	r2, #1
 800a8c8:	615a      	str	r2, [r3, #20]
 800a8ca:	e019      	b.n	800a900 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a8cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d115      	bne.n	800a900 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a8d4:	7fbb      	ldrb	r3, [r7, #30]
 800a8d6:	f003 0310 	and.w	r3, r3, #16
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d003      	beq.n	800a8e6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a8de:	2304      	movs	r3, #4
 800a8e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a8e4:	e00c      	b.n	800a900 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a8e6:	79fb      	ldrb	r3, [r7, #7]
 800a8e8:	f003 0302 	and.w	r3, r3, #2
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d007      	beq.n	800a900 <f_open+0x1d4>
 800a8f0:	7fbb      	ldrb	r3, [r7, #30]
 800a8f2:	f003 0301 	and.w	r3, r3, #1
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d002      	beq.n	800a900 <f_open+0x1d4>
						res = FR_DENIED;
 800a8fa:	2307      	movs	r3, #7
 800a8fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a900:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a904:	2b00      	cmp	r3, #0
 800a906:	d128      	bne.n	800a95a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a908:	79fb      	ldrb	r3, [r7, #7]
 800a90a:	f003 0308 	and.w	r3, r3, #8
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d003      	beq.n	800a91a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a912:	79fb      	ldrb	r3, [r7, #7]
 800a914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a918:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a922:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a928:	79fb      	ldrb	r3, [r7, #7]
 800a92a:	f023 0301 	bic.w	r3, r3, #1
 800a92e:	2b00      	cmp	r3, #0
 800a930:	bf14      	ite	ne
 800a932:	2301      	movne	r3, #1
 800a934:	2300      	moveq	r3, #0
 800a936:	b2db      	uxtb	r3, r3
 800a938:	461a      	mov	r2, r3
 800a93a:	f107 0318 	add.w	r3, r7, #24
 800a93e:	4611      	mov	r1, r2
 800a940:	4618      	mov	r0, r3
 800a942:	f7fd fe11 	bl	8008568 <inc_lock>
 800a946:	4602      	mov	r2, r0
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	691b      	ldr	r3, [r3, #16]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d102      	bne.n	800a95a <f_open+0x22e>
 800a954:	2302      	movs	r3, #2
 800a956:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a95a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f040 80a3 	bne.w	800aaaa <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a968:	4611      	mov	r1, r2
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7fe fcb6 	bl	80092dc <ld_clust>
 800a970:	4602      	mov	r2, r0
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a978:	331c      	adds	r3, #28
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7fd fc8e 	bl	800829c <ld_dword>
 800a980:	4602      	mov	r2, r0
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a98c:	697a      	ldr	r2, [r7, #20]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	88da      	ldrh	r2, [r3, #6]
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	79fa      	ldrb	r2, [r7, #7]
 800a99e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	3330      	adds	r3, #48	; 0x30
 800a9b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7fd fcf8 	bl	80083b2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a9c2:	79fb      	ldrb	r3, [r7, #7]
 800a9c4:	f003 0320 	and.w	r3, r3, #32
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d06e      	beq.n	800aaaa <f_open+0x37e>
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d06a      	beq.n	800aaaa <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	68da      	ldr	r2, [r3, #12]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	895b      	ldrh	r3, [r3, #10]
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	899b      	ldrh	r3, [r3, #12]
 800a9e6:	fb02 f303 	mul.w	r3, r2, r3
 800a9ea:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9f8:	e016      	b.n	800aa28 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fd ffa1 	bl	8008946 <get_fat>
 800aa04:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800aa06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d802      	bhi.n	800aa12 <f_open+0x2e6>
 800aa0c:	2302      	movs	r3, #2
 800aa0e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800aa12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa18:	d102      	bne.n	800aa20 <f_open+0x2f4>
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aa20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aa22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa24:	1ad3      	subs	r3, r2, r3
 800aa26:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d103      	bne.n	800aa38 <f_open+0x30c>
 800aa30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aa32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d8e0      	bhi.n	800a9fa <f_open+0x2ce>
				}
				fp->clust = clst;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa3c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800aa3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d131      	bne.n	800aaaa <f_open+0x37e>
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	899b      	ldrh	r3, [r3, #12]
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa4e:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa52:	fb01 f202 	mul.w	r2, r1, r2
 800aa56:	1a9b      	subs	r3, r3, r2
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d026      	beq.n	800aaaa <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7fd ff51 	bl	8008908 <clust2sect>
 800aa66:	64f8      	str	r0, [r7, #76]	; 0x4c
 800aa68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d103      	bne.n	800aa76 <f_open+0x34a>
						res = FR_INT_ERR;
 800aa6e:	2302      	movs	r3, #2
 800aa70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800aa74:	e019      	b.n	800aaaa <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	899b      	ldrh	r3, [r3, #12]
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa7e:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa84:	441a      	add	r2, r3
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	7858      	ldrb	r0, [r3, #1]
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6a1a      	ldr	r2, [r3, #32]
 800aa98:	2301      	movs	r3, #1
 800aa9a:	f7fd fb89 	bl	80081b0 <disk_read>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d002      	beq.n	800aaaa <f_open+0x37e>
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800aaaa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d002      	beq.n	800aab8 <f_open+0x38c>
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800aab8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3768      	adds	r7, #104	; 0x68
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b08c      	sub	sp, #48	; 0x30
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	607a      	str	r2, [r7, #4]
 800aad0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	2200      	movs	r2, #0
 800aada:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f107 0210 	add.w	r2, r7, #16
 800aae2:	4611      	mov	r1, r2
 800aae4:	4618      	mov	r0, r3
 800aae6:	f7ff fda5 	bl	800a634 <validate>
 800aaea:	4603      	mov	r3, r0
 800aaec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800aaf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d107      	bne.n	800ab08 <f_write+0x44>
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	7d5b      	ldrb	r3, [r3, #21]
 800aafc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ab00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d002      	beq.n	800ab0e <f_write+0x4a>
 800ab08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab0c:	e16a      	b.n	800ade4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	7d1b      	ldrb	r3, [r3, #20]
 800ab12:	f003 0302 	and.w	r3, r3, #2
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d101      	bne.n	800ab1e <f_write+0x5a>
 800ab1a:	2307      	movs	r3, #7
 800ab1c:	e162      	b.n	800ade4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	699a      	ldr	r2, [r3, #24]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	441a      	add	r2, r3
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	699b      	ldr	r3, [r3, #24]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	f080 814c 	bcs.w	800adc8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	699b      	ldr	r3, [r3, #24]
 800ab34:	43db      	mvns	r3, r3
 800ab36:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ab38:	e146      	b.n	800adc8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	699b      	ldr	r3, [r3, #24]
 800ab3e:	693a      	ldr	r2, [r7, #16]
 800ab40:	8992      	ldrh	r2, [r2, #12]
 800ab42:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab46:	fb01 f202 	mul.w	r2, r1, r2
 800ab4a:	1a9b      	subs	r3, r3, r2
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f040 80f1 	bne.w	800ad34 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	699b      	ldr	r3, [r3, #24]
 800ab56:	693a      	ldr	r2, [r7, #16]
 800ab58:	8992      	ldrh	r2, [r2, #12]
 800ab5a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab5e:	693a      	ldr	r2, [r7, #16]
 800ab60:	8952      	ldrh	r2, [r2, #10]
 800ab62:	3a01      	subs	r2, #1
 800ab64:	4013      	ands	r3, r2
 800ab66:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d143      	bne.n	800abf6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	699b      	ldr	r3, [r3, #24]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d10c      	bne.n	800ab90 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ab7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d11a      	bne.n	800abb8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2100      	movs	r1, #0
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fe f932 	bl	8008df0 <create_chain>
 800ab8c:	62b8      	str	r0, [r7, #40]	; 0x28
 800ab8e:	e013      	b.n	800abb8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d007      	beq.n	800aba8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	699b      	ldr	r3, [r3, #24]
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	f7fe f9be 	bl	8008f20 <clmt_clust>
 800aba4:	62b8      	str	r0, [r7, #40]	; 0x28
 800aba6:	e007      	b.n	800abb8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	69db      	ldr	r3, [r3, #28]
 800abae:	4619      	mov	r1, r3
 800abb0:	4610      	mov	r0, r2
 800abb2:	f7fe f91d 	bl	8008df0 <create_chain>
 800abb6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800abb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abba:	2b00      	cmp	r3, #0
 800abbc:	f000 8109 	beq.w	800add2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800abc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d104      	bne.n	800abd0 <f_write+0x10c>
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2202      	movs	r2, #2
 800abca:	755a      	strb	r2, [r3, #21]
 800abcc:	2302      	movs	r3, #2
 800abce:	e109      	b.n	800ade4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800abd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd6:	d104      	bne.n	800abe2 <f_write+0x11e>
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2201      	movs	r2, #1
 800abdc:	755a      	strb	r2, [r3, #21]
 800abde:	2301      	movs	r3, #1
 800abe0:	e100      	b.n	800ade4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abe6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d102      	bne.n	800abf6 <f_write+0x132>
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abf4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	7d1b      	ldrb	r3, [r3, #20]
 800abfa:	b25b      	sxtb	r3, r3
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	da18      	bge.n	800ac32 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	7858      	ldrb	r0, [r3, #1]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	6a1a      	ldr	r2, [r3, #32]
 800ac0e:	2301      	movs	r3, #1
 800ac10:	f7fd faee 	bl	80081f0 <disk_write>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d004      	beq.n	800ac24 <f_write+0x160>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	755a      	strb	r2, [r3, #21]
 800ac20:	2301      	movs	r3, #1
 800ac22:	e0df      	b.n	800ade4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	7d1b      	ldrb	r3, [r3, #20]
 800ac28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac2c:	b2da      	uxtb	r2, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ac32:	693a      	ldr	r2, [r7, #16]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	69db      	ldr	r3, [r3, #28]
 800ac38:	4619      	mov	r1, r3
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	f7fd fe64 	bl	8008908 <clust2sect>
 800ac40:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d104      	bne.n	800ac52 <f_write+0x18e>
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2202      	movs	r2, #2
 800ac4c:	755a      	strb	r2, [r3, #21]
 800ac4e:	2302      	movs	r3, #2
 800ac50:	e0c8      	b.n	800ade4 <f_write+0x320>
			sect += csect;
 800ac52:	697a      	ldr	r2, [r7, #20]
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	4413      	add	r3, r2
 800ac58:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	899b      	ldrh	r3, [r3, #12]
 800ac5e:	461a      	mov	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac66:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ac68:	6a3b      	ldr	r3, [r7, #32]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d043      	beq.n	800acf6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ac6e:	69ba      	ldr	r2, [r7, #24]
 800ac70:	6a3b      	ldr	r3, [r7, #32]
 800ac72:	4413      	add	r3, r2
 800ac74:	693a      	ldr	r2, [r7, #16]
 800ac76:	8952      	ldrh	r2, [r2, #10]
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d905      	bls.n	800ac88 <f_write+0x1c4>
					cc = fs->csize - csect;
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	895b      	ldrh	r3, [r3, #10]
 800ac80:	461a      	mov	r2, r3
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	1ad3      	subs	r3, r2, r3
 800ac86:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	7858      	ldrb	r0, [r3, #1]
 800ac8c:	6a3b      	ldr	r3, [r7, #32]
 800ac8e:	697a      	ldr	r2, [r7, #20]
 800ac90:	69f9      	ldr	r1, [r7, #28]
 800ac92:	f7fd faad 	bl	80081f0 <disk_write>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d004      	beq.n	800aca6 <f_write+0x1e2>
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2201      	movs	r2, #1
 800aca0:	755a      	strb	r2, [r3, #21]
 800aca2:	2301      	movs	r3, #1
 800aca4:	e09e      	b.n	800ade4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	6a1a      	ldr	r2, [r3, #32]
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	1ad3      	subs	r3, r2, r3
 800acae:	6a3a      	ldr	r2, [r7, #32]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d918      	bls.n	800ace6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6a1a      	ldr	r2, [r3, #32]
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	1ad3      	subs	r3, r2, r3
 800acc2:	693a      	ldr	r2, [r7, #16]
 800acc4:	8992      	ldrh	r2, [r2, #12]
 800acc6:	fb02 f303 	mul.w	r3, r2, r3
 800acca:	69fa      	ldr	r2, [r7, #28]
 800accc:	18d1      	adds	r1, r2, r3
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	899b      	ldrh	r3, [r3, #12]
 800acd2:	461a      	mov	r2, r3
 800acd4:	f7fd fb4c 	bl	8008370 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	7d1b      	ldrb	r3, [r3, #20]
 800acdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ace0:	b2da      	uxtb	r2, r3
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	899b      	ldrh	r3, [r3, #12]
 800acea:	461a      	mov	r2, r3
 800acec:	6a3b      	ldr	r3, [r7, #32]
 800acee:	fb02 f303 	mul.w	r3, r2, r3
 800acf2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800acf4:	e04b      	b.n	800ad8e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6a1b      	ldr	r3, [r3, #32]
 800acfa:	697a      	ldr	r2, [r7, #20]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d016      	beq.n	800ad2e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	699a      	ldr	r2, [r3, #24]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d210      	bcs.n	800ad2e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	7858      	ldrb	r0, [r3, #1]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad16:	2301      	movs	r3, #1
 800ad18:	697a      	ldr	r2, [r7, #20]
 800ad1a:	f7fd fa49 	bl	80081b0 <disk_read>
 800ad1e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d004      	beq.n	800ad2e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2201      	movs	r2, #1
 800ad28:	755a      	strb	r2, [r3, #21]
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	e05a      	b.n	800ade4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	697a      	ldr	r2, [r7, #20]
 800ad32:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	899b      	ldrh	r3, [r3, #12]
 800ad38:	4618      	mov	r0, r3
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	699b      	ldr	r3, [r3, #24]
 800ad3e:	693a      	ldr	r2, [r7, #16]
 800ad40:	8992      	ldrh	r2, [r2, #12]
 800ad42:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad46:	fb01 f202 	mul.w	r2, r1, r2
 800ad4a:	1a9b      	subs	r3, r3, r2
 800ad4c:	1ac3      	subs	r3, r0, r3
 800ad4e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ad50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d901      	bls.n	800ad5c <f_write+0x298>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	699b      	ldr	r3, [r3, #24]
 800ad66:	693a      	ldr	r2, [r7, #16]
 800ad68:	8992      	ldrh	r2, [r2, #12]
 800ad6a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad6e:	fb00 f202 	mul.w	r2, r0, r2
 800ad72:	1a9b      	subs	r3, r3, r2
 800ad74:	440b      	add	r3, r1
 800ad76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad78:	69f9      	ldr	r1, [r7, #28]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7fd faf8 	bl	8008370 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	7d1b      	ldrb	r3, [r3, #20]
 800ad84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ad88:	b2da      	uxtb	r2, r3
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ad8e:	69fa      	ldr	r2, [r7, #28]
 800ad90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad92:	4413      	add	r3, r2
 800ad94:	61fb      	str	r3, [r7, #28]
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	699a      	ldr	r2, [r3, #24]
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9c:	441a      	add	r2, r3
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	619a      	str	r2, [r3, #24]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	68da      	ldr	r2, [r3, #12]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	699b      	ldr	r3, [r3, #24]
 800adaa:	429a      	cmp	r2, r3
 800adac:	bf38      	it	cc
 800adae:	461a      	movcc	r2, r3
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	60da      	str	r2, [r3, #12]
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adba:	441a      	add	r2, r3
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	601a      	str	r2, [r3, #0]
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc4:	1ad3      	subs	r3, r2, r3
 800adc6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f47f aeb5 	bne.w	800ab3a <f_write+0x76>
 800add0:	e000      	b.n	800add4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800add2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	7d1b      	ldrb	r3, [r3, #20]
 800add8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800addc:	b2da      	uxtb	r2, r3
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ade2:	2300      	movs	r3, #0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3730      	adds	r7, #48	; 0x30
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b086      	sub	sp, #24
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f107 0208 	add.w	r2, r7, #8
 800adfa:	4611      	mov	r1, r2
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7ff fc19 	bl	800a634 <validate>
 800ae02:	4603      	mov	r3, r0
 800ae04:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ae06:	7dfb      	ldrb	r3, [r7, #23]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d168      	bne.n	800aede <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	7d1b      	ldrb	r3, [r3, #20]
 800ae10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d062      	beq.n	800aede <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	7d1b      	ldrb	r3, [r3, #20]
 800ae1c:	b25b      	sxtb	r3, r3
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	da15      	bge.n	800ae4e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	7858      	ldrb	r0, [r3, #1]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6a1a      	ldr	r2, [r3, #32]
 800ae30:	2301      	movs	r3, #1
 800ae32:	f7fd f9dd 	bl	80081f0 <disk_write>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d001      	beq.n	800ae40 <f_sync+0x54>
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e04f      	b.n	800aee0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	7d1b      	ldrb	r3, [r3, #20]
 800ae44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae48:	b2da      	uxtb	r2, r3
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ae4e:	f7fd f911 	bl	8008074 <get_fattime>
 800ae52:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ae54:	68ba      	ldr	r2, [r7, #8]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	4610      	mov	r0, r2
 800ae5e:	f7fd fcb5 	bl	80087cc <move_window>
 800ae62:	4603      	mov	r3, r0
 800ae64:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ae66:	7dfb      	ldrb	r3, [r7, #23]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d138      	bne.n	800aede <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae70:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	330b      	adds	r3, #11
 800ae76:	781a      	ldrb	r2, [r3, #0]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	330b      	adds	r3, #11
 800ae7c:	f042 0220 	orr.w	r2, r2, #32
 800ae80:	b2d2      	uxtb	r2, r2
 800ae82:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6818      	ldr	r0, [r3, #0]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	68f9      	ldr	r1, [r7, #12]
 800ae90:	f7fe fa43 	bl	800931a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f103 021c 	add.w	r2, r3, #28
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	4619      	mov	r1, r3
 800aea0:	4610      	mov	r0, r2
 800aea2:	f7fd fa39 	bl	8008318 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	3316      	adds	r3, #22
 800aeaa:	6939      	ldr	r1, [r7, #16]
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7fd fa33 	bl	8008318 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	3312      	adds	r3, #18
 800aeb6:	2100      	movs	r1, #0
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7fd fa12 	bl	80082e2 <st_word>
					fs->wflag = 1;
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	2201      	movs	r2, #1
 800aec2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fd fcae 	bl	8008828 <sync_fs>
 800aecc:	4603      	mov	r3, r0
 800aece:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	7d1b      	ldrb	r3, [r3, #20]
 800aed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aed8:	b2da      	uxtb	r2, r3
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800aede:	7dfb      	ldrb	r3, [r7, #23]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3718      	adds	r7, #24
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f7ff ff7b 	bl	800adec <f_sync>
 800aef6:	4603      	mov	r3, r0
 800aef8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800aefa:	7bfb      	ldrb	r3, [r7, #15]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d118      	bne.n	800af32 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f107 0208 	add.w	r2, r7, #8
 800af06:	4611      	mov	r1, r2
 800af08:	4618      	mov	r0, r3
 800af0a:	f7ff fb93 	bl	800a634 <validate>
 800af0e:	4603      	mov	r3, r0
 800af10:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800af12:	7bfb      	ldrb	r3, [r7, #15]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d10c      	bne.n	800af32 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	691b      	ldr	r3, [r3, #16]
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7fd fbb1 	bl	8008684 <dec_lock>
 800af22:	4603      	mov	r3, r0
 800af24:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800af26:	7bfb      	ldrb	r3, [r7, #15]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d102      	bne.n	800af32 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800af32:	7bfb      	ldrb	r3, [r7, #15]
}
 800af34:	4618      	mov	r0, r3
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b090      	sub	sp, #64	; 0x40
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800af46:	f107 0108 	add.w	r1, r7, #8
 800af4a:	1d3b      	adds	r3, r7, #4
 800af4c:	2200      	movs	r2, #0
 800af4e:	4618      	mov	r0, r3
 800af50:	f7ff f8ea 	bl	800a128 <find_volume>
 800af54:	4603      	mov	r3, r0
 800af56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800af5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d11f      	bne.n	800afa2 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	f107 0308 	add.w	r3, r7, #8
 800af68:	4611      	mov	r1, r2
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7fe ffcc 	bl	8009f08 <follow_path>
 800af70:	4603      	mov	r3, r0
 800af72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800af76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d111      	bne.n	800afa2 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800af7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af82:	b25b      	sxtb	r3, r3
 800af84:	2b00      	cmp	r3, #0
 800af86:	da03      	bge.n	800af90 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800af88:	2306      	movs	r3, #6
 800af8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800af8e:	e008      	b.n	800afa2 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d005      	beq.n	800afa2 <f_stat+0x66>
 800af96:	f107 0308 	add.w	r3, r7, #8
 800af9a:	6839      	ldr	r1, [r7, #0]
 800af9c:	4618      	mov	r0, r3
 800af9e:	f7fe fd1d 	bl	80099dc <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800afa2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3740      	adds	r7, #64	; 0x40
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
	...

0800afb0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b087      	sub	sp, #28
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	4613      	mov	r3, r2
 800afbc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800afbe:	2301      	movs	r3, #1
 800afc0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800afc2:	2300      	movs	r3, #0
 800afc4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800afc6:	4b1f      	ldr	r3, [pc, #124]	; (800b044 <FATFS_LinkDriverEx+0x94>)
 800afc8:	7a5b      	ldrb	r3, [r3, #9]
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d131      	bne.n	800b034 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800afd0:	4b1c      	ldr	r3, [pc, #112]	; (800b044 <FATFS_LinkDriverEx+0x94>)
 800afd2:	7a5b      	ldrb	r3, [r3, #9]
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	461a      	mov	r2, r3
 800afd8:	4b1a      	ldr	r3, [pc, #104]	; (800b044 <FATFS_LinkDriverEx+0x94>)
 800afda:	2100      	movs	r1, #0
 800afdc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800afde:	4b19      	ldr	r3, [pc, #100]	; (800b044 <FATFS_LinkDriverEx+0x94>)
 800afe0:	7a5b      	ldrb	r3, [r3, #9]
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	4a17      	ldr	r2, [pc, #92]	; (800b044 <FATFS_LinkDriverEx+0x94>)
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	4413      	add	r3, r2
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800afee:	4b15      	ldr	r3, [pc, #84]	; (800b044 <FATFS_LinkDriverEx+0x94>)
 800aff0:	7a5b      	ldrb	r3, [r3, #9]
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	461a      	mov	r2, r3
 800aff6:	4b13      	ldr	r3, [pc, #76]	; (800b044 <FATFS_LinkDriverEx+0x94>)
 800aff8:	4413      	add	r3, r2
 800affa:	79fa      	ldrb	r2, [r7, #7]
 800affc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800affe:	4b11      	ldr	r3, [pc, #68]	; (800b044 <FATFS_LinkDriverEx+0x94>)
 800b000:	7a5b      	ldrb	r3, [r3, #9]
 800b002:	b2db      	uxtb	r3, r3
 800b004:	1c5a      	adds	r2, r3, #1
 800b006:	b2d1      	uxtb	r1, r2
 800b008:	4a0e      	ldr	r2, [pc, #56]	; (800b044 <FATFS_LinkDriverEx+0x94>)
 800b00a:	7251      	strb	r1, [r2, #9]
 800b00c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b00e:	7dbb      	ldrb	r3, [r7, #22]
 800b010:	3330      	adds	r3, #48	; 0x30
 800b012:	b2da      	uxtb	r2, r3
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	3301      	adds	r3, #1
 800b01c:	223a      	movs	r2, #58	; 0x3a
 800b01e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	3302      	adds	r3, #2
 800b024:	222f      	movs	r2, #47	; 0x2f
 800b026:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	3303      	adds	r3, #3
 800b02c:	2200      	movs	r2, #0
 800b02e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b030:	2300      	movs	r3, #0
 800b032:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b034:	7dfb      	ldrb	r3, [r7, #23]
}
 800b036:	4618      	mov	r0, r3
 800b038:	371c      	adds	r7, #28
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	200025ec 	.word	0x200025ec

0800b048 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b052:	2200      	movs	r2, #0
 800b054:	6839      	ldr	r1, [r7, #0]
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f7ff ffaa 	bl	800afb0 <FATFS_LinkDriverEx>
 800b05c:	4603      	mov	r3, r0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
	...

0800b068 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	4603      	mov	r3, r0
 800b070:	6039      	str	r1, [r7, #0]
 800b072:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b074:	88fb      	ldrh	r3, [r7, #6]
 800b076:	2b7f      	cmp	r3, #127	; 0x7f
 800b078:	d802      	bhi.n	800b080 <ff_convert+0x18>
		c = chr;
 800b07a:	88fb      	ldrh	r3, [r7, #6]
 800b07c:	81fb      	strh	r3, [r7, #14]
 800b07e:	e025      	b.n	800b0cc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d00b      	beq.n	800b09e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b086:	88fb      	ldrh	r3, [r7, #6]
 800b088:	2bff      	cmp	r3, #255	; 0xff
 800b08a:	d805      	bhi.n	800b098 <ff_convert+0x30>
 800b08c:	88fb      	ldrh	r3, [r7, #6]
 800b08e:	3b80      	subs	r3, #128	; 0x80
 800b090:	4a12      	ldr	r2, [pc, #72]	; (800b0dc <ff_convert+0x74>)
 800b092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b096:	e000      	b.n	800b09a <ff_convert+0x32>
 800b098:	2300      	movs	r3, #0
 800b09a:	81fb      	strh	r3, [r7, #14]
 800b09c:	e016      	b.n	800b0cc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b09e:	2300      	movs	r3, #0
 800b0a0:	81fb      	strh	r3, [r7, #14]
 800b0a2:	e009      	b.n	800b0b8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b0a4:	89fb      	ldrh	r3, [r7, #14]
 800b0a6:	4a0d      	ldr	r2, [pc, #52]	; (800b0dc <ff_convert+0x74>)
 800b0a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0ac:	88fa      	ldrh	r2, [r7, #6]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d006      	beq.n	800b0c0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b0b2:	89fb      	ldrh	r3, [r7, #14]
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	81fb      	strh	r3, [r7, #14]
 800b0b8:	89fb      	ldrh	r3, [r7, #14]
 800b0ba:	2b7f      	cmp	r3, #127	; 0x7f
 800b0bc:	d9f2      	bls.n	800b0a4 <ff_convert+0x3c>
 800b0be:	e000      	b.n	800b0c2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b0c0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b0c2:	89fb      	ldrh	r3, [r7, #14]
 800b0c4:	3380      	adds	r3, #128	; 0x80
 800b0c6:	b29b      	uxth	r3, r3
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b0cc:	89fb      	ldrh	r3, [r7, #14]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3714      	adds	r7, #20
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	0800bca0 	.word	0x0800bca0

0800b0e0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b087      	sub	sp, #28
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b0ea:	88fb      	ldrh	r3, [r7, #6]
 800b0ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0f0:	d201      	bcs.n	800b0f6 <ff_wtoupper+0x16>
 800b0f2:	4b3e      	ldr	r3, [pc, #248]	; (800b1ec <ff_wtoupper+0x10c>)
 800b0f4:	e000      	b.n	800b0f8 <ff_wtoupper+0x18>
 800b0f6:	4b3e      	ldr	r3, [pc, #248]	; (800b1f0 <ff_wtoupper+0x110>)
 800b0f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	1c9a      	adds	r2, r3, #2
 800b0fe:	617a      	str	r2, [r7, #20]
 800b100:	881b      	ldrh	r3, [r3, #0]
 800b102:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b104:	8a7b      	ldrh	r3, [r7, #18]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d068      	beq.n	800b1dc <ff_wtoupper+0xfc>
 800b10a:	88fa      	ldrh	r2, [r7, #6]
 800b10c:	8a7b      	ldrh	r3, [r7, #18]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d364      	bcc.n	800b1dc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	1c9a      	adds	r2, r3, #2
 800b116:	617a      	str	r2, [r7, #20]
 800b118:	881b      	ldrh	r3, [r3, #0]
 800b11a:	823b      	strh	r3, [r7, #16]
 800b11c:	8a3b      	ldrh	r3, [r7, #16]
 800b11e:	0a1b      	lsrs	r3, r3, #8
 800b120:	81fb      	strh	r3, [r7, #14]
 800b122:	8a3b      	ldrh	r3, [r7, #16]
 800b124:	b2db      	uxtb	r3, r3
 800b126:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b128:	88fa      	ldrh	r2, [r7, #6]
 800b12a:	8a79      	ldrh	r1, [r7, #18]
 800b12c:	8a3b      	ldrh	r3, [r7, #16]
 800b12e:	440b      	add	r3, r1
 800b130:	429a      	cmp	r2, r3
 800b132:	da49      	bge.n	800b1c8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800b134:	89fb      	ldrh	r3, [r7, #14]
 800b136:	2b08      	cmp	r3, #8
 800b138:	d84f      	bhi.n	800b1da <ff_wtoupper+0xfa>
 800b13a:	a201      	add	r2, pc, #4	; (adr r2, 800b140 <ff_wtoupper+0x60>)
 800b13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b140:	0800b165 	.word	0x0800b165
 800b144:	0800b177 	.word	0x0800b177
 800b148:	0800b18d 	.word	0x0800b18d
 800b14c:	0800b195 	.word	0x0800b195
 800b150:	0800b19d 	.word	0x0800b19d
 800b154:	0800b1a5 	.word	0x0800b1a5
 800b158:	0800b1ad 	.word	0x0800b1ad
 800b15c:	0800b1b5 	.word	0x0800b1b5
 800b160:	0800b1bd 	.word	0x0800b1bd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b164:	88fa      	ldrh	r2, [r7, #6]
 800b166:	8a7b      	ldrh	r3, [r7, #18]
 800b168:	1ad3      	subs	r3, r2, r3
 800b16a:	005b      	lsls	r3, r3, #1
 800b16c:	697a      	ldr	r2, [r7, #20]
 800b16e:	4413      	add	r3, r2
 800b170:	881b      	ldrh	r3, [r3, #0]
 800b172:	80fb      	strh	r3, [r7, #6]
 800b174:	e027      	b.n	800b1c6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b176:	88fa      	ldrh	r2, [r7, #6]
 800b178:	8a7b      	ldrh	r3, [r7, #18]
 800b17a:	1ad3      	subs	r3, r2, r3
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	f003 0301 	and.w	r3, r3, #1
 800b182:	b29b      	uxth	r3, r3
 800b184:	88fa      	ldrh	r2, [r7, #6]
 800b186:	1ad3      	subs	r3, r2, r3
 800b188:	80fb      	strh	r3, [r7, #6]
 800b18a:	e01c      	b.n	800b1c6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b18c:	88fb      	ldrh	r3, [r7, #6]
 800b18e:	3b10      	subs	r3, #16
 800b190:	80fb      	strh	r3, [r7, #6]
 800b192:	e018      	b.n	800b1c6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b194:	88fb      	ldrh	r3, [r7, #6]
 800b196:	3b20      	subs	r3, #32
 800b198:	80fb      	strh	r3, [r7, #6]
 800b19a:	e014      	b.n	800b1c6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b19c:	88fb      	ldrh	r3, [r7, #6]
 800b19e:	3b30      	subs	r3, #48	; 0x30
 800b1a0:	80fb      	strh	r3, [r7, #6]
 800b1a2:	e010      	b.n	800b1c6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b1a4:	88fb      	ldrh	r3, [r7, #6]
 800b1a6:	3b1a      	subs	r3, #26
 800b1a8:	80fb      	strh	r3, [r7, #6]
 800b1aa:	e00c      	b.n	800b1c6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b1ac:	88fb      	ldrh	r3, [r7, #6]
 800b1ae:	3308      	adds	r3, #8
 800b1b0:	80fb      	strh	r3, [r7, #6]
 800b1b2:	e008      	b.n	800b1c6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b1b4:	88fb      	ldrh	r3, [r7, #6]
 800b1b6:	3b50      	subs	r3, #80	; 0x50
 800b1b8:	80fb      	strh	r3, [r7, #6]
 800b1ba:	e004      	b.n	800b1c6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b1bc:	88fb      	ldrh	r3, [r7, #6]
 800b1be:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800b1c2:	80fb      	strh	r3, [r7, #6]
 800b1c4:	bf00      	nop
			}
			break;
 800b1c6:	e008      	b.n	800b1da <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b1c8:	89fb      	ldrh	r3, [r7, #14]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d195      	bne.n	800b0fa <ff_wtoupper+0x1a>
 800b1ce:	8a3b      	ldrh	r3, [r7, #16]
 800b1d0:	005b      	lsls	r3, r3, #1
 800b1d2:	697a      	ldr	r2, [r7, #20]
 800b1d4:	4413      	add	r3, r2
 800b1d6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b1d8:	e78f      	b.n	800b0fa <ff_wtoupper+0x1a>
			break;
 800b1da:	bf00      	nop
	}

	return chr;
 800b1dc:	88fb      	ldrh	r3, [r7, #6]
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	371c      	adds	r7, #28
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop
 800b1ec:	0800bda0 	.word	0x0800bda0
 800b1f0:	0800bf94 	.word	0x0800bf94

0800b1f4 <__errno>:
 800b1f4:	4b01      	ldr	r3, [pc, #4]	; (800b1fc <__errno+0x8>)
 800b1f6:	6818      	ldr	r0, [r3, #0]
 800b1f8:	4770      	bx	lr
 800b1fa:	bf00      	nop
 800b1fc:	20000024 	.word	0x20000024

0800b200 <__libc_init_array>:
 800b200:	b570      	push	{r4, r5, r6, lr}
 800b202:	4d0d      	ldr	r5, [pc, #52]	; (800b238 <__libc_init_array+0x38>)
 800b204:	4c0d      	ldr	r4, [pc, #52]	; (800b23c <__libc_init_array+0x3c>)
 800b206:	1b64      	subs	r4, r4, r5
 800b208:	10a4      	asrs	r4, r4, #2
 800b20a:	2600      	movs	r6, #0
 800b20c:	42a6      	cmp	r6, r4
 800b20e:	d109      	bne.n	800b224 <__libc_init_array+0x24>
 800b210:	4d0b      	ldr	r5, [pc, #44]	; (800b240 <__libc_init_array+0x40>)
 800b212:	4c0c      	ldr	r4, [pc, #48]	; (800b244 <__libc_init_array+0x44>)
 800b214:	f000 fc8e 	bl	800bb34 <_init>
 800b218:	1b64      	subs	r4, r4, r5
 800b21a:	10a4      	asrs	r4, r4, #2
 800b21c:	2600      	movs	r6, #0
 800b21e:	42a6      	cmp	r6, r4
 800b220:	d105      	bne.n	800b22e <__libc_init_array+0x2e>
 800b222:	bd70      	pop	{r4, r5, r6, pc}
 800b224:	f855 3b04 	ldr.w	r3, [r5], #4
 800b228:	4798      	blx	r3
 800b22a:	3601      	adds	r6, #1
 800b22c:	e7ee      	b.n	800b20c <__libc_init_array+0xc>
 800b22e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b232:	4798      	blx	r3
 800b234:	3601      	adds	r6, #1
 800b236:	e7f2      	b.n	800b21e <__libc_init_array+0x1e>
 800b238:	0800c08c 	.word	0x0800c08c
 800b23c:	0800c08c 	.word	0x0800c08c
 800b240:	0800c08c 	.word	0x0800c08c
 800b244:	0800c090 	.word	0x0800c090

0800b248 <memset>:
 800b248:	4402      	add	r2, r0
 800b24a:	4603      	mov	r3, r0
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d100      	bne.n	800b252 <memset+0xa>
 800b250:	4770      	bx	lr
 800b252:	f803 1b01 	strb.w	r1, [r3], #1
 800b256:	e7f9      	b.n	800b24c <memset+0x4>

0800b258 <siprintf>:
 800b258:	b40e      	push	{r1, r2, r3}
 800b25a:	b500      	push	{lr}
 800b25c:	b09c      	sub	sp, #112	; 0x70
 800b25e:	ab1d      	add	r3, sp, #116	; 0x74
 800b260:	9002      	str	r0, [sp, #8]
 800b262:	9006      	str	r0, [sp, #24]
 800b264:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b268:	4809      	ldr	r0, [pc, #36]	; (800b290 <siprintf+0x38>)
 800b26a:	9107      	str	r1, [sp, #28]
 800b26c:	9104      	str	r1, [sp, #16]
 800b26e:	4909      	ldr	r1, [pc, #36]	; (800b294 <siprintf+0x3c>)
 800b270:	f853 2b04 	ldr.w	r2, [r3], #4
 800b274:	9105      	str	r1, [sp, #20]
 800b276:	6800      	ldr	r0, [r0, #0]
 800b278:	9301      	str	r3, [sp, #4]
 800b27a:	a902      	add	r1, sp, #8
 800b27c:	f000 f868 	bl	800b350 <_svfiprintf_r>
 800b280:	9b02      	ldr	r3, [sp, #8]
 800b282:	2200      	movs	r2, #0
 800b284:	701a      	strb	r2, [r3, #0]
 800b286:	b01c      	add	sp, #112	; 0x70
 800b288:	f85d eb04 	ldr.w	lr, [sp], #4
 800b28c:	b003      	add	sp, #12
 800b28e:	4770      	bx	lr
 800b290:	20000024 	.word	0x20000024
 800b294:	ffff0208 	.word	0xffff0208

0800b298 <__ssputs_r>:
 800b298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b29c:	688e      	ldr	r6, [r1, #8]
 800b29e:	429e      	cmp	r6, r3
 800b2a0:	4682      	mov	sl, r0
 800b2a2:	460c      	mov	r4, r1
 800b2a4:	4690      	mov	r8, r2
 800b2a6:	461f      	mov	r7, r3
 800b2a8:	d838      	bhi.n	800b31c <__ssputs_r+0x84>
 800b2aa:	898a      	ldrh	r2, [r1, #12]
 800b2ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b2b0:	d032      	beq.n	800b318 <__ssputs_r+0x80>
 800b2b2:	6825      	ldr	r5, [r4, #0]
 800b2b4:	6909      	ldr	r1, [r1, #16]
 800b2b6:	eba5 0901 	sub.w	r9, r5, r1
 800b2ba:	6965      	ldr	r5, [r4, #20]
 800b2bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	444b      	add	r3, r9
 800b2c8:	106d      	asrs	r5, r5, #1
 800b2ca:	429d      	cmp	r5, r3
 800b2cc:	bf38      	it	cc
 800b2ce:	461d      	movcc	r5, r3
 800b2d0:	0553      	lsls	r3, r2, #21
 800b2d2:	d531      	bpl.n	800b338 <__ssputs_r+0xa0>
 800b2d4:	4629      	mov	r1, r5
 800b2d6:	f000 fb63 	bl	800b9a0 <_malloc_r>
 800b2da:	4606      	mov	r6, r0
 800b2dc:	b950      	cbnz	r0, 800b2f4 <__ssputs_r+0x5c>
 800b2de:	230c      	movs	r3, #12
 800b2e0:	f8ca 3000 	str.w	r3, [sl]
 800b2e4:	89a3      	ldrh	r3, [r4, #12]
 800b2e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2ea:	81a3      	strh	r3, [r4, #12]
 800b2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2f4:	6921      	ldr	r1, [r4, #16]
 800b2f6:	464a      	mov	r2, r9
 800b2f8:	f000 fabe 	bl	800b878 <memcpy>
 800b2fc:	89a3      	ldrh	r3, [r4, #12]
 800b2fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b306:	81a3      	strh	r3, [r4, #12]
 800b308:	6126      	str	r6, [r4, #16]
 800b30a:	6165      	str	r5, [r4, #20]
 800b30c:	444e      	add	r6, r9
 800b30e:	eba5 0509 	sub.w	r5, r5, r9
 800b312:	6026      	str	r6, [r4, #0]
 800b314:	60a5      	str	r5, [r4, #8]
 800b316:	463e      	mov	r6, r7
 800b318:	42be      	cmp	r6, r7
 800b31a:	d900      	bls.n	800b31e <__ssputs_r+0x86>
 800b31c:	463e      	mov	r6, r7
 800b31e:	6820      	ldr	r0, [r4, #0]
 800b320:	4632      	mov	r2, r6
 800b322:	4641      	mov	r1, r8
 800b324:	f000 fab6 	bl	800b894 <memmove>
 800b328:	68a3      	ldr	r3, [r4, #8]
 800b32a:	1b9b      	subs	r3, r3, r6
 800b32c:	60a3      	str	r3, [r4, #8]
 800b32e:	6823      	ldr	r3, [r4, #0]
 800b330:	4433      	add	r3, r6
 800b332:	6023      	str	r3, [r4, #0]
 800b334:	2000      	movs	r0, #0
 800b336:	e7db      	b.n	800b2f0 <__ssputs_r+0x58>
 800b338:	462a      	mov	r2, r5
 800b33a:	f000 fba5 	bl	800ba88 <_realloc_r>
 800b33e:	4606      	mov	r6, r0
 800b340:	2800      	cmp	r0, #0
 800b342:	d1e1      	bne.n	800b308 <__ssputs_r+0x70>
 800b344:	6921      	ldr	r1, [r4, #16]
 800b346:	4650      	mov	r0, sl
 800b348:	f000 fabe 	bl	800b8c8 <_free_r>
 800b34c:	e7c7      	b.n	800b2de <__ssputs_r+0x46>
	...

0800b350 <_svfiprintf_r>:
 800b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b354:	4698      	mov	r8, r3
 800b356:	898b      	ldrh	r3, [r1, #12]
 800b358:	061b      	lsls	r3, r3, #24
 800b35a:	b09d      	sub	sp, #116	; 0x74
 800b35c:	4607      	mov	r7, r0
 800b35e:	460d      	mov	r5, r1
 800b360:	4614      	mov	r4, r2
 800b362:	d50e      	bpl.n	800b382 <_svfiprintf_r+0x32>
 800b364:	690b      	ldr	r3, [r1, #16]
 800b366:	b963      	cbnz	r3, 800b382 <_svfiprintf_r+0x32>
 800b368:	2140      	movs	r1, #64	; 0x40
 800b36a:	f000 fb19 	bl	800b9a0 <_malloc_r>
 800b36e:	6028      	str	r0, [r5, #0]
 800b370:	6128      	str	r0, [r5, #16]
 800b372:	b920      	cbnz	r0, 800b37e <_svfiprintf_r+0x2e>
 800b374:	230c      	movs	r3, #12
 800b376:	603b      	str	r3, [r7, #0]
 800b378:	f04f 30ff 	mov.w	r0, #4294967295
 800b37c:	e0d1      	b.n	800b522 <_svfiprintf_r+0x1d2>
 800b37e:	2340      	movs	r3, #64	; 0x40
 800b380:	616b      	str	r3, [r5, #20]
 800b382:	2300      	movs	r3, #0
 800b384:	9309      	str	r3, [sp, #36]	; 0x24
 800b386:	2320      	movs	r3, #32
 800b388:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b38c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b390:	2330      	movs	r3, #48	; 0x30
 800b392:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b53c <_svfiprintf_r+0x1ec>
 800b396:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b39a:	f04f 0901 	mov.w	r9, #1
 800b39e:	4623      	mov	r3, r4
 800b3a0:	469a      	mov	sl, r3
 800b3a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3a6:	b10a      	cbz	r2, 800b3ac <_svfiprintf_r+0x5c>
 800b3a8:	2a25      	cmp	r2, #37	; 0x25
 800b3aa:	d1f9      	bne.n	800b3a0 <_svfiprintf_r+0x50>
 800b3ac:	ebba 0b04 	subs.w	fp, sl, r4
 800b3b0:	d00b      	beq.n	800b3ca <_svfiprintf_r+0x7a>
 800b3b2:	465b      	mov	r3, fp
 800b3b4:	4622      	mov	r2, r4
 800b3b6:	4629      	mov	r1, r5
 800b3b8:	4638      	mov	r0, r7
 800b3ba:	f7ff ff6d 	bl	800b298 <__ssputs_r>
 800b3be:	3001      	adds	r0, #1
 800b3c0:	f000 80aa 	beq.w	800b518 <_svfiprintf_r+0x1c8>
 800b3c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3c6:	445a      	add	r2, fp
 800b3c8:	9209      	str	r2, [sp, #36]	; 0x24
 800b3ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	f000 80a2 	beq.w	800b518 <_svfiprintf_r+0x1c8>
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3de:	f10a 0a01 	add.w	sl, sl, #1
 800b3e2:	9304      	str	r3, [sp, #16]
 800b3e4:	9307      	str	r3, [sp, #28]
 800b3e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3ea:	931a      	str	r3, [sp, #104]	; 0x68
 800b3ec:	4654      	mov	r4, sl
 800b3ee:	2205      	movs	r2, #5
 800b3f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3f4:	4851      	ldr	r0, [pc, #324]	; (800b53c <_svfiprintf_r+0x1ec>)
 800b3f6:	f7f4 fef3 	bl	80001e0 <memchr>
 800b3fa:	9a04      	ldr	r2, [sp, #16]
 800b3fc:	b9d8      	cbnz	r0, 800b436 <_svfiprintf_r+0xe6>
 800b3fe:	06d0      	lsls	r0, r2, #27
 800b400:	bf44      	itt	mi
 800b402:	2320      	movmi	r3, #32
 800b404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b408:	0711      	lsls	r1, r2, #28
 800b40a:	bf44      	itt	mi
 800b40c:	232b      	movmi	r3, #43	; 0x2b
 800b40e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b412:	f89a 3000 	ldrb.w	r3, [sl]
 800b416:	2b2a      	cmp	r3, #42	; 0x2a
 800b418:	d015      	beq.n	800b446 <_svfiprintf_r+0xf6>
 800b41a:	9a07      	ldr	r2, [sp, #28]
 800b41c:	4654      	mov	r4, sl
 800b41e:	2000      	movs	r0, #0
 800b420:	f04f 0c0a 	mov.w	ip, #10
 800b424:	4621      	mov	r1, r4
 800b426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b42a:	3b30      	subs	r3, #48	; 0x30
 800b42c:	2b09      	cmp	r3, #9
 800b42e:	d94e      	bls.n	800b4ce <_svfiprintf_r+0x17e>
 800b430:	b1b0      	cbz	r0, 800b460 <_svfiprintf_r+0x110>
 800b432:	9207      	str	r2, [sp, #28]
 800b434:	e014      	b.n	800b460 <_svfiprintf_r+0x110>
 800b436:	eba0 0308 	sub.w	r3, r0, r8
 800b43a:	fa09 f303 	lsl.w	r3, r9, r3
 800b43e:	4313      	orrs	r3, r2
 800b440:	9304      	str	r3, [sp, #16]
 800b442:	46a2      	mov	sl, r4
 800b444:	e7d2      	b.n	800b3ec <_svfiprintf_r+0x9c>
 800b446:	9b03      	ldr	r3, [sp, #12]
 800b448:	1d19      	adds	r1, r3, #4
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	9103      	str	r1, [sp, #12]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	bfbb      	ittet	lt
 800b452:	425b      	neglt	r3, r3
 800b454:	f042 0202 	orrlt.w	r2, r2, #2
 800b458:	9307      	strge	r3, [sp, #28]
 800b45a:	9307      	strlt	r3, [sp, #28]
 800b45c:	bfb8      	it	lt
 800b45e:	9204      	strlt	r2, [sp, #16]
 800b460:	7823      	ldrb	r3, [r4, #0]
 800b462:	2b2e      	cmp	r3, #46	; 0x2e
 800b464:	d10c      	bne.n	800b480 <_svfiprintf_r+0x130>
 800b466:	7863      	ldrb	r3, [r4, #1]
 800b468:	2b2a      	cmp	r3, #42	; 0x2a
 800b46a:	d135      	bne.n	800b4d8 <_svfiprintf_r+0x188>
 800b46c:	9b03      	ldr	r3, [sp, #12]
 800b46e:	1d1a      	adds	r2, r3, #4
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	9203      	str	r2, [sp, #12]
 800b474:	2b00      	cmp	r3, #0
 800b476:	bfb8      	it	lt
 800b478:	f04f 33ff 	movlt.w	r3, #4294967295
 800b47c:	3402      	adds	r4, #2
 800b47e:	9305      	str	r3, [sp, #20]
 800b480:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b54c <_svfiprintf_r+0x1fc>
 800b484:	7821      	ldrb	r1, [r4, #0]
 800b486:	2203      	movs	r2, #3
 800b488:	4650      	mov	r0, sl
 800b48a:	f7f4 fea9 	bl	80001e0 <memchr>
 800b48e:	b140      	cbz	r0, 800b4a2 <_svfiprintf_r+0x152>
 800b490:	2340      	movs	r3, #64	; 0x40
 800b492:	eba0 000a 	sub.w	r0, r0, sl
 800b496:	fa03 f000 	lsl.w	r0, r3, r0
 800b49a:	9b04      	ldr	r3, [sp, #16]
 800b49c:	4303      	orrs	r3, r0
 800b49e:	3401      	adds	r4, #1
 800b4a0:	9304      	str	r3, [sp, #16]
 800b4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4a6:	4826      	ldr	r0, [pc, #152]	; (800b540 <_svfiprintf_r+0x1f0>)
 800b4a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4ac:	2206      	movs	r2, #6
 800b4ae:	f7f4 fe97 	bl	80001e0 <memchr>
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	d038      	beq.n	800b528 <_svfiprintf_r+0x1d8>
 800b4b6:	4b23      	ldr	r3, [pc, #140]	; (800b544 <_svfiprintf_r+0x1f4>)
 800b4b8:	bb1b      	cbnz	r3, 800b502 <_svfiprintf_r+0x1b2>
 800b4ba:	9b03      	ldr	r3, [sp, #12]
 800b4bc:	3307      	adds	r3, #7
 800b4be:	f023 0307 	bic.w	r3, r3, #7
 800b4c2:	3308      	adds	r3, #8
 800b4c4:	9303      	str	r3, [sp, #12]
 800b4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4c8:	4433      	add	r3, r6
 800b4ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b4cc:	e767      	b.n	800b39e <_svfiprintf_r+0x4e>
 800b4ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4d2:	460c      	mov	r4, r1
 800b4d4:	2001      	movs	r0, #1
 800b4d6:	e7a5      	b.n	800b424 <_svfiprintf_r+0xd4>
 800b4d8:	2300      	movs	r3, #0
 800b4da:	3401      	adds	r4, #1
 800b4dc:	9305      	str	r3, [sp, #20]
 800b4de:	4619      	mov	r1, r3
 800b4e0:	f04f 0c0a 	mov.w	ip, #10
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4ea:	3a30      	subs	r2, #48	; 0x30
 800b4ec:	2a09      	cmp	r2, #9
 800b4ee:	d903      	bls.n	800b4f8 <_svfiprintf_r+0x1a8>
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d0c5      	beq.n	800b480 <_svfiprintf_r+0x130>
 800b4f4:	9105      	str	r1, [sp, #20]
 800b4f6:	e7c3      	b.n	800b480 <_svfiprintf_r+0x130>
 800b4f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4fc:	4604      	mov	r4, r0
 800b4fe:	2301      	movs	r3, #1
 800b500:	e7f0      	b.n	800b4e4 <_svfiprintf_r+0x194>
 800b502:	ab03      	add	r3, sp, #12
 800b504:	9300      	str	r3, [sp, #0]
 800b506:	462a      	mov	r2, r5
 800b508:	4b0f      	ldr	r3, [pc, #60]	; (800b548 <_svfiprintf_r+0x1f8>)
 800b50a:	a904      	add	r1, sp, #16
 800b50c:	4638      	mov	r0, r7
 800b50e:	f3af 8000 	nop.w
 800b512:	1c42      	adds	r2, r0, #1
 800b514:	4606      	mov	r6, r0
 800b516:	d1d6      	bne.n	800b4c6 <_svfiprintf_r+0x176>
 800b518:	89ab      	ldrh	r3, [r5, #12]
 800b51a:	065b      	lsls	r3, r3, #25
 800b51c:	f53f af2c 	bmi.w	800b378 <_svfiprintf_r+0x28>
 800b520:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b522:	b01d      	add	sp, #116	; 0x74
 800b524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b528:	ab03      	add	r3, sp, #12
 800b52a:	9300      	str	r3, [sp, #0]
 800b52c:	462a      	mov	r2, r5
 800b52e:	4b06      	ldr	r3, [pc, #24]	; (800b548 <_svfiprintf_r+0x1f8>)
 800b530:	a904      	add	r1, sp, #16
 800b532:	4638      	mov	r0, r7
 800b534:	f000 f87a 	bl	800b62c <_printf_i>
 800b538:	e7eb      	b.n	800b512 <_svfiprintf_r+0x1c2>
 800b53a:	bf00      	nop
 800b53c:	0800c050 	.word	0x0800c050
 800b540:	0800c05a 	.word	0x0800c05a
 800b544:	00000000 	.word	0x00000000
 800b548:	0800b299 	.word	0x0800b299
 800b54c:	0800c056 	.word	0x0800c056

0800b550 <_printf_common>:
 800b550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b554:	4616      	mov	r6, r2
 800b556:	4699      	mov	r9, r3
 800b558:	688a      	ldr	r2, [r1, #8]
 800b55a:	690b      	ldr	r3, [r1, #16]
 800b55c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b560:	4293      	cmp	r3, r2
 800b562:	bfb8      	it	lt
 800b564:	4613      	movlt	r3, r2
 800b566:	6033      	str	r3, [r6, #0]
 800b568:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b56c:	4607      	mov	r7, r0
 800b56e:	460c      	mov	r4, r1
 800b570:	b10a      	cbz	r2, 800b576 <_printf_common+0x26>
 800b572:	3301      	adds	r3, #1
 800b574:	6033      	str	r3, [r6, #0]
 800b576:	6823      	ldr	r3, [r4, #0]
 800b578:	0699      	lsls	r1, r3, #26
 800b57a:	bf42      	ittt	mi
 800b57c:	6833      	ldrmi	r3, [r6, #0]
 800b57e:	3302      	addmi	r3, #2
 800b580:	6033      	strmi	r3, [r6, #0]
 800b582:	6825      	ldr	r5, [r4, #0]
 800b584:	f015 0506 	ands.w	r5, r5, #6
 800b588:	d106      	bne.n	800b598 <_printf_common+0x48>
 800b58a:	f104 0a19 	add.w	sl, r4, #25
 800b58e:	68e3      	ldr	r3, [r4, #12]
 800b590:	6832      	ldr	r2, [r6, #0]
 800b592:	1a9b      	subs	r3, r3, r2
 800b594:	42ab      	cmp	r3, r5
 800b596:	dc26      	bgt.n	800b5e6 <_printf_common+0x96>
 800b598:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b59c:	1e13      	subs	r3, r2, #0
 800b59e:	6822      	ldr	r2, [r4, #0]
 800b5a0:	bf18      	it	ne
 800b5a2:	2301      	movne	r3, #1
 800b5a4:	0692      	lsls	r2, r2, #26
 800b5a6:	d42b      	bmi.n	800b600 <_printf_common+0xb0>
 800b5a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5ac:	4649      	mov	r1, r9
 800b5ae:	4638      	mov	r0, r7
 800b5b0:	47c0      	blx	r8
 800b5b2:	3001      	adds	r0, #1
 800b5b4:	d01e      	beq.n	800b5f4 <_printf_common+0xa4>
 800b5b6:	6823      	ldr	r3, [r4, #0]
 800b5b8:	68e5      	ldr	r5, [r4, #12]
 800b5ba:	6832      	ldr	r2, [r6, #0]
 800b5bc:	f003 0306 	and.w	r3, r3, #6
 800b5c0:	2b04      	cmp	r3, #4
 800b5c2:	bf08      	it	eq
 800b5c4:	1aad      	subeq	r5, r5, r2
 800b5c6:	68a3      	ldr	r3, [r4, #8]
 800b5c8:	6922      	ldr	r2, [r4, #16]
 800b5ca:	bf0c      	ite	eq
 800b5cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5d0:	2500      	movne	r5, #0
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	bfc4      	itt	gt
 800b5d6:	1a9b      	subgt	r3, r3, r2
 800b5d8:	18ed      	addgt	r5, r5, r3
 800b5da:	2600      	movs	r6, #0
 800b5dc:	341a      	adds	r4, #26
 800b5de:	42b5      	cmp	r5, r6
 800b5e0:	d11a      	bne.n	800b618 <_printf_common+0xc8>
 800b5e2:	2000      	movs	r0, #0
 800b5e4:	e008      	b.n	800b5f8 <_printf_common+0xa8>
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	4652      	mov	r2, sl
 800b5ea:	4649      	mov	r1, r9
 800b5ec:	4638      	mov	r0, r7
 800b5ee:	47c0      	blx	r8
 800b5f0:	3001      	adds	r0, #1
 800b5f2:	d103      	bne.n	800b5fc <_printf_common+0xac>
 800b5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5fc:	3501      	adds	r5, #1
 800b5fe:	e7c6      	b.n	800b58e <_printf_common+0x3e>
 800b600:	18e1      	adds	r1, r4, r3
 800b602:	1c5a      	adds	r2, r3, #1
 800b604:	2030      	movs	r0, #48	; 0x30
 800b606:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b60a:	4422      	add	r2, r4
 800b60c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b610:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b614:	3302      	adds	r3, #2
 800b616:	e7c7      	b.n	800b5a8 <_printf_common+0x58>
 800b618:	2301      	movs	r3, #1
 800b61a:	4622      	mov	r2, r4
 800b61c:	4649      	mov	r1, r9
 800b61e:	4638      	mov	r0, r7
 800b620:	47c0      	blx	r8
 800b622:	3001      	adds	r0, #1
 800b624:	d0e6      	beq.n	800b5f4 <_printf_common+0xa4>
 800b626:	3601      	adds	r6, #1
 800b628:	e7d9      	b.n	800b5de <_printf_common+0x8e>
	...

0800b62c <_printf_i>:
 800b62c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b630:	7e0f      	ldrb	r7, [r1, #24]
 800b632:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b634:	2f78      	cmp	r7, #120	; 0x78
 800b636:	4691      	mov	r9, r2
 800b638:	4680      	mov	r8, r0
 800b63a:	460c      	mov	r4, r1
 800b63c:	469a      	mov	sl, r3
 800b63e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b642:	d807      	bhi.n	800b654 <_printf_i+0x28>
 800b644:	2f62      	cmp	r7, #98	; 0x62
 800b646:	d80a      	bhi.n	800b65e <_printf_i+0x32>
 800b648:	2f00      	cmp	r7, #0
 800b64a:	f000 80d8 	beq.w	800b7fe <_printf_i+0x1d2>
 800b64e:	2f58      	cmp	r7, #88	; 0x58
 800b650:	f000 80a3 	beq.w	800b79a <_printf_i+0x16e>
 800b654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b658:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b65c:	e03a      	b.n	800b6d4 <_printf_i+0xa8>
 800b65e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b662:	2b15      	cmp	r3, #21
 800b664:	d8f6      	bhi.n	800b654 <_printf_i+0x28>
 800b666:	a101      	add	r1, pc, #4	; (adr r1, 800b66c <_printf_i+0x40>)
 800b668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b66c:	0800b6c5 	.word	0x0800b6c5
 800b670:	0800b6d9 	.word	0x0800b6d9
 800b674:	0800b655 	.word	0x0800b655
 800b678:	0800b655 	.word	0x0800b655
 800b67c:	0800b655 	.word	0x0800b655
 800b680:	0800b655 	.word	0x0800b655
 800b684:	0800b6d9 	.word	0x0800b6d9
 800b688:	0800b655 	.word	0x0800b655
 800b68c:	0800b655 	.word	0x0800b655
 800b690:	0800b655 	.word	0x0800b655
 800b694:	0800b655 	.word	0x0800b655
 800b698:	0800b7e5 	.word	0x0800b7e5
 800b69c:	0800b709 	.word	0x0800b709
 800b6a0:	0800b7c7 	.word	0x0800b7c7
 800b6a4:	0800b655 	.word	0x0800b655
 800b6a8:	0800b655 	.word	0x0800b655
 800b6ac:	0800b807 	.word	0x0800b807
 800b6b0:	0800b655 	.word	0x0800b655
 800b6b4:	0800b709 	.word	0x0800b709
 800b6b8:	0800b655 	.word	0x0800b655
 800b6bc:	0800b655 	.word	0x0800b655
 800b6c0:	0800b7cf 	.word	0x0800b7cf
 800b6c4:	682b      	ldr	r3, [r5, #0]
 800b6c6:	1d1a      	adds	r2, r3, #4
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	602a      	str	r2, [r5, #0]
 800b6cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	e0a3      	b.n	800b820 <_printf_i+0x1f4>
 800b6d8:	6820      	ldr	r0, [r4, #0]
 800b6da:	6829      	ldr	r1, [r5, #0]
 800b6dc:	0606      	lsls	r6, r0, #24
 800b6de:	f101 0304 	add.w	r3, r1, #4
 800b6e2:	d50a      	bpl.n	800b6fa <_printf_i+0xce>
 800b6e4:	680e      	ldr	r6, [r1, #0]
 800b6e6:	602b      	str	r3, [r5, #0]
 800b6e8:	2e00      	cmp	r6, #0
 800b6ea:	da03      	bge.n	800b6f4 <_printf_i+0xc8>
 800b6ec:	232d      	movs	r3, #45	; 0x2d
 800b6ee:	4276      	negs	r6, r6
 800b6f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6f4:	485e      	ldr	r0, [pc, #376]	; (800b870 <_printf_i+0x244>)
 800b6f6:	230a      	movs	r3, #10
 800b6f8:	e019      	b.n	800b72e <_printf_i+0x102>
 800b6fa:	680e      	ldr	r6, [r1, #0]
 800b6fc:	602b      	str	r3, [r5, #0]
 800b6fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b702:	bf18      	it	ne
 800b704:	b236      	sxthne	r6, r6
 800b706:	e7ef      	b.n	800b6e8 <_printf_i+0xbc>
 800b708:	682b      	ldr	r3, [r5, #0]
 800b70a:	6820      	ldr	r0, [r4, #0]
 800b70c:	1d19      	adds	r1, r3, #4
 800b70e:	6029      	str	r1, [r5, #0]
 800b710:	0601      	lsls	r1, r0, #24
 800b712:	d501      	bpl.n	800b718 <_printf_i+0xec>
 800b714:	681e      	ldr	r6, [r3, #0]
 800b716:	e002      	b.n	800b71e <_printf_i+0xf2>
 800b718:	0646      	lsls	r6, r0, #25
 800b71a:	d5fb      	bpl.n	800b714 <_printf_i+0xe8>
 800b71c:	881e      	ldrh	r6, [r3, #0]
 800b71e:	4854      	ldr	r0, [pc, #336]	; (800b870 <_printf_i+0x244>)
 800b720:	2f6f      	cmp	r7, #111	; 0x6f
 800b722:	bf0c      	ite	eq
 800b724:	2308      	moveq	r3, #8
 800b726:	230a      	movne	r3, #10
 800b728:	2100      	movs	r1, #0
 800b72a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b72e:	6865      	ldr	r5, [r4, #4]
 800b730:	60a5      	str	r5, [r4, #8]
 800b732:	2d00      	cmp	r5, #0
 800b734:	bfa2      	ittt	ge
 800b736:	6821      	ldrge	r1, [r4, #0]
 800b738:	f021 0104 	bicge.w	r1, r1, #4
 800b73c:	6021      	strge	r1, [r4, #0]
 800b73e:	b90e      	cbnz	r6, 800b744 <_printf_i+0x118>
 800b740:	2d00      	cmp	r5, #0
 800b742:	d04d      	beq.n	800b7e0 <_printf_i+0x1b4>
 800b744:	4615      	mov	r5, r2
 800b746:	fbb6 f1f3 	udiv	r1, r6, r3
 800b74a:	fb03 6711 	mls	r7, r3, r1, r6
 800b74e:	5dc7      	ldrb	r7, [r0, r7]
 800b750:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b754:	4637      	mov	r7, r6
 800b756:	42bb      	cmp	r3, r7
 800b758:	460e      	mov	r6, r1
 800b75a:	d9f4      	bls.n	800b746 <_printf_i+0x11a>
 800b75c:	2b08      	cmp	r3, #8
 800b75e:	d10b      	bne.n	800b778 <_printf_i+0x14c>
 800b760:	6823      	ldr	r3, [r4, #0]
 800b762:	07de      	lsls	r6, r3, #31
 800b764:	d508      	bpl.n	800b778 <_printf_i+0x14c>
 800b766:	6923      	ldr	r3, [r4, #16]
 800b768:	6861      	ldr	r1, [r4, #4]
 800b76a:	4299      	cmp	r1, r3
 800b76c:	bfde      	ittt	le
 800b76e:	2330      	movle	r3, #48	; 0x30
 800b770:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b774:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b778:	1b52      	subs	r2, r2, r5
 800b77a:	6122      	str	r2, [r4, #16]
 800b77c:	f8cd a000 	str.w	sl, [sp]
 800b780:	464b      	mov	r3, r9
 800b782:	aa03      	add	r2, sp, #12
 800b784:	4621      	mov	r1, r4
 800b786:	4640      	mov	r0, r8
 800b788:	f7ff fee2 	bl	800b550 <_printf_common>
 800b78c:	3001      	adds	r0, #1
 800b78e:	d14c      	bne.n	800b82a <_printf_i+0x1fe>
 800b790:	f04f 30ff 	mov.w	r0, #4294967295
 800b794:	b004      	add	sp, #16
 800b796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b79a:	4835      	ldr	r0, [pc, #212]	; (800b870 <_printf_i+0x244>)
 800b79c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b7a0:	6829      	ldr	r1, [r5, #0]
 800b7a2:	6823      	ldr	r3, [r4, #0]
 800b7a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b7a8:	6029      	str	r1, [r5, #0]
 800b7aa:	061d      	lsls	r5, r3, #24
 800b7ac:	d514      	bpl.n	800b7d8 <_printf_i+0x1ac>
 800b7ae:	07df      	lsls	r7, r3, #31
 800b7b0:	bf44      	itt	mi
 800b7b2:	f043 0320 	orrmi.w	r3, r3, #32
 800b7b6:	6023      	strmi	r3, [r4, #0]
 800b7b8:	b91e      	cbnz	r6, 800b7c2 <_printf_i+0x196>
 800b7ba:	6823      	ldr	r3, [r4, #0]
 800b7bc:	f023 0320 	bic.w	r3, r3, #32
 800b7c0:	6023      	str	r3, [r4, #0]
 800b7c2:	2310      	movs	r3, #16
 800b7c4:	e7b0      	b.n	800b728 <_printf_i+0xfc>
 800b7c6:	6823      	ldr	r3, [r4, #0]
 800b7c8:	f043 0320 	orr.w	r3, r3, #32
 800b7cc:	6023      	str	r3, [r4, #0]
 800b7ce:	2378      	movs	r3, #120	; 0x78
 800b7d0:	4828      	ldr	r0, [pc, #160]	; (800b874 <_printf_i+0x248>)
 800b7d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b7d6:	e7e3      	b.n	800b7a0 <_printf_i+0x174>
 800b7d8:	0659      	lsls	r1, r3, #25
 800b7da:	bf48      	it	mi
 800b7dc:	b2b6      	uxthmi	r6, r6
 800b7de:	e7e6      	b.n	800b7ae <_printf_i+0x182>
 800b7e0:	4615      	mov	r5, r2
 800b7e2:	e7bb      	b.n	800b75c <_printf_i+0x130>
 800b7e4:	682b      	ldr	r3, [r5, #0]
 800b7e6:	6826      	ldr	r6, [r4, #0]
 800b7e8:	6961      	ldr	r1, [r4, #20]
 800b7ea:	1d18      	adds	r0, r3, #4
 800b7ec:	6028      	str	r0, [r5, #0]
 800b7ee:	0635      	lsls	r5, r6, #24
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	d501      	bpl.n	800b7f8 <_printf_i+0x1cc>
 800b7f4:	6019      	str	r1, [r3, #0]
 800b7f6:	e002      	b.n	800b7fe <_printf_i+0x1d2>
 800b7f8:	0670      	lsls	r0, r6, #25
 800b7fa:	d5fb      	bpl.n	800b7f4 <_printf_i+0x1c8>
 800b7fc:	8019      	strh	r1, [r3, #0]
 800b7fe:	2300      	movs	r3, #0
 800b800:	6123      	str	r3, [r4, #16]
 800b802:	4615      	mov	r5, r2
 800b804:	e7ba      	b.n	800b77c <_printf_i+0x150>
 800b806:	682b      	ldr	r3, [r5, #0]
 800b808:	1d1a      	adds	r2, r3, #4
 800b80a:	602a      	str	r2, [r5, #0]
 800b80c:	681d      	ldr	r5, [r3, #0]
 800b80e:	6862      	ldr	r2, [r4, #4]
 800b810:	2100      	movs	r1, #0
 800b812:	4628      	mov	r0, r5
 800b814:	f7f4 fce4 	bl	80001e0 <memchr>
 800b818:	b108      	cbz	r0, 800b81e <_printf_i+0x1f2>
 800b81a:	1b40      	subs	r0, r0, r5
 800b81c:	6060      	str	r0, [r4, #4]
 800b81e:	6863      	ldr	r3, [r4, #4]
 800b820:	6123      	str	r3, [r4, #16]
 800b822:	2300      	movs	r3, #0
 800b824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b828:	e7a8      	b.n	800b77c <_printf_i+0x150>
 800b82a:	6923      	ldr	r3, [r4, #16]
 800b82c:	462a      	mov	r2, r5
 800b82e:	4649      	mov	r1, r9
 800b830:	4640      	mov	r0, r8
 800b832:	47d0      	blx	sl
 800b834:	3001      	adds	r0, #1
 800b836:	d0ab      	beq.n	800b790 <_printf_i+0x164>
 800b838:	6823      	ldr	r3, [r4, #0]
 800b83a:	079b      	lsls	r3, r3, #30
 800b83c:	d413      	bmi.n	800b866 <_printf_i+0x23a>
 800b83e:	68e0      	ldr	r0, [r4, #12]
 800b840:	9b03      	ldr	r3, [sp, #12]
 800b842:	4298      	cmp	r0, r3
 800b844:	bfb8      	it	lt
 800b846:	4618      	movlt	r0, r3
 800b848:	e7a4      	b.n	800b794 <_printf_i+0x168>
 800b84a:	2301      	movs	r3, #1
 800b84c:	4632      	mov	r2, r6
 800b84e:	4649      	mov	r1, r9
 800b850:	4640      	mov	r0, r8
 800b852:	47d0      	blx	sl
 800b854:	3001      	adds	r0, #1
 800b856:	d09b      	beq.n	800b790 <_printf_i+0x164>
 800b858:	3501      	adds	r5, #1
 800b85a:	68e3      	ldr	r3, [r4, #12]
 800b85c:	9903      	ldr	r1, [sp, #12]
 800b85e:	1a5b      	subs	r3, r3, r1
 800b860:	42ab      	cmp	r3, r5
 800b862:	dcf2      	bgt.n	800b84a <_printf_i+0x21e>
 800b864:	e7eb      	b.n	800b83e <_printf_i+0x212>
 800b866:	2500      	movs	r5, #0
 800b868:	f104 0619 	add.w	r6, r4, #25
 800b86c:	e7f5      	b.n	800b85a <_printf_i+0x22e>
 800b86e:	bf00      	nop
 800b870:	0800c061 	.word	0x0800c061
 800b874:	0800c072 	.word	0x0800c072

0800b878 <memcpy>:
 800b878:	440a      	add	r2, r1
 800b87a:	4291      	cmp	r1, r2
 800b87c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b880:	d100      	bne.n	800b884 <memcpy+0xc>
 800b882:	4770      	bx	lr
 800b884:	b510      	push	{r4, lr}
 800b886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b88a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b88e:	4291      	cmp	r1, r2
 800b890:	d1f9      	bne.n	800b886 <memcpy+0xe>
 800b892:	bd10      	pop	{r4, pc}

0800b894 <memmove>:
 800b894:	4288      	cmp	r0, r1
 800b896:	b510      	push	{r4, lr}
 800b898:	eb01 0402 	add.w	r4, r1, r2
 800b89c:	d902      	bls.n	800b8a4 <memmove+0x10>
 800b89e:	4284      	cmp	r4, r0
 800b8a0:	4623      	mov	r3, r4
 800b8a2:	d807      	bhi.n	800b8b4 <memmove+0x20>
 800b8a4:	1e43      	subs	r3, r0, #1
 800b8a6:	42a1      	cmp	r1, r4
 800b8a8:	d008      	beq.n	800b8bc <memmove+0x28>
 800b8aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8b2:	e7f8      	b.n	800b8a6 <memmove+0x12>
 800b8b4:	4402      	add	r2, r0
 800b8b6:	4601      	mov	r1, r0
 800b8b8:	428a      	cmp	r2, r1
 800b8ba:	d100      	bne.n	800b8be <memmove+0x2a>
 800b8bc:	bd10      	pop	{r4, pc}
 800b8be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b8c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8c6:	e7f7      	b.n	800b8b8 <memmove+0x24>

0800b8c8 <_free_r>:
 800b8c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8ca:	2900      	cmp	r1, #0
 800b8cc:	d044      	beq.n	800b958 <_free_r+0x90>
 800b8ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8d2:	9001      	str	r0, [sp, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f1a1 0404 	sub.w	r4, r1, #4
 800b8da:	bfb8      	it	lt
 800b8dc:	18e4      	addlt	r4, r4, r3
 800b8de:	f000 f913 	bl	800bb08 <__malloc_lock>
 800b8e2:	4a1e      	ldr	r2, [pc, #120]	; (800b95c <_free_r+0x94>)
 800b8e4:	9801      	ldr	r0, [sp, #4]
 800b8e6:	6813      	ldr	r3, [r2, #0]
 800b8e8:	b933      	cbnz	r3, 800b8f8 <_free_r+0x30>
 800b8ea:	6063      	str	r3, [r4, #4]
 800b8ec:	6014      	str	r4, [r2, #0]
 800b8ee:	b003      	add	sp, #12
 800b8f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8f4:	f000 b90e 	b.w	800bb14 <__malloc_unlock>
 800b8f8:	42a3      	cmp	r3, r4
 800b8fa:	d908      	bls.n	800b90e <_free_r+0x46>
 800b8fc:	6825      	ldr	r5, [r4, #0]
 800b8fe:	1961      	adds	r1, r4, r5
 800b900:	428b      	cmp	r3, r1
 800b902:	bf01      	itttt	eq
 800b904:	6819      	ldreq	r1, [r3, #0]
 800b906:	685b      	ldreq	r3, [r3, #4]
 800b908:	1949      	addeq	r1, r1, r5
 800b90a:	6021      	streq	r1, [r4, #0]
 800b90c:	e7ed      	b.n	800b8ea <_free_r+0x22>
 800b90e:	461a      	mov	r2, r3
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	b10b      	cbz	r3, 800b918 <_free_r+0x50>
 800b914:	42a3      	cmp	r3, r4
 800b916:	d9fa      	bls.n	800b90e <_free_r+0x46>
 800b918:	6811      	ldr	r1, [r2, #0]
 800b91a:	1855      	adds	r5, r2, r1
 800b91c:	42a5      	cmp	r5, r4
 800b91e:	d10b      	bne.n	800b938 <_free_r+0x70>
 800b920:	6824      	ldr	r4, [r4, #0]
 800b922:	4421      	add	r1, r4
 800b924:	1854      	adds	r4, r2, r1
 800b926:	42a3      	cmp	r3, r4
 800b928:	6011      	str	r1, [r2, #0]
 800b92a:	d1e0      	bne.n	800b8ee <_free_r+0x26>
 800b92c:	681c      	ldr	r4, [r3, #0]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	6053      	str	r3, [r2, #4]
 800b932:	4421      	add	r1, r4
 800b934:	6011      	str	r1, [r2, #0]
 800b936:	e7da      	b.n	800b8ee <_free_r+0x26>
 800b938:	d902      	bls.n	800b940 <_free_r+0x78>
 800b93a:	230c      	movs	r3, #12
 800b93c:	6003      	str	r3, [r0, #0]
 800b93e:	e7d6      	b.n	800b8ee <_free_r+0x26>
 800b940:	6825      	ldr	r5, [r4, #0]
 800b942:	1961      	adds	r1, r4, r5
 800b944:	428b      	cmp	r3, r1
 800b946:	bf04      	itt	eq
 800b948:	6819      	ldreq	r1, [r3, #0]
 800b94a:	685b      	ldreq	r3, [r3, #4]
 800b94c:	6063      	str	r3, [r4, #4]
 800b94e:	bf04      	itt	eq
 800b950:	1949      	addeq	r1, r1, r5
 800b952:	6021      	streq	r1, [r4, #0]
 800b954:	6054      	str	r4, [r2, #4]
 800b956:	e7ca      	b.n	800b8ee <_free_r+0x26>
 800b958:	b003      	add	sp, #12
 800b95a:	bd30      	pop	{r4, r5, pc}
 800b95c:	200025f8 	.word	0x200025f8

0800b960 <sbrk_aligned>:
 800b960:	b570      	push	{r4, r5, r6, lr}
 800b962:	4e0e      	ldr	r6, [pc, #56]	; (800b99c <sbrk_aligned+0x3c>)
 800b964:	460c      	mov	r4, r1
 800b966:	6831      	ldr	r1, [r6, #0]
 800b968:	4605      	mov	r5, r0
 800b96a:	b911      	cbnz	r1, 800b972 <sbrk_aligned+0x12>
 800b96c:	f000 f8bc 	bl	800bae8 <_sbrk_r>
 800b970:	6030      	str	r0, [r6, #0]
 800b972:	4621      	mov	r1, r4
 800b974:	4628      	mov	r0, r5
 800b976:	f000 f8b7 	bl	800bae8 <_sbrk_r>
 800b97a:	1c43      	adds	r3, r0, #1
 800b97c:	d00a      	beq.n	800b994 <sbrk_aligned+0x34>
 800b97e:	1cc4      	adds	r4, r0, #3
 800b980:	f024 0403 	bic.w	r4, r4, #3
 800b984:	42a0      	cmp	r0, r4
 800b986:	d007      	beq.n	800b998 <sbrk_aligned+0x38>
 800b988:	1a21      	subs	r1, r4, r0
 800b98a:	4628      	mov	r0, r5
 800b98c:	f000 f8ac 	bl	800bae8 <_sbrk_r>
 800b990:	3001      	adds	r0, #1
 800b992:	d101      	bne.n	800b998 <sbrk_aligned+0x38>
 800b994:	f04f 34ff 	mov.w	r4, #4294967295
 800b998:	4620      	mov	r0, r4
 800b99a:	bd70      	pop	{r4, r5, r6, pc}
 800b99c:	200025fc 	.word	0x200025fc

0800b9a0 <_malloc_r>:
 800b9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9a4:	1ccd      	adds	r5, r1, #3
 800b9a6:	f025 0503 	bic.w	r5, r5, #3
 800b9aa:	3508      	adds	r5, #8
 800b9ac:	2d0c      	cmp	r5, #12
 800b9ae:	bf38      	it	cc
 800b9b0:	250c      	movcc	r5, #12
 800b9b2:	2d00      	cmp	r5, #0
 800b9b4:	4607      	mov	r7, r0
 800b9b6:	db01      	blt.n	800b9bc <_malloc_r+0x1c>
 800b9b8:	42a9      	cmp	r1, r5
 800b9ba:	d905      	bls.n	800b9c8 <_malloc_r+0x28>
 800b9bc:	230c      	movs	r3, #12
 800b9be:	603b      	str	r3, [r7, #0]
 800b9c0:	2600      	movs	r6, #0
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9c8:	4e2e      	ldr	r6, [pc, #184]	; (800ba84 <_malloc_r+0xe4>)
 800b9ca:	f000 f89d 	bl	800bb08 <__malloc_lock>
 800b9ce:	6833      	ldr	r3, [r6, #0]
 800b9d0:	461c      	mov	r4, r3
 800b9d2:	bb34      	cbnz	r4, 800ba22 <_malloc_r+0x82>
 800b9d4:	4629      	mov	r1, r5
 800b9d6:	4638      	mov	r0, r7
 800b9d8:	f7ff ffc2 	bl	800b960 <sbrk_aligned>
 800b9dc:	1c43      	adds	r3, r0, #1
 800b9de:	4604      	mov	r4, r0
 800b9e0:	d14d      	bne.n	800ba7e <_malloc_r+0xde>
 800b9e2:	6834      	ldr	r4, [r6, #0]
 800b9e4:	4626      	mov	r6, r4
 800b9e6:	2e00      	cmp	r6, #0
 800b9e8:	d140      	bne.n	800ba6c <_malloc_r+0xcc>
 800b9ea:	6823      	ldr	r3, [r4, #0]
 800b9ec:	4631      	mov	r1, r6
 800b9ee:	4638      	mov	r0, r7
 800b9f0:	eb04 0803 	add.w	r8, r4, r3
 800b9f4:	f000 f878 	bl	800bae8 <_sbrk_r>
 800b9f8:	4580      	cmp	r8, r0
 800b9fa:	d13a      	bne.n	800ba72 <_malloc_r+0xd2>
 800b9fc:	6821      	ldr	r1, [r4, #0]
 800b9fe:	3503      	adds	r5, #3
 800ba00:	1a6d      	subs	r5, r5, r1
 800ba02:	f025 0503 	bic.w	r5, r5, #3
 800ba06:	3508      	adds	r5, #8
 800ba08:	2d0c      	cmp	r5, #12
 800ba0a:	bf38      	it	cc
 800ba0c:	250c      	movcc	r5, #12
 800ba0e:	4629      	mov	r1, r5
 800ba10:	4638      	mov	r0, r7
 800ba12:	f7ff ffa5 	bl	800b960 <sbrk_aligned>
 800ba16:	3001      	adds	r0, #1
 800ba18:	d02b      	beq.n	800ba72 <_malloc_r+0xd2>
 800ba1a:	6823      	ldr	r3, [r4, #0]
 800ba1c:	442b      	add	r3, r5
 800ba1e:	6023      	str	r3, [r4, #0]
 800ba20:	e00e      	b.n	800ba40 <_malloc_r+0xa0>
 800ba22:	6822      	ldr	r2, [r4, #0]
 800ba24:	1b52      	subs	r2, r2, r5
 800ba26:	d41e      	bmi.n	800ba66 <_malloc_r+0xc6>
 800ba28:	2a0b      	cmp	r2, #11
 800ba2a:	d916      	bls.n	800ba5a <_malloc_r+0xba>
 800ba2c:	1961      	adds	r1, r4, r5
 800ba2e:	42a3      	cmp	r3, r4
 800ba30:	6025      	str	r5, [r4, #0]
 800ba32:	bf18      	it	ne
 800ba34:	6059      	strne	r1, [r3, #4]
 800ba36:	6863      	ldr	r3, [r4, #4]
 800ba38:	bf08      	it	eq
 800ba3a:	6031      	streq	r1, [r6, #0]
 800ba3c:	5162      	str	r2, [r4, r5]
 800ba3e:	604b      	str	r3, [r1, #4]
 800ba40:	4638      	mov	r0, r7
 800ba42:	f104 060b 	add.w	r6, r4, #11
 800ba46:	f000 f865 	bl	800bb14 <__malloc_unlock>
 800ba4a:	f026 0607 	bic.w	r6, r6, #7
 800ba4e:	1d23      	adds	r3, r4, #4
 800ba50:	1af2      	subs	r2, r6, r3
 800ba52:	d0b6      	beq.n	800b9c2 <_malloc_r+0x22>
 800ba54:	1b9b      	subs	r3, r3, r6
 800ba56:	50a3      	str	r3, [r4, r2]
 800ba58:	e7b3      	b.n	800b9c2 <_malloc_r+0x22>
 800ba5a:	6862      	ldr	r2, [r4, #4]
 800ba5c:	42a3      	cmp	r3, r4
 800ba5e:	bf0c      	ite	eq
 800ba60:	6032      	streq	r2, [r6, #0]
 800ba62:	605a      	strne	r2, [r3, #4]
 800ba64:	e7ec      	b.n	800ba40 <_malloc_r+0xa0>
 800ba66:	4623      	mov	r3, r4
 800ba68:	6864      	ldr	r4, [r4, #4]
 800ba6a:	e7b2      	b.n	800b9d2 <_malloc_r+0x32>
 800ba6c:	4634      	mov	r4, r6
 800ba6e:	6876      	ldr	r6, [r6, #4]
 800ba70:	e7b9      	b.n	800b9e6 <_malloc_r+0x46>
 800ba72:	230c      	movs	r3, #12
 800ba74:	603b      	str	r3, [r7, #0]
 800ba76:	4638      	mov	r0, r7
 800ba78:	f000 f84c 	bl	800bb14 <__malloc_unlock>
 800ba7c:	e7a1      	b.n	800b9c2 <_malloc_r+0x22>
 800ba7e:	6025      	str	r5, [r4, #0]
 800ba80:	e7de      	b.n	800ba40 <_malloc_r+0xa0>
 800ba82:	bf00      	nop
 800ba84:	200025f8 	.word	0x200025f8

0800ba88 <_realloc_r>:
 800ba88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba8c:	4680      	mov	r8, r0
 800ba8e:	4614      	mov	r4, r2
 800ba90:	460e      	mov	r6, r1
 800ba92:	b921      	cbnz	r1, 800ba9e <_realloc_r+0x16>
 800ba94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba98:	4611      	mov	r1, r2
 800ba9a:	f7ff bf81 	b.w	800b9a0 <_malloc_r>
 800ba9e:	b92a      	cbnz	r2, 800baac <_realloc_r+0x24>
 800baa0:	f7ff ff12 	bl	800b8c8 <_free_r>
 800baa4:	4625      	mov	r5, r4
 800baa6:	4628      	mov	r0, r5
 800baa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baac:	f000 f838 	bl	800bb20 <_malloc_usable_size_r>
 800bab0:	4284      	cmp	r4, r0
 800bab2:	4607      	mov	r7, r0
 800bab4:	d802      	bhi.n	800babc <_realloc_r+0x34>
 800bab6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800baba:	d812      	bhi.n	800bae2 <_realloc_r+0x5a>
 800babc:	4621      	mov	r1, r4
 800babe:	4640      	mov	r0, r8
 800bac0:	f7ff ff6e 	bl	800b9a0 <_malloc_r>
 800bac4:	4605      	mov	r5, r0
 800bac6:	2800      	cmp	r0, #0
 800bac8:	d0ed      	beq.n	800baa6 <_realloc_r+0x1e>
 800baca:	42bc      	cmp	r4, r7
 800bacc:	4622      	mov	r2, r4
 800bace:	4631      	mov	r1, r6
 800bad0:	bf28      	it	cs
 800bad2:	463a      	movcs	r2, r7
 800bad4:	f7ff fed0 	bl	800b878 <memcpy>
 800bad8:	4631      	mov	r1, r6
 800bada:	4640      	mov	r0, r8
 800badc:	f7ff fef4 	bl	800b8c8 <_free_r>
 800bae0:	e7e1      	b.n	800baa6 <_realloc_r+0x1e>
 800bae2:	4635      	mov	r5, r6
 800bae4:	e7df      	b.n	800baa6 <_realloc_r+0x1e>
	...

0800bae8 <_sbrk_r>:
 800bae8:	b538      	push	{r3, r4, r5, lr}
 800baea:	4d06      	ldr	r5, [pc, #24]	; (800bb04 <_sbrk_r+0x1c>)
 800baec:	2300      	movs	r3, #0
 800baee:	4604      	mov	r4, r0
 800baf0:	4608      	mov	r0, r1
 800baf2:	602b      	str	r3, [r5, #0]
 800baf4:	f7f6 faae 	bl	8002054 <_sbrk>
 800baf8:	1c43      	adds	r3, r0, #1
 800bafa:	d102      	bne.n	800bb02 <_sbrk_r+0x1a>
 800bafc:	682b      	ldr	r3, [r5, #0]
 800bafe:	b103      	cbz	r3, 800bb02 <_sbrk_r+0x1a>
 800bb00:	6023      	str	r3, [r4, #0]
 800bb02:	bd38      	pop	{r3, r4, r5, pc}
 800bb04:	20002600 	.word	0x20002600

0800bb08 <__malloc_lock>:
 800bb08:	4801      	ldr	r0, [pc, #4]	; (800bb10 <__malloc_lock+0x8>)
 800bb0a:	f000 b811 	b.w	800bb30 <__retarget_lock_acquire_recursive>
 800bb0e:	bf00      	nop
 800bb10:	20002604 	.word	0x20002604

0800bb14 <__malloc_unlock>:
 800bb14:	4801      	ldr	r0, [pc, #4]	; (800bb1c <__malloc_unlock+0x8>)
 800bb16:	f000 b80c 	b.w	800bb32 <__retarget_lock_release_recursive>
 800bb1a:	bf00      	nop
 800bb1c:	20002604 	.word	0x20002604

0800bb20 <_malloc_usable_size_r>:
 800bb20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb24:	1f18      	subs	r0, r3, #4
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	bfbc      	itt	lt
 800bb2a:	580b      	ldrlt	r3, [r1, r0]
 800bb2c:	18c0      	addlt	r0, r0, r3
 800bb2e:	4770      	bx	lr

0800bb30 <__retarget_lock_acquire_recursive>:
 800bb30:	4770      	bx	lr

0800bb32 <__retarget_lock_release_recursive>:
 800bb32:	4770      	bx	lr

0800bb34 <_init>:
 800bb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb36:	bf00      	nop
 800bb38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb3a:	bc08      	pop	{r3}
 800bb3c:	469e      	mov	lr, r3
 800bb3e:	4770      	bx	lr

0800bb40 <_fini>:
 800bb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb42:	bf00      	nop
 800bb44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb46:	bc08      	pop	{r3}
 800bb48:	469e      	mov	lr, r3
 800bb4a:	4770      	bx	lr
